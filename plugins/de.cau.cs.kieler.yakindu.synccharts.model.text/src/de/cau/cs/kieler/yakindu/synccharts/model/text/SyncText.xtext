grammar de.cau.cs.kieler.yakindu.synccharts.model.text.SyncText
with de.cau.cs.kieler.yakindu.sccharts.model.scchartstext.scchartstext.SCChartsExp

generate syncText "http://www.cau.de/kieler/yakindu/synccharts/SyncText"

import "http://www.cau.de/cs/kieler/yakindu/sccharts/model/scchartstext/scchartstext/SCChartsExp" as sCChartsExp
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.yakindu.org/sct/statechart/SText" as stext
import "http://www.yakindu.org/sct/sgraph/2.0.0" as sgraph
import "http://www.yakindu.org/base/types/2.0.0" as types

/*********************************** INTERFACE DECLARATION **************************************** */
SignalDefinition:
	{EventDefinition} (isInput?='input')? (isOutput?='output')? 'signal' name=ID (':' type=[types::Type|FQN] ('=' varInitialValue=Expression)? ('with' varCombineOperator=CombineOperator)?)? ';';

/************************************************/
/*			 Variable Definition				*/
/************************************************/
// Override the SText VariableDefinition rule
// A variable is a Declaration. It has a Direction, a Name, a Type, an InitialValue and a CombineOperator
/* ---- variable definition ---- */
VariableDefinition:
	{VariableDefinition}  (isStatic?='static')? type=[types::Type|FQN] name=ID
	('=' varInitialValue=Expression)? ';';
	
PrimaryExpression returns stext::Expression:
	PrimitiveValueExpression
	| FeatureCall
	| ActiveStateReferenceExpression
	| PreValueExpression
	| ParenthesizedExpression
	| EventValueReferenceExpression;	