grammar de.cau.cs.kieler.core.kexpressions.text.KEXT with de.cau.cs.kieler.core.kexpressions.keffects.KEffects
 
//// we do not need to generate the transitionlabel ecore model, because we
//// only reuse classes of the official sccharts metamodel
//generate transitionlabel "http://kieler.cs.cau.de/sccharts/actionlabel"
 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
//import "http://kieler.cs.cau.de/sccharts/0.1.0" as sccharts
import "http://kieler.cs.cau.de/annotations" as annotations
import "http://kieler.cs.cau.de/kexpressions/0.1.2" as kexpressions
import "http://kieler.cs.cau.de/keffects/0.1.0" as keffects
import "http://kieler.cs.cau.de/kext/kext" as kext

//generate kext "http://kieler.cs.cau.de/kext/kext"

Kext returns kext::Kext:
    (declarations += Declaration)*
    (entities += TestEntity)*
;


TestEntity returns kext::TestEntity:
    (expression = AnnotatedExpression) |
    (effect = Effect) 
;


AnnotatedExpression  returns kext::AnnotatedExpression:
    (annotations+=Annotation)*
    'expression'
    (expression = Expression)
;


Declaration returns kexpressions::Declaration:
    (annotations+=Annotation)*
	(const?='const')?
    (input?='input')? 
    (output?='output')?
    (static?='static')?
    (((signal?='signal')? type = ValueType) | (signal?='signal')) 
    valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)* ';'
;


ValuedObject returns kexpressions::ValuedObject:
//    (annotations+=Annotation)*
    name=ID
    ('[' cardinalities+=INT ']')* 
    ('=' initialValue=Expression)?
    ( 'combine'
      (combineOperator = CombineOperator)
    )?
;
    
    