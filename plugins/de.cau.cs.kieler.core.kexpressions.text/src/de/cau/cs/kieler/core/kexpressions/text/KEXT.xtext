grammar de.cau.cs.kieler.core.kexpressions.text.KEXT with de.cau.cs.kieler.core.kexpressions.keffects.KEffects
 
//// we do not need to generate the transitionlabel ecore model, because we
//// only reuse classes of the official sccharts metamodel
//generate transitionlabel "http://kieler.cs.cau.de/sccharts/actionlabel"
 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
//import "http://kieler.cs.cau.de/sccharts/0.1.0" as sccharts
import "http://kieler.cs.cau.de/annotations" as annotations
import "http://kieler.cs.cau.de/kexpressions/0.1.2" as kexpressions
import "http://kieler.cs.cau.de/keffects/0.1.0" as keffects

generate kext "http://kieler.cs.cau.de/kext/kext"

Kext:
    (declarations += Declaration)*
    (effects += Effect)*
;

Declaration returns kexpressions::Declaration:
    (annotations+=Annotation)*
	(const?='const')?
    (input?='input')? 
    (output?='output')?
    (static?='static')?
    (signal?='signal')?
    type = ValueType valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)* ';'
;

ValuedObject returns kexpressions::ValuedObject:
    (annotations+=Annotation)*
    name=ID ('=' initialValue=Expression)?
    ( 'combine'
      (combineOperator = CombineOperator)
    )?
;

// ssm: KExt overrides the KeyStringValueAnnotation because allowing EString as value would introduce an ambiguity.
// With EString antlr cannot decide between "ExtendedID ID" (KeyStringValueAnnotation with EStrings) and the ID of the ValuedObject.
// Thus, this path can never be chosen because the ID is mandatory in ValuedObject. 
// Overriding KeyStringValueAnnotation avoids the error message during grammar generation. 

// e.g.: @layouter dot;   
KeyStringValueAnnotation returns StringAnnotation:
    '@' name=ExtendedID value=STRING
    ('('
        (annotations+=Annotation)*
    ')')?;
