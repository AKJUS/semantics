/*
 * generated by Xtext
 */
package de.cau.cs.kieler.esterel.serializer;

import com.google.inject.Inject;
import de.cau.cs.kieler.annotations.Annotation;
import de.cau.cs.kieler.annotations.AnnotationsPackage;
import de.cau.cs.kieler.annotations.BooleanAnnotation;
import de.cau.cs.kieler.annotations.CommentAnnotation;
import de.cau.cs.kieler.annotations.FloatAnnotation;
import de.cau.cs.kieler.annotations.IntAnnotation;
import de.cau.cs.kieler.annotations.StringAnnotation;
import de.cau.cs.kieler.annotations.TypedStringAnnotation;
import de.cau.cs.kieler.esterel.esterel.Abort;
import de.cau.cs.kieler.esterel.esterel.Await;
import de.cau.cs.kieler.esterel.esterel.Block;
import de.cau.cs.kieler.esterel.esterel.Case;
import de.cau.cs.kieler.esterel.esterel.Constant;
import de.cau.cs.kieler.esterel.esterel.ConstantDecls;
import de.cau.cs.kieler.esterel.esterel.ConstantExpression;
import de.cau.cs.kieler.esterel.esterel.ConstantRenaming;
import de.cau.cs.kieler.esterel.esterel.DelayExpr;
import de.cau.cs.kieler.esterel.esterel.Do;
import de.cau.cs.kieler.esterel.esterel.ElsIf;
import de.cau.cs.kieler.esterel.esterel.Emit;
import de.cau.cs.kieler.esterel.esterel.EsterelAssignment;
import de.cau.cs.kieler.esterel.esterel.EsterelPackage;
import de.cau.cs.kieler.esterel.esterel.EsterelParallel;
import de.cau.cs.kieler.esterel.esterel.EsterelThread;
import de.cau.cs.kieler.esterel.esterel.EsterelType;
import de.cau.cs.kieler.esterel.esterel.EveryDo;
import de.cau.cs.kieler.esterel.esterel.Exec;
import de.cau.cs.kieler.esterel.esterel.ExecCase;
import de.cau.cs.kieler.esterel.esterel.Exit;
import de.cau.cs.kieler.esterel.esterel.Function;
import de.cau.cs.kieler.esterel.esterel.FunctionDecl;
import de.cau.cs.kieler.esterel.esterel.FunctionExpression;
import de.cau.cs.kieler.esterel.esterel.FunctionRenaming;
import de.cau.cs.kieler.esterel.esterel.Halt;
import de.cau.cs.kieler.esterel.esterel.ISignal;
import de.cau.cs.kieler.esterel.esterel.IVariable;
import de.cau.cs.kieler.esterel.esterel.IfTest;
import de.cau.cs.kieler.esterel.esterel.Input;
import de.cau.cs.kieler.esterel.esterel.InputOutput;
import de.cau.cs.kieler.esterel.esterel.LocalSignalDecl;
import de.cau.cs.kieler.esterel.esterel.LocalVariable;
import de.cau.cs.kieler.esterel.esterel.Loop;
import de.cau.cs.kieler.esterel.esterel.Module;
import de.cau.cs.kieler.esterel.esterel.ModuleRenaming;
import de.cau.cs.kieler.esterel.esterel.Nothing;
import de.cau.cs.kieler.esterel.esterel.OneTypeConstantDecls;
import de.cau.cs.kieler.esterel.esterel.Output;
import de.cau.cs.kieler.esterel.esterel.Present;
import de.cau.cs.kieler.esterel.esterel.PresentCase;
import de.cau.cs.kieler.esterel.esterel.ProcCall;
import de.cau.cs.kieler.esterel.esterel.Procedure;
import de.cau.cs.kieler.esterel.esterel.ProcedureDecl;
import de.cau.cs.kieler.esterel.esterel.ProcedureRenaming;
import de.cau.cs.kieler.esterel.esterel.Program;
import de.cau.cs.kieler.esterel.esterel.Relation;
import de.cau.cs.kieler.esterel.esterel.RelationImplication;
import de.cau.cs.kieler.esterel.esterel.RelationIncompatibility;
import de.cau.cs.kieler.esterel.esterel.Renaming;
import de.cau.cs.kieler.esterel.esterel.Repeat;
import de.cau.cs.kieler.esterel.esterel.Return;
import de.cau.cs.kieler.esterel.esterel.Run;
import de.cau.cs.kieler.esterel.esterel.SensorDecl;
import de.cau.cs.kieler.esterel.esterel.SensorWithType;
import de.cau.cs.kieler.esterel.esterel.SignalReferenceExpr;
import de.cau.cs.kieler.esterel.esterel.SignalRenaming;
import de.cau.cs.kieler.esterel.esterel.Suspend;
import de.cau.cs.kieler.esterel.esterel.Sustain;
import de.cau.cs.kieler.esterel.esterel.Task;
import de.cau.cs.kieler.esterel.esterel.TaskDecl;
import de.cau.cs.kieler.esterel.esterel.TaskRenaming;
import de.cau.cs.kieler.esterel.esterel.Trap;
import de.cau.cs.kieler.esterel.esterel.TrapExpression;
import de.cau.cs.kieler.esterel.esterel.TrapHandler;
import de.cau.cs.kieler.esterel.esterel.TrapReferenceExpr;
import de.cau.cs.kieler.esterel.esterel.TrapSignal;
import de.cau.cs.kieler.esterel.esterel.Type;
import de.cau.cs.kieler.esterel.esterel.TypeDecl;
import de.cau.cs.kieler.esterel.esterel.TypeIdentifier;
import de.cau.cs.kieler.esterel.esterel.TypeRenaming;
import de.cau.cs.kieler.esterel.esterel.VariableDecl;
import de.cau.cs.kieler.esterel.services.EsterelGrammarAccess;
import de.cau.cs.kieler.kexpressions.BoolValue;
import de.cau.cs.kieler.kexpressions.Declaration;
import de.cau.cs.kieler.kexpressions.FloatValue;
import de.cau.cs.kieler.kexpressions.FunctionCall;
import de.cau.cs.kieler.kexpressions.IntValue;
import de.cau.cs.kieler.kexpressions.KExpressionsPackage;
import de.cau.cs.kieler.kexpressions.OperatorExpression;
import de.cau.cs.kieler.kexpressions.StringValue;
import de.cau.cs.kieler.kexpressions.TextExpression;
import de.cau.cs.kieler.kexpressions.ValuedObject;
import de.cau.cs.kieler.kexpressions.ValuedObjectReference;
import de.cau.cs.kieler.kexpressions.keffects.Assignment;
import de.cau.cs.kieler.kexpressions.keffects.Emission;
import de.cau.cs.kieler.kexpressions.keffects.FunctionCallEffect;
import de.cau.cs.kieler.kexpressions.keffects.HostcodeEffect;
import de.cau.cs.kieler.kexpressions.keffects.KEffectsPackage;
import de.cau.cs.kieler.kexpressions.kext.AnnotatedExpression;
import de.cau.cs.kieler.kexpressions.kext.KExtPackage;
import de.cau.cs.kieler.kexpressions.kext.Kext;
import de.cau.cs.kieler.kexpressions.kext.TestEntity;
import de.cau.cs.kieler.scl.scl.Conditional;
import de.cau.cs.kieler.scl.scl.ElseScope;
import de.cau.cs.kieler.scl.scl.Goto;
import de.cau.cs.kieler.scl.scl.Label;
import de.cau.cs.kieler.scl.scl.Parallel;
import de.cau.cs.kieler.scl.scl.Pause;
import de.cau.cs.kieler.scl.scl.SCLProgram;
import de.cau.cs.kieler.scl.scl.SclPackage;
import de.cau.cs.kieler.scl.scl.ScopeStatement;
import de.cau.cs.kieler.scl.serializer.SCLSemanticSequencer;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public abstract class AbstractEsterelSemanticSequencer extends SCLSemanticSequencer {

	@Inject
	private EsterelGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == AnnotationsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case AnnotationsPackage.ANNOTATION:
				sequence_TagAnnotation(context, (Annotation) semanticObject); 
				return; 
			case AnnotationsPackage.BOOLEAN_ANNOTATION:
				sequence_KeyBooleanValueAnnotation(context, (BooleanAnnotation) semanticObject); 
				return; 
			case AnnotationsPackage.COMMENT_ANNOTATION:
				sequence_CommentAnnotation(context, (CommentAnnotation) semanticObject); 
				return; 
			case AnnotationsPackage.FLOAT_ANNOTATION:
				sequence_KeyFloatValueAnnotation(context, (FloatAnnotation) semanticObject); 
				return; 
			case AnnotationsPackage.INT_ANNOTATION:
				sequence_KeyIntValueAnnotation(context, (IntAnnotation) semanticObject); 
				return; 
			case AnnotationsPackage.STRING_ANNOTATION:
				if (rule == grammarAccess.getAnnotationRule()
						|| rule == grammarAccess.getValuedAnnotationRule()
						|| rule == grammarAccess.getKeyStringValueAnnotationRule()) {
					sequence_KeyStringValueAnnotation(context, (StringAnnotation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRestrictedAnnotationRule()
						|| rule == grammarAccess.getQuotedKeyStringValueAnnotationRule()) {
					sequence_QuotedKeyStringValueAnnotation(context, (StringAnnotation) semanticObject); 
					return; 
				}
				else break;
			case AnnotationsPackage.TYPED_STRING_ANNOTATION:
				if (rule == grammarAccess.getRestrictedAnnotationRule()
						|| rule == grammarAccess.getQuotedTypedKeyStringValueAnnotationRule()) {
					sequence_QuotedTypedKeyStringValueAnnotation(context, (TypedStringAnnotation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAnnotationRule()
						|| rule == grammarAccess.getValuedAnnotationRule()
						|| rule == grammarAccess.getTypedKeyStringValueAnnotationRule()) {
					sequence_TypedKeyStringValueAnnotation(context, (TypedStringAnnotation) semanticObject); 
					return; 
				}
				else break;
			}
		else if (epackage == EsterelPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case EsterelPackage.ABORT:
				sequence_Abort(context, (Abort) semanticObject); 
				return; 
			case EsterelPackage.AWAIT:
				sequence_Await(context, (Await) semanticObject); 
				return; 
			case EsterelPackage.BLOCK:
				sequence_Block(context, (Block) semanticObject); 
				return; 
			case EsterelPackage.CASE:
				sequence_Case(context, (Case) semanticObject); 
				return; 
			case EsterelPackage.CONSTANT:
				sequence_Constant(context, (Constant) semanticObject); 
				return; 
			case EsterelPackage.CONSTANT_DECLS:
				sequence_ConstantDecls(context, (ConstantDecls) semanticObject); 
				return; 
			case EsterelPackage.CONSTANT_EXPRESSION:
				sequence_ConstantExpression(context, (ConstantExpression) semanticObject); 
				return; 
			case EsterelPackage.CONSTANT_RENAMING:
				sequence_ConstantRenaming(context, (ConstantRenaming) semanticObject); 
				return; 
			case EsterelPackage.DELAY_EXPR:
				sequence_DelayExpr(context, (DelayExpr) semanticObject); 
				return; 
			case EsterelPackage.DO:
				sequence_Do(context, (Do) semanticObject); 
				return; 
			case EsterelPackage.ELS_IF:
				sequence_ElsIf(context, (ElsIf) semanticObject); 
				return; 
			case EsterelPackage.EMIT:
				sequence_Emit(context, (Emit) semanticObject); 
				return; 
			case EsterelPackage.ESTEREL_ASSIGNMENT:
				sequence_EsterelAssignment(context, (EsterelAssignment) semanticObject); 
				return; 
			case EsterelPackage.ESTEREL_PARALLEL:
				sequence_EsterelParallel(context, (EsterelParallel) semanticObject); 
				return; 
			case EsterelPackage.ESTEREL_THREAD:
				sequence_EsterelThread(context, (EsterelThread) semanticObject); 
				return; 
			case EsterelPackage.ESTEREL_TYPE:
				sequence_TypeIdentifier(context, (EsterelType) semanticObject); 
				return; 
			case EsterelPackage.EVERY_DO:
				sequence_EveryDo(context, (EveryDo) semanticObject); 
				return; 
			case EsterelPackage.EXEC:
				sequence_Exec(context, (Exec) semanticObject); 
				return; 
			case EsterelPackage.EXEC_CASE:
				sequence_ExecCase(context, (ExecCase) semanticObject); 
				return; 
			case EsterelPackage.EXIT:
				sequence_Exit(context, (Exit) semanticObject); 
				return; 
			case EsterelPackage.FUNCTION:
				sequence_Function(context, (Function) semanticObject); 
				return; 
			case EsterelPackage.FUNCTION_DECL:
				sequence_FunctionDecl(context, (FunctionDecl) semanticObject); 
				return; 
			case EsterelPackage.FUNCTION_EXPRESSION:
				sequence_FunctionExpression(context, (FunctionExpression) semanticObject); 
				return; 
			case EsterelPackage.FUNCTION_RENAMING:
				sequence_FunctionRenaming(context, (FunctionRenaming) semanticObject); 
				return; 
			case EsterelPackage.HALT:
				sequence_Halt(context, (Halt) semanticObject); 
				return; 
			case EsterelPackage.ISIGNAL:
				if (rule == grammarAccess.getISignalRule()
						|| rule == grammarAccess.getEsterel_ValuedObjectRule()) {
					sequence_ISignal(context, (ISignal) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSensorRule()) {
					sequence_Sensor(context, (ISignal) semanticObject); 
					return; 
				}
				else break;
			case EsterelPackage.IVARIABLE:
				sequence_IVariable(context, (IVariable) semanticObject); 
				return; 
			case EsterelPackage.IF_TEST:
				sequence_IfTest(context, (IfTest) semanticObject); 
				return; 
			case EsterelPackage.INPUT:
				sequence_InterfaceSignalDecl(context, (Input) semanticObject); 
				return; 
			case EsterelPackage.INPUT_OUTPUT:
				sequence_InterfaceSignalDecl(context, (InputOutput) semanticObject); 
				return; 
			case EsterelPackage.LOCAL_SIGNAL_DECL:
				sequence_LocalSignalDecl(context, (LocalSignalDecl) semanticObject); 
				return; 
			case EsterelPackage.LOCAL_VARIABLE:
				sequence_LocalVariable(context, (LocalVariable) semanticObject); 
				return; 
			case EsterelPackage.LOOP:
				sequence_Loop(context, (Loop) semanticObject); 
				return; 
			case EsterelPackage.MODULE:
				sequence_Module(context, (Module) semanticObject); 
				return; 
			case EsterelPackage.MODULE_RENAMING:
				sequence_ModuleRenaming(context, (ModuleRenaming) semanticObject); 
				return; 
			case EsterelPackage.NOTHING:
				sequence_Nothing(context, (Nothing) semanticObject); 
				return; 
			case EsterelPackage.ONE_TYPE_CONSTANT_DECLS:
				sequence_OneTypeConstantDecls(context, (OneTypeConstantDecls) semanticObject); 
				return; 
			case EsterelPackage.OUTPUT:
				sequence_InterfaceSignalDecl(context, (Output) semanticObject); 
				return; 
			case EsterelPackage.PRESENT:
				sequence_Present(context, (Present) semanticObject); 
				return; 
			case EsterelPackage.PRESENT_CASE:
				sequence_PresentCase(context, (PresentCase) semanticObject); 
				return; 
			case EsterelPackage.PROC_CALL:
				sequence_ProcCall(context, (ProcCall) semanticObject); 
				return; 
			case EsterelPackage.PROCEDURE:
				sequence_Procedure(context, (Procedure) semanticObject); 
				return; 
			case EsterelPackage.PROCEDURE_DECL:
				sequence_ProcedureDecl(context, (ProcedureDecl) semanticObject); 
				return; 
			case EsterelPackage.PROCEDURE_RENAMING:
				sequence_ProcedureRenaming(context, (ProcedureRenaming) semanticObject); 
				return; 
			case EsterelPackage.PROGRAM:
				sequence_Program(context, (Program) semanticObject); 
				return; 
			case EsterelPackage.RELATION:
				sequence_RelationDecl(context, (Relation) semanticObject); 
				return; 
			case EsterelPackage.RELATION_IMPLICATION:
				sequence_RelationImplication(context, (RelationImplication) semanticObject); 
				return; 
			case EsterelPackage.RELATION_INCOMPATIBILITY:
				sequence_RelationIncompatibility(context, (RelationIncompatibility) semanticObject); 
				return; 
			case EsterelPackage.RENAMING:
				sequence_Renaming(context, (Renaming) semanticObject); 
				return; 
			case EsterelPackage.REPEAT:
				sequence_Repeat(context, (Repeat) semanticObject); 
				return; 
			case EsterelPackage.RETURN:
				sequence_InterfaceSignalDecl(context, (Return) semanticObject); 
				return; 
			case EsterelPackage.RUN:
				sequence_Run(context, (Run) semanticObject); 
				return; 
			case EsterelPackage.SENSOR_DECL:
				sequence_SensorDecl(context, (SensorDecl) semanticObject); 
				return; 
			case EsterelPackage.SENSOR_WITH_TYPE:
				sequence_SensorWithType(context, (SensorWithType) semanticObject); 
				return; 
			case EsterelPackage.SIGNAL_REFERENCE_EXPR:
				sequence_SignalReferenceExpr(context, (SignalReferenceExpr) semanticObject); 
				return; 
			case EsterelPackage.SIGNAL_RENAMING:
				sequence_SignalRenaming(context, (SignalRenaming) semanticObject); 
				return; 
			case EsterelPackage.SUSPEND:
				sequence_Suspend(context, (Suspend) semanticObject); 
				return; 
			case EsterelPackage.SUSTAIN:
				sequence_Sustain(context, (Sustain) semanticObject); 
				return; 
			case EsterelPackage.TASK:
				sequence_Task(context, (Task) semanticObject); 
				return; 
			case EsterelPackage.TASK_DECL:
				sequence_TaskDecl(context, (TaskDecl) semanticObject); 
				return; 
			case EsterelPackage.TASK_RENAMING:
				sequence_TaskRenaming(context, (TaskRenaming) semanticObject); 
				return; 
			case EsterelPackage.TRAP:
				sequence_Trap(context, (Trap) semanticObject); 
				return; 
			case EsterelPackage.TRAP_EXPRESSION:
				sequence_TrapExpression(context, (TrapExpression) semanticObject); 
				return; 
			case EsterelPackage.TRAP_HANDLER:
				sequence_TrapHandler(context, (TrapHandler) semanticObject); 
				return; 
			case EsterelPackage.TRAP_REFERENCE_EXPR:
				sequence_TrapReferenceExpr(context, (TrapReferenceExpr) semanticObject); 
				return; 
			case EsterelPackage.TRAP_SIGNAL:
				sequence_TrapSignal(context, (TrapSignal) semanticObject); 
				return; 
			case EsterelPackage.TYPE:
				sequence_Type(context, (Type) semanticObject); 
				return; 
			case EsterelPackage.TYPE_DECL:
				sequence_TypeDecl(context, (TypeDecl) semanticObject); 
				return; 
			case EsterelPackage.TYPE_IDENTIFIER:
				sequence_TypeIdentifier(context, (TypeIdentifier) semanticObject); 
				return; 
			case EsterelPackage.TYPE_RENAMING:
				sequence_TypeRenaming(context, (TypeRenaming) semanticObject); 
				return; 
			case EsterelPackage.VARIABLE_DECL:
				sequence_VariableDecl(context, (VariableDecl) semanticObject); 
				return; 
			}
		else if (epackage == KEffectsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case KEffectsPackage.ASSIGNMENT:
				sequence_PostfixEffect(context, (Assignment) semanticObject); 
				return; 
			case KEffectsPackage.EMISSION:
				sequence_Emission(context, (Emission) semanticObject); 
				return; 
			case KEffectsPackage.FUNCTION_CALL_EFFECT:
				sequence_FunctionCallEffect(context, (FunctionCallEffect) semanticObject); 
				return; 
			case KEffectsPackage.HOSTCODE_EFFECT:
				sequence_HostcodeEffect(context, (HostcodeEffect) semanticObject); 
				return; 
			}
		else if (epackage == KExpressionsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case KExpressionsPackage.BOOL_VALUE:
				sequence_BoolValue(context, (BoolValue) semanticObject); 
				return; 
			case KExpressionsPackage.DECLARATION:
				sequence_Declaration(context, (Declaration) semanticObject); 
				return; 
			case KExpressionsPackage.FLOAT_VALUE:
				sequence_FloatValue(context, (FloatValue) semanticObject); 
				return; 
			case KExpressionsPackage.FUNCTION_CALL:
				sequence_FunctionCall(context, (FunctionCall) semanticObject); 
				return; 
			case KExpressionsPackage.INT_VALUE:
				sequence_IntValue(context, (IntValue) semanticObject); 
				return; 
			case KExpressionsPackage.OPERATOR_EXPRESSION:
				if (rule == grammarAccess.getBoolExpressionRule()
						|| rule == grammarAccess.getLogicalOrExpressionRule()) {
					sequence_AddExpression_AndExpression_BitwiseAndExpression_BitwiseOrExpression_CompareOperation_DivExpression_LogicalAndExpression_LogicalOrExpression_ModExpression_MultExpression_NegExpression_NotExpression_OrExpression_SubExpression_ValuedObjectTestExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (action == grammarAccess.getLogicalOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalAndExpressionRule()) {
					sequence_AddExpression_AndExpression_BitwiseAndExpression_BitwiseOrExpression_CompareOperation_DivExpression_LogicalAndExpression_ModExpression_MultExpression_NegExpression_NotExpression_OrExpression_SubExpression_ValuedObjectTestExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (action == grammarAccess.getLogicalAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseOrExpressionRule()) {
					sequence_AddExpression_AndExpression_BitwiseAndExpression_BitwiseOrExpression_CompareOperation_DivExpression_ModExpression_MultExpression_NegExpression_NotExpression_OrExpression_SubExpression_ValuedObjectTestExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (action == grammarAccess.getBitwiseOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseAndExpressionRule()) {
					sequence_AddExpression_AndExpression_BitwiseAndExpression_CompareOperation_DivExpression_ModExpression_MultExpression_NegExpression_NotExpression_OrExpression_SubExpression_ValuedObjectTestExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAtomicExpressionRule()
						|| rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getBooleanExpressionRule()
						|| rule == grammarAccess.getOrExpressionRule()
						|| action == grammarAccess.getOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getAndExpressionRule()
						|| action == grammarAccess.getAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getCompareOperationRule()
						|| action == grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNotOrValuedExpressionRule()
						|| rule == grammarAccess.getNotExpressionRule()
						|| rule == grammarAccess.getValuedExpressionRule()
						|| rule == grammarAccess.getAddExpressionRule()
						|| action == grammarAccess.getAddExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSubExpressionRule()
						|| action == grammarAccess.getSubExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getMultExpressionRule()
						|| action == grammarAccess.getMultExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getDivExpressionRule()
						|| action == grammarAccess.getDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getModExpressionRule()
						|| action == grammarAccess.getModExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNegExpressionRule()
						|| rule == grammarAccess.getAtomicValuedExpressionRule()
						|| rule == grammarAccess.getRootRule()
						|| action == grammarAccess.getBitwiseAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()) {
					sequence_AddExpression_AndExpression_CompareOperation_DivExpression_ModExpression_MultExpression_NegExpression_NotExpression_OrExpression_SubExpression_ValuedObjectTestExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTrapExprRule()
						|| rule == grammarAccess.getSignalExpressionRule()
						|| action == grammarAccess.getSignalExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSignalAndExpressionRule()
						|| action == grammarAccess.getSignalAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSignalNotExpressionRule()
						|| rule == grammarAccess.getSignalAtomicExpressionRule()) {
					sequence_SignalAndExpression_SignalExpression_SignalNotExpression_SignalPreExpr(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSignalPreExprRule()) {
					sequence_SignalPreExpr(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getValuedObjectTestExpressionRule()) {
					sequence_ValuedObjectTestExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.PARAMETER:
				sequence_Parameter(context, (de.cau.cs.kieler.kexpressions.Parameter) semanticObject); 
				return; 
			case KExpressionsPackage.STRING_VALUE:
				sequence_StringValue(context, (StringValue) semanticObject); 
				return; 
			case KExpressionsPackage.TEXT_EXPRESSION:
				sequence_TextExpression(context, (TextExpression) semanticObject); 
				return; 
			case KExpressionsPackage.VALUED_OBJECT:
				sequence_ValuedObject(context, (ValuedObject) semanticObject); 
				return; 
			case KExpressionsPackage.VALUED_OBJECT_REFERENCE:
				sequence_ValuedObjectReference(context, (ValuedObjectReference) semanticObject); 
				return; 
			}
		else if (epackage == KExtPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case KExtPackage.ANNOTATED_EXPRESSION:
				sequence_AnnotatedExpression(context, (AnnotatedExpression) semanticObject); 
				return; 
			case KExtPackage.KEXT:
				sequence_Kext(context, (Kext) semanticObject); 
				return; 
			case KExtPackage.TEST_ENTITY:
				sequence_TestEntity(context, (TestEntity) semanticObject); 
				return; 
			}
		else if (epackage == SclPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SclPackage.ASSIGNMENT:
				sequence_Assignment(context, (de.cau.cs.kieler.scl.scl.Assignment) semanticObject); 
				return; 
			case SclPackage.CONDITIONAL:
				sequence_Conditional(context, (Conditional) semanticObject); 
				return; 
			case SclPackage.ELSE_SCOPE:
				sequence_ElseScope(context, (ElseScope) semanticObject); 
				return; 
			case SclPackage.GOTO:
				sequence_Goto(context, (Goto) semanticObject); 
				return; 
			case SclPackage.LABEL:
				sequence_Label(context, (Label) semanticObject); 
				return; 
			case SclPackage.PARALLEL:
				sequence_Parallel(context, (Parallel) semanticObject); 
				return; 
			case SclPackage.PAUSE:
				sequence_Pause(context, (Pause) semanticObject); 
				return; 
			case SclPackage.SCL_PROGRAM:
				sequence_SCLProgram(context, (SCLProgram) semanticObject); 
				return; 
			case SclPackage.SCOPE_STATEMENT:
				sequence_ScopeStatement(context, (ScopeStatement) semanticObject); 
				return; 
			case SclPackage.THREAD:
				sequence_Thread(context, (de.cau.cs.kieler.scl.scl.Thread) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     StatementContainerInterface returns Abort
	 *     EsterelStatement returns Abort
	 *     AtomicStatement returns Abort
	 *     Abort returns Abort
	 *
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         weak?='weak'? 
	 *         statements+=EsterelStatement* 
	 *         statements+=EsterelStatement? 
	 *         ((delay=DelayExpr doStatements+=EsterelStatement* doStatements+=EsterelStatement?) | delay=DelayExpr | cases+=Case+)
	 *     )
	 */
	protected void sequence_Abort(ISerializationContext context, Abort semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BoolExpression returns OperatorExpression
	 *     LogicalOrExpression returns OperatorExpression
	 *
	 * Constraint:
	 *     (
	 *         (subExpressions+=OrExpression_OperatorExpression_1_0 (operator=Esterel_OrOperator subExpressions+=AndExpression)+) | 
	 *         (subExpressions+=AndExpression_OperatorExpression_1_0 (operator=Esterel_AndOperator subExpressions+=CompareOperation)+) | 
	 *         (subExpressions+=CompareOperation_OperatorExpression_1_0 operator=Esterel_CompareOperator subExpressions+=NotOrValuedExpression) | 
	 *         (operator=Esterel_NotOperator subExpressions+=NotExpression) | 
	 *         (subExpressions+=AddExpression_OperatorExpression_1_0 (operator=Esterel_AddOperator subExpressions+=SubExpression)+) | 
	 *         (subExpressions+=SubExpression_OperatorExpression_1_0 (operator=Esterel_SubOperator subExpressions+=MultExpression)+) | 
	 *         (subExpressions+=MultExpression_OperatorExpression_1_0 (operator=Esterel_MultOperator subExpressions+=DivExpression)+) | 
	 *         (subExpressions+=DivExpression_OperatorExpression_1_0 operator=Esterel_DivOperator subExpressions+=ModExpression) | 
	 *         (subExpressions+=ModExpression_OperatorExpression_1_0 operator=Esterel_ModOperator subExpressions+=AtomicValuedExpression) | 
	 *         (operator=Esterel_SubOperator subExpressions+=NegExpression) | 
	 *         (operator=Esterel_PreOperator subExpressions+=ValuedObjectTestExpression) | 
	 *         (operator=Esterel_ValueTestOperator subExpressions+=ValuedObjectReference) | 
	 *         (subExpressions+=LogicalOrExpression_OperatorExpression_1_0 (operator=LogicalOrOperator subExpressions+=LogicalAndExpression)+) | 
	 *         (subExpressions+=LogicalAndExpression_OperatorExpression_1_0 (operator=LogicalAndOperator subExpressions+=BitwiseOrExpression)+) | 
	 *         (subExpressions+=BitwiseOrExpression_OperatorExpression_1_0 (operator=BitwiseOrOperator subExpressions+=BitwiseAndExpression)+) | 
	 *         (subExpressions+=BitwiseAndExpression_OperatorExpression_1_0 (operator=BitwiseAndOperator subExpressions+=CompareOperation)+)
	 *     )
	 */
	protected void sequence_AddExpression_AndExpression_BitwiseAndExpression_BitwiseOrExpression_CompareOperation_DivExpression_LogicalAndExpression_LogicalOrExpression_ModExpression_MultExpression_NegExpression_NotExpression_OrExpression_SubExpression_ValuedObjectTestExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LogicalOrExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     LogicalAndExpression returns OperatorExpression
	 *
	 * Constraint:
	 *     (
	 *         (subExpressions+=OrExpression_OperatorExpression_1_0 (operator=Esterel_OrOperator subExpressions+=AndExpression)+) | 
	 *         (subExpressions+=AndExpression_OperatorExpression_1_0 (operator=Esterel_AndOperator subExpressions+=CompareOperation)+) | 
	 *         (subExpressions+=CompareOperation_OperatorExpression_1_0 operator=Esterel_CompareOperator subExpressions+=NotOrValuedExpression) | 
	 *         (operator=Esterel_NotOperator subExpressions+=NotExpression) | 
	 *         (subExpressions+=AddExpression_OperatorExpression_1_0 (operator=Esterel_AddOperator subExpressions+=SubExpression)+) | 
	 *         (subExpressions+=SubExpression_OperatorExpression_1_0 (operator=Esterel_SubOperator subExpressions+=MultExpression)+) | 
	 *         (subExpressions+=MultExpression_OperatorExpression_1_0 (operator=Esterel_MultOperator subExpressions+=DivExpression)+) | 
	 *         (subExpressions+=DivExpression_OperatorExpression_1_0 operator=Esterel_DivOperator subExpressions+=ModExpression) | 
	 *         (subExpressions+=ModExpression_OperatorExpression_1_0 operator=Esterel_ModOperator subExpressions+=AtomicValuedExpression) | 
	 *         (operator=Esterel_SubOperator subExpressions+=NegExpression) | 
	 *         (operator=Esterel_PreOperator subExpressions+=ValuedObjectTestExpression) | 
	 *         (operator=Esterel_ValueTestOperator subExpressions+=ValuedObjectReference) | 
	 *         (subExpressions+=LogicalAndExpression_OperatorExpression_1_0 (operator=LogicalAndOperator subExpressions+=BitwiseOrExpression)+) | 
	 *         (subExpressions+=BitwiseOrExpression_OperatorExpression_1_0 (operator=BitwiseOrOperator subExpressions+=BitwiseAndExpression)+) | 
	 *         (subExpressions+=BitwiseAndExpression_OperatorExpression_1_0 (operator=BitwiseAndOperator subExpressions+=CompareOperation)+)
	 *     )
	 */
	protected void sequence_AddExpression_AndExpression_BitwiseAndExpression_BitwiseOrExpression_CompareOperation_DivExpression_LogicalAndExpression_ModExpression_MultExpression_NegExpression_NotExpression_OrExpression_SubExpression_ValuedObjectTestExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LogicalAndExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     BitwiseOrExpression returns OperatorExpression
	 *
	 * Constraint:
	 *     (
	 *         (subExpressions+=OrExpression_OperatorExpression_1_0 (operator=Esterel_OrOperator subExpressions+=AndExpression)+) | 
	 *         (subExpressions+=AndExpression_OperatorExpression_1_0 (operator=Esterel_AndOperator subExpressions+=CompareOperation)+) | 
	 *         (subExpressions+=CompareOperation_OperatorExpression_1_0 operator=Esterel_CompareOperator subExpressions+=NotOrValuedExpression) | 
	 *         (operator=Esterel_NotOperator subExpressions+=NotExpression) | 
	 *         (subExpressions+=AddExpression_OperatorExpression_1_0 (operator=Esterel_AddOperator subExpressions+=SubExpression)+) | 
	 *         (subExpressions+=SubExpression_OperatorExpression_1_0 (operator=Esterel_SubOperator subExpressions+=MultExpression)+) | 
	 *         (subExpressions+=MultExpression_OperatorExpression_1_0 (operator=Esterel_MultOperator subExpressions+=DivExpression)+) | 
	 *         (subExpressions+=DivExpression_OperatorExpression_1_0 operator=Esterel_DivOperator subExpressions+=ModExpression) | 
	 *         (subExpressions+=ModExpression_OperatorExpression_1_0 operator=Esterel_ModOperator subExpressions+=AtomicValuedExpression) | 
	 *         (operator=Esterel_SubOperator subExpressions+=NegExpression) | 
	 *         (operator=Esterel_PreOperator subExpressions+=ValuedObjectTestExpression) | 
	 *         (operator=Esterel_ValueTestOperator subExpressions+=ValuedObjectReference) | 
	 *         (subExpressions+=BitwiseOrExpression_OperatorExpression_1_0 (operator=BitwiseOrOperator subExpressions+=BitwiseAndExpression)+) | 
	 *         (subExpressions+=BitwiseAndExpression_OperatorExpression_1_0 (operator=BitwiseAndOperator subExpressions+=CompareOperation)+)
	 *     )
	 */
	protected void sequence_AddExpression_AndExpression_BitwiseAndExpression_BitwiseOrExpression_CompareOperation_DivExpression_ModExpression_MultExpression_NegExpression_NotExpression_OrExpression_SubExpression_ValuedObjectTestExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BitwiseOrExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     BitwiseAndExpression returns OperatorExpression
	 *
	 * Constraint:
	 *     (
	 *         (subExpressions+=OrExpression_OperatorExpression_1_0 (operator=Esterel_OrOperator subExpressions+=AndExpression)+) | 
	 *         (subExpressions+=AndExpression_OperatorExpression_1_0 (operator=Esterel_AndOperator subExpressions+=CompareOperation)+) | 
	 *         (subExpressions+=CompareOperation_OperatorExpression_1_0 operator=Esterel_CompareOperator subExpressions+=NotOrValuedExpression) | 
	 *         (operator=Esterel_NotOperator subExpressions+=NotExpression) | 
	 *         (subExpressions+=AddExpression_OperatorExpression_1_0 (operator=Esterel_AddOperator subExpressions+=SubExpression)+) | 
	 *         (subExpressions+=SubExpression_OperatorExpression_1_0 (operator=Esterel_SubOperator subExpressions+=MultExpression)+) | 
	 *         (subExpressions+=MultExpression_OperatorExpression_1_0 (operator=Esterel_MultOperator subExpressions+=DivExpression)+) | 
	 *         (subExpressions+=DivExpression_OperatorExpression_1_0 operator=Esterel_DivOperator subExpressions+=ModExpression) | 
	 *         (subExpressions+=ModExpression_OperatorExpression_1_0 operator=Esterel_ModOperator subExpressions+=AtomicValuedExpression) | 
	 *         (operator=Esterel_SubOperator subExpressions+=NegExpression) | 
	 *         (operator=Esterel_PreOperator subExpressions+=ValuedObjectTestExpression) | 
	 *         (operator=Esterel_ValueTestOperator subExpressions+=ValuedObjectReference) | 
	 *         (subExpressions+=BitwiseAndExpression_OperatorExpression_1_0 (operator=BitwiseAndOperator subExpressions+=CompareOperation)+)
	 *     )
	 */
	protected void sequence_AddExpression_AndExpression_BitwiseAndExpression_CompareOperation_DivExpression_ModExpression_MultExpression_NegExpression_NotExpression_OrExpression_SubExpression_ValuedObjectTestExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AtomicExpression returns OperatorExpression
	 *     Expression returns OperatorExpression
	 *     BooleanExpression returns OperatorExpression
	 *     OrExpression returns OperatorExpression
	 *     OrExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     AndExpression returns OperatorExpression
	 *     AndExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     CompareOperation returns OperatorExpression
	 *     CompareOperation.OperatorExpression_1_0 returns OperatorExpression
	 *     NotOrValuedExpression returns OperatorExpression
	 *     NotExpression returns OperatorExpression
	 *     ValuedExpression returns OperatorExpression
	 *     AddExpression returns OperatorExpression
	 *     AddExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     SubExpression returns OperatorExpression
	 *     SubExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     MultExpression returns OperatorExpression
	 *     MultExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     DivExpression returns OperatorExpression
	 *     DivExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     ModExpression returns OperatorExpression
	 *     ModExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     NegExpression returns OperatorExpression
	 *     AtomicValuedExpression returns OperatorExpression
	 *     Root returns OperatorExpression
	 *     BitwiseAndExpression.OperatorExpression_1_0 returns OperatorExpression
	 *
	 * Constraint:
	 *     (
	 *         (subExpressions+=OrExpression_OperatorExpression_1_0 (operator=Esterel_OrOperator subExpressions+=AndExpression)+) | 
	 *         (subExpressions+=AndExpression_OperatorExpression_1_0 (operator=Esterel_AndOperator subExpressions+=CompareOperation)+) | 
	 *         (subExpressions+=CompareOperation_OperatorExpression_1_0 operator=Esterel_CompareOperator subExpressions+=NotOrValuedExpression) | 
	 *         (operator=Esterel_NotOperator subExpressions+=NotExpression) | 
	 *         (subExpressions+=AddExpression_OperatorExpression_1_0 (operator=Esterel_AddOperator subExpressions+=SubExpression)+) | 
	 *         (subExpressions+=SubExpression_OperatorExpression_1_0 (operator=Esterel_SubOperator subExpressions+=MultExpression)+) | 
	 *         (subExpressions+=MultExpression_OperatorExpression_1_0 (operator=Esterel_MultOperator subExpressions+=DivExpression)+) | 
	 *         (subExpressions+=DivExpression_OperatorExpression_1_0 operator=Esterel_DivOperator subExpressions+=ModExpression) | 
	 *         (subExpressions+=ModExpression_OperatorExpression_1_0 operator=Esterel_ModOperator subExpressions+=AtomicValuedExpression) | 
	 *         (operator=Esterel_SubOperator subExpressions+=NegExpression) | 
	 *         (operator=Esterel_PreOperator subExpressions+=ValuedObjectTestExpression) | 
	 *         (operator=Esterel_ValueTestOperator subExpressions+=ValuedObjectReference)
	 *     )
	 */
	protected void sequence_AddExpression_AndExpression_CompareOperation_DivExpression_ModExpression_MultExpression_NegExpression_NotExpression_OrExpression_SubExpression_ValuedObjectTestExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StatementContainerInterface returns Await
	 *     EsterelStatement returns Await
	 *     AtomicStatement returns Await
	 *     Await returns Await
	 *
	 * Constraint:
	 *     (annotations+=Annotation* ((delay=DelayExpr statements+=EsterelStatement* statements+=EsterelStatement?) | cases+=Case+))
	 */
	protected void sequence_Await(ISerializationContext context, Await semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StatementContainerInterface returns Block
	 *     EsterelStatement returns Block
	 *     AtomicStatement returns Block
	 *     Block returns Block
	 *
	 * Constraint:
	 *     (annotations+=Annotation* statements+=EsterelStatement* statements+=EsterelStatement?)
	 */
	protected void sequence_Block(ISerializationContext context, Block semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StatementContainerInterface returns Case
	 *     Case returns Case
	 *
	 * Constraint:
	 *     (annotations+=Annotation* delay=DelayExpr statements+=EsterelStatement* statements+=EsterelStatement?)
	 */
	protected void sequence_Case(ISerializationContext context, Case semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConstantDecls returns ConstantDecls
	 *
	 * Constraint:
	 *     (annotations+=Annotation* constants+=OneTypeConstantDecls constants+=OneTypeConstantDecls*)
	 */
	protected void sequence_ConstantDecls(ISerializationContext context, ConstantDecls semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AtomicExpression returns ConstantExpression
	 *     ConstantExpression returns ConstantExpression
	 *     Expression returns ConstantExpression
	 *     BooleanExpression returns ConstantExpression
	 *     OrExpression returns ConstantExpression
	 *     OrExpression.OperatorExpression_1_0 returns ConstantExpression
	 *     AndExpression returns ConstantExpression
	 *     AndExpression.OperatorExpression_1_0 returns ConstantExpression
	 *     CompareOperation returns ConstantExpression
	 *     CompareOperation.OperatorExpression_1_0 returns ConstantExpression
	 *     NotOrValuedExpression returns ConstantExpression
	 *     NotExpression returns ConstantExpression
	 *     ValuedExpression returns ConstantExpression
	 *     AddExpression returns ConstantExpression
	 *     AddExpression.OperatorExpression_1_0 returns ConstantExpression
	 *     SubExpression returns ConstantExpression
	 *     SubExpression.OperatorExpression_1_0 returns ConstantExpression
	 *     MultExpression returns ConstantExpression
	 *     MultExpression.OperatorExpression_1_0 returns ConstantExpression
	 *     DivExpression returns ConstantExpression
	 *     DivExpression.OperatorExpression_1_0 returns ConstantExpression
	 *     ModExpression returns ConstantExpression
	 *     ModExpression.OperatorExpression_1_0 returns ConstantExpression
	 *     NegExpression returns ConstantExpression
	 *     AtomicValuedExpression returns ConstantExpression
	 *     Root returns ConstantExpression
	 *     BoolExpression returns ConstantExpression
	 *     LogicalOrExpression returns ConstantExpression
	 *     LogicalOrExpression.OperatorExpression_1_0 returns ConstantExpression
	 *     LogicalAndExpression returns ConstantExpression
	 *     LogicalAndExpression.OperatorExpression_1_0 returns ConstantExpression
	 *     BitwiseOrExpression returns ConstantExpression
	 *     BitwiseOrExpression.OperatorExpression_1_0 returns ConstantExpression
	 *     BitwiseAndExpression returns ConstantExpression
	 *     BitwiseAndExpression.OperatorExpression_1_0 returns ConstantExpression
	 *
	 * Constraint:
	 *     (constant=[Constant|ID] | value=ConstantValue)
	 */
	protected void sequence_ConstantExpression(ISerializationContext context, ConstantExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConstantRenaming returns ConstantRenaming
	 *
	 * Constraint:
	 *     ((newName=[ValuedObject|ID] | newValue=ConstantValue) oldName=[ValuedObject|ID])
	 */
	protected void sequence_ConstantRenaming(ISerializationContext context, ConstantRenaming semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Constant returns Constant
	 *     Esterel_ValuedObject returns Constant
	 *
	 * Constraint:
	 *     (name=ID value=ConstantValue?)
	 */
	protected void sequence_Constant(ISerializationContext context, Constant semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DelayExpr returns DelayExpr
	 *
	 * Constraint:
	 *     ((expression=Expression | isImmediate?='immediate')? (signalExpr=SignalReferenceExpr | signalExpr=SignalExpression))
	 */
	protected void sequence_DelayExpr(ISerializationContext context, DelayExpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StatementContainerInterface returns Do
	 *     EsterelStatement returns Do
	 *     AtomicStatement returns Do
	 *     Do returns Do
	 *
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         statements+=EsterelStatement* 
	 *         statements+=EsterelStatement? 
	 *         (
	 *             (endingAnnotations+=Annotation* expression=DelayExpr) | 
	 *             (endingAnnotations+=Annotation* delay=DelayExpr watchingStatements+=EsterelStatement* watchingStatements+=EsterelStatement?)
	 *         )
	 *     )
	 */
	protected void sequence_Do(ISerializationContext context, Do semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ElsIf returns ElsIf
	 *
	 * Constraint:
	 *     (annotations+=Annotation* expression=Expression thenStatements+=EsterelStatement* thenStatements+=EsterelStatement?)
	 */
	protected void sequence_ElsIf(ISerializationContext context, ElsIf semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EsterelStatement returns Emit
	 *     AtomicStatement returns Emit
	 *     Emit returns Emit
	 *
	 * Constraint:
	 *     (annotations+=Annotation* signal=[ISignal|ID] expression=Expression?)
	 */
	protected void sequence_Emit(ISerializationContext context, Emit semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EsterelStatement returns EsterelAssignment
	 *     AtomicStatement returns EsterelAssignment
	 *     EsterelAssignment returns EsterelAssignment
	 *
	 * Constraint:
	 *     (var=[IVariable|ID] expression=Expression)
	 */
	protected void sequence_EsterelAssignment(ISerializationContext context, EsterelAssignment semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EsterelPackage.Literals.ESTEREL_ASSIGNMENT__VAR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EsterelPackage.Literals.ESTEREL_ASSIGNMENT__VAR));
			if (transientValues.isValueTransient(semanticObject, EsterelPackage.Literals.ESTEREL_ASSIGNMENT__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EsterelPackage.Literals.ESTEREL_ASSIGNMENT__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEsterelAssignmentAccess().getVarIVariableIDTerminalRuleCall_0_0_1(), semanticObject.getVar());
		feeder.accept(grammarAccess.getEsterelAssignmentAccess().getExpressionExpressionParserRuleCall_2_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EsterelStatement returns EsterelParallel
	 *     EsterelParallel returns EsterelParallel
	 *
	 * Constraint:
	 *     (threads+=EsterelThread threads+=EsterelThread+)
	 */
	protected void sequence_EsterelParallel(ISerializationContext context, EsterelParallel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StatementContainerInterface returns EsterelThread
	 *     EsterelThread returns EsterelThread
	 *
	 * Constraint:
	 *     (statements+=AtomicStatement* statements+=AtomicStatement?)
	 */
	protected void sequence_EsterelThread(ISerializationContext context, EsterelThread semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StatementContainerInterface returns EveryDo
	 *     EsterelStatement returns EveryDo
	 *     AtomicStatement returns EveryDo
	 *     EveryDo returns EveryDo
	 *
	 * Constraint:
	 *     (annotations+=Annotation* delay=DelayExpr statements+=EsterelStatement* statements+=EsterelStatement?)
	 */
	protected void sequence_EveryDo(ISerializationContext context, EveryDo semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StatementContainerInterface returns ExecCase
	 *     ExecCase returns ExecCase
	 *
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         task=[Task|ID] 
	 *         (vars+=[IVariable|ID] vars+=[IVariable|ID]*)? 
	 *         (kexpressions+=Expression kexpressions+=Expression*)? 
	 *         retSignal=[ISignal|ID] 
	 *         statements+=EsterelStatement* 
	 *         statements+=EsterelStatement?
	 *     )
	 */
	protected void sequence_ExecCase(ISerializationContext context, ExecCase semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StatementContainerInterface returns Exec
	 *     EsterelStatement returns Exec
	 *     AtomicStatement returns Exec
	 *     Exec returns Exec
	 *
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         (
	 *             (
	 *                 task=[Task|ID] 
	 *                 (vars+=[IVariable|ID] vars+=[IVariable|ID]*)? 
	 *                 (kexpressions+=Expression kexpressions+=Expression*)? 
	 *                 retSignal=[ISignal|ID] 
	 *                 statements+=EsterelStatement* 
	 *                 statements+=EsterelStatement?
	 *             ) | 
	 *             execCaseList+=ExecCase+
	 *         )
	 *     )
	 */
	protected void sequence_Exec(ISerializationContext context, Exec semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EsterelStatement returns Exit
	 *     AtomicStatement returns Exit
	 *     Exit returns Exit
	 *
	 * Constraint:
	 *     (annotations+=Annotation* trap=[TrapSignal|ID] expression=Expression?)
	 */
	protected void sequence_Exit(ISerializationContext context, Exit semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FunctionDecl returns FunctionDecl
	 *
	 * Constraint:
	 *     (annotations+=Annotation* functions+=Function functions+=Function*)
	 */
	protected void sequence_FunctionDecl(ISerializationContext context, FunctionDecl semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AtomicExpression returns FunctionExpression
	 *     FunctionExpression returns FunctionExpression
	 *     Expression returns FunctionExpression
	 *     BooleanExpression returns FunctionExpression
	 *     OrExpression returns FunctionExpression
	 *     OrExpression.OperatorExpression_1_0 returns FunctionExpression
	 *     AndExpression returns FunctionExpression
	 *     AndExpression.OperatorExpression_1_0 returns FunctionExpression
	 *     CompareOperation returns FunctionExpression
	 *     CompareOperation.OperatorExpression_1_0 returns FunctionExpression
	 *     NotOrValuedExpression returns FunctionExpression
	 *     NotExpression returns FunctionExpression
	 *     ValuedExpression returns FunctionExpression
	 *     AddExpression returns FunctionExpression
	 *     AddExpression.OperatorExpression_1_0 returns FunctionExpression
	 *     SubExpression returns FunctionExpression
	 *     SubExpression.OperatorExpression_1_0 returns FunctionExpression
	 *     MultExpression returns FunctionExpression
	 *     MultExpression.OperatorExpression_1_0 returns FunctionExpression
	 *     DivExpression returns FunctionExpression
	 *     DivExpression.OperatorExpression_1_0 returns FunctionExpression
	 *     ModExpression returns FunctionExpression
	 *     ModExpression.OperatorExpression_1_0 returns FunctionExpression
	 *     NegExpression returns FunctionExpression
	 *     AtomicValuedExpression returns FunctionExpression
	 *     Root returns FunctionExpression
	 *     BoolExpression returns FunctionExpression
	 *     LogicalOrExpression returns FunctionExpression
	 *     LogicalOrExpression.OperatorExpression_1_0 returns FunctionExpression
	 *     LogicalAndExpression returns FunctionExpression
	 *     LogicalAndExpression.OperatorExpression_1_0 returns FunctionExpression
	 *     BitwiseOrExpression returns FunctionExpression
	 *     BitwiseOrExpression.OperatorExpression_1_0 returns FunctionExpression
	 *     BitwiseAndExpression returns FunctionExpression
	 *     BitwiseAndExpression.OperatorExpression_1_0 returns FunctionExpression
	 *
	 * Constraint:
	 *     (function=[Function|ID] (kexpressions+=Expression kexpressions+=Expression*)?)
	 */
	protected void sequence_FunctionExpression(ISerializationContext context, FunctionExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FunctionRenaming returns FunctionRenaming
	 *
	 * Constraint:
	 *     ((newName=[Function|ID] | newFunc=BuildInFunction) oldName=[Function|ID])
	 */
	protected void sequence_FunctionRenaming(ISerializationContext context, FunctionRenaming semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Function returns Function
	 *
	 * Constraint:
	 *     (name=ID (idList+=TypeIdentifier idList+=TypeIdentifier*)? type=TypeIdentifier)
	 */
	protected void sequence_Function(ISerializationContext context, Function semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EsterelStatement returns Halt
	 *     AtomicStatement returns Halt
	 *     Halt returns Halt
	 *
	 * Constraint:
	 *     annotations+=Annotation*
	 */
	protected void sequence_Halt(ISerializationContext context, Halt semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ISignal returns ISignal
	 *     Esterel_ValuedObject returns ISignal
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         (
	 *             type=Esterel_ValueType | 
	 *             typeID=ID | 
	 *             ((type=Esterel_ValueType | typeID=ID) (func=[Function|ID] | combineOperator=Esterel_CombineOperator)) | 
	 *             type=Esterel_ValueType | 
	 *             typeID=ID | 
	 *             ((type=Esterel_ValueType | typeID=ID) (func=[Function|ID] | combineOperator=Esterel_CombineOperator)) | 
	 *             (
	 *                 expression=Expression 
	 *                 (type=Esterel_ValueType | typeID=ID | ((type=Esterel_ValueType | typeID=ID) (func=[Function|ID] | combineOperator=Esterel_CombineOperator)))
	 *             )
	 *         )?
	 *     )
	 */
	protected void sequence_ISignal(ISerializationContext context, ISignal semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IVariable returns IVariable
	 *     Esterel_ValuedObject returns IVariable
	 *
	 * Constraint:
	 *     (name=ID expression=Expression?)
	 */
	protected void sequence_IVariable(ISerializationContext context, IVariable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EsterelStatement returns IfTest
	 *     AtomicStatement returns IfTest
	 *     IfTest returns IfTest
	 *
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         expression=Expression 
	 *         thenAnnotations+=Annotation* 
	 *         thenStatements+=EsterelStatement* 
	 *         thenStatements+=EsterelStatement? 
	 *         elseif+=ElsIf* 
	 *         elseAnnotations+=Annotation* 
	 *         elseStatements+=EsterelStatement* 
	 *         elseStatements+=EsterelStatement?
	 *     )
	 */
	protected void sequence_IfTest(ISerializationContext context, IfTest semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InterfaceSignalDecl returns Input
	 *
	 * Constraint:
	 *     (annotations+=Annotation* signals+=ISignal signals+=ISignal*)
	 */
	protected void sequence_InterfaceSignalDecl(ISerializationContext context, Input semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InterfaceSignalDecl returns InputOutput
	 *
	 * Constraint:
	 *     (annotations+=Annotation* signals+=ISignal signals+=ISignal*)
	 */
	protected void sequence_InterfaceSignalDecl(ISerializationContext context, InputOutput semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InterfaceSignalDecl returns Output
	 *
	 * Constraint:
	 *     (annotations+=Annotation* signals+=ISignal signals+=ISignal*)
	 */
	protected void sequence_InterfaceSignalDecl(ISerializationContext context, Output semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InterfaceSignalDecl returns Return
	 *
	 * Constraint:
	 *     (annotations+=Annotation* signals+=ISignal signals+=ISignal*)
	 */
	protected void sequence_InterfaceSignalDecl(ISerializationContext context, Return semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StatementContainerInterface returns LocalSignalDecl
	 *     EsterelStatement returns LocalSignalDecl
	 *     AtomicStatement returns LocalSignalDecl
	 *     LocalSignalDecl returns LocalSignalDecl
	 *
	 * Constraint:
	 *     (annotations+=Annotation* signals+=ISignal signals+=ISignal* statements+=EsterelStatement* statements+=EsterelStatement?)
	 */
	protected void sequence_LocalSignalDecl(ISerializationContext context, LocalSignalDecl semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StatementContainerInterface returns LocalVariable
	 *     EsterelStatement returns LocalVariable
	 *     AtomicStatement returns LocalVariable
	 *     LocalVariable returns LocalVariable
	 *
	 * Constraint:
	 *     (annotations+=Annotation* varDecls+=VariableDecl varDecls+=VariableDecl* statements+=EsterelStatement* statements+=EsterelStatement?)
	 */
	protected void sequence_LocalVariable(ISerializationContext context, LocalVariable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StatementContainerInterface returns Loop
	 *     EsterelStatement returns Loop
	 *     AtomicStatement returns Loop
	 *     Loop returns Loop
	 *
	 * Constraint:
	 *     (annotations+=Annotation* statements+=EsterelStatement* statements+=EsterelStatement? delay=DelayExpr?)
	 */
	protected void sequence_Loop(ISerializationContext context, Loop semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ModuleRenaming returns ModuleRenaming
	 *
	 * Constraint:
	 *     (module=[Module|ID] | (newName=ID module=[Module|ID]))
	 */
	protected void sequence_ModuleRenaming(ISerializationContext context, ModuleRenaming semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Module returns Module
	 *     StatementContainerInterface returns Module
	 *
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         name=ID 
	 *         (
	 *             intSignalDecls+=InterfaceSignalDecl | 
	 *             intTypeDecls+=TypeDecl | 
	 *             intSensorDecls+=SensorDecl | 
	 *             intConstantDecls+=ConstantDecls | 
	 *             intRelationDecls+=RelationDecl | 
	 *             intTaskDecls+=TaskDecl | 
	 *             intFunctionDecls+=FunctionDecl | 
	 *             intProcedureDecls+=ProcedureDecl
	 *         )* 
	 *         statements+=EsterelStatement* 
	 *         statements+=EsterelStatement?
	 *     )
	 */
	protected void sequence_Module(ISerializationContext context, Module semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EsterelStatement returns Nothing
	 *     AtomicStatement returns Nothing
	 *     Nothing returns Nothing
	 *
	 * Constraint:
	 *     annotations+=Annotation*
	 */
	protected void sequence_Nothing(ISerializationContext context, Nothing semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OneTypeConstantDecls returns OneTypeConstantDecls
	 *
	 * Constraint:
	 *     (constants+=Constant constants+=Constant* type=TypeIdentifier)
	 */
	protected void sequence_OneTypeConstantDecls(ISerializationContext context, OneTypeConstantDecls semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StatementContainerInterface returns PresentCase
	 *     PresentCase returns PresentCase
	 *
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         (expression=SignalExpression | expression=SignalExpression) 
	 *         statements+=EsterelStatement* 
	 *         statements+=EsterelStatement?
	 *     )
	 */
	protected void sequence_PresentCase(ISerializationContext context, PresentCase semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EsterelStatement returns Present
	 *     AtomicStatement returns Present
	 *     Present returns Present
	 *
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         (
	 *             (
	 *                 (expression=SignalExpression | expression=SignalExpression) 
	 *                 thenAnnotations+=Annotation* 
	 *                 thenStatements+=EsterelStatement* 
	 *                 thenStatements+=EsterelStatement?
	 *             ) | 
	 *             cases+=PresentCase+
	 *         ) 
	 *         elseAnnotations+=Annotation* 
	 *         elseStatements+=EsterelStatement* 
	 *         elseStatements+=EsterelStatement?
	 *     )
	 */
	protected void sequence_Present(ISerializationContext context, Present semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EsterelStatement returns ProcCall
	 *     AtomicStatement returns ProcCall
	 *     ProcCall returns ProcCall
	 *
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         proc=[Procedure|ID] 
	 *         (varList+=[IVariable|ID] varList+=[IVariable|ID]*)? 
	 *         (kexpressions+=Expression kexpressions+=Expression*)?
	 *     )
	 */
	protected void sequence_ProcCall(ISerializationContext context, ProcCall semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ProcedureDecl returns ProcedureDecl
	 *
	 * Constraint:
	 *     (annotations+=Annotation* procedures+=Procedure procedures+=Procedure*)
	 */
	protected void sequence_ProcedureDecl(ISerializationContext context, ProcedureDecl semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ProcedureRenaming returns ProcedureRenaming
	 *
	 * Constraint:
	 *     (newName=[Procedure|ID] oldName=[Procedure|ID])
	 */
	protected void sequence_ProcedureRenaming(ISerializationContext context, ProcedureRenaming semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EsterelPackage.Literals.PROCEDURE_RENAMING__NEW_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EsterelPackage.Literals.PROCEDURE_RENAMING__NEW_NAME));
			if (transientValues.isValueTransient(semanticObject, EsterelPackage.Literals.PROCEDURE_RENAMING__OLD_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EsterelPackage.Literals.PROCEDURE_RENAMING__OLD_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getProcedureRenamingAccess().getNewNameProcedureIDTerminalRuleCall_0_0_1(), semanticObject.getNewName());
		feeder.accept(grammarAccess.getProcedureRenamingAccess().getOldNameProcedureIDTerminalRuleCall_2_0_1(), semanticObject.getOldName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Procedure returns Procedure
	 *
	 * Constraint:
	 *     (name=ID (variables+=TypeIdentifier variables+=TypeIdentifier*)? (expressions+=TypeIdentifier expressions+=TypeIdentifier*)?)
	 */
	protected void sequence_Procedure(ISerializationContext context, Procedure semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Program returns Program
	 *
	 * Constraint:
	 *     modules+=Module+
	 */
	protected void sequence_Program(ISerializationContext context, Program semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RelationDecl returns Relation
	 *
	 * Constraint:
	 *     (annotations+=Annotation* relations+=RelationType relations+=RelationType*)
	 */
	protected void sequence_RelationDecl(ISerializationContext context, Relation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RelationType returns RelationImplication
	 *     RelationImplication returns RelationImplication
	 *
	 * Constraint:
	 *     (first=[ISignal|ID] type='=>' second=[ISignal|ID])
	 */
	protected void sequence_RelationImplication(ISerializationContext context, RelationImplication semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EsterelPackage.Literals.RELATION_IMPLICATION__FIRST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EsterelPackage.Literals.RELATION_IMPLICATION__FIRST));
			if (transientValues.isValueTransient(semanticObject, EsterelPackage.Literals.RELATION_TYPE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EsterelPackage.Literals.RELATION_TYPE__TYPE));
			if (transientValues.isValueTransient(semanticObject, EsterelPackage.Literals.RELATION_IMPLICATION__SECOND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EsterelPackage.Literals.RELATION_IMPLICATION__SECOND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRelationImplicationAccess().getFirstISignalIDTerminalRuleCall_0_0_1(), semanticObject.getFirst());
		feeder.accept(grammarAccess.getRelationImplicationAccess().getTypeEqualsSignGreaterThanSignKeyword_1_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getRelationImplicationAccess().getSecondISignalIDTerminalRuleCall_2_0_1(), semanticObject.getSecond());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RelationType returns RelationIncompatibility
	 *     RelationIncompatibility returns RelationIncompatibility
	 *
	 * Constraint:
	 *     (incomp+=[ISignal|ID] type='#' incomp+=[ISignal|ID] incomp+=[ISignal|ID]*)
	 */
	protected void sequence_RelationIncompatibility(ISerializationContext context, RelationIncompatibility semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Renaming returns Renaming
	 *
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         (
	 *             (renamings+=TypeRenaming renamings+=TypeRenaming*) | 
	 *             (renamings+=ConstantRenaming renamings+=ConstantRenaming*) | 
	 *             (renamings+=FunctionRenaming renamings+=FunctionRenaming*) | 
	 *             (renamings+=ProcedureRenaming renamings+=ProcedureRenaming*) | 
	 *             (renamings+=TaskRenaming renamings+=TaskRenaming*) | 
	 *             (renamings+=SignalRenaming renamings+=SignalRenaming*)
	 *         )
	 *     )
	 */
	protected void sequence_Renaming(ISerializationContext context, Renaming semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StatementContainerInterface returns Repeat
	 *     EsterelStatement returns Repeat
	 *     AtomicStatement returns Repeat
	 *     Repeat returns Repeat
	 *
	 * Constraint:
	 *     (annotations+=Annotation* positive?='positive'? expression=Expression statements+=EsterelStatement* statements+=EsterelStatement?)
	 */
	protected void sequence_Repeat(ISerializationContext context, Repeat semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EsterelStatement returns Run
	 *     AtomicStatement returns Run
	 *     Run returns Run
	 *
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         ((module=ModuleRenaming (list+=Renaming list+=Renaming*)?) | (module=ModuleRenaming (list+=Renaming list+=Renaming*)?))
	 *     )
	 */
	protected void sequence_Run(ISerializationContext context, Run semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SensorDecl returns SensorDecl
	 *
	 * Constraint:
	 *     (annotations+=Annotation* sensors+=SensorWithType sensors+=SensorWithType*)
	 */
	protected void sequence_SensorDecl(ISerializationContext context, SensorDecl semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SensorWithType returns SensorWithType
	 *
	 * Constraint:
	 *     (sensor=Sensor (type=TypeIdentifier | type=TypeIdentifier))
	 */
	protected void sequence_SensorWithType(ISerializationContext context, SensorWithType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Sensor returns ISignal
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Sensor(ISerializationContext context, ISignal semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, KExpressionsPackage.Literals.VALUED_OBJECT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KExpressionsPackage.Literals.VALUED_OBJECT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSensorAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TrapExpr returns OperatorExpression
	 *     SignalExpression returns OperatorExpression
	 *     SignalExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     SignalAndExpression returns OperatorExpression
	 *     SignalAndExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     SignalNotExpression returns OperatorExpression
	 *     SignalAtomicExpression returns OperatorExpression
	 *
	 * Constraint:
	 *     (
	 *         (subExpressions+=SignalExpression_OperatorExpression_1_0 (operator=Esterel_OrOperator subExpressions+=SignalAndExpression)+) | 
	 *         (subExpressions+=SignalAndExpression_OperatorExpression_1_0 (operator=Esterel_AndOperator subExpressions+=SignalNotExpression)+) | 
	 *         (operator=Esterel_NotOperator+ subExpressions+=SignalAtomicExpression) | 
	 *         (operator=Esterel_PreOperator subExpressions+=SignalReferenceExpr)
	 *     )
	 */
	protected void sequence_SignalAndExpression_SignalExpression_SignalNotExpression_SignalPreExpr(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SignalPreExpr returns OperatorExpression
	 *
	 * Constraint:
	 *     (operator=Esterel_PreOperator subExpressions+=SignalReferenceExpr)
	 */
	protected void sequence_SignalPreExpr(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TrapExpr returns SignalReferenceExpr
	 *     SignalExpression returns SignalReferenceExpr
	 *     SignalExpression.OperatorExpression_1_0 returns SignalReferenceExpr
	 *     SignalAndExpression returns SignalReferenceExpr
	 *     SignalAndExpression.OperatorExpression_1_0 returns SignalReferenceExpr
	 *     SignalNotExpression returns SignalReferenceExpr
	 *     SignalAtomicExpression returns SignalReferenceExpr
	 *     SignalReferenceExpr returns SignalReferenceExpr
	 *
	 * Constraint:
	 *     valuedObject=[ISignal|ID]
	 */
	protected void sequence_SignalReferenceExpr(ISerializationContext context, SignalReferenceExpr semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, KExpressionsPackage.Literals.VALUED_OBJECT_REFERENCE__VALUED_OBJECT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KExpressionsPackage.Literals.VALUED_OBJECT_REFERENCE__VALUED_OBJECT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSignalReferenceExprAccess().getValuedObjectISignalIDTerminalRuleCall_1_0_1(), semanticObject.getValuedObject());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SignalRenaming returns SignalRenaming
	 *
	 * Constraint:
	 *     (newName=[ISignal|ID] oldName=[ISignal|ID])
	 */
	protected void sequence_SignalRenaming(ISerializationContext context, SignalRenaming semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EsterelPackage.Literals.SIGNAL_RENAMING__NEW_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EsterelPackage.Literals.SIGNAL_RENAMING__NEW_NAME));
			if (transientValues.isValueTransient(semanticObject, EsterelPackage.Literals.SIGNAL_RENAMING__OLD_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EsterelPackage.Literals.SIGNAL_RENAMING__OLD_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSignalRenamingAccess().getNewNameISignalIDTerminalRuleCall_0_0_1(), semanticObject.getNewName());
		feeder.accept(grammarAccess.getSignalRenamingAccess().getOldNameISignalIDTerminalRuleCall_2_0_1(), semanticObject.getOldName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     StatementContainerInterface returns Suspend
	 *     EsterelStatement returns Suspend
	 *     AtomicStatement returns Suspend
	 *     Suspend returns Suspend
	 *
	 * Constraint:
	 *     (annotations+=Annotation* weak?='weak'? statements+=EsterelStatement* statements+=EsterelStatement? delay=DelayExpr)
	 */
	protected void sequence_Suspend(ISerializationContext context, Suspend semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EsterelStatement returns Sustain
	 *     AtomicStatement returns Sustain
	 *     Sustain returns Sustain
	 *
	 * Constraint:
	 *     (annotations+=Annotation* signal=[ISignal|ID] expression=Expression?)
	 */
	protected void sequence_Sustain(ISerializationContext context, Sustain semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TaskDecl returns TaskDecl
	 *
	 * Constraint:
	 *     (annotations+=Annotation* tasks+=Task tasks+=Task*)
	 */
	protected void sequence_TaskDecl(ISerializationContext context, TaskDecl semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TaskRenaming returns TaskRenaming
	 *
	 * Constraint:
	 *     (newName=[Task|ID] oldName=[Task|ID])
	 */
	protected void sequence_TaskRenaming(ISerializationContext context, TaskRenaming semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EsterelPackage.Literals.TASK_RENAMING__NEW_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EsterelPackage.Literals.TASK_RENAMING__NEW_NAME));
			if (transientValues.isValueTransient(semanticObject, EsterelPackage.Literals.TASK_RENAMING__OLD_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EsterelPackage.Literals.TASK_RENAMING__OLD_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTaskRenamingAccess().getNewNameTaskIDTerminalRuleCall_0_0_1(), semanticObject.getNewName());
		feeder.accept(grammarAccess.getTaskRenamingAccess().getOldNameTaskIDTerminalRuleCall_2_0_1(), semanticObject.getOldName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Task returns Task
	 *
	 * Constraint:
	 *     (name=ID (variables+=TypeIdentifier variables+=TypeIdentifier*)? (expressions+=TypeIdentifier expressions+=TypeIdentifier*)?)
	 */
	protected void sequence_Task(ISerializationContext context, Task semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AtomicExpression returns TrapExpression
	 *     TrapExpression returns TrapExpression
	 *     Expression returns TrapExpression
	 *     BooleanExpression returns TrapExpression
	 *     OrExpression returns TrapExpression
	 *     OrExpression.OperatorExpression_1_0 returns TrapExpression
	 *     AndExpression returns TrapExpression
	 *     AndExpression.OperatorExpression_1_0 returns TrapExpression
	 *     CompareOperation returns TrapExpression
	 *     CompareOperation.OperatorExpression_1_0 returns TrapExpression
	 *     NotOrValuedExpression returns TrapExpression
	 *     NotExpression returns TrapExpression
	 *     ValuedExpression returns TrapExpression
	 *     AddExpression returns TrapExpression
	 *     AddExpression.OperatorExpression_1_0 returns TrapExpression
	 *     SubExpression returns TrapExpression
	 *     SubExpression.OperatorExpression_1_0 returns TrapExpression
	 *     MultExpression returns TrapExpression
	 *     MultExpression.OperatorExpression_1_0 returns TrapExpression
	 *     DivExpression returns TrapExpression
	 *     DivExpression.OperatorExpression_1_0 returns TrapExpression
	 *     ModExpression returns TrapExpression
	 *     ModExpression.OperatorExpression_1_0 returns TrapExpression
	 *     NegExpression returns TrapExpression
	 *     AtomicValuedExpression returns TrapExpression
	 *     Root returns TrapExpression
	 *     BoolExpression returns TrapExpression
	 *     LogicalOrExpression returns TrapExpression
	 *     LogicalOrExpression.OperatorExpression_1_0 returns TrapExpression
	 *     LogicalAndExpression returns TrapExpression
	 *     LogicalAndExpression.OperatorExpression_1_0 returns TrapExpression
	 *     BitwiseOrExpression returns TrapExpression
	 *     BitwiseOrExpression.OperatorExpression_1_0 returns TrapExpression
	 *     BitwiseAndExpression returns TrapExpression
	 *     BitwiseAndExpression.OperatorExpression_1_0 returns TrapExpression
	 *
	 * Constraint:
	 *     trap=[ISignal|ID]
	 */
	protected void sequence_TrapExpression(ISerializationContext context, TrapExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EsterelPackage.Literals.TRAP_EXPRESSION__TRAP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EsterelPackage.Literals.TRAP_EXPRESSION__TRAP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTrapExpressionAccess().getTrapISignalIDTerminalRuleCall_2_0_1(), semanticObject.getTrap());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     StatementContainerInterface returns TrapHandler
	 *     TrapHandler returns TrapHandler
	 *
	 * Constraint:
	 *     (annotations+=Annotation* trapExpr=TrapExpr statements+=EsterelStatement* statements+=EsterelStatement?)
	 */
	protected void sequence_TrapHandler(ISerializationContext context, TrapHandler semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TrapExpr returns TrapReferenceExpr
	 *     SignalExpression returns TrapReferenceExpr
	 *     SignalExpression.OperatorExpression_1_0 returns TrapReferenceExpr
	 *     SignalAndExpression returns TrapReferenceExpr
	 *     SignalAndExpression.OperatorExpression_1_0 returns TrapReferenceExpr
	 *     SignalNotExpression returns TrapReferenceExpr
	 *     SignalAtomicExpression returns TrapReferenceExpr
	 *     TrapReferenceExpr returns TrapReferenceExpr
	 *
	 * Constraint:
	 *     valuedObject=[TrapSignal|ID]
	 */
	protected void sequence_TrapReferenceExpr(ISerializationContext context, TrapReferenceExpr semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, KExpressionsPackage.Literals.VALUED_OBJECT_REFERENCE__VALUED_OBJECT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KExpressionsPackage.Literals.VALUED_OBJECT_REFERENCE__VALUED_OBJECT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTrapReferenceExprAccess().getValuedObjectTrapSignalIDTerminalRuleCall_1_0_1(), semanticObject.getValuedObject());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TrapSignal returns TrapSignal
	 *     Esterel_ValuedObject returns TrapSignal
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         (
	 *             type=Esterel_ValueType | 
	 *             typeID=ID | 
	 *             ((type=Esterel_ValueType | typeID=ID) (func=[Function|ID] | combineOperator=Esterel_CombineOperator)) | 
	 *             type=Esterel_ValueType | 
	 *             typeID=ID | 
	 *             ((type=Esterel_ValueType | typeID=ID) (func=[Function|ID] | combineOperator=Esterel_CombineOperator)) | 
	 *             (
	 *                 expression=Expression 
	 *                 (type=Esterel_ValueType | typeID=ID | ((type=Esterel_ValueType | typeID=ID) (func=[Function|ID] | combineOperator=Esterel_CombineOperator)))
	 *             )
	 *         )?
	 *     )
	 */
	protected void sequence_TrapSignal(ISerializationContext context, TrapSignal semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StatementContainerInterface returns Trap
	 *     EsterelStatement returns Trap
	 *     AtomicStatement returns Trap
	 *     Trap returns Trap
	 *
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         trapSignals+=TrapSignal 
	 *         trapSignals+=TrapSignal* 
	 *         statements+=EsterelStatement* 
	 *         statements+=EsterelStatement? 
	 *         trapHandler+=TrapHandler*
	 *     )
	 */
	protected void sequence_Trap(ISerializationContext context, Trap semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypeDecl returns TypeDecl
	 *
	 * Constraint:
	 *     (annotations+=Annotation* types+=Type types+=Type*)
	 */
	protected void sequence_TypeDecl(ISerializationContext context, TypeDecl semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypeIdentifier returns EsterelType
	 *
	 * Constraint:
	 *     estType=[Type|ID]
	 */
	protected void sequence_TypeIdentifier(ISerializationContext context, EsterelType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EsterelPackage.Literals.ESTEREL_TYPE__EST_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EsterelPackage.Literals.ESTEREL_TYPE__EST_TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTypeIdentifierAccess().getEstTypeTypeIDTerminalRuleCall_3_1_0_1(), semanticObject.getEstType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TypeIdentifier returns TypeIdentifier
	 *
	 * Constraint:
	 *     (type=Esterel_ValueType | typeID=ID | ((type=Esterel_ValueType | typeID=ID) operator=Esterel_CombineOperator))
	 */
	protected void sequence_TypeIdentifier(ISerializationContext context, TypeIdentifier semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypeRenaming returns TypeRenaming
	 *
	 * Constraint:
	 *     ((newName=[Type|ID] | newType=Esterel_ValueType) oldName=[Type|ID])
	 */
	protected void sequence_TypeRenaming(ISerializationContext context, TypeRenaming semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Type
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Type(ISerializationContext context, Type semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EsterelPackage.Literals.TYPE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EsterelPackage.Literals.TYPE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTypeAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ValuedObjectTestExpression returns OperatorExpression
	 *
	 * Constraint:
	 *     (
	 *         (operator=Esterel_PreOperator subExpressions+=ValuedObjectTestExpression) | 
	 *         (operator=Esterel_ValueTestOperator subExpressions+=ValuedObjectReference)
	 *     )
	 */
	protected void sequence_ValuedObjectTestExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VariableDecl returns VariableDecl
	 *
	 * Constraint:
	 *     (variables+=IVariable variables+=IVariable* type=TypeIdentifier)
	 */
	protected void sequence_VariableDecl(ISerializationContext context, VariableDecl semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
