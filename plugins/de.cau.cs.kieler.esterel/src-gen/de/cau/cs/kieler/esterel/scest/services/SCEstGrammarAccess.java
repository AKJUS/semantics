/*
 * generated by Xtext
 */
package de.cau.cs.kieler.esterel.scest.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import de.cau.cs.kieler.esterel.services.EsterelGrammarAccess;
import de.cau.cs.kieler.scl.services.SCLGrammarAccess;
import de.cau.cs.kieler.kexpressions.kext.services.KExtGrammarAccess;
import de.cau.cs.kieler.kexpressions.keffects.services.KEffectsGrammarAccess;
import de.cau.cs.kieler.kexpressions.services.KExpressionsGrammarAccess;
import de.cau.cs.kieler.annotations.services.AnnotationsGrammarAccess;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SCEstGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SCEstProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.SCEstProgram");
		private final Assignment cModulesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cModulesSCEstModuleParserRuleCall_0 = (RuleCall)cModulesAssignment.eContents().get(0);
		
		////  root rule. a SCEst file can contain multiple modules
		//SCEstProgram hidden(SL_COMMENT, ML_COMMENT, WS):
		//	modules+=SCEstModule*;
		@Override public ParserRule getRule() { return rule; }

		//modules+=SCEstModule*
		public Assignment getModulesAssignment() { return cModulesAssignment; }

		//SCEstModule
		public RuleCall getModulesSCEstModuleParserRuleCall_0() { return cModulesSCEstModuleParserRuleCall_0; }
	}

	public class SCEstModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.SCEstModule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSCEstModuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Keyword cModuleKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Alternatives cAlternatives_5_0_0 = (Alternatives)cGroup_5_0.eContents().get(0);
		private final Assignment cIntSignalDeclsAssignment_5_0_0_0 = (Assignment)cAlternatives_5_0_0.eContents().get(0);
		private final RuleCall cIntSignalDeclsInterfaceSignalDeclParserRuleCall_5_0_0_0_0 = (RuleCall)cIntSignalDeclsAssignment_5_0_0_0.eContents().get(0);
		private final Assignment cIntTypeDeclsAssignment_5_0_0_1 = (Assignment)cAlternatives_5_0_0.eContents().get(1);
		private final RuleCall cIntTypeDeclsTypeDeclParserRuleCall_5_0_0_1_0 = (RuleCall)cIntTypeDeclsAssignment_5_0_0_1.eContents().get(0);
		private final Assignment cIntSensorDeclsAssignment_5_0_0_2 = (Assignment)cAlternatives_5_0_0.eContents().get(2);
		private final RuleCall cIntSensorDeclsSensorDeclParserRuleCall_5_0_0_2_0 = (RuleCall)cIntSensorDeclsAssignment_5_0_0_2.eContents().get(0);
		private final Assignment cIntConstantDeclsAssignment_5_0_0_3 = (Assignment)cAlternatives_5_0_0.eContents().get(3);
		private final RuleCall cIntConstantDeclsConstantDeclsParserRuleCall_5_0_0_3_0 = (RuleCall)cIntConstantDeclsAssignment_5_0_0_3.eContents().get(0);
		private final Assignment cIntRelationDeclsAssignment_5_0_0_4 = (Assignment)cAlternatives_5_0_0.eContents().get(4);
		private final RuleCall cIntRelationDeclsRelationDeclParserRuleCall_5_0_0_4_0 = (RuleCall)cIntRelationDeclsAssignment_5_0_0_4.eContents().get(0);
		private final Assignment cIntTaskDeclsAssignment_5_0_0_5 = (Assignment)cAlternatives_5_0_0.eContents().get(5);
		private final RuleCall cIntTaskDeclsTaskDeclParserRuleCall_5_0_0_5_0 = (RuleCall)cIntTaskDeclsAssignment_5_0_0_5.eContents().get(0);
		private final Assignment cIntFunctionDeclsAssignment_5_0_0_6 = (Assignment)cAlternatives_5_0_0.eContents().get(6);
		private final RuleCall cIntFunctionDeclsFunctionDeclParserRuleCall_5_0_0_6_0 = (RuleCall)cIntFunctionDeclsAssignment_5_0_0_6.eContents().get(0);
		private final Assignment cIntProcedureDeclsAssignment_5_0_0_7 = (Assignment)cAlternatives_5_0_0.eContents().get(7);
		private final RuleCall cIntProcedureDeclsProcedureDeclParserRuleCall_5_0_0_7_0 = (RuleCall)cIntProcedureDeclsAssignment_5_0_0_7.eContents().get(0);
		private final Group cGroup_5_0_1 = (Group)cGroup_5_0.eContents().get(1);
		private final Alternatives cAlternatives_5_0_1_0 = (Alternatives)cGroup_5_0_1.eContents().get(0);
		private final Group cGroup_5_0_1_0_0 = (Group)cAlternatives_5_0_1_0.eContents().get(0);
		private final Assignment cStatementsAssignment_5_0_1_0_0_0 = (Assignment)cGroup_5_0_1_0_0.eContents().get(0);
		private final RuleCall cStatementsSCEstStatementParserRuleCall_5_0_1_0_0_0_0 = (RuleCall)cStatementsAssignment_5_0_1_0_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_0_1_0_0_1 = (Keyword)cGroup_5_0_1_0_0.eContents().get(1);
		private final Assignment cStatementsAssignment_5_0_1_0_1 = (Assignment)cAlternatives_5_0_1_0.eContents().get(1);
		private final RuleCall cStatementsMetaStatementParserRuleCall_5_0_1_0_1_0 = (RuleCall)cStatementsAssignment_5_0_1_0_1.eContents().get(0);
		private final Assignment cStatementsAssignment_5_0_1_1 = (Assignment)cGroup_5_0_1.eContents().get(1);
		private final RuleCall cStatementsSCEstStatementParserRuleCall_5_0_1_1_0 = (RuleCall)cStatementsAssignment_5_0_1_1.eContents().get(0);
		private final Alternatives cAlternatives_5_0_2 = (Alternatives)cGroup_5_0.eContents().get(2);
		private final Group cGroup_5_0_2_0 = (Group)cAlternatives_5_0_2.eContents().get(0);
		private final Keyword cEndKeyword_5_0_2_0_0 = (Keyword)cGroup_5_0_2_0.eContents().get(0);
		private final Keyword cModuleKeyword_5_0_2_0_1 = (Keyword)cGroup_5_0_2_0.eContents().get(1);
		private final Keyword cFullStopKeyword_5_0_2_1 = (Keyword)cAlternatives_5_0_2.eContents().get(1);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final Assignment cDeclarationsAssignment_5_1_0 = (Assignment)cGroup_5_1.eContents().get(0);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_5_1_0_0 = (RuleCall)cDeclarationsAssignment_5_1_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1_1 = (Keyword)cGroup_5_1.eContents().get(1);
		private final Group cGroup_5_1_2 = (Group)cGroup_5_1.eContents().get(2);
		private final Alternatives cAlternatives_5_1_2_0 = (Alternatives)cGroup_5_1_2.eContents().get(0);
		private final Group cGroup_5_1_2_0_0 = (Group)cAlternatives_5_1_2_0.eContents().get(0);
		private final Assignment cStatementsAssignment_5_1_2_0_0_0 = (Assignment)cGroup_5_1_2_0_0.eContents().get(0);
		private final RuleCall cStatementsSCEstStatementParserRuleCall_5_1_2_0_0_0_0 = (RuleCall)cStatementsAssignment_5_1_2_0_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_1_2_0_0_1 = (Keyword)cGroup_5_1_2_0_0.eContents().get(1);
		private final Assignment cStatementsAssignment_5_1_2_0_1 = (Assignment)cAlternatives_5_1_2_0.eContents().get(1);
		private final RuleCall cStatementsMetaStatementParserRuleCall_5_1_2_0_1_0 = (RuleCall)cStatementsAssignment_5_1_2_0_1.eContents().get(0);
		private final Assignment cStatementsAssignment_5_1_2_1 = (Assignment)cGroup_5_1_2.eContents().get(1);
		private final RuleCall cStatementsSCEstStatementParserRuleCall_5_1_2_1_0 = (RuleCall)cStatementsAssignment_5_1_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_1_3 = (Keyword)cGroup_5_1.eContents().get(3);
		
		/// * ###################################################
		// * ###                 7.2 Modules                 ###
		// * ###################################################
		// * / // ==> module: a module consists of an interface and a body
		//// -------------------------------------
		//SCEstModule:
		//	{SCEstModule} annotations+=Annotation*
		//	"module" name=ID ":" ((intSignalDecls+=InterfaceSignalDecl
		//	| intTypeDecls+=TypeDecl
		//	| intSensorDecls+=SensorDecl
		//	| intConstantDecls+=ConstantDecls
		//	| intRelationDecls+=RelationDecl
		//	| intTaskDecls+=TaskDecl
		//	| intFunctionDecls+=FunctionDecl
		//	| intProcedureDecls+=ProcedureDecl)* ((statements+=SCEstStatement ";" | statements+=MetaStatement)*
		//	statements+=SCEstStatement?) ("end" "module" | ".") | declarations+=Declaration*
		//	'{' ((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?)
		//	'}');
		@Override public ParserRule getRule() { return rule; }

		//{SCEstModule} annotations+=Annotation* "module" name=ID ":" ((intSignalDecls+=InterfaceSignalDecl |
		//intTypeDecls+=TypeDecl | intSensorDecls+=SensorDecl | intConstantDecls+=ConstantDecls | intRelationDecls+=RelationDecl
		//| intTaskDecls+=TaskDecl | intFunctionDecls+=FunctionDecl | intProcedureDecls+=ProcedureDecl)*
		//((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?) ("end" "module" | ".") |
		//declarations+=Declaration* '{' ((statements+=SCEstStatement ";" | statements+=MetaStatement)*
		//statements+=SCEstStatement?) '}')
		public Group getGroup() { return cGroup; }

		//{SCEstModule}
		public Action getSCEstModuleAction_0() { return cSCEstModuleAction_0; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() { return cAnnotationsAnnotationParserRuleCall_1_0; }

		//"module"
		public Keyword getModuleKeyword_2() { return cModuleKeyword_2; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }

		//((intSignalDecls+=InterfaceSignalDecl | intTypeDecls+=TypeDecl | intSensorDecls+=SensorDecl |
		//intConstantDecls+=ConstantDecls | intRelationDecls+=RelationDecl | intTaskDecls+=TaskDecl |
		//intFunctionDecls+=FunctionDecl | intProcedureDecls+=ProcedureDecl)* ((statements+=SCEstStatement ";" |
		//statements+=MetaStatement)* statements+=SCEstStatement?) ("end" "module" | ".") | declarations+=Declaration* '{'
		//((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?) '}')
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//(intSignalDecls+=InterfaceSignalDecl | intTypeDecls+=TypeDecl | intSensorDecls+=SensorDecl |
		//intConstantDecls+=ConstantDecls | intRelationDecls+=RelationDecl | intTaskDecls+=TaskDecl |
		//intFunctionDecls+=FunctionDecl | intProcedureDecls+=ProcedureDecl)* ((statements+=SCEstStatement ";" |
		//statements+=MetaStatement)* statements+=SCEstStatement?) ("end" "module" | ".")
		public Group getGroup_5_0() { return cGroup_5_0; }

		//(intSignalDecls+=InterfaceSignalDecl | intTypeDecls+=TypeDecl | intSensorDecls+=SensorDecl |
		//intConstantDecls+=ConstantDecls | intRelationDecls+=RelationDecl | intTaskDecls+=TaskDecl |
		//intFunctionDecls+=FunctionDecl | intProcedureDecls+=ProcedureDecl)*
		public Alternatives getAlternatives_5_0_0() { return cAlternatives_5_0_0; }

		//intSignalDecls+=InterfaceSignalDecl
		public Assignment getIntSignalDeclsAssignment_5_0_0_0() { return cIntSignalDeclsAssignment_5_0_0_0; }

		//InterfaceSignalDecl
		public RuleCall getIntSignalDeclsInterfaceSignalDeclParserRuleCall_5_0_0_0_0() { return cIntSignalDeclsInterfaceSignalDeclParserRuleCall_5_0_0_0_0; }

		//intTypeDecls+=TypeDecl
		public Assignment getIntTypeDeclsAssignment_5_0_0_1() { return cIntTypeDeclsAssignment_5_0_0_1; }

		//TypeDecl
		public RuleCall getIntTypeDeclsTypeDeclParserRuleCall_5_0_0_1_0() { return cIntTypeDeclsTypeDeclParserRuleCall_5_0_0_1_0; }

		//intSensorDecls+=SensorDecl
		public Assignment getIntSensorDeclsAssignment_5_0_0_2() { return cIntSensorDeclsAssignment_5_0_0_2; }

		//SensorDecl
		public RuleCall getIntSensorDeclsSensorDeclParserRuleCall_5_0_0_2_0() { return cIntSensorDeclsSensorDeclParserRuleCall_5_0_0_2_0; }

		//intConstantDecls+=ConstantDecls
		public Assignment getIntConstantDeclsAssignment_5_0_0_3() { return cIntConstantDeclsAssignment_5_0_0_3; }

		//ConstantDecls
		public RuleCall getIntConstantDeclsConstantDeclsParserRuleCall_5_0_0_3_0() { return cIntConstantDeclsConstantDeclsParserRuleCall_5_0_0_3_0; }

		//intRelationDecls+=RelationDecl
		public Assignment getIntRelationDeclsAssignment_5_0_0_4() { return cIntRelationDeclsAssignment_5_0_0_4; }

		//RelationDecl
		public RuleCall getIntRelationDeclsRelationDeclParserRuleCall_5_0_0_4_0() { return cIntRelationDeclsRelationDeclParserRuleCall_5_0_0_4_0; }

		//intTaskDecls+=TaskDecl
		public Assignment getIntTaskDeclsAssignment_5_0_0_5() { return cIntTaskDeclsAssignment_5_0_0_5; }

		//TaskDecl
		public RuleCall getIntTaskDeclsTaskDeclParserRuleCall_5_0_0_5_0() { return cIntTaskDeclsTaskDeclParserRuleCall_5_0_0_5_0; }

		//intFunctionDecls+=FunctionDecl
		public Assignment getIntFunctionDeclsAssignment_5_0_0_6() { return cIntFunctionDeclsAssignment_5_0_0_6; }

		//FunctionDecl
		public RuleCall getIntFunctionDeclsFunctionDeclParserRuleCall_5_0_0_6_0() { return cIntFunctionDeclsFunctionDeclParserRuleCall_5_0_0_6_0; }

		//intProcedureDecls+=ProcedureDecl
		public Assignment getIntProcedureDeclsAssignment_5_0_0_7() { return cIntProcedureDeclsAssignment_5_0_0_7; }

		//ProcedureDecl
		public RuleCall getIntProcedureDeclsProcedureDeclParserRuleCall_5_0_0_7_0() { return cIntProcedureDeclsProcedureDeclParserRuleCall_5_0_0_7_0; }

		//((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?)
		public Group getGroup_5_0_1() { return cGroup_5_0_1; }

		//(statements+=SCEstStatement ";" | statements+=MetaStatement)*
		public Alternatives getAlternatives_5_0_1_0() { return cAlternatives_5_0_1_0; }

		//statements+=SCEstStatement ";"
		public Group getGroup_5_0_1_0_0() { return cGroup_5_0_1_0_0; }

		//statements+=SCEstStatement
		public Assignment getStatementsAssignment_5_0_1_0_0_0() { return cStatementsAssignment_5_0_1_0_0_0; }

		//SCEstStatement
		public RuleCall getStatementsSCEstStatementParserRuleCall_5_0_1_0_0_0_0() { return cStatementsSCEstStatementParserRuleCall_5_0_1_0_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_5_0_1_0_0_1() { return cSemicolonKeyword_5_0_1_0_0_1; }

		//statements+=MetaStatement
		public Assignment getStatementsAssignment_5_0_1_0_1() { return cStatementsAssignment_5_0_1_0_1; }

		//MetaStatement
		public RuleCall getStatementsMetaStatementParserRuleCall_5_0_1_0_1_0() { return cStatementsMetaStatementParserRuleCall_5_0_1_0_1_0; }

		//statements+=SCEstStatement?
		public Assignment getStatementsAssignment_5_0_1_1() { return cStatementsAssignment_5_0_1_1; }

		//SCEstStatement
		public RuleCall getStatementsSCEstStatementParserRuleCall_5_0_1_1_0() { return cStatementsSCEstStatementParserRuleCall_5_0_1_1_0; }

		//("end" "module" | ".")
		public Alternatives getAlternatives_5_0_2() { return cAlternatives_5_0_2; }

		//"end" "module"
		public Group getGroup_5_0_2_0() { return cGroup_5_0_2_0; }

		//"end"
		public Keyword getEndKeyword_5_0_2_0_0() { return cEndKeyword_5_0_2_0_0; }

		//"module"
		public Keyword getModuleKeyword_5_0_2_0_1() { return cModuleKeyword_5_0_2_0_1; }

		//"."
		public Keyword getFullStopKeyword_5_0_2_1() { return cFullStopKeyword_5_0_2_1; }

		//declarations+=Declaration* '{' ((statements+=SCEstStatement ";" | statements+=MetaStatement)*
		//statements+=SCEstStatement?) '}'
		public Group getGroup_5_1() { return cGroup_5_1; }

		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment_5_1_0() { return cDeclarationsAssignment_5_1_0; }

		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_5_1_0_0() { return cDeclarationsDeclarationParserRuleCall_5_1_0_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_1_1() { return cLeftCurlyBracketKeyword_5_1_1; }

		//((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?)
		public Group getGroup_5_1_2() { return cGroup_5_1_2; }

		//(statements+=SCEstStatement ";" | statements+=MetaStatement)*
		public Alternatives getAlternatives_5_1_2_0() { return cAlternatives_5_1_2_0; }

		//statements+=SCEstStatement ";"
		public Group getGroup_5_1_2_0_0() { return cGroup_5_1_2_0_0; }

		//statements+=SCEstStatement
		public Assignment getStatementsAssignment_5_1_2_0_0_0() { return cStatementsAssignment_5_1_2_0_0_0; }

		//SCEstStatement
		public RuleCall getStatementsSCEstStatementParserRuleCall_5_1_2_0_0_0_0() { return cStatementsSCEstStatementParserRuleCall_5_1_2_0_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_5_1_2_0_0_1() { return cSemicolonKeyword_5_1_2_0_0_1; }

		//statements+=MetaStatement
		public Assignment getStatementsAssignment_5_1_2_0_1() { return cStatementsAssignment_5_1_2_0_1; }

		//MetaStatement
		public RuleCall getStatementsMetaStatementParserRuleCall_5_1_2_0_1_0() { return cStatementsMetaStatementParserRuleCall_5_1_2_0_1_0; }

		//statements+=SCEstStatement?
		public Assignment getStatementsAssignment_5_1_2_1() { return cStatementsAssignment_5_1_2_1; }

		//SCEstStatement
		public RuleCall getStatementsSCEstStatementParserRuleCall_5_1_2_1_0() { return cStatementsSCEstStatementParserRuleCall_5_1_2_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_5_1_3() { return cRightCurlyBracketKeyword_5_1_3; }
	}

	public class StatementContainerInterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.StatementContainerInterface");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSCEstModuleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConditionalParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cElseScopeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cThreadParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cScopeStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		/// * ###################################################
		// * ###               7.5 Statements                ###
		// * ###################################################
		// * / StatementContainerInterface scl::StatementContainer:
		//	SCEstModule | Conditional | ElseScope | Thread | ScopeStatement
		@Override public ParserRule getRule() { return rule; }

		//SCEstModule | Conditional | ElseScope | Thread | ScopeStatement
		public Alternatives getAlternatives() { return cAlternatives; }

		//SCEstModule
		public RuleCall getSCEstModuleParserRuleCall_0() { return cSCEstModuleParserRuleCall_0; }

		//Conditional
		public RuleCall getConditionalParserRuleCall_1() { return cConditionalParserRuleCall_1; }

		//ElseScope
		public RuleCall getElseScopeParserRuleCall_2() { return cElseScopeParserRuleCall_2; }

		//Thread
		public RuleCall getThreadParserRuleCall_3() { return cThreadParserRuleCall_3; }

		//ScopeStatement
		public RuleCall getScopeStatementParserRuleCall_4() { return cScopeStatementParserRuleCall_4; }
	}

	public class SCEstStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.SCEstStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEsterelParallelParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSCEstAtomicStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// ==> Statement
		//// -------------------------------------
		//SCEstStatement scl::Statement:
		//	EsterelParallel | SCEstAtomicStatement
		@Override public ParserRule getRule() { return rule; }

		//EsterelParallel | SCEstAtomicStatement
		public Alternatives getAlternatives() { return cAlternatives; }

		//EsterelParallel
		public RuleCall getEsterelParallelParserRuleCall_0() { return cEsterelParallelParserRuleCall_0; }

		//SCEstAtomicStatement
		public RuleCall getSCEstAtomicStatementParserRuleCall_1() { return cSCEstAtomicStatementParserRuleCall_1; }
	}

	public class SCEstAtomicStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.SCEstAtomicStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAbortParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEsterelAssignmentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAwaitParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBlockParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cProcCallParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDoParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cEmitParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cEveryDoParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cExitParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cExecParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cHaltParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cIfTestParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cLocalSignalDeclParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cLoopParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cNothingParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cPauseParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cPresentParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cRepeatParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final RuleCall cRunParserRuleCall_18 = (RuleCall)cAlternatives.eContents().get(18);
		private final RuleCall cSuspendParserRuleCall_19 = (RuleCall)cAlternatives.eContents().get(19);
		private final RuleCall cSustainParserRuleCall_20 = (RuleCall)cAlternatives.eContents().get(20);
		private final RuleCall cTrapParserRuleCall_21 = (RuleCall)cAlternatives.eContents().get(21);
		private final RuleCall cLocalVariableParserRuleCall_22 = (RuleCall)cAlternatives.eContents().get(22);
		private final RuleCall cGotoParserRuleCall_23 = (RuleCall)cAlternatives.eContents().get(23);
		private final RuleCall cUnEmitParserRuleCall_24 = (RuleCall)cAlternatives.eContents().get(24);
		private final RuleCall cSetParserRuleCall_25 = (RuleCall)cAlternatives.eContents().get(25);
		private final RuleCall cAssignmentParserRuleCall_26 = (RuleCall)cAlternatives.eContents().get(26);
		private final RuleCall cParallelParserRuleCall_27 = (RuleCall)cAlternatives.eContents().get(27);
		private final RuleCall cConditionalParserRuleCall_28 = (RuleCall)cAlternatives.eContents().get(28);
		
		//// ==> Atomic Statements
		//// -------------------------------------
		//SCEstAtomicStatement scl::Statement:
		//	Abort | EsterelAssignment | Await | Block | ProcCall | Do | Emit | EveryDo | Exit | Exec | Halt | IfTest |
		//	LocalSignalDecl | Loop | Nothing | Pause | Present | Repeat | Run | Suspend | Sustain | Trap | LocalVariable | Goto |
		//	UnEmit | Set | Assignment | Parallel | Conditional
		@Override public ParserRule getRule() { return rule; }

		//Abort | EsterelAssignment | Await | Block | ProcCall | Do | Emit | EveryDo | Exit | Exec | Halt | IfTest |
		//LocalSignalDecl | Loop | Nothing | Pause | Present | Repeat | Run | Suspend | Sustain | Trap | LocalVariable | Goto |
		//UnEmit | Set | Assignment | Parallel | Conditional
		public Alternatives getAlternatives() { return cAlternatives; }

		//Abort
		public RuleCall getAbortParserRuleCall_0() { return cAbortParserRuleCall_0; }

		//EsterelAssignment
		public RuleCall getEsterelAssignmentParserRuleCall_1() { return cEsterelAssignmentParserRuleCall_1; }

		//Await
		public RuleCall getAwaitParserRuleCall_2() { return cAwaitParserRuleCall_2; }

		//Block
		public RuleCall getBlockParserRuleCall_3() { return cBlockParserRuleCall_3; }

		//ProcCall
		public RuleCall getProcCallParserRuleCall_4() { return cProcCallParserRuleCall_4; }

		//Do
		public RuleCall getDoParserRuleCall_5() { return cDoParserRuleCall_5; }

		//Emit
		public RuleCall getEmitParserRuleCall_6() { return cEmitParserRuleCall_6; }

		//EveryDo
		public RuleCall getEveryDoParserRuleCall_7() { return cEveryDoParserRuleCall_7; }

		//Exit
		public RuleCall getExitParserRuleCall_8() { return cExitParserRuleCall_8; }

		//Exec
		public RuleCall getExecParserRuleCall_9() { return cExecParserRuleCall_9; }

		//Halt
		public RuleCall getHaltParserRuleCall_10() { return cHaltParserRuleCall_10; }

		//IfTest
		public RuleCall getIfTestParserRuleCall_11() { return cIfTestParserRuleCall_11; }

		//LocalSignalDecl
		public RuleCall getLocalSignalDeclParserRuleCall_12() { return cLocalSignalDeclParserRuleCall_12; }

		//Loop
		public RuleCall getLoopParserRuleCall_13() { return cLoopParserRuleCall_13; }

		//Nothing
		public RuleCall getNothingParserRuleCall_14() { return cNothingParserRuleCall_14; }

		//Pause
		public RuleCall getPauseParserRuleCall_15() { return cPauseParserRuleCall_15; }

		//Present
		public RuleCall getPresentParserRuleCall_16() { return cPresentParserRuleCall_16; }

		//Repeat
		public RuleCall getRepeatParserRuleCall_17() { return cRepeatParserRuleCall_17; }

		//Run
		public RuleCall getRunParserRuleCall_18() { return cRunParserRuleCall_18; }

		//Suspend
		public RuleCall getSuspendParserRuleCall_19() { return cSuspendParserRuleCall_19; }

		//Sustain
		public RuleCall getSustainParserRuleCall_20() { return cSustainParserRuleCall_20; }

		//Trap
		public RuleCall getTrapParserRuleCall_21() { return cTrapParserRuleCall_21; }

		//LocalVariable
		public RuleCall getLocalVariableParserRuleCall_22() { return cLocalVariableParserRuleCall_22; }

		//Goto
		public RuleCall getGotoParserRuleCall_23() { return cGotoParserRuleCall_23; }

		//UnEmit
		public RuleCall getUnEmitParserRuleCall_24() { return cUnEmitParserRuleCall_24; }

		//Set
		public RuleCall getSetParserRuleCall_25() { return cSetParserRuleCall_25; }

		//Assignment
		public RuleCall getAssignmentParserRuleCall_26() { return cAssignmentParserRuleCall_26; }

		//Parallel
		public RuleCall getParallelParserRuleCall_27() { return cParallelParserRuleCall_27; }

		//Conditional
		public RuleCall getConditionalParserRuleCall_28() { return cConditionalParserRuleCall_28; }
	}

	public class EsterelParallelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.EsterelParallel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cThreadsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cThreadsEsterelThreadParserRuleCall_0_0 = (RuleCall)cThreadsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cThreadsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cThreadsEsterelThreadParserRuleCall_1_1_0 = (RuleCall)cThreadsAssignment_1_1.eContents().get(0);
		
		//// ==> Parallel: at least two threads
		//// -------------------------------------
		//EsterelParallel esterel::EsterelParallel:
		//	threads+=EsterelThread ("||" threads+=EsterelThread)+
		@Override public ParserRule getRule() { return rule; }

		//threads+=EsterelThread ("||" threads+=EsterelThread)+
		public Group getGroup() { return cGroup; }

		//threads+=EsterelThread
		public Assignment getThreadsAssignment_0() { return cThreadsAssignment_0; }

		//EsterelThread
		public RuleCall getThreadsEsterelThreadParserRuleCall_0_0() { return cThreadsEsterelThreadParserRuleCall_0_0; }

		//("||" threads+=EsterelThread)+
		public Group getGroup_1() { return cGroup_1; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_0() { return cVerticalLineVerticalLineKeyword_1_0; }

		//threads+=EsterelThread
		public Assignment getThreadsAssignment_1_1() { return cThreadsAssignment_1_1; }

		//EsterelThread
		public RuleCall getThreadsEsterelThreadParserRuleCall_1_1_0() { return cThreadsEsterelThreadParserRuleCall_1_1_0; }
	}

	public class EsterelThreadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.EsterelThread");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEsterelThreadAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cStatementsAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cStatementsSCEstAtomicStatementParserRuleCall_1_0_0_0 = (RuleCall)cStatementsAssignment_1_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cStatementsAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cStatementsMetaStatementParserRuleCall_1_1_0 = (RuleCall)cStatementsAssignment_1_1.eContents().get(0);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsSCEstAtomicStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		
		//// ==> Thread
		//// One AtomicStatement or multiple AtomicStatements
		//// It doesn't include 'Parallel' statements because they would be parallel to 
		//// the existing thread and therefore included in the previous thread list (Parallel.threads).
		//// -------------------------------------
		//EsterelThread esterel::EsterelThread:
		//	{esterel::EsterelThread} (statements+=SCEstAtomicStatement ";" | statements+=MetaStatement)*
		//	statements+=SCEstAtomicStatement?
		@Override public ParserRule getRule() { return rule; }

		//{esterel::EsterelThread} (statements+=SCEstAtomicStatement ";" | statements+=MetaStatement)*
		//statements+=SCEstAtomicStatement?
		public Group getGroup() { return cGroup; }

		//{esterel::EsterelThread}
		public Action getEsterelThreadAction_0() { return cEsterelThreadAction_0; }

		//(statements+=SCEstAtomicStatement ";" | statements+=MetaStatement)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//statements+=SCEstAtomicStatement ";"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//statements+=SCEstAtomicStatement
		public Assignment getStatementsAssignment_1_0_0() { return cStatementsAssignment_1_0_0; }

		//SCEstAtomicStatement
		public RuleCall getStatementsSCEstAtomicStatementParserRuleCall_1_0_0_0() { return cStatementsSCEstAtomicStatementParserRuleCall_1_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1_0_1() { return cSemicolonKeyword_1_0_1; }

		//statements+=MetaStatement
		public Assignment getStatementsAssignment_1_1() { return cStatementsAssignment_1_1; }

		//MetaStatement
		public RuleCall getStatementsMetaStatementParserRuleCall_1_1_0() { return cStatementsMetaStatementParserRuleCall_1_1_0; }

		//statements+=SCEstAtomicStatement?
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//SCEstAtomicStatement
		public RuleCall getStatementsSCEstAtomicStatementParserRuleCall_2_0() { return cStatementsSCEstAtomicStatementParserRuleCall_2_0; }
	}

	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cGroup_3.eContents().get(0);
		private final Group cGroup_3_0_0 = (Group)cAlternatives_3_0.eContents().get(0);
		private final Assignment cStatementsAssignment_3_0_0_0 = (Assignment)cGroup_3_0_0.eContents().get(0);
		private final RuleCall cStatementsSCEstStatementParserRuleCall_3_0_0_0_0 = (RuleCall)cStatementsAssignment_3_0_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_0_0_1 = (Keyword)cGroup_3_0_0.eContents().get(1);
		private final Assignment cStatementsAssignment_3_0_1 = (Assignment)cAlternatives_3_0.eContents().get(1);
		private final RuleCall cStatementsMetaStatementParserRuleCall_3_0_1_0 = (RuleCall)cStatementsAssignment_3_0_1.eContents().get(0);
		private final Assignment cStatementsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cStatementsSCEstStatementParserRuleCall_3_1_0 = (RuleCall)cStatementsAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// ==> Block
		//// -------------------------------------    
		//Block esterel::Block:
		//	{esterel::Block} annotations+=Annotation*
		//	"[" ((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?) "]"
		@Override public ParserRule getRule() { return rule; }

		//{esterel::Block} annotations+=Annotation* "[" ((statements+=SCEstStatement ";" | statements+=MetaStatement)*
		//statements+=SCEstStatement?) "]"
		public Group getGroup() { return cGroup; }

		//{esterel::Block}
		public Action getBlockAction_0() { return cBlockAction_0; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() { return cAnnotationsAnnotationParserRuleCall_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?)
		public Group getGroup_3() { return cGroup_3; }

		//(statements+=SCEstStatement ";" | statements+=MetaStatement)*
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }

		//statements+=SCEstStatement ";"
		public Group getGroup_3_0_0() { return cGroup_3_0_0; }

		//statements+=SCEstStatement
		public Assignment getStatementsAssignment_3_0_0_0() { return cStatementsAssignment_3_0_0_0; }

		//SCEstStatement
		public RuleCall getStatementsSCEstStatementParserRuleCall_3_0_0_0_0() { return cStatementsSCEstStatementParserRuleCall_3_0_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_3_0_0_1() { return cSemicolonKeyword_3_0_0_1; }

		//statements+=MetaStatement
		public Assignment getStatementsAssignment_3_0_1() { return cStatementsAssignment_3_0_1; }

		//MetaStatement
		public RuleCall getStatementsMetaStatementParserRuleCall_3_0_1_0() { return cStatementsMetaStatementParserRuleCall_3_0_1_0; }

		//statements+=SCEstStatement?
		public Assignment getStatementsAssignment_3_1() { return cStatementsAssignment_3_1; }

		//SCEstStatement
		public RuleCall getStatementsSCEstStatementParserRuleCall_3_1_0() { return cStatementsSCEstStatementParserRuleCall_3_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class PresentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.Present");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cPresentKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Alternatives cAlternatives_2_0_0 = (Alternatives)cGroup_2_0.eContents().get(0);
		private final Assignment cExpressionAssignment_2_0_0_0 = (Assignment)cAlternatives_2_0_0.eContents().get(0);
		private final RuleCall cExpressionSignalExpressionParserRuleCall_2_0_0_0_0 = (RuleCall)cExpressionAssignment_2_0_0_0.eContents().get(0);
		private final Group cGroup_2_0_0_1 = (Group)cAlternatives_2_0_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2_0_0_1_0 = (Keyword)cGroup_2_0_0_1.eContents().get(0);
		private final Assignment cExpressionAssignment_2_0_0_1_1 = (Assignment)cGroup_2_0_0_1.eContents().get(1);
		private final RuleCall cExpressionSignalExpressionParserRuleCall_2_0_0_1_1_0 = (RuleCall)cExpressionAssignment_2_0_0_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_0_0_1_2 = (Keyword)cGroup_2_0_0_1.eContents().get(2);
		private final Group cGroup_2_0_1 = (Group)cGroup_2_0.eContents().get(1);
		private final Assignment cThenAnnotationsAssignment_2_0_1_0 = (Assignment)cGroup_2_0_1.eContents().get(0);
		private final RuleCall cThenAnnotationsAnnotationParserRuleCall_2_0_1_0_0 = (RuleCall)cThenAnnotationsAssignment_2_0_1_0.eContents().get(0);
		private final Keyword cThenKeyword_2_0_1_1 = (Keyword)cGroup_2_0_1.eContents().get(1);
		private final Group cGroup_2_0_1_2 = (Group)cGroup_2_0_1.eContents().get(2);
		private final Alternatives cAlternatives_2_0_1_2_0 = (Alternatives)cGroup_2_0_1_2.eContents().get(0);
		private final Group cGroup_2_0_1_2_0_0 = (Group)cAlternatives_2_0_1_2_0.eContents().get(0);
		private final Assignment cThenStatementsAssignment_2_0_1_2_0_0_0 = (Assignment)cGroup_2_0_1_2_0_0.eContents().get(0);
		private final RuleCall cThenStatementsSCEstStatementParserRuleCall_2_0_1_2_0_0_0_0 = (RuleCall)cThenStatementsAssignment_2_0_1_2_0_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_0_1_2_0_0_1 = (Keyword)cGroup_2_0_1_2_0_0.eContents().get(1);
		private final Assignment cThenStatementsAssignment_2_0_1_2_0_1 = (Assignment)cAlternatives_2_0_1_2_0.eContents().get(1);
		private final RuleCall cThenStatementsMetaStatementParserRuleCall_2_0_1_2_0_1_0 = (RuleCall)cThenStatementsAssignment_2_0_1_2_0_1.eContents().get(0);
		private final Assignment cThenStatementsAssignment_2_0_1_2_1 = (Assignment)cGroup_2_0_1_2.eContents().get(1);
		private final RuleCall cThenStatementsSCEstStatementParserRuleCall_2_0_1_2_1_0 = (RuleCall)cThenStatementsAssignment_2_0_1_2_1.eContents().get(0);
		private final Assignment cCasesAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cCasesPresentCaseParserRuleCall_2_1_0 = (RuleCall)cCasesAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cElseAnnotationsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cElseAnnotationsAnnotationParserRuleCall_3_0_0 = (RuleCall)cElseAnnotationsAssignment_3_0.eContents().get(0);
		private final Keyword cElseKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Alternatives cAlternatives_3_2_0 = (Alternatives)cGroup_3_2.eContents().get(0);
		private final Group cGroup_3_2_0_0 = (Group)cAlternatives_3_2_0.eContents().get(0);
		private final Assignment cElseStatementsAssignment_3_2_0_0_0 = (Assignment)cGroup_3_2_0_0.eContents().get(0);
		private final RuleCall cElseStatementsSCEstStatementParserRuleCall_3_2_0_0_0_0 = (RuleCall)cElseStatementsAssignment_3_2_0_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_2_0_0_1 = (Keyword)cGroup_3_2_0_0.eContents().get(1);
		private final Assignment cElseStatementsAssignment_3_2_0_1 = (Assignment)cAlternatives_3_2_0.eContents().get(1);
		private final RuleCall cElseStatementsMetaStatementParserRuleCall_3_2_0_1_0 = (RuleCall)cElseStatementsAssignment_3_2_0_1.eContents().get(0);
		private final Assignment cElseStatementsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cElseStatementsSCEstStatementParserRuleCall_3_2_1_0 = (RuleCall)cElseStatementsAssignment_3_2_1.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cPresentKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// ==> 7.5.3 The present Signal Test
		//// -------------------------------------
		//Present esterel::Present:
		//	annotations+=Annotation*
		//	"present" ((expression=SignalExpression
		//	| "[" expression=SignalExpression "]") (thenAnnotations+=Annotation*
		//	"then" ((thenStatements+=SCEstStatement ";" | thenStatements+=MetaStatement)* thenStatements+=SCEstStatement?))?
		//	| cases+=PresentCase+) (elseAnnotations+=Annotation*
		//	"else" ((elseStatements+=SCEstStatement ";" | elseStatements+=MetaStatement)* elseStatements+=SCEstStatement?))?
		//	"end" "present"?
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* "present" ((expression=SignalExpression | "[" expression=SignalExpression "]")
		//(thenAnnotations+=Annotation* "then" ((thenStatements+=SCEstStatement ";" | thenStatements+=MetaStatement)*
		//thenStatements+=SCEstStatement?))? | cases+=PresentCase+) (elseAnnotations+=Annotation* "else"
		//((elseStatements+=SCEstStatement ";" | elseStatements+=MetaStatement)* elseStatements+=SCEstStatement?))? "end"
		//"present"?
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//"present"
		public Keyword getPresentKeyword_1() { return cPresentKeyword_1; }

		//((expression=SignalExpression | "[" expression=SignalExpression "]") (thenAnnotations+=Annotation* "then"
		//((thenStatements+=SCEstStatement ";" | thenStatements+=MetaStatement)* thenStatements+=SCEstStatement?))? |
		//cases+=PresentCase+)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//(expression=SignalExpression | "[" expression=SignalExpression "]") (thenAnnotations+=Annotation* "then"
		//((thenStatements+=SCEstStatement ";" | thenStatements+=MetaStatement)* thenStatements+=SCEstStatement?))?
		public Group getGroup_2_0() { return cGroup_2_0; }

		//(expression=SignalExpression | "[" expression=SignalExpression "]")
		public Alternatives getAlternatives_2_0_0() { return cAlternatives_2_0_0; }

		//expression=SignalExpression
		public Assignment getExpressionAssignment_2_0_0_0() { return cExpressionAssignment_2_0_0_0; }

		//SignalExpression
		public RuleCall getExpressionSignalExpressionParserRuleCall_2_0_0_0_0() { return cExpressionSignalExpressionParserRuleCall_2_0_0_0_0; }

		//"[" expression=SignalExpression "]"
		public Group getGroup_2_0_0_1() { return cGroup_2_0_0_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_0_0_1_0() { return cLeftSquareBracketKeyword_2_0_0_1_0; }

		//expression=SignalExpression
		public Assignment getExpressionAssignment_2_0_0_1_1() { return cExpressionAssignment_2_0_0_1_1; }

		//SignalExpression
		public RuleCall getExpressionSignalExpressionParserRuleCall_2_0_0_1_1_0() { return cExpressionSignalExpressionParserRuleCall_2_0_0_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_0_0_1_2() { return cRightSquareBracketKeyword_2_0_0_1_2; }

		//(thenAnnotations+=Annotation* "then" ((thenStatements+=SCEstStatement ";" | thenStatements+=MetaStatement)*
		//thenStatements+=SCEstStatement?))?
		public Group getGroup_2_0_1() { return cGroup_2_0_1; }

		//thenAnnotations+=Annotation*
		public Assignment getThenAnnotationsAssignment_2_0_1_0() { return cThenAnnotationsAssignment_2_0_1_0; }

		//Annotation
		public RuleCall getThenAnnotationsAnnotationParserRuleCall_2_0_1_0_0() { return cThenAnnotationsAnnotationParserRuleCall_2_0_1_0_0; }

		//"then"
		public Keyword getThenKeyword_2_0_1_1() { return cThenKeyword_2_0_1_1; }

		//((thenStatements+=SCEstStatement ";" | thenStatements+=MetaStatement)* thenStatements+=SCEstStatement?)
		public Group getGroup_2_0_1_2() { return cGroup_2_0_1_2; }

		//(thenStatements+=SCEstStatement ";" | thenStatements+=MetaStatement)*
		public Alternatives getAlternatives_2_0_1_2_0() { return cAlternatives_2_0_1_2_0; }

		//thenStatements+=SCEstStatement ";"
		public Group getGroup_2_0_1_2_0_0() { return cGroup_2_0_1_2_0_0; }

		//thenStatements+=SCEstStatement
		public Assignment getThenStatementsAssignment_2_0_1_2_0_0_0() { return cThenStatementsAssignment_2_0_1_2_0_0_0; }

		//SCEstStatement
		public RuleCall getThenStatementsSCEstStatementParserRuleCall_2_0_1_2_0_0_0_0() { return cThenStatementsSCEstStatementParserRuleCall_2_0_1_2_0_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_2_0_1_2_0_0_1() { return cSemicolonKeyword_2_0_1_2_0_0_1; }

		//thenStatements+=MetaStatement
		public Assignment getThenStatementsAssignment_2_0_1_2_0_1() { return cThenStatementsAssignment_2_0_1_2_0_1; }

		//MetaStatement
		public RuleCall getThenStatementsMetaStatementParserRuleCall_2_0_1_2_0_1_0() { return cThenStatementsMetaStatementParserRuleCall_2_0_1_2_0_1_0; }

		//thenStatements+=SCEstStatement?
		public Assignment getThenStatementsAssignment_2_0_1_2_1() { return cThenStatementsAssignment_2_0_1_2_1; }

		//SCEstStatement
		public RuleCall getThenStatementsSCEstStatementParserRuleCall_2_0_1_2_1_0() { return cThenStatementsSCEstStatementParserRuleCall_2_0_1_2_1_0; }

		//cases+=PresentCase+
		public Assignment getCasesAssignment_2_1() { return cCasesAssignment_2_1; }

		//PresentCase
		public RuleCall getCasesPresentCaseParserRuleCall_2_1_0() { return cCasesPresentCaseParserRuleCall_2_1_0; }

		//(elseAnnotations+=Annotation* "else" ((elseStatements+=SCEstStatement ";" | elseStatements+=MetaStatement)*
		//elseStatements+=SCEstStatement?))?
		public Group getGroup_3() { return cGroup_3; }

		//elseAnnotations+=Annotation*
		public Assignment getElseAnnotationsAssignment_3_0() { return cElseAnnotationsAssignment_3_0; }

		//Annotation
		public RuleCall getElseAnnotationsAnnotationParserRuleCall_3_0_0() { return cElseAnnotationsAnnotationParserRuleCall_3_0_0; }

		//"else"
		public Keyword getElseKeyword_3_1() { return cElseKeyword_3_1; }

		//((elseStatements+=SCEstStatement ";" | elseStatements+=MetaStatement)* elseStatements+=SCEstStatement?)
		public Group getGroup_3_2() { return cGroup_3_2; }

		//(elseStatements+=SCEstStatement ";" | elseStatements+=MetaStatement)*
		public Alternatives getAlternatives_3_2_0() { return cAlternatives_3_2_0; }

		//elseStatements+=SCEstStatement ";"
		public Group getGroup_3_2_0_0() { return cGroup_3_2_0_0; }

		//elseStatements+=SCEstStatement
		public Assignment getElseStatementsAssignment_3_2_0_0_0() { return cElseStatementsAssignment_3_2_0_0_0; }

		//SCEstStatement
		public RuleCall getElseStatementsSCEstStatementParserRuleCall_3_2_0_0_0_0() { return cElseStatementsSCEstStatementParserRuleCall_3_2_0_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_3_2_0_0_1() { return cSemicolonKeyword_3_2_0_0_1; }

		//elseStatements+=MetaStatement
		public Assignment getElseStatementsAssignment_3_2_0_1() { return cElseStatementsAssignment_3_2_0_1; }

		//MetaStatement
		public RuleCall getElseStatementsMetaStatementParserRuleCall_3_2_0_1_0() { return cElseStatementsMetaStatementParserRuleCall_3_2_0_1_0; }

		//elseStatements+=SCEstStatement?
		public Assignment getElseStatementsAssignment_3_2_1() { return cElseStatementsAssignment_3_2_1; }

		//SCEstStatement
		public RuleCall getElseStatementsSCEstStatementParserRuleCall_3_2_1_0() { return cElseStatementsSCEstStatementParserRuleCall_3_2_1_0; }

		//"end"
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }

		//"present"?
		public Keyword getPresentKeyword_5() { return cPresentKeyword_5; }
	}

	public class PresentCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.PresentCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cCaseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cExpressionSignalExpressionParserRuleCall_2_0_0 = (RuleCall)cExpressionAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cExpressionAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cExpressionSignalExpressionParserRuleCall_2_1_1_0 = (RuleCall)cExpressionAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cDoKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Alternatives cAlternatives_3_1_0 = (Alternatives)cGroup_3_1.eContents().get(0);
		private final Group cGroup_3_1_0_0 = (Group)cAlternatives_3_1_0.eContents().get(0);
		private final Assignment cStatementsAssignment_3_1_0_0_0 = (Assignment)cGroup_3_1_0_0.eContents().get(0);
		private final RuleCall cStatementsSCEstStatementParserRuleCall_3_1_0_0_0_0 = (RuleCall)cStatementsAssignment_3_1_0_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1_0_0_1 = (Keyword)cGroup_3_1_0_0.eContents().get(1);
		private final Assignment cStatementsAssignment_3_1_0_1 = (Assignment)cAlternatives_3_1_0.eContents().get(1);
		private final RuleCall cStatementsMetaStatementParserRuleCall_3_1_0_1_0 = (RuleCall)cStatementsAssignment_3_1_0_1.eContents().get(0);
		private final Assignment cStatementsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cStatementsSCEstStatementParserRuleCall_3_1_1_0 = (RuleCall)cStatementsAssignment_3_1_1.eContents().get(0);
		
		//PresentCase esterel::PresentCase:
		//	annotations+=Annotation*
		//	"case" (expression=SignalExpression
		//	| "[" expression=SignalExpression "]") ("do" ((statements+=SCEstStatement ";" | statements+=MetaStatement)*
		//	statements+=SCEstStatement?))?
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* "case" (expression=SignalExpression | "[" expression=SignalExpression "]") ("do"
		//((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?))?
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//"case"
		public Keyword getCaseKeyword_1() { return cCaseKeyword_1; }

		//(expression=SignalExpression | "[" expression=SignalExpression "]")
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//expression=SignalExpression
		public Assignment getExpressionAssignment_2_0() { return cExpressionAssignment_2_0; }

		//SignalExpression
		public RuleCall getExpressionSignalExpressionParserRuleCall_2_0_0() { return cExpressionSignalExpressionParserRuleCall_2_0_0; }

		//"[" expression=SignalExpression "]"
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_1_0() { return cLeftSquareBracketKeyword_2_1_0; }

		//expression=SignalExpression
		public Assignment getExpressionAssignment_2_1_1() { return cExpressionAssignment_2_1_1; }

		//SignalExpression
		public RuleCall getExpressionSignalExpressionParserRuleCall_2_1_1_0() { return cExpressionSignalExpressionParserRuleCall_2_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_1_2() { return cRightSquareBracketKeyword_2_1_2; }

		//("do" ((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?))?
		public Group getGroup_3() { return cGroup_3; }

		//"do"
		public Keyword getDoKeyword_3_0() { return cDoKeyword_3_0; }

		//((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?)
		public Group getGroup_3_1() { return cGroup_3_1; }

		//(statements+=SCEstStatement ";" | statements+=MetaStatement)*
		public Alternatives getAlternatives_3_1_0() { return cAlternatives_3_1_0; }

		//statements+=SCEstStatement ";"
		public Group getGroup_3_1_0_0() { return cGroup_3_1_0_0; }

		//statements+=SCEstStatement
		public Assignment getStatementsAssignment_3_1_0_0_0() { return cStatementsAssignment_3_1_0_0_0; }

		//SCEstStatement
		public RuleCall getStatementsSCEstStatementParserRuleCall_3_1_0_0_0_0() { return cStatementsSCEstStatementParserRuleCall_3_1_0_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_3_1_0_0_1() { return cSemicolonKeyword_3_1_0_0_1; }

		//statements+=MetaStatement
		public Assignment getStatementsAssignment_3_1_0_1() { return cStatementsAssignment_3_1_0_1; }

		//MetaStatement
		public RuleCall getStatementsMetaStatementParserRuleCall_3_1_0_1_0() { return cStatementsMetaStatementParserRuleCall_3_1_0_1_0; }

		//statements+=SCEstStatement?
		public Assignment getStatementsAssignment_3_1_1() { return cStatementsAssignment_3_1_1; }

		//SCEstStatement
		public RuleCall getStatementsSCEstStatementParserRuleCall_3_1_1_0() { return cStatementsSCEstStatementParserRuleCall_3_1_1_0; }
	}

	public class IfTestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.IfTest");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cThenAnnotationsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cThenAnnotationsAnnotationParserRuleCall_3_0_0 = (RuleCall)cThenAnnotationsAssignment_3_0.eContents().get(0);
		private final Keyword cThenKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Alternatives cAlternatives_3_2_0 = (Alternatives)cGroup_3_2.eContents().get(0);
		private final Group cGroup_3_2_0_0 = (Group)cAlternatives_3_2_0.eContents().get(0);
		private final Assignment cThenStatementsAssignment_3_2_0_0_0 = (Assignment)cGroup_3_2_0_0.eContents().get(0);
		private final RuleCall cThenStatementsSCEstStatementParserRuleCall_3_2_0_0_0_0 = (RuleCall)cThenStatementsAssignment_3_2_0_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_2_0_0_1 = (Keyword)cGroup_3_2_0_0.eContents().get(1);
		private final Assignment cThenStatementsAssignment_3_2_0_1 = (Assignment)cAlternatives_3_2_0.eContents().get(1);
		private final RuleCall cThenStatementsMetaStatementParserRuleCall_3_2_0_1_0 = (RuleCall)cThenStatementsAssignment_3_2_0_1.eContents().get(0);
		private final Assignment cThenStatementsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cThenStatementsSCEstStatementParserRuleCall_3_2_1_0 = (RuleCall)cThenStatementsAssignment_3_2_1.eContents().get(0);
		private final Assignment cElseifAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElseifElsIfParserRuleCall_4_0 = (RuleCall)cElseifAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cElseAnnotationsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cElseAnnotationsAnnotationParserRuleCall_5_0_0 = (RuleCall)cElseAnnotationsAssignment_5_0.eContents().get(0);
		private final Keyword cElseKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Alternatives cAlternatives_5_2_0 = (Alternatives)cGroup_5_2.eContents().get(0);
		private final Group cGroup_5_2_0_0 = (Group)cAlternatives_5_2_0.eContents().get(0);
		private final Assignment cElseStatementsAssignment_5_2_0_0_0 = (Assignment)cGroup_5_2_0_0.eContents().get(0);
		private final RuleCall cElseStatementsSCEstStatementParserRuleCall_5_2_0_0_0_0 = (RuleCall)cElseStatementsAssignment_5_2_0_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_2_0_0_1 = (Keyword)cGroup_5_2_0_0.eContents().get(1);
		private final Assignment cElseStatementsAssignment_5_2_0_1 = (Assignment)cAlternatives_5_2_0.eContents().get(1);
		private final RuleCall cElseStatementsMetaStatementParserRuleCall_5_2_0_1_0 = (RuleCall)cElseStatementsAssignment_5_2_0_1.eContents().get(0);
		private final Assignment cElseStatementsAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cElseStatementsSCEstStatementParserRuleCall_5_2_1_0 = (RuleCall)cElseStatementsAssignment_5_2_1.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cIfKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//// ==> 7.5.4 The if Data Test
		//// -------------------------------------
		//IfTest esterel::IfTest:
		//	annotations+=Annotation*
		//	"if"
		//	expression=Expression (thenAnnotations+=Annotation*
		//	"then" ((thenStatements+=SCEstStatement ";" | thenStatements+=MetaStatement)* thenStatements+=SCEstStatement?))?
		//	elseif+=ElsIf* (elseAnnotations+=Annotation*
		//	"else" ((elseStatements+=SCEstStatement ";" | elseStatements+=MetaStatement)* elseStatements+=SCEstStatement?))?
		//	"end" "if"?
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* "if" expression=Expression (thenAnnotations+=Annotation* "then"
		//((thenStatements+=SCEstStatement ";" | thenStatements+=MetaStatement)* thenStatements+=SCEstStatement?))?
		//elseif+=ElsIf* (elseAnnotations+=Annotation* "else" ((elseStatements+=SCEstStatement ";" |
		//elseStatements+=MetaStatement)* elseStatements+=SCEstStatement?))? "end" "if"?
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//"if"
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }

		//(thenAnnotations+=Annotation* "then" ((thenStatements+=SCEstStatement ";" | thenStatements+=MetaStatement)*
		//thenStatements+=SCEstStatement?))?
		public Group getGroup_3() { return cGroup_3; }

		//thenAnnotations+=Annotation*
		public Assignment getThenAnnotationsAssignment_3_0() { return cThenAnnotationsAssignment_3_0; }

		//Annotation
		public RuleCall getThenAnnotationsAnnotationParserRuleCall_3_0_0() { return cThenAnnotationsAnnotationParserRuleCall_3_0_0; }

		//"then"
		public Keyword getThenKeyword_3_1() { return cThenKeyword_3_1; }

		//((thenStatements+=SCEstStatement ";" | thenStatements+=MetaStatement)* thenStatements+=SCEstStatement?)
		public Group getGroup_3_2() { return cGroup_3_2; }

		//(thenStatements+=SCEstStatement ";" | thenStatements+=MetaStatement)*
		public Alternatives getAlternatives_3_2_0() { return cAlternatives_3_2_0; }

		//thenStatements+=SCEstStatement ";"
		public Group getGroup_3_2_0_0() { return cGroup_3_2_0_0; }

		//thenStatements+=SCEstStatement
		public Assignment getThenStatementsAssignment_3_2_0_0_0() { return cThenStatementsAssignment_3_2_0_0_0; }

		//SCEstStatement
		public RuleCall getThenStatementsSCEstStatementParserRuleCall_3_2_0_0_0_0() { return cThenStatementsSCEstStatementParserRuleCall_3_2_0_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_3_2_0_0_1() { return cSemicolonKeyword_3_2_0_0_1; }

		//thenStatements+=MetaStatement
		public Assignment getThenStatementsAssignment_3_2_0_1() { return cThenStatementsAssignment_3_2_0_1; }

		//MetaStatement
		public RuleCall getThenStatementsMetaStatementParserRuleCall_3_2_0_1_0() { return cThenStatementsMetaStatementParserRuleCall_3_2_0_1_0; }

		//thenStatements+=SCEstStatement?
		public Assignment getThenStatementsAssignment_3_2_1() { return cThenStatementsAssignment_3_2_1; }

		//SCEstStatement
		public RuleCall getThenStatementsSCEstStatementParserRuleCall_3_2_1_0() { return cThenStatementsSCEstStatementParserRuleCall_3_2_1_0; }

		//elseif+=ElsIf*
		public Assignment getElseifAssignment_4() { return cElseifAssignment_4; }

		//ElsIf
		public RuleCall getElseifElsIfParserRuleCall_4_0() { return cElseifElsIfParserRuleCall_4_0; }

		//(elseAnnotations+=Annotation* "else" ((elseStatements+=SCEstStatement ";" | elseStatements+=MetaStatement)*
		//elseStatements+=SCEstStatement?))?
		public Group getGroup_5() { return cGroup_5; }

		//elseAnnotations+=Annotation*
		public Assignment getElseAnnotationsAssignment_5_0() { return cElseAnnotationsAssignment_5_0; }

		//Annotation
		public RuleCall getElseAnnotationsAnnotationParserRuleCall_5_0_0() { return cElseAnnotationsAnnotationParserRuleCall_5_0_0; }

		//"else"
		public Keyword getElseKeyword_5_1() { return cElseKeyword_5_1; }

		//((elseStatements+=SCEstStatement ";" | elseStatements+=MetaStatement)* elseStatements+=SCEstStatement?)
		public Group getGroup_5_2() { return cGroup_5_2; }

		//(elseStatements+=SCEstStatement ";" | elseStatements+=MetaStatement)*
		public Alternatives getAlternatives_5_2_0() { return cAlternatives_5_2_0; }

		//elseStatements+=SCEstStatement ";"
		public Group getGroup_5_2_0_0() { return cGroup_5_2_0_0; }

		//elseStatements+=SCEstStatement
		public Assignment getElseStatementsAssignment_5_2_0_0_0() { return cElseStatementsAssignment_5_2_0_0_0; }

		//SCEstStatement
		public RuleCall getElseStatementsSCEstStatementParserRuleCall_5_2_0_0_0_0() { return cElseStatementsSCEstStatementParserRuleCall_5_2_0_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_5_2_0_0_1() { return cSemicolonKeyword_5_2_0_0_1; }

		//elseStatements+=MetaStatement
		public Assignment getElseStatementsAssignment_5_2_0_1() { return cElseStatementsAssignment_5_2_0_1; }

		//MetaStatement
		public RuleCall getElseStatementsMetaStatementParserRuleCall_5_2_0_1_0() { return cElseStatementsMetaStatementParserRuleCall_5_2_0_1_0; }

		//elseStatements+=SCEstStatement?
		public Assignment getElseStatementsAssignment_5_2_1() { return cElseStatementsAssignment_5_2_1; }

		//SCEstStatement
		public RuleCall getElseStatementsSCEstStatementParserRuleCall_5_2_1_0() { return cElseStatementsSCEstStatementParserRuleCall_5_2_1_0; }

		//"end"
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }

		//"if"?
		public Keyword getIfKeyword_7() { return cIfKeyword_7; }
	}

	public class ElsIfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.ElsIf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cElsifKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cThenKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Alternatives cAlternatives_3_1_0 = (Alternatives)cGroup_3_1.eContents().get(0);
		private final Group cGroup_3_1_0_0 = (Group)cAlternatives_3_1_0.eContents().get(0);
		private final Assignment cThenStatementsAssignment_3_1_0_0_0 = (Assignment)cGroup_3_1_0_0.eContents().get(0);
		private final RuleCall cThenStatementsSCEstStatementParserRuleCall_3_1_0_0_0_0 = (RuleCall)cThenStatementsAssignment_3_1_0_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1_0_0_1 = (Keyword)cGroup_3_1_0_0.eContents().get(1);
		private final Assignment cThenStatementsAssignment_3_1_0_1 = (Assignment)cAlternatives_3_1_0.eContents().get(1);
		private final RuleCall cThenStatementsMetaStatementParserRuleCall_3_1_0_1_0 = (RuleCall)cThenStatementsAssignment_3_1_0_1.eContents().get(0);
		private final Assignment cThenStatementsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cThenStatementsSCEstStatementParserRuleCall_3_1_1_0 = (RuleCall)cThenStatementsAssignment_3_1_1.eContents().get(0);
		
		//ElsIf esterel::ElsIf:
		//	annotations+=Annotation*
		//	"elsif"
		//	expression=Expression ("then" ((thenStatements+=SCEstStatement ";" | thenStatements+=MetaStatement)*
		//	thenStatements+=SCEstStatement?))?
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* "elsif" expression=Expression ("then" ((thenStatements+=SCEstStatement ";" |
		//thenStatements+=MetaStatement)* thenStatements+=SCEstStatement?))?
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//"elsif"
		public Keyword getElsifKeyword_1() { return cElsifKeyword_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }

		//("then" ((thenStatements+=SCEstStatement ";" | thenStatements+=MetaStatement)* thenStatements+=SCEstStatement?))?
		public Group getGroup_3() { return cGroup_3; }

		//"then"
		public Keyword getThenKeyword_3_0() { return cThenKeyword_3_0; }

		//((thenStatements+=SCEstStatement ";" | thenStatements+=MetaStatement)* thenStatements+=SCEstStatement?)
		public Group getGroup_3_1() { return cGroup_3_1; }

		//(thenStatements+=SCEstStatement ";" | thenStatements+=MetaStatement)*
		public Alternatives getAlternatives_3_1_0() { return cAlternatives_3_1_0; }

		//thenStatements+=SCEstStatement ";"
		public Group getGroup_3_1_0_0() { return cGroup_3_1_0_0; }

		//thenStatements+=SCEstStatement
		public Assignment getThenStatementsAssignment_3_1_0_0_0() { return cThenStatementsAssignment_3_1_0_0_0; }

		//SCEstStatement
		public RuleCall getThenStatementsSCEstStatementParserRuleCall_3_1_0_0_0_0() { return cThenStatementsSCEstStatementParserRuleCall_3_1_0_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_3_1_0_0_1() { return cSemicolonKeyword_3_1_0_0_1; }

		//thenStatements+=MetaStatement
		public Assignment getThenStatementsAssignment_3_1_0_1() { return cThenStatementsAssignment_3_1_0_1; }

		//MetaStatement
		public RuleCall getThenStatementsMetaStatementParserRuleCall_3_1_0_1_0() { return cThenStatementsMetaStatementParserRuleCall_3_1_0_1_0; }

		//thenStatements+=SCEstStatement?
		public Assignment getThenStatementsAssignment_3_1_1() { return cThenStatementsAssignment_3_1_1; }

		//SCEstStatement
		public RuleCall getThenStatementsSCEstStatementParserRuleCall_3_1_1_0() { return cThenStatementsSCEstStatementParserRuleCall_3_1_1_0; }
	}

	public class LoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.Loop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLoopAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Keyword cLoopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cGroup_3.eContents().get(0);
		private final Group cGroup_3_0_0 = (Group)cAlternatives_3_0.eContents().get(0);
		private final Assignment cStatementsAssignment_3_0_0_0 = (Assignment)cGroup_3_0_0.eContents().get(0);
		private final RuleCall cStatementsSCEstStatementParserRuleCall_3_0_0_0_0 = (RuleCall)cStatementsAssignment_3_0_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_0_0_1 = (Keyword)cGroup_3_0_0.eContents().get(1);
		private final Assignment cStatementsAssignment_3_0_1 = (Assignment)cAlternatives_3_0.eContents().get(1);
		private final RuleCall cStatementsMetaStatementParserRuleCall_3_0_1_0 = (RuleCall)cStatementsAssignment_3_0_1.eContents().get(0);
		private final Assignment cStatementsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cStatementsSCEstStatementParserRuleCall_3_1_0 = (RuleCall)cStatementsAssignment_3_1.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Keyword cEndKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Keyword cLoopKeyword_4_0_1 = (Keyword)cGroup_4_0.eContents().get(1);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Keyword cEachKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cDelayAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cDelayDelayExprParserRuleCall_4_1_1_0 = (RuleCall)cDelayAssignment_4_1_1.eContents().get(0);
		
		//// ==> 7.5.5 Looping & 7.5.9 Temporal Loops
		//// -------------------------------------
		//Loop esterel::Loop:
		//	{esterel::Loop} annotations+=Annotation*
		//	"loop" ((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?) ("end" "loop"? |
		//	"each" delay=DelayExpr)
		@Override public ParserRule getRule() { return rule; }

		//{esterel::Loop} annotations+=Annotation* "loop" ((statements+=SCEstStatement ";" | statements+=MetaStatement)*
		//statements+=SCEstStatement?) ("end" "loop"? | "each" delay=DelayExpr)
		public Group getGroup() { return cGroup; }

		//{esterel::Loop}
		public Action getLoopAction_0() { return cLoopAction_0; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() { return cAnnotationsAnnotationParserRuleCall_1_0; }

		//"loop"
		public Keyword getLoopKeyword_2() { return cLoopKeyword_2; }

		//((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?)
		public Group getGroup_3() { return cGroup_3; }

		//(statements+=SCEstStatement ";" | statements+=MetaStatement)*
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }

		//statements+=SCEstStatement ";"
		public Group getGroup_3_0_0() { return cGroup_3_0_0; }

		//statements+=SCEstStatement
		public Assignment getStatementsAssignment_3_0_0_0() { return cStatementsAssignment_3_0_0_0; }

		//SCEstStatement
		public RuleCall getStatementsSCEstStatementParserRuleCall_3_0_0_0_0() { return cStatementsSCEstStatementParserRuleCall_3_0_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_3_0_0_1() { return cSemicolonKeyword_3_0_0_1; }

		//statements+=MetaStatement
		public Assignment getStatementsAssignment_3_0_1() { return cStatementsAssignment_3_0_1; }

		//MetaStatement
		public RuleCall getStatementsMetaStatementParserRuleCall_3_0_1_0() { return cStatementsMetaStatementParserRuleCall_3_0_1_0; }

		//statements+=SCEstStatement?
		public Assignment getStatementsAssignment_3_1() { return cStatementsAssignment_3_1; }

		//SCEstStatement
		public RuleCall getStatementsSCEstStatementParserRuleCall_3_1_0() { return cStatementsSCEstStatementParserRuleCall_3_1_0; }

		//("end" "loop"? | "each" delay=DelayExpr)
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//"end" "loop"?
		public Group getGroup_4_0() { return cGroup_4_0; }

		//"end"
		public Keyword getEndKeyword_4_0_0() { return cEndKeyword_4_0_0; }

		//"loop"?
		public Keyword getLoopKeyword_4_0_1() { return cLoopKeyword_4_0_1; }

		//"each" delay=DelayExpr
		public Group getGroup_4_1() { return cGroup_4_1; }

		//"each"
		public Keyword getEachKeyword_4_1_0() { return cEachKeyword_4_1_0; }

		//delay=DelayExpr
		public Assignment getDelayAssignment_4_1_1() { return cDelayAssignment_4_1_1; }

		//DelayExpr
		public RuleCall getDelayDelayExprParserRuleCall_4_1_1_0() { return cDelayDelayExprParserRuleCall_4_1_1_0; }
	}

	public class RepeatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.Repeat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cPositiveAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cPositivePositiveKeyword_1_0 = (Keyword)cPositiveAssignment_1.eContents().get(0);
		private final Keyword cRepeatKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Keyword cTimesKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Alternatives cAlternatives_5_0 = (Alternatives)cGroup_5.eContents().get(0);
		private final Group cGroup_5_0_0 = (Group)cAlternatives_5_0.eContents().get(0);
		private final Assignment cStatementsAssignment_5_0_0_0 = (Assignment)cGroup_5_0_0.eContents().get(0);
		private final RuleCall cStatementsSCEstStatementParserRuleCall_5_0_0_0_0 = (RuleCall)cStatementsAssignment_5_0_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_0_0_1 = (Keyword)cGroup_5_0_0.eContents().get(1);
		private final Assignment cStatementsAssignment_5_0_1 = (Assignment)cAlternatives_5_0.eContents().get(1);
		private final RuleCall cStatementsMetaStatementParserRuleCall_5_0_1_0 = (RuleCall)cStatementsAssignment_5_0_1.eContents().get(0);
		private final Assignment cStatementsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cStatementsSCEstStatementParserRuleCall_5_1_0 = (RuleCall)cStatementsAssignment_5_1.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRepeatKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//// ==> 7.5.6 Repeat Looping
		//// -------------------------------------
		//Repeat esterel::Repeat:
		//	annotations+=Annotation*
		//	positive?="positive"?
		//	"repeat"
		//	expression=Expression
		//	"times" ((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?)
		//	"end" "repeat"?
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* positive?="positive"? "repeat" expression=Expression "times" ((statements+=SCEstStatement ";" |
		//statements+=MetaStatement)* statements+=SCEstStatement?) "end" "repeat"?
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//positive?="positive"?
		public Assignment getPositiveAssignment_1() { return cPositiveAssignment_1; }

		//"positive"
		public Keyword getPositivePositiveKeyword_1_0() { return cPositivePositiveKeyword_1_0; }

		//"repeat"
		public Keyword getRepeatKeyword_2() { return cRepeatKeyword_2; }

		//expression=Expression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_0() { return cExpressionExpressionParserRuleCall_3_0; }

		//"times"
		public Keyword getTimesKeyword_4() { return cTimesKeyword_4; }

		//((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?)
		public Group getGroup_5() { return cGroup_5; }

		//(statements+=SCEstStatement ";" | statements+=MetaStatement)*
		public Alternatives getAlternatives_5_0() { return cAlternatives_5_0; }

		//statements+=SCEstStatement ";"
		public Group getGroup_5_0_0() { return cGroup_5_0_0; }

		//statements+=SCEstStatement
		public Assignment getStatementsAssignment_5_0_0_0() { return cStatementsAssignment_5_0_0_0; }

		//SCEstStatement
		public RuleCall getStatementsSCEstStatementParserRuleCall_5_0_0_0_0() { return cStatementsSCEstStatementParserRuleCall_5_0_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_5_0_0_1() { return cSemicolonKeyword_5_0_0_1; }

		//statements+=MetaStatement
		public Assignment getStatementsAssignment_5_0_1() { return cStatementsAssignment_5_0_1; }

		//MetaStatement
		public RuleCall getStatementsMetaStatementParserRuleCall_5_0_1_0() { return cStatementsMetaStatementParserRuleCall_5_0_1_0; }

		//statements+=SCEstStatement?
		public Assignment getStatementsAssignment_5_1() { return cStatementsAssignment_5_1; }

		//SCEstStatement
		public RuleCall getStatementsSCEstStatementParserRuleCall_5_1_0() { return cStatementsSCEstStatementParserRuleCall_5_1_0; }

		//"end"
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }

		//"repeat"?
		public Keyword getRepeatKeyword_7() { return cRepeatKeyword_7; }
	}

	public class AbortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.Abort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cWeakAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cWeakWeakKeyword_1_0_0 = (Keyword)cWeakAssignment_1_0.eContents().get(0);
		private final Keyword cAbortKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Group cGroup_2_0_0 = (Group)cAlternatives_2_0.eContents().get(0);
		private final Assignment cStatementsAssignment_2_0_0_0 = (Assignment)cGroup_2_0_0.eContents().get(0);
		private final RuleCall cStatementsSCEstStatementParserRuleCall_2_0_0_0_0 = (RuleCall)cStatementsAssignment_2_0_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_0_0_1 = (Keyword)cGroup_2_0_0.eContents().get(1);
		private final Assignment cStatementsAssignment_2_0_1 = (Assignment)cAlternatives_2_0.eContents().get(1);
		private final RuleCall cStatementsMetaStatementParserRuleCall_2_0_1_0 = (RuleCall)cStatementsAssignment_2_0_1.eContents().get(0);
		private final Assignment cStatementsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cStatementsSCEstStatementParserRuleCall_2_1_0 = (RuleCall)cStatementsAssignment_2_1.eContents().get(0);
		private final Keyword cWhenKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Assignment cDelayAssignment_4_0_0 = (Assignment)cGroup_4_0.eContents().get(0);
		private final RuleCall cDelayDelayExprParserRuleCall_4_0_0_0 = (RuleCall)cDelayAssignment_4_0_0.eContents().get(0);
		private final Group cGroup_4_0_1 = (Group)cGroup_4_0.eContents().get(1);
		private final Keyword cDoKeyword_4_0_1_0 = (Keyword)cGroup_4_0_1.eContents().get(0);
		private final Group cGroup_4_0_1_1 = (Group)cGroup_4_0_1.eContents().get(1);
		private final Alternatives cAlternatives_4_0_1_1_0 = (Alternatives)cGroup_4_0_1_1.eContents().get(0);
		private final Group cGroup_4_0_1_1_0_0 = (Group)cAlternatives_4_0_1_1_0.eContents().get(0);
		private final Assignment cDoStatementsAssignment_4_0_1_1_0_0_0 = (Assignment)cGroup_4_0_1_1_0_0.eContents().get(0);
		private final RuleCall cDoStatementsSCEstStatementParserRuleCall_4_0_1_1_0_0_0_0 = (RuleCall)cDoStatementsAssignment_4_0_1_1_0_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_0_1_1_0_0_1 = (Keyword)cGroup_4_0_1_1_0_0.eContents().get(1);
		private final Assignment cDoStatementsAssignment_4_0_1_1_0_1 = (Assignment)cAlternatives_4_0_1_1_0.eContents().get(1);
		private final RuleCall cDoStatementsMetaStatementParserRuleCall_4_0_1_1_0_1_0 = (RuleCall)cDoStatementsAssignment_4_0_1_1_0_1.eContents().get(0);
		private final Assignment cDoStatementsAssignment_4_0_1_1_1 = (Assignment)cGroup_4_0_1_1.eContents().get(1);
		private final RuleCall cDoStatementsSCEstStatementParserRuleCall_4_0_1_1_1_0 = (RuleCall)cDoStatementsAssignment_4_0_1_1_1.eContents().get(0);
		private final Keyword cEndKeyword_4_0_2 = (Keyword)cGroup_4_0.eContents().get(2);
		private final Alternatives cAlternatives_4_0_3 = (Alternatives)cGroup_4_0.eContents().get(3);
		private final Group cGroup_4_0_3_0 = (Group)cAlternatives_4_0_3.eContents().get(0);
		private final Keyword cWeakKeyword_4_0_3_0_0 = (Keyword)cGroup_4_0_3_0.eContents().get(0);
		private final Keyword cAbortKeyword_4_0_3_0_1 = (Keyword)cGroup_4_0_3_0.eContents().get(1);
		private final Keyword cAbortKeyword_4_0_3_1 = (Keyword)cAlternatives_4_0_3.eContents().get(1);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Assignment cDelayAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final RuleCall cDelayDelayExprParserRuleCall_4_1_0_0 = (RuleCall)cDelayAssignment_4_1_0.eContents().get(0);
		private final Alternatives cAlternatives_4_1_1 = (Alternatives)cGroup_4_1.eContents().get(1);
		private final Keyword cEndKeyword_4_1_1_0 = (Keyword)cAlternatives_4_1_1.eContents().get(0);
		private final Group cGroup_4_1_1_1 = (Group)cAlternatives_4_1_1.eContents().get(1);
		private final Keyword cEndKeyword_4_1_1_1_0 = (Keyword)cGroup_4_1_1_1.eContents().get(0);
		private final Keyword cWeakKeyword_4_1_1_1_1 = (Keyword)cGroup_4_1_1_1.eContents().get(1);
		private final Keyword cAbortKeyword_4_1_1_1_2 = (Keyword)cGroup_4_1_1_1.eContents().get(2);
		private final Group cGroup_4_2 = (Group)cAlternatives_4.eContents().get(2);
		private final Assignment cCasesAssignment_4_2_0 = (Assignment)cGroup_4_2.eContents().get(0);
		private final RuleCall cCasesCaseParserRuleCall_4_2_0_0 = (RuleCall)cCasesAssignment_4_2_0.eContents().get(0);
		private final Keyword cEndKeyword_4_2_1 = (Keyword)cGroup_4_2.eContents().get(1);
		private final Alternatives cAlternatives_4_2_2 = (Alternatives)cGroup_4_2.eContents().get(2);
		private final Group cGroup_4_2_2_0 = (Group)cAlternatives_4_2_2.eContents().get(0);
		private final Keyword cWeakKeyword_4_2_2_0_0 = (Keyword)cGroup_4_2_2_0.eContents().get(0);
		private final Keyword cAbortKeyword_4_2_2_0_1 = (Keyword)cGroup_4_2_2_0.eContents().get(1);
		private final Keyword cAbortKeyword_4_2_2_1 = (Keyword)cAlternatives_4_2_2.eContents().get(1);
		
		//// ==> 7.5.7 The abort Statements
		//// -------------------------------------
		//Abort esterel::Abort:
		//	annotations+=Annotation* (weak?="weak"? "abort") ((statements+=SCEstStatement ";" | statements+=MetaStatement)*
		//	statements+=SCEstStatement?)
		//	"when" (delay=DelayExpr ("do" ((doStatements+=SCEstStatement ";" | doStatements+=MetaStatement)*
		//	doStatements+=SCEstStatement?))?
		//	"end" ("weak" "abort" | "abort")?
		//	| delay=DelayExpr ("end" | "end" "weak"? "abort")?
		//	| cases+=Case+
		//	"end" ("weak" "abort" | "abort")?)
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* (weak?="weak"? "abort") ((statements+=SCEstStatement ";" | statements+=MetaStatement)*
		//statements+=SCEstStatement?) "when" (delay=DelayExpr ("do" ((doStatements+=SCEstStatement ";" |
		//doStatements+=MetaStatement)* doStatements+=SCEstStatement?))? "end" ("weak" "abort" | "abort")? | delay=DelayExpr
		//("end" | "end" "weak"? "abort")? | cases+=Case+ "end" ("weak" "abort" | "abort")?)
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//(weak?="weak"? "abort")
		public Group getGroup_1() { return cGroup_1; }

		//weak?="weak"?
		public Assignment getWeakAssignment_1_0() { return cWeakAssignment_1_0; }

		//"weak"
		public Keyword getWeakWeakKeyword_1_0_0() { return cWeakWeakKeyword_1_0_0; }

		//"abort"
		public Keyword getAbortKeyword_1_1() { return cAbortKeyword_1_1; }

		//((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?)
		public Group getGroup_2() { return cGroup_2; }

		//(statements+=SCEstStatement ";" | statements+=MetaStatement)*
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }

		//statements+=SCEstStatement ";"
		public Group getGroup_2_0_0() { return cGroup_2_0_0; }

		//statements+=SCEstStatement
		public Assignment getStatementsAssignment_2_0_0_0() { return cStatementsAssignment_2_0_0_0; }

		//SCEstStatement
		public RuleCall getStatementsSCEstStatementParserRuleCall_2_0_0_0_0() { return cStatementsSCEstStatementParserRuleCall_2_0_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_2_0_0_1() { return cSemicolonKeyword_2_0_0_1; }

		//statements+=MetaStatement
		public Assignment getStatementsAssignment_2_0_1() { return cStatementsAssignment_2_0_1; }

		//MetaStatement
		public RuleCall getStatementsMetaStatementParserRuleCall_2_0_1_0() { return cStatementsMetaStatementParserRuleCall_2_0_1_0; }

		//statements+=SCEstStatement?
		public Assignment getStatementsAssignment_2_1() { return cStatementsAssignment_2_1; }

		//SCEstStatement
		public RuleCall getStatementsSCEstStatementParserRuleCall_2_1_0() { return cStatementsSCEstStatementParserRuleCall_2_1_0; }

		//"when"
		public Keyword getWhenKeyword_3() { return cWhenKeyword_3; }

		//(delay=DelayExpr ("do" ((doStatements+=SCEstStatement ";" | doStatements+=MetaStatement)*
		//doStatements+=SCEstStatement?))? "end" ("weak" "abort" | "abort")? | delay=DelayExpr ("end" | "end" "weak"? "abort")? |
		//cases+=Case+ "end" ("weak" "abort" | "abort")?)
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//delay=DelayExpr ("do" ((doStatements+=SCEstStatement ";" | doStatements+=MetaStatement)*
		//doStatements+=SCEstStatement?))? "end" ("weak" "abort" | "abort")?
		public Group getGroup_4_0() { return cGroup_4_0; }

		//delay=DelayExpr
		public Assignment getDelayAssignment_4_0_0() { return cDelayAssignment_4_0_0; }

		//DelayExpr
		public RuleCall getDelayDelayExprParserRuleCall_4_0_0_0() { return cDelayDelayExprParserRuleCall_4_0_0_0; }

		//("do" ((doStatements+=SCEstStatement ";" | doStatements+=MetaStatement)* doStatements+=SCEstStatement?))?
		public Group getGroup_4_0_1() { return cGroup_4_0_1; }

		//"do"
		public Keyword getDoKeyword_4_0_1_0() { return cDoKeyword_4_0_1_0; }

		//((doStatements+=SCEstStatement ";" | doStatements+=MetaStatement)* doStatements+=SCEstStatement?)
		public Group getGroup_4_0_1_1() { return cGroup_4_0_1_1; }

		//(doStatements+=SCEstStatement ";" | doStatements+=MetaStatement)*
		public Alternatives getAlternatives_4_0_1_1_0() { return cAlternatives_4_0_1_1_0; }

		//doStatements+=SCEstStatement ";"
		public Group getGroup_4_0_1_1_0_0() { return cGroup_4_0_1_1_0_0; }

		//doStatements+=SCEstStatement
		public Assignment getDoStatementsAssignment_4_0_1_1_0_0_0() { return cDoStatementsAssignment_4_0_1_1_0_0_0; }

		//SCEstStatement
		public RuleCall getDoStatementsSCEstStatementParserRuleCall_4_0_1_1_0_0_0_0() { return cDoStatementsSCEstStatementParserRuleCall_4_0_1_1_0_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_4_0_1_1_0_0_1() { return cSemicolonKeyword_4_0_1_1_0_0_1; }

		//doStatements+=MetaStatement
		public Assignment getDoStatementsAssignment_4_0_1_1_0_1() { return cDoStatementsAssignment_4_0_1_1_0_1; }

		//MetaStatement
		public RuleCall getDoStatementsMetaStatementParserRuleCall_4_0_1_1_0_1_0() { return cDoStatementsMetaStatementParserRuleCall_4_0_1_1_0_1_0; }

		//doStatements+=SCEstStatement?
		public Assignment getDoStatementsAssignment_4_0_1_1_1() { return cDoStatementsAssignment_4_0_1_1_1; }

		//SCEstStatement
		public RuleCall getDoStatementsSCEstStatementParserRuleCall_4_0_1_1_1_0() { return cDoStatementsSCEstStatementParserRuleCall_4_0_1_1_1_0; }

		//"end"
		public Keyword getEndKeyword_4_0_2() { return cEndKeyword_4_0_2; }

		//("weak" "abort" | "abort")?
		public Alternatives getAlternatives_4_0_3() { return cAlternatives_4_0_3; }

		//"weak" "abort"
		public Group getGroup_4_0_3_0() { return cGroup_4_0_3_0; }

		//"weak"
		public Keyword getWeakKeyword_4_0_3_0_0() { return cWeakKeyword_4_0_3_0_0; }

		//"abort"
		public Keyword getAbortKeyword_4_0_3_0_1() { return cAbortKeyword_4_0_3_0_1; }

		//"abort"
		public Keyword getAbortKeyword_4_0_3_1() { return cAbortKeyword_4_0_3_1; }

		//delay=DelayExpr ("end" | "end" "weak"? "abort")?
		public Group getGroup_4_1() { return cGroup_4_1; }

		//delay=DelayExpr
		public Assignment getDelayAssignment_4_1_0() { return cDelayAssignment_4_1_0; }

		//DelayExpr
		public RuleCall getDelayDelayExprParserRuleCall_4_1_0_0() { return cDelayDelayExprParserRuleCall_4_1_0_0; }

		//("end" | "end" "weak"? "abort")?
		public Alternatives getAlternatives_4_1_1() { return cAlternatives_4_1_1; }

		//"end"
		public Keyword getEndKeyword_4_1_1_0() { return cEndKeyword_4_1_1_0; }

		//"end" "weak"? "abort"
		public Group getGroup_4_1_1_1() { return cGroup_4_1_1_1; }

		//"end"
		public Keyword getEndKeyword_4_1_1_1_0() { return cEndKeyword_4_1_1_1_0; }

		//"weak"?
		public Keyword getWeakKeyword_4_1_1_1_1() { return cWeakKeyword_4_1_1_1_1; }

		//"abort"
		public Keyword getAbortKeyword_4_1_1_1_2() { return cAbortKeyword_4_1_1_1_2; }

		//cases+=Case+ "end" ("weak" "abort" | "abort")?
		public Group getGroup_4_2() { return cGroup_4_2; }

		//cases+=Case+
		public Assignment getCasesAssignment_4_2_0() { return cCasesAssignment_4_2_0; }

		//Case
		public RuleCall getCasesCaseParserRuleCall_4_2_0_0() { return cCasesCaseParserRuleCall_4_2_0_0; }

		//"end"
		public Keyword getEndKeyword_4_2_1() { return cEndKeyword_4_2_1; }

		//("weak" "abort" | "abort")?
		public Alternatives getAlternatives_4_2_2() { return cAlternatives_4_2_2; }

		//"weak" "abort"
		public Group getGroup_4_2_2_0() { return cGroup_4_2_2_0; }

		//"weak"
		public Keyword getWeakKeyword_4_2_2_0_0() { return cWeakKeyword_4_2_2_0_0; }

		//"abort"
		public Keyword getAbortKeyword_4_2_2_0_1() { return cAbortKeyword_4_2_2_0_1; }

		//"abort"
		public Keyword getAbortKeyword_4_2_2_1() { return cAbortKeyword_4_2_2_1; }
	}

	public class CaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.Case");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cCaseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDelayAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDelayDelayExprParserRuleCall_2_0 = (RuleCall)cDelayAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cDoKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Alternatives cAlternatives_3_1_0 = (Alternatives)cGroup_3_1.eContents().get(0);
		private final Group cGroup_3_1_0_0 = (Group)cAlternatives_3_1_0.eContents().get(0);
		private final Assignment cStatementsAssignment_3_1_0_0_0 = (Assignment)cGroup_3_1_0_0.eContents().get(0);
		private final RuleCall cStatementsSCEstStatementParserRuleCall_3_1_0_0_0_0 = (RuleCall)cStatementsAssignment_3_1_0_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1_0_0_1 = (Keyword)cGroup_3_1_0_0.eContents().get(1);
		private final Assignment cStatementsAssignment_3_1_0_1 = (Assignment)cAlternatives_3_1_0.eContents().get(1);
		private final RuleCall cStatementsMetaStatementParserRuleCall_3_1_0_1_0 = (RuleCall)cStatementsAssignment_3_1_0_1.eContents().get(0);
		private final Assignment cStatementsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cStatementsSCEstStatementParserRuleCall_3_1_1_0 = (RuleCall)cStatementsAssignment_3_1_1.eContents().get(0);
		
		//Case esterel::Case:
		//	annotations+=Annotation*
		//	"case"
		//	delay=DelayExpr ("do" ((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?))?
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* "case" delay=DelayExpr ("do" ((statements+=SCEstStatement ";" | statements+=MetaStatement)*
		//statements+=SCEstStatement?))?
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//"case"
		public Keyword getCaseKeyword_1() { return cCaseKeyword_1; }

		//delay=DelayExpr
		public Assignment getDelayAssignment_2() { return cDelayAssignment_2; }

		//DelayExpr
		public RuleCall getDelayDelayExprParserRuleCall_2_0() { return cDelayDelayExprParserRuleCall_2_0; }

		//("do" ((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?))?
		public Group getGroup_3() { return cGroup_3; }

		//"do"
		public Keyword getDoKeyword_3_0() { return cDoKeyword_3_0; }

		//((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?)
		public Group getGroup_3_1() { return cGroup_3_1; }

		//(statements+=SCEstStatement ";" | statements+=MetaStatement)*
		public Alternatives getAlternatives_3_1_0() { return cAlternatives_3_1_0; }

		//statements+=SCEstStatement ";"
		public Group getGroup_3_1_0_0() { return cGroup_3_1_0_0; }

		//statements+=SCEstStatement
		public Assignment getStatementsAssignment_3_1_0_0_0() { return cStatementsAssignment_3_1_0_0_0; }

		//SCEstStatement
		public RuleCall getStatementsSCEstStatementParserRuleCall_3_1_0_0_0_0() { return cStatementsSCEstStatementParserRuleCall_3_1_0_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_3_1_0_0_1() { return cSemicolonKeyword_3_1_0_0_1; }

		//statements+=MetaStatement
		public Assignment getStatementsAssignment_3_1_0_1() { return cStatementsAssignment_3_1_0_1; }

		//MetaStatement
		public RuleCall getStatementsMetaStatementParserRuleCall_3_1_0_1_0() { return cStatementsMetaStatementParserRuleCall_3_1_0_1_0; }

		//statements+=SCEstStatement?
		public Assignment getStatementsAssignment_3_1_1() { return cStatementsAssignment_3_1_1; }

		//SCEstStatement
		public RuleCall getStatementsSCEstStatementParserRuleCall_3_1_1_0() { return cStatementsSCEstStatementParserRuleCall_3_1_1_0; }
	}

	public class AwaitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.Await");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cAwaitKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cDelayAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cDelayDelayExprParserRuleCall_2_0_0_0 = (RuleCall)cDelayAssignment_2_0_0.eContents().get(0);
		private final Group cGroup_2_0_1 = (Group)cGroup_2_0.eContents().get(1);
		private final Keyword cDoKeyword_2_0_1_0 = (Keyword)cGroup_2_0_1.eContents().get(0);
		private final Group cGroup_2_0_1_1 = (Group)cGroup_2_0_1.eContents().get(1);
		private final Alternatives cAlternatives_2_0_1_1_0 = (Alternatives)cGroup_2_0_1_1.eContents().get(0);
		private final Group cGroup_2_0_1_1_0_0 = (Group)cAlternatives_2_0_1_1_0.eContents().get(0);
		private final Assignment cStatementsAssignment_2_0_1_1_0_0_0 = (Assignment)cGroup_2_0_1_1_0_0.eContents().get(0);
		private final RuleCall cStatementsSCEstStatementParserRuleCall_2_0_1_1_0_0_0_0 = (RuleCall)cStatementsAssignment_2_0_1_1_0_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_0_1_1_0_0_1 = (Keyword)cGroup_2_0_1_1_0_0.eContents().get(1);
		private final Assignment cStatementsAssignment_2_0_1_1_0_1 = (Assignment)cAlternatives_2_0_1_1_0.eContents().get(1);
		private final RuleCall cStatementsMetaStatementParserRuleCall_2_0_1_1_0_1_0 = (RuleCall)cStatementsAssignment_2_0_1_1_0_1.eContents().get(0);
		private final Assignment cStatementsAssignment_2_0_1_1_1 = (Assignment)cGroup_2_0_1_1.eContents().get(1);
		private final RuleCall cStatementsSCEstStatementParserRuleCall_2_0_1_1_1_0 = (RuleCall)cStatementsAssignment_2_0_1_1_1.eContents().get(0);
		private final Keyword cEndKeyword_2_0_1_2 = (Keyword)cGroup_2_0_1.eContents().get(2);
		private final Keyword cAwaitKeyword_2_0_1_3 = (Keyword)cGroup_2_0_1.eContents().get(3);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cCasesAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cCasesCaseParserRuleCall_2_1_0_0 = (RuleCall)cCasesAssignment_2_1_0.eContents().get(0);
		private final Keyword cEndKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Keyword cAwaitKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//// ==> 7.5.8 The await Statement
		//// -------------------------------------
		//Await esterel::Await:
		//	annotations+=Annotation*
		//	"await" (delay=DelayExpr ("do" ((statements+=SCEstStatement ";" | statements+=MetaStatement)*
		//	statements+=SCEstStatement?)
		//	"end" "await"?)?
		//	| cases+=Case+
		//	"end" "await"?)
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* "await" (delay=DelayExpr ("do" ((statements+=SCEstStatement ";" | statements+=MetaStatement)*
		//statements+=SCEstStatement?) "end" "await"?)? | cases+=Case+ "end" "await"?)
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//"await"
		public Keyword getAwaitKeyword_1() { return cAwaitKeyword_1; }

		//(delay=DelayExpr ("do" ((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?) "end"
		//"await"?)? | cases+=Case+ "end" "await"?)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//delay=DelayExpr ("do" ((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?) "end"
		//"await"?)?
		public Group getGroup_2_0() { return cGroup_2_0; }

		//delay=DelayExpr
		public Assignment getDelayAssignment_2_0_0() { return cDelayAssignment_2_0_0; }

		//DelayExpr
		public RuleCall getDelayDelayExprParserRuleCall_2_0_0_0() { return cDelayDelayExprParserRuleCall_2_0_0_0; }

		//("do" ((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?) "end" "await"?)?
		public Group getGroup_2_0_1() { return cGroup_2_0_1; }

		//"do"
		public Keyword getDoKeyword_2_0_1_0() { return cDoKeyword_2_0_1_0; }

		//((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?)
		public Group getGroup_2_0_1_1() { return cGroup_2_0_1_1; }

		//(statements+=SCEstStatement ";" | statements+=MetaStatement)*
		public Alternatives getAlternatives_2_0_1_1_0() { return cAlternatives_2_0_1_1_0; }

		//statements+=SCEstStatement ";"
		public Group getGroup_2_0_1_1_0_0() { return cGroup_2_0_1_1_0_0; }

		//statements+=SCEstStatement
		public Assignment getStatementsAssignment_2_0_1_1_0_0_0() { return cStatementsAssignment_2_0_1_1_0_0_0; }

		//SCEstStatement
		public RuleCall getStatementsSCEstStatementParserRuleCall_2_0_1_1_0_0_0_0() { return cStatementsSCEstStatementParserRuleCall_2_0_1_1_0_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_2_0_1_1_0_0_1() { return cSemicolonKeyword_2_0_1_1_0_0_1; }

		//statements+=MetaStatement
		public Assignment getStatementsAssignment_2_0_1_1_0_1() { return cStatementsAssignment_2_0_1_1_0_1; }

		//MetaStatement
		public RuleCall getStatementsMetaStatementParserRuleCall_2_0_1_1_0_1_0() { return cStatementsMetaStatementParserRuleCall_2_0_1_1_0_1_0; }

		//statements+=SCEstStatement?
		public Assignment getStatementsAssignment_2_0_1_1_1() { return cStatementsAssignment_2_0_1_1_1; }

		//SCEstStatement
		public RuleCall getStatementsSCEstStatementParserRuleCall_2_0_1_1_1_0() { return cStatementsSCEstStatementParserRuleCall_2_0_1_1_1_0; }

		//"end"
		public Keyword getEndKeyword_2_0_1_2() { return cEndKeyword_2_0_1_2; }

		//"await"?
		public Keyword getAwaitKeyword_2_0_1_3() { return cAwaitKeyword_2_0_1_3; }

		//cases+=Case+ "end" "await"?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//cases+=Case+
		public Assignment getCasesAssignment_2_1_0() { return cCasesAssignment_2_1_0; }

		//Case
		public RuleCall getCasesCaseParserRuleCall_2_1_0_0() { return cCasesCaseParserRuleCall_2_1_0_0; }

		//"end"
		public Keyword getEndKeyword_2_1_1() { return cEndKeyword_2_1_1; }

		//"await"?
		public Keyword getAwaitKeyword_2_1_2() { return cAwaitKeyword_2_1_2; }
	}

	public class EveryDoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.EveryDo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cEveryKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDelayAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDelayDelayExprParserRuleCall_2_0 = (RuleCall)cDelayAssignment_2.eContents().get(0);
		private final Keyword cDoKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Group cGroup_4_0_0 = (Group)cAlternatives_4_0.eContents().get(0);
		private final Assignment cStatementsAssignment_4_0_0_0 = (Assignment)cGroup_4_0_0.eContents().get(0);
		private final RuleCall cStatementsSCEstStatementParserRuleCall_4_0_0_0_0 = (RuleCall)cStatementsAssignment_4_0_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_0_0_1 = (Keyword)cGroup_4_0_0.eContents().get(1);
		private final Assignment cStatementsAssignment_4_0_1 = (Assignment)cAlternatives_4_0.eContents().get(1);
		private final RuleCall cStatementsMetaStatementParserRuleCall_4_0_1_0 = (RuleCall)cStatementsAssignment_4_0_1.eContents().get(0);
		private final Assignment cStatementsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cStatementsSCEstStatementParserRuleCall_4_1_0 = (RuleCall)cStatementsAssignment_4_1.eContents().get(0);
		private final Keyword cEndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEveryKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//// ==> 7.5.9 Temporal Loops
		//// -------------------------------------
		//// for 'LoopEach' look at 7.5.5
		//EveryDo esterel::EveryDo:
		//	annotations+=Annotation*
		//	"every"
		//	delay=DelayExpr
		//	"do" ((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?)
		//	"end" "every"?
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* "every" delay=DelayExpr "do" ((statements+=SCEstStatement ";" | statements+=MetaStatement)*
		//statements+=SCEstStatement?) "end" "every"?
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//"every"
		public Keyword getEveryKeyword_1() { return cEveryKeyword_1; }

		//delay=DelayExpr
		public Assignment getDelayAssignment_2() { return cDelayAssignment_2; }

		//DelayExpr
		public RuleCall getDelayDelayExprParserRuleCall_2_0() { return cDelayDelayExprParserRuleCall_2_0; }

		//"do"
		public Keyword getDoKeyword_3() { return cDoKeyword_3; }

		//((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?)
		public Group getGroup_4() { return cGroup_4; }

		//(statements+=SCEstStatement ";" | statements+=MetaStatement)*
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }

		//statements+=SCEstStatement ";"
		public Group getGroup_4_0_0() { return cGroup_4_0_0; }

		//statements+=SCEstStatement
		public Assignment getStatementsAssignment_4_0_0_0() { return cStatementsAssignment_4_0_0_0; }

		//SCEstStatement
		public RuleCall getStatementsSCEstStatementParserRuleCall_4_0_0_0_0() { return cStatementsSCEstStatementParserRuleCall_4_0_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_4_0_0_1() { return cSemicolonKeyword_4_0_0_1; }

		//statements+=MetaStatement
		public Assignment getStatementsAssignment_4_0_1() { return cStatementsAssignment_4_0_1; }

		//MetaStatement
		public RuleCall getStatementsMetaStatementParserRuleCall_4_0_1_0() { return cStatementsMetaStatementParserRuleCall_4_0_1_0; }

		//statements+=SCEstStatement?
		public Assignment getStatementsAssignment_4_1() { return cStatementsAssignment_4_1; }

		//SCEstStatement
		public RuleCall getStatementsSCEstStatementParserRuleCall_4_1_0() { return cStatementsSCEstStatementParserRuleCall_4_1_0; }

		//"end"
		public Keyword getEndKeyword_5() { return cEndKeyword_5; }

		//"every"?
		public Keyword getEveryKeyword_6() { return cEveryKeyword_6; }
	}

	public class SuspendElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.Suspend");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cWeakAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cWeakWeakKeyword_1_0_0 = (Keyword)cWeakAssignment_1_0.eContents().get(0);
		private final Keyword cSuspendKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Group cGroup_2_0_0 = (Group)cAlternatives_2_0.eContents().get(0);
		private final Assignment cStatementsAssignment_2_0_0_0 = (Assignment)cGroup_2_0_0.eContents().get(0);
		private final RuleCall cStatementsSCEstStatementParserRuleCall_2_0_0_0_0 = (RuleCall)cStatementsAssignment_2_0_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_0_0_1 = (Keyword)cGroup_2_0_0.eContents().get(1);
		private final Assignment cStatementsAssignment_2_0_1 = (Assignment)cAlternatives_2_0.eContents().get(1);
		private final RuleCall cStatementsMetaStatementParserRuleCall_2_0_1_0 = (RuleCall)cStatementsAssignment_2_0_1.eContents().get(0);
		private final Assignment cStatementsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cStatementsSCEstStatementParserRuleCall_2_1_0 = (RuleCall)cStatementsAssignment_2_1.eContents().get(0);
		private final Keyword cWhenKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDelayAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDelayDelayExprParserRuleCall_4_0 = (RuleCall)cDelayAssignment_4.eContents().get(0);
		
		//// ==> 7.5.10 The suspend Statement
		//// -------------------------------------
		//Suspend esterel::Suspend:
		//	annotations+=Annotation* (weak?="weak"? "suspend") ((statements+=SCEstStatement ";" | statements+=MetaStatement)*
		//	statements+=SCEstStatement?)
		//	"when"
		//	delay=DelayExpr
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* (weak?="weak"? "suspend") ((statements+=SCEstStatement ";" | statements+=MetaStatement)*
		//statements+=SCEstStatement?) "when" delay=DelayExpr
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//(weak?="weak"? "suspend")
		public Group getGroup_1() { return cGroup_1; }

		//weak?="weak"?
		public Assignment getWeakAssignment_1_0() { return cWeakAssignment_1_0; }

		//"weak"
		public Keyword getWeakWeakKeyword_1_0_0() { return cWeakWeakKeyword_1_0_0; }

		//"suspend"
		public Keyword getSuspendKeyword_1_1() { return cSuspendKeyword_1_1; }

		//((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?)
		public Group getGroup_2() { return cGroup_2; }

		//(statements+=SCEstStatement ";" | statements+=MetaStatement)*
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }

		//statements+=SCEstStatement ";"
		public Group getGroup_2_0_0() { return cGroup_2_0_0; }

		//statements+=SCEstStatement
		public Assignment getStatementsAssignment_2_0_0_0() { return cStatementsAssignment_2_0_0_0; }

		//SCEstStatement
		public RuleCall getStatementsSCEstStatementParserRuleCall_2_0_0_0_0() { return cStatementsSCEstStatementParserRuleCall_2_0_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_2_0_0_1() { return cSemicolonKeyword_2_0_0_1; }

		//statements+=MetaStatement
		public Assignment getStatementsAssignment_2_0_1() { return cStatementsAssignment_2_0_1; }

		//MetaStatement
		public RuleCall getStatementsMetaStatementParserRuleCall_2_0_1_0() { return cStatementsMetaStatementParserRuleCall_2_0_1_0; }

		//statements+=SCEstStatement?
		public Assignment getStatementsAssignment_2_1() { return cStatementsAssignment_2_1; }

		//SCEstStatement
		public RuleCall getStatementsSCEstStatementParserRuleCall_2_1_0() { return cStatementsSCEstStatementParserRuleCall_2_1_0; }

		//"when"
		public Keyword getWhenKeyword_3() { return cWhenKeyword_3; }

		//delay=DelayExpr
		public Assignment getDelayAssignment_4() { return cDelayAssignment_4; }

		//DelayExpr
		public RuleCall getDelayDelayExprParserRuleCall_4_0() { return cDelayDelayExprParserRuleCall_4_0; }
	}

	public class TrapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.Trap");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cTrapKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTrapSignalsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTrapSignalsTrapSignalParserRuleCall_2_0 = (RuleCall)cTrapSignalsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTrapSignalsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTrapSignalsTrapSignalParserRuleCall_3_1_0 = (RuleCall)cTrapSignalsAssignment_3_1.eContents().get(0);
		private final Keyword cInKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Alternatives cAlternatives_5_0 = (Alternatives)cGroup_5.eContents().get(0);
		private final Group cGroup_5_0_0 = (Group)cAlternatives_5_0.eContents().get(0);
		private final Assignment cStatementsAssignment_5_0_0_0 = (Assignment)cGroup_5_0_0.eContents().get(0);
		private final RuleCall cStatementsSCEstStatementParserRuleCall_5_0_0_0_0 = (RuleCall)cStatementsAssignment_5_0_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_0_0_1 = (Keyword)cGroup_5_0_0.eContents().get(1);
		private final Assignment cStatementsAssignment_5_0_1 = (Assignment)cAlternatives_5_0.eContents().get(1);
		private final RuleCall cStatementsMetaStatementParserRuleCall_5_0_1_0 = (RuleCall)cStatementsAssignment_5_0_1.eContents().get(0);
		private final Assignment cStatementsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cStatementsSCEstStatementParserRuleCall_5_1_0 = (RuleCall)cStatementsAssignment_5_1.eContents().get(0);
		private final Assignment cTrapHandlerAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTrapHandlerTrapHandlerParserRuleCall_6_0 = (RuleCall)cTrapHandlerAssignment_6.eContents().get(0);
		private final Keyword cEndKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cTrapKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//// ==> 7.5.11 Traps
		//// -------------------------------------
		//Trap esterel::Trap:
		//	annotations+=Annotation*
		//	"trap"
		//	trapSignals+=TrapSignal ("," trapSignals+=TrapSignal)*
		//	"in" ((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?)
		//	trapHandler+=TrapHandler*
		//	"end" "trap"?
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* "trap" trapSignals+=TrapSignal ("," trapSignals+=TrapSignal)* "in" ((statements+=SCEstStatement
		//";" | statements+=MetaStatement)* statements+=SCEstStatement?) trapHandler+=TrapHandler* "end" "trap"?
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//"trap"
		public Keyword getTrapKeyword_1() { return cTrapKeyword_1; }

		//trapSignals+=TrapSignal
		public Assignment getTrapSignalsAssignment_2() { return cTrapSignalsAssignment_2; }

		//TrapSignal
		public RuleCall getTrapSignalsTrapSignalParserRuleCall_2_0() { return cTrapSignalsTrapSignalParserRuleCall_2_0; }

		//("," trapSignals+=TrapSignal)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//trapSignals+=TrapSignal
		public Assignment getTrapSignalsAssignment_3_1() { return cTrapSignalsAssignment_3_1; }

		//TrapSignal
		public RuleCall getTrapSignalsTrapSignalParserRuleCall_3_1_0() { return cTrapSignalsTrapSignalParserRuleCall_3_1_0; }

		//"in"
		public Keyword getInKeyword_4() { return cInKeyword_4; }

		//((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?)
		public Group getGroup_5() { return cGroup_5; }

		//(statements+=SCEstStatement ";" | statements+=MetaStatement)*
		public Alternatives getAlternatives_5_0() { return cAlternatives_5_0; }

		//statements+=SCEstStatement ";"
		public Group getGroup_5_0_0() { return cGroup_5_0_0; }

		//statements+=SCEstStatement
		public Assignment getStatementsAssignment_5_0_0_0() { return cStatementsAssignment_5_0_0_0; }

		//SCEstStatement
		public RuleCall getStatementsSCEstStatementParserRuleCall_5_0_0_0_0() { return cStatementsSCEstStatementParserRuleCall_5_0_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_5_0_0_1() { return cSemicolonKeyword_5_0_0_1; }

		//statements+=MetaStatement
		public Assignment getStatementsAssignment_5_0_1() { return cStatementsAssignment_5_0_1; }

		//MetaStatement
		public RuleCall getStatementsMetaStatementParserRuleCall_5_0_1_0() { return cStatementsMetaStatementParserRuleCall_5_0_1_0; }

		//statements+=SCEstStatement?
		public Assignment getStatementsAssignment_5_1() { return cStatementsAssignment_5_1; }

		//SCEstStatement
		public RuleCall getStatementsSCEstStatementParserRuleCall_5_1_0() { return cStatementsSCEstStatementParserRuleCall_5_1_0; }

		//trapHandler+=TrapHandler*
		public Assignment getTrapHandlerAssignment_6() { return cTrapHandlerAssignment_6; }

		//TrapHandler
		public RuleCall getTrapHandlerTrapHandlerParserRuleCall_6_0() { return cTrapHandlerTrapHandlerParserRuleCall_6_0; }

		//"end"
		public Keyword getEndKeyword_7() { return cEndKeyword_7; }

		//"trap"?
		public Keyword getTrapKeyword_8() { return cTrapKeyword_8; }
	}

	public class TrapHandlerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.TrapHandler");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cHandleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTrapExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTrapExprTrapExprParserRuleCall_2_0 = (RuleCall)cTrapExprAssignment_2.eContents().get(0);
		private final Keyword cDoKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Group cGroup_4_0_0 = (Group)cAlternatives_4_0.eContents().get(0);
		private final Assignment cStatementsAssignment_4_0_0_0 = (Assignment)cGroup_4_0_0.eContents().get(0);
		private final RuleCall cStatementsSCEstStatementParserRuleCall_4_0_0_0_0 = (RuleCall)cStatementsAssignment_4_0_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_0_0_1 = (Keyword)cGroup_4_0_0.eContents().get(1);
		private final Assignment cStatementsAssignment_4_0_1 = (Assignment)cAlternatives_4_0.eContents().get(1);
		private final RuleCall cStatementsMetaStatementParserRuleCall_4_0_1_0 = (RuleCall)cStatementsAssignment_4_0_1.eContents().get(0);
		private final Assignment cStatementsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cStatementsSCEstStatementParserRuleCall_4_1_0 = (RuleCall)cStatementsAssignment_4_1.eContents().get(0);
		
		//TrapHandler esterel::TrapHandler:
		//	annotations+=Annotation*
		//	"handle"
		//	trapExpr=TrapExpr
		//	"do" ((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?)
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* "handle" trapExpr=TrapExpr "do" ((statements+=SCEstStatement ";" | statements+=MetaStatement)*
		//statements+=SCEstStatement?)
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//"handle"
		public Keyword getHandleKeyword_1() { return cHandleKeyword_1; }

		//trapExpr=TrapExpr
		public Assignment getTrapExprAssignment_2() { return cTrapExprAssignment_2; }

		//TrapExpr
		public RuleCall getTrapExprTrapExprParserRuleCall_2_0() { return cTrapExprTrapExprParserRuleCall_2_0; }

		//"do"
		public Keyword getDoKeyword_3() { return cDoKeyword_3; }

		//((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?)
		public Group getGroup_4() { return cGroup_4; }

		//(statements+=SCEstStatement ";" | statements+=MetaStatement)*
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }

		//statements+=SCEstStatement ";"
		public Group getGroup_4_0_0() { return cGroup_4_0_0; }

		//statements+=SCEstStatement
		public Assignment getStatementsAssignment_4_0_0_0() { return cStatementsAssignment_4_0_0_0; }

		//SCEstStatement
		public RuleCall getStatementsSCEstStatementParserRuleCall_4_0_0_0_0() { return cStatementsSCEstStatementParserRuleCall_4_0_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_4_0_0_1() { return cSemicolonKeyword_4_0_0_1; }

		//statements+=MetaStatement
		public Assignment getStatementsAssignment_4_0_1() { return cStatementsAssignment_4_0_1; }

		//MetaStatement
		public RuleCall getStatementsMetaStatementParserRuleCall_4_0_1_0() { return cStatementsMetaStatementParserRuleCall_4_0_1_0; }

		//statements+=SCEstStatement?
		public Assignment getStatementsAssignment_4_1() { return cStatementsAssignment_4_1; }

		//SCEstStatement
		public RuleCall getStatementsSCEstStatementParserRuleCall_4_1_0() { return cStatementsSCEstStatementParserRuleCall_4_1_0; }
	}

	public class ExecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.Exec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cExecKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cTaskAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final CrossReference cTaskTaskCrossReference_1_0_1_0 = (CrossReference)cTaskAssignment_1_0_1.eContents().get(0);
		private final RuleCall cTaskTaskIDTerminalRuleCall_1_0_1_0_1 = (RuleCall)cTaskTaskCrossReference_1_0_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Group cGroup_1_0_3 = (Group)cGroup_1_0.eContents().get(3);
		private final Assignment cVarsAssignment_1_0_3_0 = (Assignment)cGroup_1_0_3.eContents().get(0);
		private final CrossReference cVarsIVariableCrossReference_1_0_3_0_0 = (CrossReference)cVarsAssignment_1_0_3_0.eContents().get(0);
		private final RuleCall cVarsIVariableIDTerminalRuleCall_1_0_3_0_0_1 = (RuleCall)cVarsIVariableCrossReference_1_0_3_0_0.eContents().get(1);
		private final Group cGroup_1_0_3_1 = (Group)cGroup_1_0_3.eContents().get(1);
		private final Keyword cCommaKeyword_1_0_3_1_0 = (Keyword)cGroup_1_0_3_1.eContents().get(0);
		private final Assignment cVarsAssignment_1_0_3_1_1 = (Assignment)cGroup_1_0_3_1.eContents().get(1);
		private final CrossReference cVarsIVariableCrossReference_1_0_3_1_1_0 = (CrossReference)cVarsAssignment_1_0_3_1_1.eContents().get(0);
		private final RuleCall cVarsIVariableIDTerminalRuleCall_1_0_3_1_1_0_1 = (RuleCall)cVarsIVariableCrossReference_1_0_3_1_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_0_4 = (Keyword)cGroup_1_0.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_1_0_5 = (Keyword)cGroup_1_0.eContents().get(5);
		private final Group cGroup_1_0_6 = (Group)cGroup_1_0.eContents().get(6);
		private final Assignment cKexpressionsAssignment_1_0_6_0 = (Assignment)cGroup_1_0_6.eContents().get(0);
		private final RuleCall cKexpressionsExpressionParserRuleCall_1_0_6_0_0 = (RuleCall)cKexpressionsAssignment_1_0_6_0.eContents().get(0);
		private final Group cGroup_1_0_6_1 = (Group)cGroup_1_0_6.eContents().get(1);
		private final Keyword cCommaKeyword_1_0_6_1_0 = (Keyword)cGroup_1_0_6_1.eContents().get(0);
		private final Assignment cKexpressionsAssignment_1_0_6_1_1 = (Assignment)cGroup_1_0_6_1.eContents().get(1);
		private final RuleCall cKexpressionsExpressionParserRuleCall_1_0_6_1_1_0 = (RuleCall)cKexpressionsAssignment_1_0_6_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_7 = (Keyword)cGroup_1_0.eContents().get(7);
		private final Keyword cReturnKeyword_1_0_8 = (Keyword)cGroup_1_0.eContents().get(8);
		private final Assignment cRetSignalAssignment_1_0_9 = (Assignment)cGroup_1_0.eContents().get(9);
		private final CrossReference cRetSignalISignalCrossReference_1_0_9_0 = (CrossReference)cRetSignalAssignment_1_0_9.eContents().get(0);
		private final RuleCall cRetSignalISignalIDTerminalRuleCall_1_0_9_0_1 = (RuleCall)cRetSignalISignalCrossReference_1_0_9_0.eContents().get(1);
		private final Group cGroup_1_0_10 = (Group)cGroup_1_0.eContents().get(10);
		private final Keyword cDoKeyword_1_0_10_0 = (Keyword)cGroup_1_0_10.eContents().get(0);
		private final Group cGroup_1_0_10_1 = (Group)cGroup_1_0_10.eContents().get(1);
		private final Alternatives cAlternatives_1_0_10_1_0 = (Alternatives)cGroup_1_0_10_1.eContents().get(0);
		private final Group cGroup_1_0_10_1_0_0 = (Group)cAlternatives_1_0_10_1_0.eContents().get(0);
		private final Assignment cStatementsAssignment_1_0_10_1_0_0_0 = (Assignment)cGroup_1_0_10_1_0_0.eContents().get(0);
		private final RuleCall cStatementsSCEstStatementParserRuleCall_1_0_10_1_0_0_0_0 = (RuleCall)cStatementsAssignment_1_0_10_1_0_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_0_10_1_0_0_1 = (Keyword)cGroup_1_0_10_1_0_0.eContents().get(1);
		private final Assignment cStatementsAssignment_1_0_10_1_0_1 = (Assignment)cAlternatives_1_0_10_1_0.eContents().get(1);
		private final RuleCall cStatementsMetaStatementParserRuleCall_1_0_10_1_0_1_0 = (RuleCall)cStatementsAssignment_1_0_10_1_0_1.eContents().get(0);
		private final Assignment cStatementsAssignment_1_0_10_1_1 = (Assignment)cGroup_1_0_10_1.eContents().get(1);
		private final RuleCall cStatementsSCEstStatementParserRuleCall_1_0_10_1_1_0 = (RuleCall)cStatementsAssignment_1_0_10_1_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cExecKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cExecCaseListAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cExecCaseListExecCaseParserRuleCall_1_1_1_0 = (RuleCall)cExecCaseListAssignment_1_1_1.eContents().get(0);
		private final Keyword cEndKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cExecKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// ==> 7.5.12 The exec Task Execution Statement
		//// -------------------------------------
		//Exec esterel::Exec:
		//	annotations+=Annotation* ("exec" task=[esterel::Task]
		//	"(" (vars+=[esterel::IVariable] ("," vars+=[esterel::IVariable])*)? ")"
		//	"(" (kexpressions+=Expression ("," kexpressions+=Expression)*)? ")"
		//	"return"
		//	retSignal=[esterel::ISignal] ("do" ((statements+=SCEstStatement ";" | statements+=MetaStatement)*
		//	statements+=SCEstStatement?))?
		//	|
		//	"exec" execCaseList+=ExecCase+)
		//	"end" "exec"?
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* ("exec" task=[esterel::Task] "(" (vars+=[esterel::IVariable] (","
		//vars+=[esterel::IVariable])*)? ")" "(" (kexpressions+=Expression ("," kexpressions+=Expression)*)? ")" "return"
		//retSignal=[esterel::ISignal] ("do" ((statements+=SCEstStatement ";" | statements+=MetaStatement)*
		//statements+=SCEstStatement?))? | "exec" execCaseList+=ExecCase+) "end" "exec"?
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//("exec" task=[esterel::Task] "(" (vars+=[esterel::IVariable] ("," vars+=[esterel::IVariable])*)? ")" "("
		//(kexpressions+=Expression ("," kexpressions+=Expression)*)? ")" "return" retSignal=[esterel::ISignal] ("do"
		//((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?))? | "exec"
		//execCaseList+=ExecCase+)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"exec" task=[esterel::Task] "(" (vars+=[esterel::IVariable] ("," vars+=[esterel::IVariable])*)? ")" "("
		//(kexpressions+=Expression ("," kexpressions+=Expression)*)? ")" "return" retSignal=[esterel::ISignal] ("do"
		//((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?))?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"exec"
		public Keyword getExecKeyword_1_0_0() { return cExecKeyword_1_0_0; }

		//task=[esterel::Task]
		public Assignment getTaskAssignment_1_0_1() { return cTaskAssignment_1_0_1; }

		//[esterel::Task]
		public CrossReference getTaskTaskCrossReference_1_0_1_0() { return cTaskTaskCrossReference_1_0_1_0; }

		//ID
		public RuleCall getTaskTaskIDTerminalRuleCall_1_0_1_0_1() { return cTaskTaskIDTerminalRuleCall_1_0_1_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0_2() { return cLeftParenthesisKeyword_1_0_2; }

		//(vars+=[esterel::IVariable] ("," vars+=[esterel::IVariable])*)?
		public Group getGroup_1_0_3() { return cGroup_1_0_3; }

		//vars+=[esterel::IVariable]
		public Assignment getVarsAssignment_1_0_3_0() { return cVarsAssignment_1_0_3_0; }

		//[esterel::IVariable]
		public CrossReference getVarsIVariableCrossReference_1_0_3_0_0() { return cVarsIVariableCrossReference_1_0_3_0_0; }

		//ID
		public RuleCall getVarsIVariableIDTerminalRuleCall_1_0_3_0_0_1() { return cVarsIVariableIDTerminalRuleCall_1_0_3_0_0_1; }

		//("," vars+=[esterel::IVariable])*
		public Group getGroup_1_0_3_1() { return cGroup_1_0_3_1; }

		//","
		public Keyword getCommaKeyword_1_0_3_1_0() { return cCommaKeyword_1_0_3_1_0; }

		//vars+=[esterel::IVariable]
		public Assignment getVarsAssignment_1_0_3_1_1() { return cVarsAssignment_1_0_3_1_1; }

		//[esterel::IVariable]
		public CrossReference getVarsIVariableCrossReference_1_0_3_1_1_0() { return cVarsIVariableCrossReference_1_0_3_1_1_0; }

		//ID
		public RuleCall getVarsIVariableIDTerminalRuleCall_1_0_3_1_1_0_1() { return cVarsIVariableIDTerminalRuleCall_1_0_3_1_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_0_4() { return cRightParenthesisKeyword_1_0_4; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0_5() { return cLeftParenthesisKeyword_1_0_5; }

		//(kexpressions+=Expression ("," kexpressions+=Expression)*)?
		public Group getGroup_1_0_6() { return cGroup_1_0_6; }

		//kexpressions+=Expression
		public Assignment getKexpressionsAssignment_1_0_6_0() { return cKexpressionsAssignment_1_0_6_0; }

		//Expression
		public RuleCall getKexpressionsExpressionParserRuleCall_1_0_6_0_0() { return cKexpressionsExpressionParserRuleCall_1_0_6_0_0; }

		//("," kexpressions+=Expression)*
		public Group getGroup_1_0_6_1() { return cGroup_1_0_6_1; }

		//","
		public Keyword getCommaKeyword_1_0_6_1_0() { return cCommaKeyword_1_0_6_1_0; }

		//kexpressions+=Expression
		public Assignment getKexpressionsAssignment_1_0_6_1_1() { return cKexpressionsAssignment_1_0_6_1_1; }

		//Expression
		public RuleCall getKexpressionsExpressionParserRuleCall_1_0_6_1_1_0() { return cKexpressionsExpressionParserRuleCall_1_0_6_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_0_7() { return cRightParenthesisKeyword_1_0_7; }

		//"return"
		public Keyword getReturnKeyword_1_0_8() { return cReturnKeyword_1_0_8; }

		//retSignal=[esterel::ISignal]
		public Assignment getRetSignalAssignment_1_0_9() { return cRetSignalAssignment_1_0_9; }

		//[esterel::ISignal]
		public CrossReference getRetSignalISignalCrossReference_1_0_9_0() { return cRetSignalISignalCrossReference_1_0_9_0; }

		//ID
		public RuleCall getRetSignalISignalIDTerminalRuleCall_1_0_9_0_1() { return cRetSignalISignalIDTerminalRuleCall_1_0_9_0_1; }

		//("do" ((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?))?
		public Group getGroup_1_0_10() { return cGroup_1_0_10; }

		//"do"
		public Keyword getDoKeyword_1_0_10_0() { return cDoKeyword_1_0_10_0; }

		//((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?)
		public Group getGroup_1_0_10_1() { return cGroup_1_0_10_1; }

		//(statements+=SCEstStatement ";" | statements+=MetaStatement)*
		public Alternatives getAlternatives_1_0_10_1_0() { return cAlternatives_1_0_10_1_0; }

		//statements+=SCEstStatement ";"
		public Group getGroup_1_0_10_1_0_0() { return cGroup_1_0_10_1_0_0; }

		//statements+=SCEstStatement
		public Assignment getStatementsAssignment_1_0_10_1_0_0_0() { return cStatementsAssignment_1_0_10_1_0_0_0; }

		//SCEstStatement
		public RuleCall getStatementsSCEstStatementParserRuleCall_1_0_10_1_0_0_0_0() { return cStatementsSCEstStatementParserRuleCall_1_0_10_1_0_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1_0_10_1_0_0_1() { return cSemicolonKeyword_1_0_10_1_0_0_1; }

		//statements+=MetaStatement
		public Assignment getStatementsAssignment_1_0_10_1_0_1() { return cStatementsAssignment_1_0_10_1_0_1; }

		//MetaStatement
		public RuleCall getStatementsMetaStatementParserRuleCall_1_0_10_1_0_1_0() { return cStatementsMetaStatementParserRuleCall_1_0_10_1_0_1_0; }

		//statements+=SCEstStatement?
		public Assignment getStatementsAssignment_1_0_10_1_1() { return cStatementsAssignment_1_0_10_1_1; }

		//SCEstStatement
		public RuleCall getStatementsSCEstStatementParserRuleCall_1_0_10_1_1_0() { return cStatementsSCEstStatementParserRuleCall_1_0_10_1_1_0; }

		//"exec" execCaseList+=ExecCase+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"exec"
		public Keyword getExecKeyword_1_1_0() { return cExecKeyword_1_1_0; }

		//execCaseList+=ExecCase+
		public Assignment getExecCaseListAssignment_1_1_1() { return cExecCaseListAssignment_1_1_1; }

		//ExecCase
		public RuleCall getExecCaseListExecCaseParserRuleCall_1_1_1_0() { return cExecCaseListExecCaseParserRuleCall_1_1_1_0; }

		//"end"
		public Keyword getEndKeyword_2() { return cEndKeyword_2; }

		//"exec"?
		public Keyword getExecKeyword_3() { return cExecKeyword_3; }
	}

	public class ExecCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.ExecCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cCaseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTaskAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTaskTaskCrossReference_2_0 = (CrossReference)cTaskAssignment_2.eContents().get(0);
		private final RuleCall cTaskTaskIDTerminalRuleCall_2_0_1 = (RuleCall)cTaskTaskCrossReference_2_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cVarsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final CrossReference cVarsIVariableCrossReference_4_0_0 = (CrossReference)cVarsAssignment_4_0.eContents().get(0);
		private final RuleCall cVarsIVariableIDTerminalRuleCall_4_0_0_1 = (RuleCall)cVarsIVariableCrossReference_4_0_0.eContents().get(1);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cVarsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final CrossReference cVarsIVariableCrossReference_4_1_1_0 = (CrossReference)cVarsAssignment_4_1_1.eContents().get(0);
		private final RuleCall cVarsIVariableIDTerminalRuleCall_4_1_1_0_1 = (RuleCall)cVarsIVariableCrossReference_4_1_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cKexpressionsAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cKexpressionsExpressionParserRuleCall_7_0_0 = (RuleCall)cKexpressionsAssignment_7_0.eContents().get(0);
		private final Group cGroup_7_1 = (Group)cGroup_7.eContents().get(1);
		private final Keyword cCommaKeyword_7_1_0 = (Keyword)cGroup_7_1.eContents().get(0);
		private final Assignment cKexpressionsAssignment_7_1_1 = (Assignment)cGroup_7_1.eContents().get(1);
		private final RuleCall cKexpressionsExpressionParserRuleCall_7_1_1_0 = (RuleCall)cKexpressionsAssignment_7_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cReturnKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cRetSignalAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final CrossReference cRetSignalISignalCrossReference_10_0 = (CrossReference)cRetSignalAssignment_10.eContents().get(0);
		private final RuleCall cRetSignalISignalIDTerminalRuleCall_10_0_1 = (RuleCall)cRetSignalISignalCrossReference_10_0.eContents().get(1);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cDoKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Group cGroup_11_1 = (Group)cGroup_11.eContents().get(1);
		private final Alternatives cAlternatives_11_1_0 = (Alternatives)cGroup_11_1.eContents().get(0);
		private final Group cGroup_11_1_0_0 = (Group)cAlternatives_11_1_0.eContents().get(0);
		private final Assignment cStatementsAssignment_11_1_0_0_0 = (Assignment)cGroup_11_1_0_0.eContents().get(0);
		private final RuleCall cStatementsSCEstStatementParserRuleCall_11_1_0_0_0_0 = (RuleCall)cStatementsAssignment_11_1_0_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_11_1_0_0_1 = (Keyword)cGroup_11_1_0_0.eContents().get(1);
		private final Assignment cStatementsAssignment_11_1_0_1 = (Assignment)cAlternatives_11_1_0.eContents().get(1);
		private final RuleCall cStatementsMetaStatementParserRuleCall_11_1_0_1_0 = (RuleCall)cStatementsAssignment_11_1_0_1.eContents().get(0);
		private final Assignment cStatementsAssignment_11_1_1 = (Assignment)cGroup_11_1.eContents().get(1);
		private final RuleCall cStatementsSCEstStatementParserRuleCall_11_1_1_0 = (RuleCall)cStatementsAssignment_11_1_1.eContents().get(0);
		
		//ExecCase esterel::ExecCase:
		//	annotations+=Annotation*
		//	"case" task=[esterel::Task]
		//	"(" (vars+=[esterel::IVariable] ("," vars+=[esterel::IVariable])*)? ")"
		//	"(" (kexpressions+=Expression ("," kexpressions+=Expression)*)? ")"
		//	"return"
		//	retSignal=[esterel::ISignal] ("do" ((statements+=SCEstStatement ";" | statements+=MetaStatement)*
		//	statements+=SCEstStatement?))?
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* "case" task=[esterel::Task] "(" (vars+=[esterel::IVariable] ("," vars+=[esterel::IVariable])*)?
		//")" "(" (kexpressions+=Expression ("," kexpressions+=Expression)*)? ")" "return" retSignal=[esterel::ISignal] ("do"
		//((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?))?
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//"case"
		public Keyword getCaseKeyword_1() { return cCaseKeyword_1; }

		//task=[esterel::Task]
		public Assignment getTaskAssignment_2() { return cTaskAssignment_2; }

		//[esterel::Task]
		public CrossReference getTaskTaskCrossReference_2_0() { return cTaskTaskCrossReference_2_0; }

		//ID
		public RuleCall getTaskTaskIDTerminalRuleCall_2_0_1() { return cTaskTaskIDTerminalRuleCall_2_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//(vars+=[esterel::IVariable] ("," vars+=[esterel::IVariable])*)?
		public Group getGroup_4() { return cGroup_4; }

		//vars+=[esterel::IVariable]
		public Assignment getVarsAssignment_4_0() { return cVarsAssignment_4_0; }

		//[esterel::IVariable]
		public CrossReference getVarsIVariableCrossReference_4_0_0() { return cVarsIVariableCrossReference_4_0_0; }

		//ID
		public RuleCall getVarsIVariableIDTerminalRuleCall_4_0_0_1() { return cVarsIVariableIDTerminalRuleCall_4_0_0_1; }

		//("," vars+=[esterel::IVariable])*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//vars+=[esterel::IVariable]
		public Assignment getVarsAssignment_4_1_1() { return cVarsAssignment_4_1_1; }

		//[esterel::IVariable]
		public CrossReference getVarsIVariableCrossReference_4_1_1_0() { return cVarsIVariableCrossReference_4_1_1_0; }

		//ID
		public RuleCall getVarsIVariableIDTerminalRuleCall_4_1_1_0_1() { return cVarsIVariableIDTerminalRuleCall_4_1_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//"("
		public Keyword getLeftParenthesisKeyword_6() { return cLeftParenthesisKeyword_6; }

		//(kexpressions+=Expression ("," kexpressions+=Expression)*)?
		public Group getGroup_7() { return cGroup_7; }

		//kexpressions+=Expression
		public Assignment getKexpressionsAssignment_7_0() { return cKexpressionsAssignment_7_0; }

		//Expression
		public RuleCall getKexpressionsExpressionParserRuleCall_7_0_0() { return cKexpressionsExpressionParserRuleCall_7_0_0; }

		//("," kexpressions+=Expression)*
		public Group getGroup_7_1() { return cGroup_7_1; }

		//","
		public Keyword getCommaKeyword_7_1_0() { return cCommaKeyword_7_1_0; }

		//kexpressions+=Expression
		public Assignment getKexpressionsAssignment_7_1_1() { return cKexpressionsAssignment_7_1_1; }

		//Expression
		public RuleCall getKexpressionsExpressionParserRuleCall_7_1_1_0() { return cKexpressionsExpressionParserRuleCall_7_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }

		//"return"
		public Keyword getReturnKeyword_9() { return cReturnKeyword_9; }

		//retSignal=[esterel::ISignal]
		public Assignment getRetSignalAssignment_10() { return cRetSignalAssignment_10; }

		//[esterel::ISignal]
		public CrossReference getRetSignalISignalCrossReference_10_0() { return cRetSignalISignalCrossReference_10_0; }

		//ID
		public RuleCall getRetSignalISignalIDTerminalRuleCall_10_0_1() { return cRetSignalISignalIDTerminalRuleCall_10_0_1; }

		//("do" ((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?))?
		public Group getGroup_11() { return cGroup_11; }

		//"do"
		public Keyword getDoKeyword_11_0() { return cDoKeyword_11_0; }

		//((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?)
		public Group getGroup_11_1() { return cGroup_11_1; }

		//(statements+=SCEstStatement ";" | statements+=MetaStatement)*
		public Alternatives getAlternatives_11_1_0() { return cAlternatives_11_1_0; }

		//statements+=SCEstStatement ";"
		public Group getGroup_11_1_0_0() { return cGroup_11_1_0_0; }

		//statements+=SCEstStatement
		public Assignment getStatementsAssignment_11_1_0_0_0() { return cStatementsAssignment_11_1_0_0_0; }

		//SCEstStatement
		public RuleCall getStatementsSCEstStatementParserRuleCall_11_1_0_0_0_0() { return cStatementsSCEstStatementParserRuleCall_11_1_0_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_11_1_0_0_1() { return cSemicolonKeyword_11_1_0_0_1; }

		//statements+=MetaStatement
		public Assignment getStatementsAssignment_11_1_0_1() { return cStatementsAssignment_11_1_0_1; }

		//MetaStatement
		public RuleCall getStatementsMetaStatementParserRuleCall_11_1_0_1_0() { return cStatementsMetaStatementParserRuleCall_11_1_0_1_0; }

		//statements+=SCEstStatement?
		public Assignment getStatementsAssignment_11_1_1() { return cStatementsAssignment_11_1_1; }

		//SCEstStatement
		public RuleCall getStatementsSCEstStatementParserRuleCall_11_1_1_0() { return cStatementsSCEstStatementParserRuleCall_11_1_1_0; }
	}

	public class LocalSignalDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.LocalSignalDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cSignalKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSignalsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSignalsISignalParserRuleCall_2_0 = (RuleCall)cSignalsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSignalsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSignalsISignalParserRuleCall_3_1_0 = (RuleCall)cSignalsAssignment_3_1.eContents().get(0);
		private final Keyword cInKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Alternatives cAlternatives_5_0 = (Alternatives)cGroup_5.eContents().get(0);
		private final Group cGroup_5_0_0 = (Group)cAlternatives_5_0.eContents().get(0);
		private final Assignment cStatementsAssignment_5_0_0_0 = (Assignment)cGroup_5_0_0.eContents().get(0);
		private final RuleCall cStatementsSCEstStatementParserRuleCall_5_0_0_0_0 = (RuleCall)cStatementsAssignment_5_0_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_0_0_1 = (Keyword)cGroup_5_0_0.eContents().get(1);
		private final Assignment cStatementsAssignment_5_0_1 = (Assignment)cAlternatives_5_0.eContents().get(1);
		private final RuleCall cStatementsMetaStatementParserRuleCall_5_0_1_0 = (RuleCall)cStatementsAssignment_5_0_1.eContents().get(0);
		private final Assignment cStatementsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cStatementsSCEstStatementParserRuleCall_5_1_0 = (RuleCall)cStatementsAssignment_5_1.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cSignalKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//// ==> 7.5.13 Local Signal Declaration    
		//// -------------------------------------
		//LocalSignalDecl esterel::LocalSignalDecl:
		//	annotations+=Annotation*
		//	"signal" signals+=ISignal ("," signals+=ISignal)*
		//	"in" ((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?)
		//	"end" "signal"?
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* "signal" signals+=ISignal ("," signals+=ISignal)* "in" ((statements+=SCEstStatement ";" |
		//statements+=MetaStatement)* statements+=SCEstStatement?) "end" "signal"?
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//"signal"
		public Keyword getSignalKeyword_1() { return cSignalKeyword_1; }

		//signals+=ISignal
		public Assignment getSignalsAssignment_2() { return cSignalsAssignment_2; }

		//ISignal
		public RuleCall getSignalsISignalParserRuleCall_2_0() { return cSignalsISignalParserRuleCall_2_0; }

		//("," signals+=ISignal)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//signals+=ISignal
		public Assignment getSignalsAssignment_3_1() { return cSignalsAssignment_3_1; }

		//ISignal
		public RuleCall getSignalsISignalParserRuleCall_3_1_0() { return cSignalsISignalParserRuleCall_3_1_0; }

		//"in"
		public Keyword getInKeyword_4() { return cInKeyword_4; }

		//((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?)
		public Group getGroup_5() { return cGroup_5; }

		//(statements+=SCEstStatement ";" | statements+=MetaStatement)*
		public Alternatives getAlternatives_5_0() { return cAlternatives_5_0; }

		//statements+=SCEstStatement ";"
		public Group getGroup_5_0_0() { return cGroup_5_0_0; }

		//statements+=SCEstStatement
		public Assignment getStatementsAssignment_5_0_0_0() { return cStatementsAssignment_5_0_0_0; }

		//SCEstStatement
		public RuleCall getStatementsSCEstStatementParserRuleCall_5_0_0_0_0() { return cStatementsSCEstStatementParserRuleCall_5_0_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_5_0_0_1() { return cSemicolonKeyword_5_0_0_1; }

		//statements+=MetaStatement
		public Assignment getStatementsAssignment_5_0_1() { return cStatementsAssignment_5_0_1; }

		//MetaStatement
		public RuleCall getStatementsMetaStatementParserRuleCall_5_0_1_0() { return cStatementsMetaStatementParserRuleCall_5_0_1_0; }

		//statements+=SCEstStatement?
		public Assignment getStatementsAssignment_5_1() { return cStatementsAssignment_5_1; }

		//SCEstStatement
		public RuleCall getStatementsSCEstStatementParserRuleCall_5_1_0() { return cStatementsSCEstStatementParserRuleCall_5_1_0; }

		//"end"
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }

		//"signal"?
		public Keyword getSignalKeyword_7() { return cSignalKeyword_7; }
	}

	public class LocalVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.LocalVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cVarKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVarDeclsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarDeclsVariableDeclParserRuleCall_2_0 = (RuleCall)cVarDeclsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cVarDeclsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cVarDeclsVariableDeclParserRuleCall_3_1_0 = (RuleCall)cVarDeclsAssignment_3_1.eContents().get(0);
		private final Keyword cInKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Alternatives cAlternatives_5_0 = (Alternatives)cGroup_5.eContents().get(0);
		private final Group cGroup_5_0_0 = (Group)cAlternatives_5_0.eContents().get(0);
		private final Assignment cStatementsAssignment_5_0_0_0 = (Assignment)cGroup_5_0_0.eContents().get(0);
		private final RuleCall cStatementsSCEstStatementParserRuleCall_5_0_0_0_0 = (RuleCall)cStatementsAssignment_5_0_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_0_0_1 = (Keyword)cGroup_5_0_0.eContents().get(1);
		private final Assignment cStatementsAssignment_5_0_1 = (Assignment)cAlternatives_5_0.eContents().get(1);
		private final RuleCall cStatementsMetaStatementParserRuleCall_5_0_1_0 = (RuleCall)cStatementsAssignment_5_0_1.eContents().get(0);
		private final Assignment cStatementsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cStatementsSCEstStatementParserRuleCall_5_1_0 = (RuleCall)cStatementsAssignment_5_1.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cVarKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//// ==> 7.5.14 Local Variable Declaration
		//// ------------------------------------- 
		//LocalVariable esterel::LocalVariable:
		//	annotations+=Annotation*
		//	"var"
		//	varDecls+=VariableDecl ("," varDecls+=VariableDecl)*
		//	"in" ((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?)
		//	"end" "var"?
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* "var" varDecls+=VariableDecl ("," varDecls+=VariableDecl)* "in" ((statements+=SCEstStatement
		//";" | statements+=MetaStatement)* statements+=SCEstStatement?) "end" "var"?
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//"var"
		public Keyword getVarKeyword_1() { return cVarKeyword_1; }

		//varDecls+=VariableDecl
		public Assignment getVarDeclsAssignment_2() { return cVarDeclsAssignment_2; }

		//VariableDecl
		public RuleCall getVarDeclsVariableDeclParserRuleCall_2_0() { return cVarDeclsVariableDeclParserRuleCall_2_0; }

		//("," varDecls+=VariableDecl)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//varDecls+=VariableDecl
		public Assignment getVarDeclsAssignment_3_1() { return cVarDeclsAssignment_3_1; }

		//VariableDecl
		public RuleCall getVarDeclsVariableDeclParserRuleCall_3_1_0() { return cVarDeclsVariableDeclParserRuleCall_3_1_0; }

		//"in"
		public Keyword getInKeyword_4() { return cInKeyword_4; }

		//((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?)
		public Group getGroup_5() { return cGroup_5; }

		//(statements+=SCEstStatement ";" | statements+=MetaStatement)*
		public Alternatives getAlternatives_5_0() { return cAlternatives_5_0; }

		//statements+=SCEstStatement ";"
		public Group getGroup_5_0_0() { return cGroup_5_0_0; }

		//statements+=SCEstStatement
		public Assignment getStatementsAssignment_5_0_0_0() { return cStatementsAssignment_5_0_0_0; }

		//SCEstStatement
		public RuleCall getStatementsSCEstStatementParserRuleCall_5_0_0_0_0() { return cStatementsSCEstStatementParserRuleCall_5_0_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_5_0_0_1() { return cSemicolonKeyword_5_0_0_1; }

		//statements+=MetaStatement
		public Assignment getStatementsAssignment_5_0_1() { return cStatementsAssignment_5_0_1; }

		//MetaStatement
		public RuleCall getStatementsMetaStatementParserRuleCall_5_0_1_0() { return cStatementsMetaStatementParserRuleCall_5_0_1_0; }

		//statements+=SCEstStatement?
		public Assignment getStatementsAssignment_5_1() { return cStatementsAssignment_5_1; }

		//SCEstStatement
		public RuleCall getStatementsSCEstStatementParserRuleCall_5_1_0() { return cStatementsSCEstStatementParserRuleCall_5_1_0; }

		//"end"
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }

		//"var"?
		public Keyword getVarKeyword_7() { return cVarKeyword_7; }
	}

	public class DoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.Do");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cDoKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Group cGroup_2_0_0 = (Group)cAlternatives_2_0.eContents().get(0);
		private final Assignment cStatementsAssignment_2_0_0_0 = (Assignment)cGroup_2_0_0.eContents().get(0);
		private final RuleCall cStatementsSCEstStatementParserRuleCall_2_0_0_0_0 = (RuleCall)cStatementsAssignment_2_0_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_0_0_1 = (Keyword)cGroup_2_0_0.eContents().get(1);
		private final Assignment cStatementsAssignment_2_0_1 = (Assignment)cAlternatives_2_0.eContents().get(1);
		private final RuleCall cStatementsMetaStatementParserRuleCall_2_0_1_0 = (RuleCall)cStatementsAssignment_2_0_1.eContents().get(0);
		private final Assignment cStatementsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cStatementsSCEstStatementParserRuleCall_2_1_0 = (RuleCall)cStatementsAssignment_2_1.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Assignment cEndingAnnotationsAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final RuleCall cEndingAnnotationsAnnotationParserRuleCall_3_0_0_0 = (RuleCall)cEndingAnnotationsAssignment_3_0_0.eContents().get(0);
		private final Keyword cUptoKeyword_3_0_1 = (Keyword)cGroup_3_0.eContents().get(1);
		private final Assignment cExpressionAssignment_3_0_2 = (Assignment)cGroup_3_0.eContents().get(2);
		private final RuleCall cExpressionDelayExprParserRuleCall_3_0_2_0 = (RuleCall)cExpressionAssignment_3_0_2.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Assignment cEndingAnnotationsAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cEndingAnnotationsAnnotationParserRuleCall_3_1_0_0 = (RuleCall)cEndingAnnotationsAssignment_3_1_0.eContents().get(0);
		private final Keyword cWatchingKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Assignment cDelayAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final RuleCall cDelayDelayExprParserRuleCall_3_1_2_0 = (RuleCall)cDelayAssignment_3_1_2.eContents().get(0);
		private final Group cGroup_3_1_3 = (Group)cGroup_3_1.eContents().get(3);
		private final Keyword cTimeoutKeyword_3_1_3_0 = (Keyword)cGroup_3_1_3.eContents().get(0);
		private final Group cGroup_3_1_3_1 = (Group)cGroup_3_1_3.eContents().get(1);
		private final Alternatives cAlternatives_3_1_3_1_0 = (Alternatives)cGroup_3_1_3_1.eContents().get(0);
		private final Group cGroup_3_1_3_1_0_0 = (Group)cAlternatives_3_1_3_1_0.eContents().get(0);
		private final Assignment cWatchingStatementsAssignment_3_1_3_1_0_0_0 = (Assignment)cGroup_3_1_3_1_0_0.eContents().get(0);
		private final RuleCall cWatchingStatementsSCEstStatementParserRuleCall_3_1_3_1_0_0_0_0 = (RuleCall)cWatchingStatementsAssignment_3_1_3_1_0_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1_3_1_0_0_1 = (Keyword)cGroup_3_1_3_1_0_0.eContents().get(1);
		private final Assignment cWatchingStatementsAssignment_3_1_3_1_0_1 = (Assignment)cAlternatives_3_1_3_1_0.eContents().get(1);
		private final RuleCall cWatchingStatementsMetaStatementParserRuleCall_3_1_3_1_0_1_0 = (RuleCall)cWatchingStatementsAssignment_3_1_3_1_0_1.eContents().get(0);
		private final Assignment cWatchingStatementsAssignment_3_1_3_1_1 = (Assignment)cGroup_3_1_3_1.eContents().get(1);
		private final RuleCall cWatchingStatementsSCEstStatementParserRuleCall_3_1_3_1_1_0 = (RuleCall)cWatchingStatementsAssignment_3_1_3_1_1.eContents().get(0);
		private final Keyword cEndKeyword_3_1_3_2 = (Keyword)cGroup_3_1_3.eContents().get(2);
		private final Keyword cTimeoutKeyword_3_1_3_3 = (Keyword)cGroup_3_1_3.eContents().get(3);
		
		/// * ###################################################
		// * ###               7.6 Old Syntax                ###
		// * ###################################################
		// * / Do esterel::Do:
		//	annotations+=Annotation*
		//	"do" ((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?)
		//	(endingAnnotations+=Annotation*
		//	"upto"
		//	expression=DelayExpr
		//	| endingAnnotations+=Annotation*
		//	"watching"
		//	delay=DelayExpr ("timeout" ((watchingStatements+=SCEstStatement ";" | watchingStatements+=MetaStatement)*
		//	watchingStatements+=SCEstStatement?)
		//	"end" "timeout"?)?)
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* "do" ((statements+=SCEstStatement ";" | statements+=MetaStatement)*
		//statements+=SCEstStatement?) (endingAnnotations+=Annotation* "upto" expression=DelayExpr |
		//endingAnnotations+=Annotation* "watching" delay=DelayExpr ("timeout" ((watchingStatements+=SCEstStatement ";" |
		//watchingStatements+=MetaStatement)* watchingStatements+=SCEstStatement?) "end" "timeout"?)?)
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//"do"
		public Keyword getDoKeyword_1() { return cDoKeyword_1; }

		//((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?)
		public Group getGroup_2() { return cGroup_2; }

		//(statements+=SCEstStatement ";" | statements+=MetaStatement)*
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }

		//statements+=SCEstStatement ";"
		public Group getGroup_2_0_0() { return cGroup_2_0_0; }

		//statements+=SCEstStatement
		public Assignment getStatementsAssignment_2_0_0_0() { return cStatementsAssignment_2_0_0_0; }

		//SCEstStatement
		public RuleCall getStatementsSCEstStatementParserRuleCall_2_0_0_0_0() { return cStatementsSCEstStatementParserRuleCall_2_0_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_2_0_0_1() { return cSemicolonKeyword_2_0_0_1; }

		//statements+=MetaStatement
		public Assignment getStatementsAssignment_2_0_1() { return cStatementsAssignment_2_0_1; }

		//MetaStatement
		public RuleCall getStatementsMetaStatementParserRuleCall_2_0_1_0() { return cStatementsMetaStatementParserRuleCall_2_0_1_0; }

		//statements+=SCEstStatement?
		public Assignment getStatementsAssignment_2_1() { return cStatementsAssignment_2_1; }

		//SCEstStatement
		public RuleCall getStatementsSCEstStatementParserRuleCall_2_1_0() { return cStatementsSCEstStatementParserRuleCall_2_1_0; }

		//(endingAnnotations+=Annotation* "upto" expression=DelayExpr | endingAnnotations+=Annotation* "watching" delay=DelayExpr
		//("timeout" ((watchingStatements+=SCEstStatement ";" | watchingStatements+=MetaStatement)*
		//watchingStatements+=SCEstStatement?) "end" "timeout"?)?)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//endingAnnotations+=Annotation* "upto" expression=DelayExpr
		public Group getGroup_3_0() { return cGroup_3_0; }

		//endingAnnotations+=Annotation*
		public Assignment getEndingAnnotationsAssignment_3_0_0() { return cEndingAnnotationsAssignment_3_0_0; }

		//Annotation
		public RuleCall getEndingAnnotationsAnnotationParserRuleCall_3_0_0_0() { return cEndingAnnotationsAnnotationParserRuleCall_3_0_0_0; }

		//"upto"
		public Keyword getUptoKeyword_3_0_1() { return cUptoKeyword_3_0_1; }

		//expression=DelayExpr
		public Assignment getExpressionAssignment_3_0_2() { return cExpressionAssignment_3_0_2; }

		//DelayExpr
		public RuleCall getExpressionDelayExprParserRuleCall_3_0_2_0() { return cExpressionDelayExprParserRuleCall_3_0_2_0; }

		//endingAnnotations+=Annotation* "watching" delay=DelayExpr ("timeout" ((watchingStatements+=SCEstStatement ";" |
		//watchingStatements+=MetaStatement)* watchingStatements+=SCEstStatement?) "end" "timeout"?)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//endingAnnotations+=Annotation*
		public Assignment getEndingAnnotationsAssignment_3_1_0() { return cEndingAnnotationsAssignment_3_1_0; }

		//Annotation
		public RuleCall getEndingAnnotationsAnnotationParserRuleCall_3_1_0_0() { return cEndingAnnotationsAnnotationParserRuleCall_3_1_0_0; }

		//"watching"
		public Keyword getWatchingKeyword_3_1_1() { return cWatchingKeyword_3_1_1; }

		//delay=DelayExpr
		public Assignment getDelayAssignment_3_1_2() { return cDelayAssignment_3_1_2; }

		//DelayExpr
		public RuleCall getDelayDelayExprParserRuleCall_3_1_2_0() { return cDelayDelayExprParserRuleCall_3_1_2_0; }

		//("timeout" ((watchingStatements+=SCEstStatement ";" | watchingStatements+=MetaStatement)*
		//watchingStatements+=SCEstStatement?) "end" "timeout"?)?
		public Group getGroup_3_1_3() { return cGroup_3_1_3; }

		//"timeout"
		public Keyword getTimeoutKeyword_3_1_3_0() { return cTimeoutKeyword_3_1_3_0; }

		//((watchingStatements+=SCEstStatement ";" | watchingStatements+=MetaStatement)* watchingStatements+=SCEstStatement?)
		public Group getGroup_3_1_3_1() { return cGroup_3_1_3_1; }

		//(watchingStatements+=SCEstStatement ";" | watchingStatements+=MetaStatement)*
		public Alternatives getAlternatives_3_1_3_1_0() { return cAlternatives_3_1_3_1_0; }

		//watchingStatements+=SCEstStatement ";"
		public Group getGroup_3_1_3_1_0_0() { return cGroup_3_1_3_1_0_0; }

		//watchingStatements+=SCEstStatement
		public Assignment getWatchingStatementsAssignment_3_1_3_1_0_0_0() { return cWatchingStatementsAssignment_3_1_3_1_0_0_0; }

		//SCEstStatement
		public RuleCall getWatchingStatementsSCEstStatementParserRuleCall_3_1_3_1_0_0_0_0() { return cWatchingStatementsSCEstStatementParserRuleCall_3_1_3_1_0_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_3_1_3_1_0_0_1() { return cSemicolonKeyword_3_1_3_1_0_0_1; }

		//watchingStatements+=MetaStatement
		public Assignment getWatchingStatementsAssignment_3_1_3_1_0_1() { return cWatchingStatementsAssignment_3_1_3_1_0_1; }

		//MetaStatement
		public RuleCall getWatchingStatementsMetaStatementParserRuleCall_3_1_3_1_0_1_0() { return cWatchingStatementsMetaStatementParserRuleCall_3_1_3_1_0_1_0; }

		//watchingStatements+=SCEstStatement?
		public Assignment getWatchingStatementsAssignment_3_1_3_1_1() { return cWatchingStatementsAssignment_3_1_3_1_1; }

		//SCEstStatement
		public RuleCall getWatchingStatementsSCEstStatementParserRuleCall_3_1_3_1_1_0() { return cWatchingStatementsSCEstStatementParserRuleCall_3_1_3_1_1_0; }

		//"end"
		public Keyword getEndKeyword_3_1_3_2() { return cEndKeyword_3_1_3_2; }

		//"timeout"?
		public Keyword getTimeoutKeyword_3_1_3_3() { return cTimeoutKeyword_3_1_3_3; }
	}

	public class UnEmitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.UnEmit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cUnemitKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSignalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSignalISignalCrossReference_2_0 = (CrossReference)cSignalAssignment_2.eContents().get(0);
		private final RuleCall cSignalISignalIDTerminalRuleCall_2_0_1 = (RuleCall)cSignalISignalCrossReference_2_0.eContents().get(1);
		
		/// * ###################################################
		// * ###                   SCEst                     ###
		// * ###################################################
		// * / // ==> unemit
		//// -------------------------------------
		//UnEmit:
		//	annotations+=Annotation*
		//	"unemit"
		//	signal=[esterel::ISignal];
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* "unemit" signal=[esterel::ISignal]
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//"unemit"
		public Keyword getUnemitKeyword_1() { return cUnemitKeyword_1; }

		//signal=[esterel::ISignal]
		public Assignment getSignalAssignment_2() { return cSignalAssignment_2; }

		//[esterel::ISignal]
		public CrossReference getSignalISignalCrossReference_2_0() { return cSignalISignalCrossReference_2_0; }

		//ID
		public RuleCall getSignalISignalIDTerminalRuleCall_2_0_1() { return cSignalISignalIDTerminalRuleCall_2_0_1; }
	}

	public class SetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.Set");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cSetKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSignalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSignalISignalCrossReference_2_0 = (CrossReference)cSignalAssignment_2.eContents().get(0);
		private final RuleCall cSignalISignalIDTerminalRuleCall_2_0_1 = (RuleCall)cSignalISignalCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExpressionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_3_1_0 = (RuleCall)cExpressionAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//// ==> reset: Signal value reset (absolute write)
		//// -------------------------------------
		//Set:
		//	annotations+=Annotation*
		//	"set"
		//	signal=[esterel::ISignal] ("(" expression=Expression ")");
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* "set" signal=[esterel::ISignal] ("(" expression=Expression ")")
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//"set"
		public Keyword getSetKeyword_1() { return cSetKeyword_1; }

		//signal=[esterel::ISignal]
		public Assignment getSignalAssignment_2() { return cSignalAssignment_2; }

		//[esterel::ISignal]
		public CrossReference getSignalISignalCrossReference_2_0() { return cSignalISignalCrossReference_2_0; }

		//ID
		public RuleCall getSignalISignalIDTerminalRuleCall_2_0_1() { return cSignalISignalIDTerminalRuleCall_2_0_1; }

		//("(" expression=Expression ")")
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_3_1() { return cExpressionAssignment_3_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_1_0() { return cExpressionExpressionParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}

	public class ConditionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.Conditional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cThenKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cDeclarationsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_3_2_0 = (RuleCall)cDeclarationsAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Alternatives cAlternatives_3_3_0 = (Alternatives)cGroup_3_3.eContents().get(0);
		private final Group cGroup_3_3_0_0 = (Group)cAlternatives_3_3_0.eContents().get(0);
		private final Assignment cStatementsAssignment_3_3_0_0_0 = (Assignment)cGroup_3_3_0_0.eContents().get(0);
		private final RuleCall cStatementsSCEstStatementParserRuleCall_3_3_0_0_0_0 = (RuleCall)cStatementsAssignment_3_3_0_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_3_0_0_1 = (Keyword)cGroup_3_3_0_0.eContents().get(1);
		private final Assignment cStatementsAssignment_3_3_0_1 = (Assignment)cAlternatives_3_3_0.eContents().get(1);
		private final RuleCall cStatementsMetaStatementParserRuleCall_3_3_0_1_0 = (RuleCall)cStatementsAssignment_3_3_0_1.eContents().get(0);
		private final Assignment cStatementsAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cStatementsSCEstStatementParserRuleCall_3_3_1_0 = (RuleCall)cStatementsAssignment_3_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Assignment cElseAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElseElseScopeParserRuleCall_4_0 = (RuleCall)cElseAssignment_4.eContents().get(0);
		
		/// * ###################################################
		// * ###                   SCL                       ###
		// * ###################################################
		// * / Conditional scl::Conditional:
		//	annotations+=Annotation*
		//	'if' expression=Expression ('then'? '{'
		//	declarations+=Declaration* ((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?)
		//	'}') else=ElseScope?
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* 'if' expression=Expression ('then'? '{' declarations+=Declaration* ((statements+=SCEstStatement
		//";" | statements+=MetaStatement)* statements+=SCEstStatement?) '}') else=ElseScope?
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//'if'
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }

		//('then'? '{' declarations+=Declaration* ((statements+=SCEstStatement ";" | statements+=MetaStatement)*
		//statements+=SCEstStatement?) '}')
		public Group getGroup_3() { return cGroup_3; }

		//'then'?
		public Keyword getThenKeyword_3_0() { return cThenKeyword_3_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }

		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment_3_2() { return cDeclarationsAssignment_3_2; }

		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_3_2_0() { return cDeclarationsDeclarationParserRuleCall_3_2_0; }

		//((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?)
		public Group getGroup_3_3() { return cGroup_3_3; }

		//(statements+=SCEstStatement ";" | statements+=MetaStatement)*
		public Alternatives getAlternatives_3_3_0() { return cAlternatives_3_3_0; }

		//statements+=SCEstStatement ";"
		public Group getGroup_3_3_0_0() { return cGroup_3_3_0_0; }

		//statements+=SCEstStatement
		public Assignment getStatementsAssignment_3_3_0_0_0() { return cStatementsAssignment_3_3_0_0_0; }

		//SCEstStatement
		public RuleCall getStatementsSCEstStatementParserRuleCall_3_3_0_0_0_0() { return cStatementsSCEstStatementParserRuleCall_3_3_0_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_3_3_0_0_1() { return cSemicolonKeyword_3_3_0_0_1; }

		//statements+=MetaStatement
		public Assignment getStatementsAssignment_3_3_0_1() { return cStatementsAssignment_3_3_0_1; }

		//MetaStatement
		public RuleCall getStatementsMetaStatementParserRuleCall_3_3_0_1_0() { return cStatementsMetaStatementParserRuleCall_3_3_0_1_0; }

		//statements+=SCEstStatement?
		public Assignment getStatementsAssignment_3_3_1() { return cStatementsAssignment_3_3_1; }

		//SCEstStatement
		public RuleCall getStatementsSCEstStatementParserRuleCall_3_3_1_0() { return cStatementsSCEstStatementParserRuleCall_3_3_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_3_4() { return cRightCurlyBracketKeyword_3_4; }

		//else=ElseScope?
		public Assignment getElseAssignment_4() { return cElseAssignment_4; }

		//ElseScope
		public RuleCall getElseElseScopeParserRuleCall_4_0() { return cElseElseScopeParserRuleCall_4_0; }
	}

	public class ElseScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.ElseScope");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cElseScopeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Keyword cElseKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDeclarationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_4_0 = (RuleCall)cDeclarationsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Alternatives cAlternatives_5_0 = (Alternatives)cGroup_5.eContents().get(0);
		private final Group cGroup_5_0_0 = (Group)cAlternatives_5_0.eContents().get(0);
		private final Assignment cStatementsAssignment_5_0_0_0 = (Assignment)cGroup_5_0_0.eContents().get(0);
		private final RuleCall cStatementsSCEstStatementParserRuleCall_5_0_0_0_0 = (RuleCall)cStatementsAssignment_5_0_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_0_0_1 = (Keyword)cGroup_5_0_0.eContents().get(1);
		private final Assignment cStatementsAssignment_5_0_1 = (Assignment)cAlternatives_5_0.eContents().get(1);
		private final RuleCall cStatementsMetaStatementParserRuleCall_5_0_1_0 = (RuleCall)cStatementsAssignment_5_0_1.eContents().get(0);
		private final Assignment cStatementsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cStatementsSCEstStatementParserRuleCall_5_1_0 = (RuleCall)cStatementsAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ElseScope scl::ElseScope:
		//	{scl::ElseScope} annotations+=Annotation*
		//	'else' '{'
		//	declarations+=Declaration* ((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?)
		//	'}'
		@Override public ParserRule getRule() { return rule; }

		//{scl::ElseScope} annotations+=Annotation* 'else' '{' declarations+=Declaration* ((statements+=SCEstStatement ";" |
		//statements+=MetaStatement)* statements+=SCEstStatement?) '}'
		public Group getGroup() { return cGroup; }

		//{scl::ElseScope}
		public Action getElseScopeAction_0() { return cElseScopeAction_0; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() { return cAnnotationsAnnotationParserRuleCall_1_0; }

		//'else'
		public Keyword getElseKeyword_2() { return cElseKeyword_2; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment_4() { return cDeclarationsAssignment_4; }

		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_4_0() { return cDeclarationsDeclarationParserRuleCall_4_0; }

		//((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?)
		public Group getGroup_5() { return cGroup_5; }

		//(statements+=SCEstStatement ";" | statements+=MetaStatement)*
		public Alternatives getAlternatives_5_0() { return cAlternatives_5_0; }

		//statements+=SCEstStatement ";"
		public Group getGroup_5_0_0() { return cGroup_5_0_0; }

		//statements+=SCEstStatement
		public Assignment getStatementsAssignment_5_0_0_0() { return cStatementsAssignment_5_0_0_0; }

		//SCEstStatement
		public RuleCall getStatementsSCEstStatementParserRuleCall_5_0_0_0_0() { return cStatementsSCEstStatementParserRuleCall_5_0_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_5_0_0_1() { return cSemicolonKeyword_5_0_0_1; }

		//statements+=MetaStatement
		public Assignment getStatementsAssignment_5_0_1() { return cStatementsAssignment_5_0_1; }

		//MetaStatement
		public RuleCall getStatementsMetaStatementParserRuleCall_5_0_1_0() { return cStatementsMetaStatementParserRuleCall_5_0_1_0; }

		//statements+=SCEstStatement?
		public Assignment getStatementsAssignment_5_1() { return cStatementsAssignment_5_1; }

		//SCEstStatement
		public RuleCall getStatementsSCEstStatementParserRuleCall_5_1_0() { return cStatementsSCEstStatementParserRuleCall_5_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class MetaStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.MetaStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLabelParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cScopeStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//MetaStatement scl::Statement:
		//	Label | ScopeStatement
		@Override public ParserRule getRule() { return rule; }

		//Label | ScopeStatement
		public Alternatives getAlternatives() { return cAlternatives; }

		//Label
		public RuleCall getLabelParserRuleCall_0() { return cLabelParserRuleCall_0; }

		//ScopeStatement
		public RuleCall getScopeStatementParserRuleCall_1() { return cScopeStatementParserRuleCall_1; }
	}

	public class ThreadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.Thread");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cThreadAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0_0_0 = (RuleCall)cAnnotationsAssignment_1_0_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cDeclarationsAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_1_0_2_0 = (RuleCall)cDeclarationsAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_0_3 = (Group)cGroup_1_0.eContents().get(3);
		private final Alternatives cAlternatives_1_0_3_0 = (Alternatives)cGroup_1_0_3.eContents().get(0);
		private final Group cGroup_1_0_3_0_0 = (Group)cAlternatives_1_0_3_0.eContents().get(0);
		private final Assignment cStatementsAssignment_1_0_3_0_0_0 = (Assignment)cGroup_1_0_3_0_0.eContents().get(0);
		private final RuleCall cStatementsSCEstStatementParserRuleCall_1_0_3_0_0_0_0 = (RuleCall)cStatementsAssignment_1_0_3_0_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_0_3_0_0_1 = (Keyword)cGroup_1_0_3_0_0.eContents().get(1);
		private final Assignment cStatementsAssignment_1_0_3_0_1 = (Assignment)cAlternatives_1_0_3_0.eContents().get(1);
		private final RuleCall cStatementsMetaStatementParserRuleCall_1_0_3_0_1_0 = (RuleCall)cStatementsAssignment_1_0_3_0_1.eContents().get(0);
		private final Assignment cStatementsAssignment_1_0_3_1 = (Assignment)cGroup_1_0_3.eContents().get(1);
		private final RuleCall cStatementsSCEstStatementParserRuleCall_1_0_3_1_0 = (RuleCall)cStatementsAssignment_1_0_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_0_4 = (Keyword)cGroup_1_0.eContents().get(4);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Alternatives cAlternatives_1_1_0 = (Alternatives)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_0_0 = (Group)cAlternatives_1_1_0.eContents().get(0);
		private final Assignment cStatementsAssignment_1_1_0_0_0 = (Assignment)cGroup_1_1_0_0.eContents().get(0);
		private final RuleCall cStatementsSCEstStatementParserRuleCall_1_1_0_0_0_0 = (RuleCall)cStatementsAssignment_1_1_0_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1_0_0_1 = (Keyword)cGroup_1_1_0_0.eContents().get(1);
		private final Assignment cStatementsAssignment_1_1_0_1 = (Assignment)cAlternatives_1_1_0.eContents().get(1);
		private final RuleCall cStatementsMetaStatementParserRuleCall_1_1_0_1_0 = (RuleCall)cStatementsAssignment_1_1_0_1.eContents().get(0);
		private final Assignment cStatementsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cStatementsSCEstStatementParserRuleCall_1_1_1_0 = (RuleCall)cStatementsAssignment_1_1_1.eContents().get(0);
		
		//Thread scl::Thread:
		//	{scl::Thread} (annotations+=Annotation*
		//	'{'
		//	declarations+=Declaration* ((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?)
		//	'}'
		//	| (statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?)
		@Override public ParserRule getRule() { return rule; }

		//{scl::Thread} (annotations+=Annotation* '{' declarations+=Declaration* ((statements+=SCEstStatement ";" |
		//statements+=MetaStatement)* statements+=SCEstStatement?) '}' | (statements+=SCEstStatement ";" |
		//statements+=MetaStatement)* statements+=SCEstStatement?)
		public Group getGroup() { return cGroup; }

		//{scl::Thread}
		public Action getThreadAction_0() { return cThreadAction_0; }

		//(annotations+=Annotation* '{' declarations+=Declaration* ((statements+=SCEstStatement ";" | statements+=MetaStatement)*
		//statements+=SCEstStatement?) '}' | (statements+=SCEstStatement ";" | statements+=MetaStatement)*
		//statements+=SCEstStatement?)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//annotations+=Annotation* '{' declarations+=Declaration* ((statements+=SCEstStatement ";" | statements+=MetaStatement)*
		//statements+=SCEstStatement?) '}'
		public Group getGroup_1_0() { return cGroup_1_0; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_1_0_0() { return cAnnotationsAssignment_1_0_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0_0_0() { return cAnnotationsAnnotationParserRuleCall_1_0_0_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0_1() { return cLeftCurlyBracketKeyword_1_0_1; }

		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment_1_0_2() { return cDeclarationsAssignment_1_0_2; }

		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_1_0_2_0() { return cDeclarationsDeclarationParserRuleCall_1_0_2_0; }

		//((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?)
		public Group getGroup_1_0_3() { return cGroup_1_0_3; }

		//(statements+=SCEstStatement ";" | statements+=MetaStatement)*
		public Alternatives getAlternatives_1_0_3_0() { return cAlternatives_1_0_3_0; }

		//statements+=SCEstStatement ";"
		public Group getGroup_1_0_3_0_0() { return cGroup_1_0_3_0_0; }

		//statements+=SCEstStatement
		public Assignment getStatementsAssignment_1_0_3_0_0_0() { return cStatementsAssignment_1_0_3_0_0_0; }

		//SCEstStatement
		public RuleCall getStatementsSCEstStatementParserRuleCall_1_0_3_0_0_0_0() { return cStatementsSCEstStatementParserRuleCall_1_0_3_0_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1_0_3_0_0_1() { return cSemicolonKeyword_1_0_3_0_0_1; }

		//statements+=MetaStatement
		public Assignment getStatementsAssignment_1_0_3_0_1() { return cStatementsAssignment_1_0_3_0_1; }

		//MetaStatement
		public RuleCall getStatementsMetaStatementParserRuleCall_1_0_3_0_1_0() { return cStatementsMetaStatementParserRuleCall_1_0_3_0_1_0; }

		//statements+=SCEstStatement?
		public Assignment getStatementsAssignment_1_0_3_1() { return cStatementsAssignment_1_0_3_1; }

		//SCEstStatement
		public RuleCall getStatementsSCEstStatementParserRuleCall_1_0_3_1_0() { return cStatementsSCEstStatementParserRuleCall_1_0_3_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_1_0_4() { return cRightCurlyBracketKeyword_1_0_4; }

		//(statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//(statements+=SCEstStatement ";" | statements+=MetaStatement)*
		public Alternatives getAlternatives_1_1_0() { return cAlternatives_1_1_0; }

		//statements+=SCEstStatement ";"
		public Group getGroup_1_1_0_0() { return cGroup_1_1_0_0; }

		//statements+=SCEstStatement
		public Assignment getStatementsAssignment_1_1_0_0_0() { return cStatementsAssignment_1_1_0_0_0; }

		//SCEstStatement
		public RuleCall getStatementsSCEstStatementParserRuleCall_1_1_0_0_0_0() { return cStatementsSCEstStatementParserRuleCall_1_1_0_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1_1_0_0_1() { return cSemicolonKeyword_1_1_0_0_1; }

		//statements+=MetaStatement
		public Assignment getStatementsAssignment_1_1_0_1() { return cStatementsAssignment_1_1_0_1; }

		//MetaStatement
		public RuleCall getStatementsMetaStatementParserRuleCall_1_1_0_1_0() { return cStatementsMetaStatementParserRuleCall_1_1_0_1_0; }

		//statements+=SCEstStatement?
		public Assignment getStatementsAssignment_1_1_1() { return cStatementsAssignment_1_1_1; }

		//SCEstStatement
		public RuleCall getStatementsSCEstStatementParserRuleCall_1_1_1_0() { return cStatementsSCEstStatementParserRuleCall_1_1_1_0; }
	}

	public class ParallelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.Parallel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cForkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cThreadsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cThreadsThreadParserRuleCall_2_0_0 = (RuleCall)cThreadsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cParKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cThreadsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cThreadsThreadParserRuleCall_2_1_1_0 = (RuleCall)cThreadsAssignment_2_1_1.eContents().get(0);
		private final Keyword cJoinKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Parallel scl::Parallel:
		//	annotations+=Annotation*
		//	'fork' (threads+=Thread ('par'
		//	threads+=Thread)*)
		//	'join'
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* 'fork' (threads+=Thread ('par' threads+=Thread)*) 'join'
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//'fork'
		public Keyword getForkKeyword_1() { return cForkKeyword_1; }

		//(threads+=Thread ('par' threads+=Thread)*)
		public Group getGroup_2() { return cGroup_2; }

		//threads+=Thread
		public Assignment getThreadsAssignment_2_0() { return cThreadsAssignment_2_0; }

		//Thread
		public RuleCall getThreadsThreadParserRuleCall_2_0_0() { return cThreadsThreadParserRuleCall_2_0_0; }

		//('par' threads+=Thread)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//'par'
		public Keyword getParKeyword_2_1_0() { return cParKeyword_2_1_0; }

		//threads+=Thread
		public Assignment getThreadsAssignment_2_1_1() { return cThreadsAssignment_2_1_1; }

		//Thread
		public RuleCall getThreadsThreadParserRuleCall_2_1_1_0() { return cThreadsThreadParserRuleCall_2_1_1_0; }

		//'join'
		public Keyword getJoinKeyword_3() { return cJoinKeyword_3; }
	}

	public class ScopeStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.ScopeStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cScopeStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDeclarationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_3_0 = (RuleCall)cDeclarationsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Group cGroup_4_0_0 = (Group)cAlternatives_4_0.eContents().get(0);
		private final Assignment cStatementsAssignment_4_0_0_0 = (Assignment)cGroup_4_0_0.eContents().get(0);
		private final RuleCall cStatementsSCEstStatementParserRuleCall_4_0_0_0_0 = (RuleCall)cStatementsAssignment_4_0_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_0_0_1 = (Keyword)cGroup_4_0_0.eContents().get(1);
		private final Assignment cStatementsAssignment_4_0_1 = (Assignment)cAlternatives_4_0.eContents().get(1);
		private final RuleCall cStatementsMetaStatementParserRuleCall_4_0_1_0 = (RuleCall)cStatementsAssignment_4_0_1.eContents().get(0);
		private final Assignment cStatementsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cStatementsSCEstStatementParserRuleCall_4_1_0 = (RuleCall)cStatementsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ScopeStatement scl::ScopeStatement:
		//	{scl::ScopeStatement} annotations+=Annotation*
		//	'{'
		//	declarations+=Declaration* ((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?)
		//	'}'
		@Override public ParserRule getRule() { return rule; }

		//{scl::ScopeStatement} annotations+=Annotation* '{' declarations+=Declaration* ((statements+=SCEstStatement ";" |
		//statements+=MetaStatement)* statements+=SCEstStatement?) '}'
		public Group getGroup() { return cGroup; }

		//{scl::ScopeStatement}
		public Action getScopeStatementAction_0() { return cScopeStatementAction_0; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() { return cAnnotationsAnnotationParserRuleCall_1_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment_3() { return cDeclarationsAssignment_3; }

		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_3_0() { return cDeclarationsDeclarationParserRuleCall_3_0; }

		//((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?)
		public Group getGroup_4() { return cGroup_4; }

		//(statements+=SCEstStatement ";" | statements+=MetaStatement)*
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }

		//statements+=SCEstStatement ";"
		public Group getGroup_4_0_0() { return cGroup_4_0_0; }

		//statements+=SCEstStatement
		public Assignment getStatementsAssignment_4_0_0_0() { return cStatementsAssignment_4_0_0_0; }

		//SCEstStatement
		public RuleCall getStatementsSCEstStatementParserRuleCall_4_0_0_0_0() { return cStatementsSCEstStatementParserRuleCall_4_0_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_4_0_0_1() { return cSemicolonKeyword_4_0_0_1; }

		//statements+=MetaStatement
		public Assignment getStatementsAssignment_4_0_1() { return cStatementsAssignment_4_0_1; }

		//MetaStatement
		public RuleCall getStatementsMetaStatementParserRuleCall_4_0_1_0() { return cStatementsMetaStatementParserRuleCall_4_0_1_0; }

		//statements+=SCEstStatement?
		public Assignment getStatementsAssignment_4_1() { return cStatementsAssignment_4_1; }

		//SCEstStatement
		public RuleCall getStatementsSCEstStatementParserRuleCall_4_1_0() { return cStatementsSCEstStatementParserRuleCall_4_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class AtomicExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.AtomicExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFunctionExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTrapExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBoolValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cValuedObjectTestExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTextExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final RuleCall cBooleanExpressionParserRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final RuleCall cConstantExpressionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cFunctionCallParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//// Esterel is a bit richer than what is provided by kexpressions. 
		//// These rules are introduced here.
		//// Care about order of the rules! 
		//AtomicExpression kexpressions::Expression:
		//	FunctionExpression
		//	| TrapExpression
		//	| BoolValue
		//	| ValuedObjectTestExpression
		//	| TextExpression
		//	| '(' BooleanExpression ')'
		//	| ConstantExpression
		//	| FunctionCall
		@Override public ParserRule getRule() { return rule; }

		//FunctionExpression | TrapExpression | BoolValue | ValuedObjectTestExpression | TextExpression | '(' BooleanExpression
		//')' | ConstantExpression | FunctionCall
		public Alternatives getAlternatives() { return cAlternatives; }

		//FunctionExpression
		public RuleCall getFunctionExpressionParserRuleCall_0() { return cFunctionExpressionParserRuleCall_0; }

		//TrapExpression
		public RuleCall getTrapExpressionParserRuleCall_1() { return cTrapExpressionParserRuleCall_1; }

		//BoolValue
		public RuleCall getBoolValueParserRuleCall_2() { return cBoolValueParserRuleCall_2; }

		//ValuedObjectTestExpression
		public RuleCall getValuedObjectTestExpressionParserRuleCall_3() { return cValuedObjectTestExpressionParserRuleCall_3; }

		//TextExpression
		public RuleCall getTextExpressionParserRuleCall_4() { return cTextExpressionParserRuleCall_4; }

		//'(' BooleanExpression ')'
		public Group getGroup_5() { return cGroup_5; }

		//'('
		public Keyword getLeftParenthesisKeyword_5_0() { return cLeftParenthesisKeyword_5_0; }

		//BooleanExpression
		public RuleCall getBooleanExpressionParserRuleCall_5_1() { return cBooleanExpressionParserRuleCall_5_1; }

		//')'
		public Keyword getRightParenthesisKeyword_5_2() { return cRightParenthesisKeyword_5_2; }

		//ConstantExpression
		public RuleCall getConstantExpressionParserRuleCall_6() { return cConstantExpressionParserRuleCall_6; }

		//FunctionCall
		public RuleCall getFunctionCallParserRuleCall_7() { return cFunctionCallParserRuleCall_7; }
	}

	public class AtomicValuedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.AtomicValuedExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFloatValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cValuedExpressionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final RuleCall cAtomicExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cStringValueParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//AtomicValuedExpression kexpressions::Expression:
		//	IntValue
		//	| FloatValue
		//	| '(' ValuedExpression ')'
		//	| AtomicExpression
		//	| StringValue
		@Override public ParserRule getRule() { return rule; }

		//IntValue | FloatValue | '(' ValuedExpression ')' | AtomicExpression | StringValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntValue
		public RuleCall getIntValueParserRuleCall_0() { return cIntValueParserRuleCall_0; }

		//FloatValue
		public RuleCall getFloatValueParserRuleCall_1() { return cFloatValueParserRuleCall_1; }

		//'(' ValuedExpression ')'
		public Group getGroup_2() { return cGroup_2; }

		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//ValuedExpression
		public RuleCall getValuedExpressionParserRuleCall_2_1() { return cValuedExpressionParserRuleCall_2_1; }

		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }

		//AtomicExpression
		public RuleCall getAtomicExpressionParserRuleCall_3() { return cAtomicExpressionParserRuleCall_3; }

		//StringValue
		public RuleCall getStringValueParserRuleCall_4() { return cStringValueParserRuleCall_4; }
	}
	
	
	private final SCEstProgramElements pSCEstProgram;
	private final SCEstModuleElements pSCEstModule;
	private final StatementContainerInterfaceElements pStatementContainerInterface;
	private final SCEstStatementElements pSCEstStatement;
	private final SCEstAtomicStatementElements pSCEstAtomicStatement;
	private final EsterelParallelElements pEsterelParallel;
	private final EsterelThreadElements pEsterelThread;
	private final BlockElements pBlock;
	private final PresentElements pPresent;
	private final PresentCaseElements pPresentCase;
	private final IfTestElements pIfTest;
	private final ElsIfElements pElsIf;
	private final LoopElements pLoop;
	private final RepeatElements pRepeat;
	private final AbortElements pAbort;
	private final CaseElements pCase;
	private final AwaitElements pAwait;
	private final EveryDoElements pEveryDo;
	private final SuspendElements pSuspend;
	private final TrapElements pTrap;
	private final TrapHandlerElements pTrapHandler;
	private final ExecElements pExec;
	private final ExecCaseElements pExecCase;
	private final LocalSignalDeclElements pLocalSignalDecl;
	private final LocalVariableElements pLocalVariable;
	private final DoElements pDo;
	private final UnEmitElements pUnEmit;
	private final SetElements pSet;
	private final ConditionalElements pConditional;
	private final ElseScopeElements pElseScope;
	private final MetaStatementElements pMetaStatement;
	private final ThreadElements pThread;
	private final ParallelElements pParallel;
	private final ScopeStatementElements pScopeStatement;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final AtomicExpressionElements pAtomicExpression;
	private final AtomicValuedExpressionElements pAtomicValuedExpression;
	
	private final Grammar grammar;

	private final EsterelGrammarAccess gaEsterel;

	private final SCLGrammarAccess gaSCL;

	private final KExtGrammarAccess gaKExt;

	private final KEffectsGrammarAccess gaKEffects;

	private final KExpressionsGrammarAccess gaKExpressions;

	private final AnnotationsGrammarAccess gaAnnotations;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SCEstGrammarAccess(GrammarProvider grammarProvider,
		EsterelGrammarAccess gaEsterel,
		SCLGrammarAccess gaSCL,
		KExtGrammarAccess gaKExt,
		KEffectsGrammarAccess gaKEffects,
		KExpressionsGrammarAccess gaKExpressions,
		AnnotationsGrammarAccess gaAnnotations,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaEsterel = gaEsterel;
		this.gaSCL = gaSCL;
		this.gaKExt = gaKExt;
		this.gaKEffects = gaKEffects;
		this.gaKExpressions = gaKExpressions;
		this.gaAnnotations = gaAnnotations;
		this.gaTerminals = gaTerminals;
		this.pSCEstProgram = new SCEstProgramElements();
		this.pSCEstModule = new SCEstModuleElements();
		this.pStatementContainerInterface = new StatementContainerInterfaceElements();
		this.pSCEstStatement = new SCEstStatementElements();
		this.pSCEstAtomicStatement = new SCEstAtomicStatementElements();
		this.pEsterelParallel = new EsterelParallelElements();
		this.pEsterelThread = new EsterelThreadElements();
		this.pBlock = new BlockElements();
		this.pPresent = new PresentElements();
		this.pPresentCase = new PresentCaseElements();
		this.pIfTest = new IfTestElements();
		this.pElsIf = new ElsIfElements();
		this.pLoop = new LoopElements();
		this.pRepeat = new RepeatElements();
		this.pAbort = new AbortElements();
		this.pCase = new CaseElements();
		this.pAwait = new AwaitElements();
		this.pEveryDo = new EveryDoElements();
		this.pSuspend = new SuspendElements();
		this.pTrap = new TrapElements();
		this.pTrapHandler = new TrapHandlerElements();
		this.pExec = new ExecElements();
		this.pExecCase = new ExecCaseElements();
		this.pLocalSignalDecl = new LocalSignalDeclElements();
		this.pLocalVariable = new LocalVariableElements();
		this.pDo = new DoElements();
		this.pUnEmit = new UnEmitElements();
		this.pSet = new SetElements();
		this.pConditional = new ConditionalElements();
		this.pElseScope = new ElseScopeElements();
		this.pMetaStatement = new MetaStatementElements();
		this.pThread = new ThreadElements();
		this.pParallel = new ParallelElements();
		this.pScopeStatement = new ScopeStatementElements();
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.scest.SCEst.SL_COMMENT");
		this.pAtomicExpression = new AtomicExpressionElements();
		this.pAtomicValuedExpression = new AtomicValuedExpressionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.cau.cs.kieler.esterel.scest.SCEst".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public EsterelGrammarAccess getEsterelGrammarAccess() {
		return gaEsterel;
	}

	public SCLGrammarAccess getSCLGrammarAccess() {
		return gaSCL;
	}

	public KExtGrammarAccess getKExtGrammarAccess() {
		return gaKExt;
	}

	public KEffectsGrammarAccess getKEffectsGrammarAccess() {
		return gaKEffects;
	}

	public KExpressionsGrammarAccess getKExpressionsGrammarAccess() {
		return gaKExpressions;
	}

	public AnnotationsGrammarAccess getAnnotationsGrammarAccess() {
		return gaAnnotations;
	}

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////  root rule. a SCEst file can contain multiple modules
	//SCEstProgram hidden(SL_COMMENT, ML_COMMENT, WS):
	//	modules+=SCEstModule*;
	public SCEstProgramElements getSCEstProgramAccess() {
		return pSCEstProgram;
	}
	
	public ParserRule getSCEstProgramRule() {
		return getSCEstProgramAccess().getRule();
	}

	/// * ###################################################
	// * ###                 7.2 Modules                 ###
	// * ###################################################
	// * / // ==> module: a module consists of an interface and a body
	//// -------------------------------------
	//SCEstModule:
	//	{SCEstModule} annotations+=Annotation*
	//	"module" name=ID ":" ((intSignalDecls+=InterfaceSignalDecl
	//	| intTypeDecls+=TypeDecl
	//	| intSensorDecls+=SensorDecl
	//	| intConstantDecls+=ConstantDecls
	//	| intRelationDecls+=RelationDecl
	//	| intTaskDecls+=TaskDecl
	//	| intFunctionDecls+=FunctionDecl
	//	| intProcedureDecls+=ProcedureDecl)* ((statements+=SCEstStatement ";" | statements+=MetaStatement)*
	//	statements+=SCEstStatement?) ("end" "module" | ".") | declarations+=Declaration*
	//	'{' ((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?)
	//	'}');
	public SCEstModuleElements getSCEstModuleAccess() {
		return pSCEstModule;
	}
	
	public ParserRule getSCEstModuleRule() {
		return getSCEstModuleAccess().getRule();
	}

	/// * ###################################################
	// * ###               7.5 Statements                ###
	// * ###################################################
	// * / StatementContainerInterface scl::StatementContainer:
	//	SCEstModule | Conditional | ElseScope | Thread | ScopeStatement
	public StatementContainerInterfaceElements getStatementContainerInterfaceAccess() {
		return pStatementContainerInterface;
	}
	
	public ParserRule getStatementContainerInterfaceRule() {
		return getStatementContainerInterfaceAccess().getRule();
	}

	//// ==> Statement
	//// -------------------------------------
	//SCEstStatement scl::Statement:
	//	EsterelParallel | SCEstAtomicStatement
	public SCEstStatementElements getSCEstStatementAccess() {
		return pSCEstStatement;
	}
	
	public ParserRule getSCEstStatementRule() {
		return getSCEstStatementAccess().getRule();
	}

	//// ==> Atomic Statements
	//// -------------------------------------
	//SCEstAtomicStatement scl::Statement:
	//	Abort | EsterelAssignment | Await | Block | ProcCall | Do | Emit | EveryDo | Exit | Exec | Halt | IfTest |
	//	LocalSignalDecl | Loop | Nothing | Pause | Present | Repeat | Run | Suspend | Sustain | Trap | LocalVariable | Goto |
	//	UnEmit | Set | Assignment | Parallel | Conditional
	public SCEstAtomicStatementElements getSCEstAtomicStatementAccess() {
		return pSCEstAtomicStatement;
	}
	
	public ParserRule getSCEstAtomicStatementRule() {
		return getSCEstAtomicStatementAccess().getRule();
	}

	//// ==> Parallel: at least two threads
	//// -------------------------------------
	//EsterelParallel esterel::EsterelParallel:
	//	threads+=EsterelThread ("||" threads+=EsterelThread)+
	public EsterelParallelElements getEsterelParallelAccess() {
		return pEsterelParallel;
	}
	
	public ParserRule getEsterelParallelRule() {
		return getEsterelParallelAccess().getRule();
	}

	//// ==> Thread
	//// One AtomicStatement or multiple AtomicStatements
	//// It doesn't include 'Parallel' statements because they would be parallel to 
	//// the existing thread and therefore included in the previous thread list (Parallel.threads).
	//// -------------------------------------
	//EsterelThread esterel::EsterelThread:
	//	{esterel::EsterelThread} (statements+=SCEstAtomicStatement ";" | statements+=MetaStatement)*
	//	statements+=SCEstAtomicStatement?
	public EsterelThreadElements getEsterelThreadAccess() {
		return pEsterelThread;
	}
	
	public ParserRule getEsterelThreadRule() {
		return getEsterelThreadAccess().getRule();
	}

	//// ==> Block
	//// -------------------------------------    
	//Block esterel::Block:
	//	{esterel::Block} annotations+=Annotation*
	//	"[" ((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?) "]"
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}

	//// ==> 7.5.3 The present Signal Test
	//// -------------------------------------
	//Present esterel::Present:
	//	annotations+=Annotation*
	//	"present" ((expression=SignalExpression
	//	| "[" expression=SignalExpression "]") (thenAnnotations+=Annotation*
	//	"then" ((thenStatements+=SCEstStatement ";" | thenStatements+=MetaStatement)* thenStatements+=SCEstStatement?))?
	//	| cases+=PresentCase+) (elseAnnotations+=Annotation*
	//	"else" ((elseStatements+=SCEstStatement ";" | elseStatements+=MetaStatement)* elseStatements+=SCEstStatement?))?
	//	"end" "present"?
	public PresentElements getPresentAccess() {
		return pPresent;
	}
	
	public ParserRule getPresentRule() {
		return getPresentAccess().getRule();
	}

	//PresentCase esterel::PresentCase:
	//	annotations+=Annotation*
	//	"case" (expression=SignalExpression
	//	| "[" expression=SignalExpression "]") ("do" ((statements+=SCEstStatement ";" | statements+=MetaStatement)*
	//	statements+=SCEstStatement?))?
	public PresentCaseElements getPresentCaseAccess() {
		return pPresentCase;
	}
	
	public ParserRule getPresentCaseRule() {
		return getPresentCaseAccess().getRule();
	}

	//// ==> 7.5.4 The if Data Test
	//// -------------------------------------
	//IfTest esterel::IfTest:
	//	annotations+=Annotation*
	//	"if"
	//	expression=Expression (thenAnnotations+=Annotation*
	//	"then" ((thenStatements+=SCEstStatement ";" | thenStatements+=MetaStatement)* thenStatements+=SCEstStatement?))?
	//	elseif+=ElsIf* (elseAnnotations+=Annotation*
	//	"else" ((elseStatements+=SCEstStatement ";" | elseStatements+=MetaStatement)* elseStatements+=SCEstStatement?))?
	//	"end" "if"?
	public IfTestElements getIfTestAccess() {
		return pIfTest;
	}
	
	public ParserRule getIfTestRule() {
		return getIfTestAccess().getRule();
	}

	//ElsIf esterel::ElsIf:
	//	annotations+=Annotation*
	//	"elsif"
	//	expression=Expression ("then" ((thenStatements+=SCEstStatement ";" | thenStatements+=MetaStatement)*
	//	thenStatements+=SCEstStatement?))?
	public ElsIfElements getElsIfAccess() {
		return pElsIf;
	}
	
	public ParserRule getElsIfRule() {
		return getElsIfAccess().getRule();
	}

	//// ==> 7.5.5 Looping & 7.5.9 Temporal Loops
	//// -------------------------------------
	//Loop esterel::Loop:
	//	{esterel::Loop} annotations+=Annotation*
	//	"loop" ((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?) ("end" "loop"? |
	//	"each" delay=DelayExpr)
	public LoopElements getLoopAccess() {
		return pLoop;
	}
	
	public ParserRule getLoopRule() {
		return getLoopAccess().getRule();
	}

	//// ==> 7.5.6 Repeat Looping
	//// -------------------------------------
	//Repeat esterel::Repeat:
	//	annotations+=Annotation*
	//	positive?="positive"?
	//	"repeat"
	//	expression=Expression
	//	"times" ((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?)
	//	"end" "repeat"?
	public RepeatElements getRepeatAccess() {
		return pRepeat;
	}
	
	public ParserRule getRepeatRule() {
		return getRepeatAccess().getRule();
	}

	//// ==> 7.5.7 The abort Statements
	//// -------------------------------------
	//Abort esterel::Abort:
	//	annotations+=Annotation* (weak?="weak"? "abort") ((statements+=SCEstStatement ";" | statements+=MetaStatement)*
	//	statements+=SCEstStatement?)
	//	"when" (delay=DelayExpr ("do" ((doStatements+=SCEstStatement ";" | doStatements+=MetaStatement)*
	//	doStatements+=SCEstStatement?))?
	//	"end" ("weak" "abort" | "abort")?
	//	| delay=DelayExpr ("end" | "end" "weak"? "abort")?
	//	| cases+=Case+
	//	"end" ("weak" "abort" | "abort")?)
	public AbortElements getAbortAccess() {
		return pAbort;
	}
	
	public ParserRule getAbortRule() {
		return getAbortAccess().getRule();
	}

	//Case esterel::Case:
	//	annotations+=Annotation*
	//	"case"
	//	delay=DelayExpr ("do" ((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?))?
	public CaseElements getCaseAccess() {
		return pCase;
	}
	
	public ParserRule getCaseRule() {
		return getCaseAccess().getRule();
	}

	//// ==> 7.5.8 The await Statement
	//// -------------------------------------
	//Await esterel::Await:
	//	annotations+=Annotation*
	//	"await" (delay=DelayExpr ("do" ((statements+=SCEstStatement ";" | statements+=MetaStatement)*
	//	statements+=SCEstStatement?)
	//	"end" "await"?)?
	//	| cases+=Case+
	//	"end" "await"?)
	public AwaitElements getAwaitAccess() {
		return pAwait;
	}
	
	public ParserRule getAwaitRule() {
		return getAwaitAccess().getRule();
	}

	//// ==> 7.5.9 Temporal Loops
	//// -------------------------------------
	//// for 'LoopEach' look at 7.5.5
	//EveryDo esterel::EveryDo:
	//	annotations+=Annotation*
	//	"every"
	//	delay=DelayExpr
	//	"do" ((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?)
	//	"end" "every"?
	public EveryDoElements getEveryDoAccess() {
		return pEveryDo;
	}
	
	public ParserRule getEveryDoRule() {
		return getEveryDoAccess().getRule();
	}

	//// ==> 7.5.10 The suspend Statement
	//// -------------------------------------
	//Suspend esterel::Suspend:
	//	annotations+=Annotation* (weak?="weak"? "suspend") ((statements+=SCEstStatement ";" | statements+=MetaStatement)*
	//	statements+=SCEstStatement?)
	//	"when"
	//	delay=DelayExpr
	public SuspendElements getSuspendAccess() {
		return pSuspend;
	}
	
	public ParserRule getSuspendRule() {
		return getSuspendAccess().getRule();
	}

	//// ==> 7.5.11 Traps
	//// -------------------------------------
	//Trap esterel::Trap:
	//	annotations+=Annotation*
	//	"trap"
	//	trapSignals+=TrapSignal ("," trapSignals+=TrapSignal)*
	//	"in" ((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?)
	//	trapHandler+=TrapHandler*
	//	"end" "trap"?
	public TrapElements getTrapAccess() {
		return pTrap;
	}
	
	public ParserRule getTrapRule() {
		return getTrapAccess().getRule();
	}

	//TrapHandler esterel::TrapHandler:
	//	annotations+=Annotation*
	//	"handle"
	//	trapExpr=TrapExpr
	//	"do" ((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?)
	public TrapHandlerElements getTrapHandlerAccess() {
		return pTrapHandler;
	}
	
	public ParserRule getTrapHandlerRule() {
		return getTrapHandlerAccess().getRule();
	}

	//// ==> 7.5.12 The exec Task Execution Statement
	//// -------------------------------------
	//Exec esterel::Exec:
	//	annotations+=Annotation* ("exec" task=[esterel::Task]
	//	"(" (vars+=[esterel::IVariable] ("," vars+=[esterel::IVariable])*)? ")"
	//	"(" (kexpressions+=Expression ("," kexpressions+=Expression)*)? ")"
	//	"return"
	//	retSignal=[esterel::ISignal] ("do" ((statements+=SCEstStatement ";" | statements+=MetaStatement)*
	//	statements+=SCEstStatement?))?
	//	|
	//	"exec" execCaseList+=ExecCase+)
	//	"end" "exec"?
	public ExecElements getExecAccess() {
		return pExec;
	}
	
	public ParserRule getExecRule() {
		return getExecAccess().getRule();
	}

	//ExecCase esterel::ExecCase:
	//	annotations+=Annotation*
	//	"case" task=[esterel::Task]
	//	"(" (vars+=[esterel::IVariable] ("," vars+=[esterel::IVariable])*)? ")"
	//	"(" (kexpressions+=Expression ("," kexpressions+=Expression)*)? ")"
	//	"return"
	//	retSignal=[esterel::ISignal] ("do" ((statements+=SCEstStatement ";" | statements+=MetaStatement)*
	//	statements+=SCEstStatement?))?
	public ExecCaseElements getExecCaseAccess() {
		return pExecCase;
	}
	
	public ParserRule getExecCaseRule() {
		return getExecCaseAccess().getRule();
	}

	//// ==> 7.5.13 Local Signal Declaration    
	//// -------------------------------------
	//LocalSignalDecl esterel::LocalSignalDecl:
	//	annotations+=Annotation*
	//	"signal" signals+=ISignal ("," signals+=ISignal)*
	//	"in" ((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?)
	//	"end" "signal"?
	public LocalSignalDeclElements getLocalSignalDeclAccess() {
		return pLocalSignalDecl;
	}
	
	public ParserRule getLocalSignalDeclRule() {
		return getLocalSignalDeclAccess().getRule();
	}

	//// ==> 7.5.14 Local Variable Declaration
	//// ------------------------------------- 
	//LocalVariable esterel::LocalVariable:
	//	annotations+=Annotation*
	//	"var"
	//	varDecls+=VariableDecl ("," varDecls+=VariableDecl)*
	//	"in" ((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?)
	//	"end" "var"?
	public LocalVariableElements getLocalVariableAccess() {
		return pLocalVariable;
	}
	
	public ParserRule getLocalVariableRule() {
		return getLocalVariableAccess().getRule();
	}

	/// * ###################################################
	// * ###               7.6 Old Syntax                ###
	// * ###################################################
	// * / Do esterel::Do:
	//	annotations+=Annotation*
	//	"do" ((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?)
	//	(endingAnnotations+=Annotation*
	//	"upto"
	//	expression=DelayExpr
	//	| endingAnnotations+=Annotation*
	//	"watching"
	//	delay=DelayExpr ("timeout" ((watchingStatements+=SCEstStatement ";" | watchingStatements+=MetaStatement)*
	//	watchingStatements+=SCEstStatement?)
	//	"end" "timeout"?)?)
	public DoElements getDoAccess() {
		return pDo;
	}
	
	public ParserRule getDoRule() {
		return getDoAccess().getRule();
	}

	/// * ###################################################
	// * ###                   SCEst                     ###
	// * ###################################################
	// * / // ==> unemit
	//// -------------------------------------
	//UnEmit:
	//	annotations+=Annotation*
	//	"unemit"
	//	signal=[esterel::ISignal];
	public UnEmitElements getUnEmitAccess() {
		return pUnEmit;
	}
	
	public ParserRule getUnEmitRule() {
		return getUnEmitAccess().getRule();
	}

	//// ==> reset: Signal value reset (absolute write)
	//// -------------------------------------
	//Set:
	//	annotations+=Annotation*
	//	"set"
	//	signal=[esterel::ISignal] ("(" expression=Expression ")");
	public SetElements getSetAccess() {
		return pSet;
	}
	
	public ParserRule getSetRule() {
		return getSetAccess().getRule();
	}

	/// * ###################################################
	// * ###                   SCL                       ###
	// * ###################################################
	// * / Conditional scl::Conditional:
	//	annotations+=Annotation*
	//	'if' expression=Expression ('then'? '{'
	//	declarations+=Declaration* ((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?)
	//	'}') else=ElseScope?
	public ConditionalElements getConditionalAccess() {
		return pConditional;
	}
	
	public ParserRule getConditionalRule() {
		return getConditionalAccess().getRule();
	}

	//ElseScope scl::ElseScope:
	//	{scl::ElseScope} annotations+=Annotation*
	//	'else' '{'
	//	declarations+=Declaration* ((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?)
	//	'}'
	public ElseScopeElements getElseScopeAccess() {
		return pElseScope;
	}
	
	public ParserRule getElseScopeRule() {
		return getElseScopeAccess().getRule();
	}

	//MetaStatement scl::Statement:
	//	Label | ScopeStatement
	public MetaStatementElements getMetaStatementAccess() {
		return pMetaStatement;
	}
	
	public ParserRule getMetaStatementRule() {
		return getMetaStatementAccess().getRule();
	}

	//Thread scl::Thread:
	//	{scl::Thread} (annotations+=Annotation*
	//	'{'
	//	declarations+=Declaration* ((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?)
	//	'}'
	//	| (statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?)
	public ThreadElements getThreadAccess() {
		return pThread;
	}
	
	public ParserRule getThreadRule() {
		return getThreadAccess().getRule();
	}

	//Parallel scl::Parallel:
	//	annotations+=Annotation*
	//	'fork' (threads+=Thread ('par'
	//	threads+=Thread)*)
	//	'join'
	public ParallelElements getParallelAccess() {
		return pParallel;
	}
	
	public ParserRule getParallelRule() {
		return getParallelAccess().getRule();
	}

	//ScopeStatement scl::ScopeStatement:
	//	{scl::ScopeStatement} annotations+=Annotation*
	//	'{'
	//	declarations+=Declaration* ((statements+=SCEstStatement ";" | statements+=MetaStatement)* statements+=SCEstStatement?)
	//	'}'
	public ScopeStatementElements getScopeStatementAccess() {
		return pScopeStatement;
	}
	
	public ParserRule getScopeStatementRule() {
		return getScopeStatementAccess().getRule();
	}

	//terminal ML_COMMENT:
	//	('%' '{')->('}' '%') | ('/ *' !'*')->'* /';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	} 

	//terminal SL_COMMENT:
	//	('//' | '%') !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	} 

	//// Esterel is a bit richer than what is provided by kexpressions. 
	//// These rules are introduced here.
	//// Care about order of the rules! 
	//AtomicExpression kexpressions::Expression:
	//	FunctionExpression
	//	| TrapExpression
	//	| BoolValue
	//	| ValuedObjectTestExpression
	//	| TextExpression
	//	| '(' BooleanExpression ')'
	//	| ConstantExpression
	//	| FunctionCall
	public AtomicExpressionElements getAtomicExpressionAccess() {
		return pAtomicExpression;
	}
	
	public ParserRule getAtomicExpressionRule() {
		return getAtomicExpressionAccess().getRule();
	}

	//AtomicValuedExpression kexpressions::Expression:
	//	IntValue
	//	| FloatValue
	//	| '(' ValuedExpression ')'
	//	| AtomicExpression
	//	| StringValue
	public AtomicValuedExpressionElements getAtomicValuedExpressionAccess() {
		return pAtomicValuedExpression;
	}
	
	public ParserRule getAtomicValuedExpressionRule() {
		return getAtomicValuedExpressionAccess().getRule();
	}

	//java.lang.RuntimeException: No EObjectDescription could be found in Scope ParserRule.hiddenTokens for Grammar'de.cau.cs.kieler.esterel.scest.SCEst'.rules[35]->TerminalRule'SL_COMMENT'
	//Semantic Object: Grammar'de.cau.cs.kieler.esterel.Esterel'.rules[0]->ParserRule'Program'
	//URI: file:/home/mrb/kieler-semantics-master/git/semantics/plugins/de.cau.cs.kieler.esterel/bin/de/cau/cs/kieler/esterel/Esterel.xtext
	//EStructuralFeature: xtext::ParserRule.hiddenTokens
	public EsterelGrammarAccess.ProgramElements getProgramAccess() {
		return gaEsterel.getProgramAccess();
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}

	/// * ###################################################
	// * ###                 7.2 Modules                 ###
	// * ###################################################
	// * / // ==> module: a module consists of an interface and a body
	//// -------------------------------------
	//Module:
	//	annotations+=Annotation*
	//	"module" name=ID ":" (intSignalDecls+=InterfaceSignalDecl
	//	| intTypeDecls+=TypeDecl
	//	| intSensorDecls+=SensorDecl
	//	| intConstantDecls+=ConstantDecls
	//	| intRelationDecls+=RelationDecl
	//	| intTaskDecls+=TaskDecl
	//	| intFunctionDecls+=FunctionDecl
	//	| intProcedureDecls+=ProcedureDecl)* ((statements+=EsterelStatement ";")* statements+=EsterelStatement?) ("end"
	//	"module" | ".");
	public EsterelGrammarAccess.ModuleElements getModuleAccess() {
		return gaEsterel.getModuleAccess();
	}
	
	public ParserRule getModuleRule() {
		return getModuleAccess().getRule();
	}

	/// * ###################################################
	// * ###        7.3 Interface Declaration            ###
	// * ###################################################
	// * / // ==> Interface Declaration
	//// ----------------------------------------------
	//// overwrite to allow type definitions in a specific module
	//TypeIdentifier:
	//	type=Esterel_ValueType
	//	| typeID=ID
	//	| "combine" (type=Esterel_ValueType | typeID=ID) "with" operator=Esterel_CombineOperator | {EsterelType}
	//	estType=[Type];
	public EsterelGrammarAccess.TypeIdentifierElements getTypeIdentifierAccess() {
		return gaEsterel.getTypeIdentifierAccess();
	}
	
	public ParserRule getTypeIdentifierRule() {
		return getTypeIdentifierAccess().getRule();
	}

	//// doesn't work, should be before typeID=ID
	//// ==> 7.3.1 Type Declarations
	//// -------------------------------------
	//TypeDecl:
	//	annotations+=Annotation*
	//	"type"
	//	types+=Type ("," types+=Type)*
	//	";";
	public EsterelGrammarAccess.TypeDeclElements getTypeDeclAccess() {
		return gaEsterel.getTypeDeclAccess();
	}
	
	public ParserRule getTypeDeclRule() {
		return getTypeDeclAccess().getRule();
	}

	//Type:
	//	name=ID;
	public EsterelGrammarAccess.TypeElements getTypeAccess() {
		return gaEsterel.getTypeAccess();
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//// ==> 7.3.2 Constant Declarations
	//// -------------------------------------
	//ConstantDecls:
	//	annotations+=Annotation*
	//	"constant"
	//	constants+=OneTypeConstantDecls ("," constants+=OneTypeConstantDecls)*
	//	";";
	public EsterelGrammarAccess.ConstantDeclsElements getConstantDeclsAccess() {
		return gaEsterel.getConstantDeclsAccess();
	}
	
	public ParserRule getConstantDeclsRule() {
		return getConstantDeclsAccess().getRule();
	}

	//OneTypeConstantDecls:
	//	constants+=Constant ("," constants+=Constant)* ":" type=TypeIdentifier;
	public EsterelGrammarAccess.OneTypeConstantDeclsElements getOneTypeConstantDeclsAccess() {
		return gaEsterel.getOneTypeConstantDeclsAccess();
	}
	
	public ParserRule getOneTypeConstantDeclsRule() {
		return getOneTypeConstantDeclsAccess().getRule();
	}

	//Constant kexpressions::ValuedObject:
	//	{Constant} name=ID ("=" value=ConstantValue)?
	public EsterelGrammarAccess.ConstantElements getConstantAccess() {
		return gaEsterel.getConstantAccess();
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}

	//ConstantValue:
	//	INT | FLOAT | BOOLEAN | ID | STRING;
	public EsterelGrammarAccess.ConstantValueElements getConstantValueAccess() {
		return gaEsterel.getConstantValueAccess();
	}
	
	public ParserRule getConstantValueRule() {
		return getConstantValueAccess().getRule();
	}

	//// ==> 7.3.3 Function Declaration
	//// -------------------------------------
	//FunctionDecl:
	//	annotations+=Annotation*
	//	"function"
	//	functions+=Function ("," functions+=Function)*
	//	";";
	public EsterelGrammarAccess.FunctionDeclElements getFunctionDeclAccess() {
		return gaEsterel.getFunctionDeclAccess();
	}
	
	public ParserRule getFunctionDeclRule() {
		return getFunctionDeclAccess().getRule();
	}

	//Function:
	//	name=ID
	//	"(" (idList+=TypeIdentifier ("," idList+=TypeIdentifier)*)? ")"
	//	":" type=TypeIdentifier;
	public EsterelGrammarAccess.FunctionElements getFunctionAccess() {
		return gaEsterel.getFunctionAccess();
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}

	//// ==> 7.3.4 Procedure Declaration
	//// -------------------------------------
	//ProcedureDecl:
	//	annotations+=Annotation*
	//	"procedure" procedures+=Procedure ("," procedures+=Procedure)*
	//	";";
	public EsterelGrammarAccess.ProcedureDeclElements getProcedureDeclAccess() {
		return gaEsterel.getProcedureDeclAccess();
	}
	
	public ParserRule getProcedureDeclRule() {
		return getProcedureDeclAccess().getRule();
	}

	//Procedure:
	//	name=ID
	//	"(" (variables+=TypeIdentifier ("," variables+=TypeIdentifier)*)? ")"
	//	"(" (expressions+=TypeIdentifier ("," expressions+=TypeIdentifier)*)? ")";
	public EsterelGrammarAccess.ProcedureElements getProcedureAccess() {
		return gaEsterel.getProcedureAccess();
	}
	
	public ParserRule getProcedureRule() {
		return getProcedureAccess().getRule();
	}

	//// ==> 7.3.5 Task Declaration
	//// -------------------------------------
	//TaskDecl:
	//	annotations+=Annotation*
	//	"task" tasks+=Task ("," tasks+=Task)*
	//	";";
	public EsterelGrammarAccess.TaskDeclElements getTaskDeclAccess() {
		return gaEsterel.getTaskDeclAccess();
	}
	
	public ParserRule getTaskDeclRule() {
		return getTaskDeclAccess().getRule();
	}

	//Task:
	//	name=ID
	//	"(" (variables+=TypeIdentifier ("," variables+=TypeIdentifier)*)? ")"
	//	"(" (expressions+=TypeIdentifier ("," expressions+=TypeIdentifier)*)? ")";
	public EsterelGrammarAccess.TaskElements getTaskAccess() {
		return gaEsterel.getTaskAccess();
	}
	
	public ParserRule getTaskRule() {
		return getTaskAccess().getRule();
	}

	//// ==> 7.3.6 Signal Declaration
	//// -------------------------------------
	//InterfaceSignalDecl:
	//	{Input} annotations+=Annotation* "input" signals+=ISignal ("," signals+=ISignal)* ";"
	//	| {Output} annotations+=Annotation* "output" signals+=ISignal ("," signals+=ISignal)* ";"
	//	| {InputOutput} annotations+=Annotation* "inputoutput" signals+=ISignal ("," signals+=ISignal)* ";"
	//	| {Return} annotations+=Annotation* "return" signals+=ISignal ("," signals+=ISignal)* ";";
	public EsterelGrammarAccess.InterfaceSignalDeclElements getInterfaceSignalDeclAccess() {
		return gaEsterel.getInterfaceSignalDeclAccess();
	}
	
	public ParserRule getInterfaceSignalDeclRule() {
		return getInterfaceSignalDeclAccess().getRule();
	}

	//// example 1:   A : combine boolean with or
	//// example 2:   A (combine boolean with or)
	//// example 3:   A := 0 : combine integer with '+'
	//ISignal:
	//	{ISignal} name=ID (":" (type=Esterel_ValueType
	//	| typeID=ID
	//	| "combine" (type=Esterel_ValueType | typeID=ID) "with" (func=[Function] | combineOperator=Esterel_CombineOperator)) |
	//	"(" (type=Esterel_ValueType
	//	| typeID=ID
	//	| "combine" (type=Esterel_ValueType | typeID=ID) "with" (func=[Function] | combineOperator=Esterel_CombineOperator))
	//	")" | ":=" expression=Expression ":" (type=Esterel_ValueType
	//	| typeID=ID
	//	| "combine" (type=Esterel_ValueType | typeID=ID) "with" (func=[Function] |
	//	combineOperator=Esterel_CombineOperator)))?;
	public EsterelGrammarAccess.ISignalElements getISignalAccess() {
		return gaEsterel.getISignalAccess();
	}
	
	public ParserRule getISignalRule() {
		return getISignalAccess().getRule();
	}

	//// ==> 7.3.7 Sensor Declaration
	//// -------------------------------------
	//SensorDecl:
	//	annotations+=Annotation*
	//	"sensor"
	//	sensors+=SensorWithType ("," sensors+=SensorWithType)*
	//	";";
	public EsterelGrammarAccess.SensorDeclElements getSensorDeclAccess() {
		return gaEsterel.getSensorDeclAccess();
	}
	
	public ParserRule getSensorDeclRule() {
		return getSensorDeclAccess().getRule();
	}

	//SensorWithType:
	//	sensor=Sensor (":" type=TypeIdentifier | "(" type=TypeIdentifier ")");
	public EsterelGrammarAccess.SensorWithTypeElements getSensorWithTypeAccess() {
		return gaEsterel.getSensorWithTypeAccess();
	}
	
	public ParserRule getSensorWithTypeRule() {
		return getSensorWithTypeAccess().getRule();
	}

	//Sensor ISignal:
	//	name=ID
	public EsterelGrammarAccess.SensorElements getSensorAccess() {
		return gaEsterel.getSensorAccess();
	}
	
	public ParserRule getSensorRule() {
		return getSensorAccess().getRule();
	}

	//// ==> 7.3.8 Input Relation Declaration
	//// -------------------------------------
	//RelationDecl:
	//	{Relation} annotations+=Annotation*
	//	"relation"
	//	relations+=RelationType ("," relations+=RelationType)*
	//	";";
	public EsterelGrammarAccess.RelationDeclElements getRelationDeclAccess() {
		return gaEsterel.getRelationDeclAccess();
	}
	
	public ParserRule getRelationDeclRule() {
		return getRelationDeclAccess().getRule();
	}

	//RelationType:
	//	RelationImplication | RelationIncompatibility;
	public EsterelGrammarAccess.RelationTypeElements getRelationTypeAccess() {
		return gaEsterel.getRelationTypeAccess();
	}
	
	public ParserRule getRelationTypeRule() {
		return getRelationTypeAccess().getRule();
	}

	//RelationImplication:
	//	first=[ISignal] type="=>" second=[ISignal];
	public EsterelGrammarAccess.RelationImplicationElements getRelationImplicationAccess() {
		return gaEsterel.getRelationImplicationAccess();
	}
	
	public ParserRule getRelationImplicationRule() {
		return getRelationImplicationAccess().getRule();
	}

	//RelationIncompatibility:
	//	incomp+=[ISignal] type="#" incomp+=[ISignal] ("#" incomp+=[ISignal])*;
	public EsterelGrammarAccess.RelationIncompatibilityElements getRelationIncompatibilityAccess() {
		return gaEsterel.getRelationIncompatibilityAccess();
	}
	
	public ParserRule getRelationIncompatibilityRule() {
		return getRelationIncompatibilityAccess().getRule();
	}

	//// ==> Statement
	//// -------------------------------------
	//EsterelStatement scl::Statement:
	//	super::EsterelParallel | AtomicStatement
	public EsterelGrammarAccess.EsterelStatementElements getEsterelStatementAccess() {
		return gaEsterel.getEsterelStatementAccess();
	}
	
	public ParserRule getEsterelStatementRule() {
		return getEsterelStatementAccess().getRule();
	}

	//// ==> Atomic Statements
	//// -------------------------------------
	//AtomicStatement scl::Statement:
	//	super::Abort | EsterelAssignment | super::Await | super::Block | ProcCall | super::Do | Emit | super::EveryDo | Exit |
	//	super::Exec | Halt | super::IfTest | super::LocalSignalDecl | super::Loop | Nothing | Pause | super::Present |
	//	super::Repeat | Run | super::Suspend | Sustain | super::Trap | super::LocalVariable
	public EsterelGrammarAccess.AtomicStatementElements getAtomicStatementAccess() {
		return gaEsterel.getAtomicStatementAccess();
	}
	
	public ParserRule getAtomicStatementRule() {
		return getAtomicStatementAccess().getRule();
	}

	//// ==> Nothing
	//// -------------------------------------
	//Nothing:
	//	{Nothing} annotations+=Annotation*
	//	"nothing";
	public EsterelGrammarAccess.NothingElements getNothingAccess() {
		return gaEsterel.getNothingAccess();
	}
	
	public ParserRule getNothingRule() {
		return getNothingAccess().getRule();
	}

	//// ==> Halt
	//// -------------------------------------
	//Halt:
	//	{Halt} annotations+=Annotation*
	//	"halt";
	public EsterelGrammarAccess.HaltElements getHaltAccess() {
		return gaEsterel.getHaltAccess();
	}
	
	public ParserRule getHaltRule() {
		return getHaltAccess().getRule();
	}

	//// ==> 7.5.1 Signal Emission
	//// -------------------------------------
	//Emit:
	//	annotations+=Annotation*
	//	"emit"
	//	signal=[ISignal] ("(" expression=Expression ")")?;
	public EsterelGrammarAccess.EmitElements getEmitAccess() {
		return gaEsterel.getEmitAccess();
	}
	
	public ParserRule getEmitRule() {
		return getEmitAccess().getRule();
	}

	//// emit a signal indefinitely
	//Sustain:
	//	annotations+=Annotation*
	//	"sustain"
	//	signal=[ISignal] ("(" expression=Expression ")")?;
	public EsterelGrammarAccess.SustainElements getSustainAccess() {
		return gaEsterel.getSustainAccess();
	}
	
	public ParserRule getSustainRule() {
		return getSustainAccess().getRule();
	}

	//// ==> 7.5.2 Assignment and Procedure Call
	//// -------------------------------------
	//EsterelAssignment:
	//	var=[IVariable] ":=" expression=Expression;
	public EsterelGrammarAccess.EsterelAssignmentElements getEsterelAssignmentAccess() {
		return gaEsterel.getEsterelAssignmentAccess();
	}
	
	public ParserRule getEsterelAssignmentRule() {
		return getEsterelAssignmentAccess().getRule();
	}

	//ProcCall:
	//	annotations+=Annotation*
	//	"call"
	//	proc=[Procedure]
	//	"(" (varList+=[IVariable] ("," varList+=[IVariable])*)?
	//	")"
	//	"(" (kexpressions+=Expression ("," kexpressions+=Expression)*)?
	//	")";
	public EsterelGrammarAccess.ProcCallElements getProcCallAccess() {
		return gaEsterel.getProcCallAccess();
	}
	
	public ParserRule getProcCallRule() {
		return getProcCallAccess().getRule();
	}

	//TrapSignal ISignal:
	//	{TrapSignal} name=ID (":"? (type=Esterel_ValueType
	//	| typeID=ID
	//	| "combine" (type=Esterel_ValueType | typeID=ID) "with" (func=[Function] | combineOperator=Esterel_CombineOperator)) |
	//	"(" (type=Esterel_ValueType
	//	| typeID=ID
	//	| "combine" (type=Esterel_ValueType | typeID=ID) "with" (func=[Function] | combineOperator=Esterel_CombineOperator))
	//	")" | ":=" expression=Expression ":" (type=Esterel_ValueType
	//	| typeID=ID
	//	| "combine" (type=Esterel_ValueType | typeID=ID) "with" (func=[Function] | combineOperator=Esterel_CombineOperator)))?
	public EsterelGrammarAccess.TrapSignalElements getTrapSignalAccess() {
		return gaEsterel.getTrapSignalAccess();
	}
	
	public ParserRule getTrapSignalRule() {
		return getTrapSignalAccess().getRule();
	}

	//Exit:
	//	annotations+=Annotation*
	//	"exit"
	//	trap=[TrapSignal] ("(" expression=Expression ")")?;
	public EsterelGrammarAccess.ExitElements getExitAccess() {
		return gaEsterel.getExitAccess();
	}
	
	public ParserRule getExitRule() {
		return getExitAccess().getRule();
	}

	//VariableDecl:
	//	variables+=IVariable ("," variables+=IVariable)* ":" type=TypeIdentifier;
	public EsterelGrammarAccess.VariableDeclElements getVariableDeclAccess() {
		return gaEsterel.getVariableDeclAccess();
	}
	
	public ParserRule getVariableDeclRule() {
		return getVariableDeclAccess().getRule();
	}

	//IVariable:
	//	name=ID (":=" expression=Expression)?;
	public EsterelGrammarAccess.IVariableElements getIVariableAccess() {
		return gaEsterel.getIVariableAccess();
	}
	
	public ParserRule getIVariableRule() {
		return getIVariableAccess().getRule();
	}

	//// ==> 7.5.15 The run Module Instantiation Statement
	//// -------------------------------------
	//Run:
	//	annotations+=Annotation* ("run"
	//	module=ModuleRenaming ("[" list+=Renaming (";" list+=Renaming)* "]")?
	//	| "copymodule"
	//	module=ModuleRenaming ("[" list+=Renaming (";" list+=Renaming)* "]")?);
	public EsterelGrammarAccess.RunElements getRunAccess() {
		return gaEsterel.getRunAccess();
	}
	
	public ParserRule getRunRule() {
		return getRunAccess().getRule();
	}

	////deprecated
	//ModuleRenaming:
	//	module=[Module] | newName=ID "/" module=[Module];
	public EsterelGrammarAccess.ModuleRenamingElements getModuleRenamingAccess() {
		return gaEsterel.getModuleRenamingAccess();
	}
	
	public ParserRule getModuleRenamingRule() {
		return getModuleRenamingAccess().getRule();
	}

	//Renaming:
	//	annotations+=Annotation* ("type" renamings+=TypeRenaming ("," renamings+=TypeRenaming)*
	//	| "constant" renamings+=ConstantRenaming ("," renamings+=ConstantRenaming)*
	//	| "function" renamings+=FunctionRenaming ("," renamings+=FunctionRenaming)*
	//	| "procedure" renamings+=ProcedureRenaming ("," renamings+=ProcedureRenaming)*
	//	| "task" renamings+=TaskRenaming ("," renamings+=TaskRenaming)*
	//	| "signal" renamings+=SignalRenaming ("," renamings+=SignalRenaming)*);
	public EsterelGrammarAccess.RenamingElements getRenamingAccess() {
		return gaEsterel.getRenamingAccess();
	}
	
	public ParserRule getRenamingRule() {
		return getRenamingAccess().getRule();
	}

	//TypeRenaming:
	//	(newName=[Type] | newType=Esterel_ValueType) "/" oldName=[Type];
	public EsterelGrammarAccess.TypeRenamingElements getTypeRenamingAccess() {
		return gaEsterel.getTypeRenamingAccess();
	}
	
	public ParserRule getTypeRenamingRule() {
		return getTypeRenamingAccess().getRule();
	}

	//ConstantRenaming:
	//	(newName=[kexpressions::ValuedObject] | newValue=ConstantValue) "/" oldName=[kexpressions::ValuedObject];
	public EsterelGrammarAccess.ConstantRenamingElements getConstantRenamingAccess() {
		return gaEsterel.getConstantRenamingAccess();
	}
	
	public ParserRule getConstantRenamingRule() {
		return getConstantRenamingAccess().getRule();
	}

	//FunctionRenaming:
	//	(newName=[Function] | newFunc=BuildInFunction) "/" oldName=[Function];
	public EsterelGrammarAccess.FunctionRenamingElements getFunctionRenamingAccess() {
		return gaEsterel.getFunctionRenamingAccess();
	}
	
	public ParserRule getFunctionRenamingRule() {
		return getFunctionRenamingAccess().getRule();
	}

	//ProcedureRenaming:
	//	newName=[Procedure] "/" oldName=[Procedure];
	public EsterelGrammarAccess.ProcedureRenamingElements getProcedureRenamingAccess() {
		return gaEsterel.getProcedureRenamingAccess();
	}
	
	public ParserRule getProcedureRenamingRule() {
		return getProcedureRenamingAccess().getRule();
	}

	//TaskRenaming:
	//	newName=[Task] "/" oldName=[Task];
	public EsterelGrammarAccess.TaskRenamingElements getTaskRenamingAccess() {
		return gaEsterel.getTaskRenamingAccess();
	}
	
	public ParserRule getTaskRenamingRule() {
		return getTaskRenamingAccess().getRule();
	}

	//SignalRenaming:
	//	newName=[ISignal] "/" oldName=[ISignal];
	public EsterelGrammarAccess.SignalRenamingElements getSignalRenamingAccess() {
		return gaEsterel.getSignalRenamingAccess();
	}
	
	public ParserRule getSignalRenamingRule() {
		return getSignalRenamingAccess().getRule();
	}

	//// renaming can also rename build in types and functions
	//BuildInFunction:
	//	"*" | "/" | "+" | "-" | "mod" | "=" | "<>" | ">" | "<" | "<=" | ">=" | "not" | "and" | "or";
	public EsterelGrammarAccess.BuildInFunctionElements getBuildInFunctionAccess() {
		return gaEsterel.getBuildInFunctionAccess();
	}
	
	public ParserRule getBuildInFunctionRule() {
		return getBuildInFunctionAccess().getRule();
	}

	//enum Esterel_CompareOperator returns kexpressions::OperatorType:
	//	EQ="=" | LT="<" | LEQ="<=" | GT=">" | GEQ=">=" | NE="<>";
	public EsterelGrammarAccess.Esterel_CompareOperatorElements getEsterel_CompareOperatorAccess() {
		return gaEsterel.getEsterel_CompareOperatorAccess();
	}
	
	public EnumRule getEsterel_CompareOperatorRule() {
		return getEsterel_CompareOperatorAccess().getRule();
	}

	//enum Esterel_PreOperator returns kexpressions::OperatorType:
	//	PRE="pre";
	public EsterelGrammarAccess.Esterel_PreOperatorElements getEsterel_PreOperatorAccess() {
		return gaEsterel.getEsterel_PreOperatorAccess();
	}
	
	public EnumRule getEsterel_PreOperatorRule() {
		return getEsterel_PreOperatorAccess().getRule();
	}

	//enum Esterel_OrOperator returns kexpressions::OperatorType:
	//	LOGICAL_OR="or";
	public EsterelGrammarAccess.Esterel_OrOperatorElements getEsterel_OrOperatorAccess() {
		return gaEsterel.getEsterel_OrOperatorAccess();
	}
	
	public EnumRule getEsterel_OrOperatorRule() {
		return getEsterel_OrOperatorAccess().getRule();
	}

	//enum Esterel_AndOperator returns kexpressions::OperatorType:
	//	LOGICAL_AND="and";
	public EsterelGrammarAccess.Esterel_AndOperatorElements getEsterel_AndOperatorAccess() {
		return gaEsterel.getEsterel_AndOperatorAccess();
	}
	
	public EnumRule getEsterel_AndOperatorRule() {
		return getEsterel_AndOperatorAccess().getRule();
	}

	//enum Esterel_NotOperator returns kexpressions::OperatorType:
	//	NOT="not";
	public EsterelGrammarAccess.Esterel_NotOperatorElements getEsterel_NotOperatorAccess() {
		return gaEsterel.getEsterel_NotOperatorAccess();
	}
	
	public EnumRule getEsterel_NotOperatorRule() {
		return getEsterel_NotOperatorAccess().getRule();
	}

	//enum Esterel_AddOperator returns kexpressions::OperatorType:
	//	ADD="+";
	public EsterelGrammarAccess.Esterel_AddOperatorElements getEsterel_AddOperatorAccess() {
		return gaEsterel.getEsterel_AddOperatorAccess();
	}
	
	public EnumRule getEsterel_AddOperatorRule() {
		return getEsterel_AddOperatorAccess().getRule();
	}

	//enum Esterel_SubOperator returns kexpressions::OperatorType:
	//	SUB="-";
	public EsterelGrammarAccess.Esterel_SubOperatorElements getEsterel_SubOperatorAccess() {
		return gaEsterel.getEsterel_SubOperatorAccess();
	}
	
	public EnumRule getEsterel_SubOperatorRule() {
		return getEsterel_SubOperatorAccess().getRule();
	}

	//enum Esterel_MultOperator returns kexpressions::OperatorType:
	//	MULT="*";
	public EsterelGrammarAccess.Esterel_MultOperatorElements getEsterel_MultOperatorAccess() {
		return gaEsterel.getEsterel_MultOperatorAccess();
	}
	
	public EnumRule getEsterel_MultOperatorRule() {
		return getEsterel_MultOperatorAccess().getRule();
	}

	//enum Esterel_ModOperator returns kexpressions::OperatorType:
	//	MOD="mod";
	public EsterelGrammarAccess.Esterel_ModOperatorElements getEsterel_ModOperatorAccess() {
		return gaEsterel.getEsterel_ModOperatorAccess();
	}
	
	public EnumRule getEsterel_ModOperatorRule() {
		return getEsterel_ModOperatorAccess().getRule();
	}

	//enum Esterel_DivOperator returns kexpressions::OperatorType:
	//	DIV="/";
	public EsterelGrammarAccess.Esterel_DivOperatorElements getEsterel_DivOperatorAccess() {
		return gaEsterel.getEsterel_DivOperatorAccess();
	}
	
	public EnumRule getEsterel_DivOperatorRule() {
		return getEsterel_DivOperatorAccess().getRule();
	}

	//enum Esterel_ValueTestOperator returns kexpressions::OperatorType:
	//	VAL="?";
	public EsterelGrammarAccess.Esterel_ValueTestOperatorElements getEsterel_ValueTestOperatorAccess() {
		return gaEsterel.getEsterel_ValueTestOperatorAccess();
	}
	
	public EnumRule getEsterel_ValueTestOperatorRule() {
		return getEsterel_ValueTestOperatorAccess().getRule();
	}

	//enum Esterel_ValueType returns kexpressions::ValueType:
	//	PURE="pure" | BOOL="boolean" | UNSIGNED="unsigned" |
	//	INT="integer" | FLOAT="float" | DOUBLE="double" |
	//	STRING="string" | HOST="host";
	public EsterelGrammarAccess.Esterel_ValueTypeElements getEsterel_ValueTypeAccess() {
		return gaEsterel.getEsterel_ValueTypeAccess();
	}
	
	public EnumRule getEsterel_ValueTypeRule() {
		return getEsterel_ValueTypeAccess().getRule();
	}

	//enum Esterel_CombineOperator returns kexpressions::CombineOperator:
	//	NONE="none" | ADD="+" | MULT="*" | MAX="max" |
	//	MIN="min" | OR="or" | AND="and" | HOST="host";
	public EsterelGrammarAccess.Esterel_CombineOperatorElements getEsterel_CombineOperatorAccess() {
		return gaEsterel.getEsterel_CombineOperatorAccess();
	}
	
	public EnumRule getEsterel_CombineOperatorRule() {
		return getEsterel_CombineOperatorAccess().getRule();
	}

	//terminal STRING:
	//	'"' (!'"' | '"' '"')* '"';
	public TerminalRule getSTRINGRule() {
		return gaEsterel.getSTRINGRule();
	} 

	//terminal HOSTCODE:
	//	"'" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | "'"))* "'";
	public TerminalRule getHOSTCODERule() {
		return gaEsterel.getHOSTCODERule();
	} 

	//TrapExpression kexpressions::Expression:
	//	{TrapExpression} "??" trap=[ISignal]
	public EsterelGrammarAccess.TrapExpressionElements getTrapExpressionAccess() {
		return gaEsterel.getTrapExpressionAccess();
	}
	
	public ParserRule getTrapExpressionRule() {
		return getTrapExpressionAccess().getRule();
	}

	//FunctionExpression kexpressions::Expression:
	//	{FunctionExpression} function=[Function]
	//	"(" (kexpressions+=Expression ("," kexpressions+=Expression)*)? ")"
	public EsterelGrammarAccess.FunctionExpressionElements getFunctionExpressionAccess() {
		return gaEsterel.getFunctionExpressionAccess();
	}
	
	public ParserRule getFunctionExpressionRule() {
		return getFunctionExpressionAccess().getRule();
	}

	//ConstantExpression kexpressions::Expression:
	//	{ConstantExpression} (constant=[Constant] | value=ConstantValue)
	public EsterelGrammarAccess.ConstantExpressionElements getConstantExpressionAccess() {
		return gaEsterel.getConstantExpressionAccess();
	}
	
	public ParserRule getConstantExpressionRule() {
		return getConstantExpressionAccess().getRule();
	}

	//// --> B.3.5 Trap Expressions <--
	//// -------------------------------------
	//// The warning can be ignored since the operator will only override itself in this loop.
	//TrapExpr kexpressions::Expression:
	//	TrapAndExpression ({kexpressions::OperatorExpression.subExpressions+=current} (operator=Esterel_OrOperator
	//	subExpressions+=TrapAndExpression)+)?
	public EsterelGrammarAccess.TrapExprElements getTrapExprAccess() {
		return gaEsterel.getTrapExprAccess();
	}
	
	public ParserRule getTrapExprRule() {
		return getTrapExprAccess().getRule();
	}

	//// The warning can be ignored since the operator will only override itself in this loop.
	//TrapAndExpression kexpressions::Expression:
	//	TrapNotExpression ({kexpressions::OperatorExpression.subExpressions+=current} (operator=Esterel_AndOperator
	//	subExpressions+=TrapNotExpression)+)?
	public EsterelGrammarAccess.TrapAndExpressionElements getTrapAndExpressionAccess() {
		return gaEsterel.getTrapAndExpressionAccess();
	}
	
	public ParserRule getTrapAndExpressionRule() {
		return getTrapAndExpressionAccess().getRule();
	}

	//// The warning can be ignored since the operator will only override itself in this loop.
	//TrapNotExpression kexpressions::Expression:
	//	{kexpressions::OperatorExpression} operator=Esterel_NotOperator+
	//	subExpressions+=TrapAtomicExpression
	//	| TrapAtomicExpression
	public EsterelGrammarAccess.TrapNotExpressionElements getTrapNotExpressionAccess() {
		return gaEsterel.getTrapNotExpressionAccess();
	}
	
	public ParserRule getTrapNotExpressionRule() {
		return getTrapNotExpressionAccess().getRule();
	}

	//TrapAtomicExpression kexpressions::Expression:
	//	TrapReferenceExpr
	//	| "(" TrapExpression ")"
	public EsterelGrammarAccess.TrapAtomicExpressionElements getTrapAtomicExpressionAccess() {
		return gaEsterel.getTrapAtomicExpressionAccess();
	}
	
	public ParserRule getTrapAtomicExpressionRule() {
		return getTrapAtomicExpressionAccess().getRule();
	}

	//TrapReferenceExpr kexpressions::ValuedObjectReference:
	//	{TrapReferenceExpr} valuedObject=[TrapSignal]
	public EsterelGrammarAccess.TrapReferenceExprElements getTrapReferenceExprAccess() {
		return gaEsterel.getTrapReferenceExprAccess();
	}
	
	public ParserRule getTrapReferenceExprRule() {
		return getTrapReferenceExprAccess().getRule();
	}

	//// --> B.3.3 Signal Expressions <--
	//// -------------------------------------
	//// The warning can be ignored since the operator will only override itself in this loop.
	//SignalExpression kexpressions::Expression:
	//	SignalAndExpression ({kexpressions::OperatorExpression.subExpressions+=current} (operator=Esterel_OrOperator
	//	subExpressions+=SignalAndExpression)+)?
	public EsterelGrammarAccess.SignalExpressionElements getSignalExpressionAccess() {
		return gaEsterel.getSignalExpressionAccess();
	}
	
	public ParserRule getSignalExpressionRule() {
		return getSignalExpressionAccess().getRule();
	}

	//// The warning can be ignored since the operator will only override itself in this loop.
	//SignalAndExpression kexpressions::Expression:
	//	SignalNotExpression ({kexpressions::OperatorExpression.subExpressions+=current} (operator=Esterel_AndOperator
	//	subExpressions+=SignalNotExpression)+)?
	public EsterelGrammarAccess.SignalAndExpressionElements getSignalAndExpressionAccess() {
		return gaEsterel.getSignalAndExpressionAccess();
	}
	
	public ParserRule getSignalAndExpressionRule() {
		return getSignalAndExpressionAccess().getRule();
	}

	//// The warning can be ignored since the operator will only override itself in this loop.
	//SignalNotExpression kexpressions::Expression:
	//	{kexpressions::OperatorExpression} operator=Esterel_NotOperator+
	//	subExpressions+=SignalAtomicExpression
	//	| SignalAtomicExpression
	public EsterelGrammarAccess.SignalNotExpressionElements getSignalNotExpressionAccess() {
		return gaEsterel.getSignalNotExpressionAccess();
	}
	
	public ParserRule getSignalNotExpressionRule() {
		return getSignalNotExpressionAccess().getRule();
	}

	//SignalAtomicExpression kexpressions::Expression:
	//	"(" SignalExpression ")"
	//	| SignalPreExpr
	//	| SignalReferenceExpr
	public EsterelGrammarAccess.SignalAtomicExpressionElements getSignalAtomicExpressionAccess() {
		return gaEsterel.getSignalAtomicExpressionAccess();
	}
	
	public ParserRule getSignalAtomicExpressionRule() {
		return getSignalAtomicExpressionAccess().getRule();
	}

	//SignalReferenceExpr kexpressions::ValuedObjectReference:
	//	{SignalReferenceExpr} valuedObject=[ISignal]
	public EsterelGrammarAccess.SignalReferenceExprElements getSignalReferenceExprAccess() {
		return gaEsterel.getSignalReferenceExprAccess();
	}
	
	public ParserRule getSignalReferenceExprRule() {
		return getSignalReferenceExprAccess().getRule();
	}

	//SignalPreExpr kexpressions::Expression:
	//	{kexpressions::OperatorExpression} operator=Esterel_PreOperator
	//	'(' subExpressions+=SignalReferenceExpr ')'
	public EsterelGrammarAccess.SignalPreExprElements getSignalPreExprAccess() {
		return gaEsterel.getSignalPreExprAccess();
	}
	
	public ParserRule getSignalPreExprRule() {
		return getSignalPreExprAccess().getRule();
	}

	//// --> B.3.4 Delay Expressions <--
	//// -------------------------------------
	//DelayExpr:
	//	(expression=Expression | isImmediate?="immediate")? (signalExpr=SignalReferenceExpr
	//	| "[" signalExpr=SignalExpression "]");
	public EsterelGrammarAccess.DelayExprElements getDelayExprAccess() {
		return gaEsterel.getDelayExprAccess();
	}
	
	public ParserRule getDelayExprRule() {
		return getDelayExprAccess().getRule();
	}

	/// * #########################################################################
	// * 
	// * 
	// * Before the following was an extra plugin named
	// * "KExpressions":  de.cau.cs.kieler.esterel.kexpressions
	// * 
	// * 
	// * #########################################################################
	// * / Expression kexpressions::Expression:
	//	BooleanExpression
	//	| ValuedExpression
	public EsterelGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaEsterel.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//// Example: not D and C or ?E = 42 or not (A and (B or C))
	//BooleanExpression kexpressions::Expression:
	//	OrExpression
	public EsterelGrammarAccess.BooleanExpressionElements getBooleanExpressionAccess() {
		return gaEsterel.getBooleanExpressionAccess();
	}
	
	public ParserRule getBooleanExpressionRule() {
		return getBooleanExpressionAccess().getRule();
	}

	//// Example: A or B, A and B and C, C and B or D and not E, A and B and C
	//// The warning can be ignored since the operator will only override itself in this loop.
	//OrExpression kexpressions::Expression:
	//	AndExpression ({kexpressions::OperatorExpression.subExpressions+=current} (operator=Esterel_OrOperator
	//	subExpressions+=AndExpression)+)?
	public EsterelGrammarAccess.OrExpressionElements getOrExpressionAccess() {
		return gaEsterel.getOrExpressionAccess();
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}

	//// Example: A and B, not C and 42 <= ?D
	//// The warning can be ignored since the operator will only override itself in this loop.
	//AndExpression kexpressions::Expression:
	//	CompareOperation ({kexpressions::OperatorExpression.subExpressions+=current} (operator=Esterel_AndOperator
	//	subExpressions+=CompareOperation)+)?
	public EsterelGrammarAccess.AndExpressionElements getAndExpressionAccess() {
		return gaEsterel.getAndExpressionAccess();
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}

	//// Example: 42 <= ?A
	//CompareOperation kexpressions::Expression:
	//	NotOrValuedExpression ({kexpressions::OperatorExpression.subExpressions+=current} operator=Esterel_CompareOperator
	//	subExpressions+=NotOrValuedExpression)?
	public EsterelGrammarAccess.CompareOperationElements getCompareOperationAccess() {
		return gaEsterel.getCompareOperationAccess();
	}
	
	public ParserRule getCompareOperationRule() {
		return getCompareOperationAccess().getRule();
	}

	/// *   
	//    // old
	//    => NotOrValuedExpression 
	//    ( {kexpressions::OperatorExpression.subExpressions+=current} 
	//        operator=Esterel_CompareOperator 
	//        subExpressions+=NotOrValuedExpression
	//    )
	//    | 
	//    NotExpression; 
	// * / // order IS IMPORTANT
	//NotOrValuedExpression kexpressions::Expression:
	//	ValuedExpression
	//	| NotExpression
	public EsterelGrammarAccess.NotOrValuedExpressionElements getNotOrValuedExpressionAccess() {
		return gaEsterel.getNotOrValuedExpressionAccess();
	}
	
	public ParserRule getNotOrValuedExpressionRule() {
		return getNotOrValuedExpressionAccess().getRule();
	}

	//// Example: not A, not false, not (A or B)
	//// at the latter we need the parans to indicate the right binding
	//NotExpression kexpressions::Expression:
	//	{kexpressions::OperatorExpression} operator=Esterel_NotOperator
	//	subExpressions+=NotExpression | super::AtomicExpression
	public EsterelGrammarAccess.NotExpressionElements getNotExpressionAccess() {
		return gaEsterel.getNotExpressionAccess();
	}
	
	public ParserRule getNotExpressionRule() {
		return getNotExpressionAccess().getRule();
	}

	//// everything that evaluates to a primitive number value
	//ValuedExpression kexpressions::Expression:
	//	AddExpression
	public EsterelGrammarAccess.ValuedExpressionElements getValuedExpressionAccess() {
		return gaEsterel.getValuedExpressionAccess();
	}
	
	public ParserRule getValuedExpressionRule() {
		return getValuedExpressionAccess().getRule();
	}

	//// Example: 1 + 2
	//// The warning can be ignored since the operator will only override itself in this loop.
	//AddExpression kexpressions::Expression:
	//	SubExpression ({kexpressions::OperatorExpression.subExpressions+=current} (operator=Esterel_AddOperator
	//	subExpressions+=SubExpression)+)?
	public EsterelGrammarAccess.AddExpressionElements getAddExpressionAccess() {
		return gaEsterel.getAddExpressionAccess();
	}
	
	public ParserRule getAddExpressionRule() {
		return getAddExpressionAccess().getRule();
	}

	//// Example: varA - ?B
	//// The warning can be ignored since the operator will only override itself in this loop.
	//SubExpression kexpressions::Expression:
	//	MultExpression ({kexpressions::OperatorExpression.subExpressions+=current} (operator=Esterel_SubOperator
	//	subExpressions+=MultExpression)+)?
	public EsterelGrammarAccess.SubExpressionElements getSubExpressionAccess() {
		return gaEsterel.getSubExpressionAccess();
	}
	
	public ParserRule getSubExpressionRule() {
		return getSubExpressionAccess().getRule();
	}

	//// Example: 2 * 4
	//// The warning can be ignored since the operator will only override itself in this loop.
	//MultExpression kexpressions::Expression:
	//	DivExpression ({kexpressions::OperatorExpression.subExpressions+=current} (operator=Esterel_MultOperator
	//	subExpressions+=DivExpression)+)?
	public EsterelGrammarAccess.MultExpressionElements getMultExpressionAccess() {
		return gaEsterel.getMultExpressionAccess();
	}
	
	public ParserRule getMultExpressionRule() {
		return getMultExpressionAccess().getRule();
	}

	//// Example: (2 / 4)
	//// note: division always has to have parantheses because the '/' sign is also used for trigger/effect delimiter
	//DivExpression kexpressions::Expression:
	//	ModExpression ({kexpressions::OperatorExpression.subExpressions+=current} operator=Esterel_DivOperator
	//	subExpressions+=ModExpression)?
	public EsterelGrammarAccess.DivExpressionElements getDivExpressionAccess() {
		return gaEsterel.getDivExpressionAccess();
	}
	
	public ParserRule getDivExpressionRule() {
		return getDivExpressionAccess().getRule();
	}

	//// Example: varA mod ?B
	//ModExpression kexpressions::Expression:
	//	NegExpression ({kexpressions::OperatorExpression.subExpressions+=current} operator=Esterel_ModOperator
	//	subExpressions+=super::AtomicValuedExpression)?
	public EsterelGrammarAccess.ModExpressionElements getModExpressionAccess() {
		return gaEsterel.getModExpressionAccess();
	}
	
	public ParserRule getModExpressionRule() {
		return getModExpressionAccess().getRule();
	}

	//// Example: not A, not false, not (A or B)
	//// at the latter we need the parans to indicate the right binding
	//NegExpression kexpressions::Expression:
	//	{kexpressions::OperatorExpression} operator=Esterel_SubOperator
	//	subExpressions+=NegExpression | super::AtomicValuedExpression
	public EsterelGrammarAccess.NegExpressionElements getNegExpressionAccess() {
		return gaEsterel.getNegExpressionAccess();
	}
	
	public ParserRule getNegExpressionRule() {
		return getNegExpressionAccess().getRule();
	}

	//// Example: pre(pre(?A)), pre(pre(A)), ?A, A varX
	//ValuedObjectTestExpression kexpressions::Expression:
	//	{kexpressions::OperatorExpression} operator=Esterel_PreOperator '(' subExpressions+=ValuedObjectTestExpression ')'
	//	| {kexpressions::OperatorExpression} operator=Esterel_ValueTestOperator subExpressions+=ValuedObjectReference
	//	| ValuedObjectReference
	public EsterelGrammarAccess.ValuedObjectTestExpressionElements getValuedObjectTestExpressionAccess() {
		return gaEsterel.getValuedObjectTestExpressionAccess();
	}
	
	public ParserRule getValuedObjectTestExpressionRule() {
		return getValuedObjectTestExpressionAccess().getRule();
	}

	////// Example: A, varB
	////ValuedObjectReference returns kexpressions::ValuedObjectReference:
	////    {kexpressions::ValuedObjectReference} 
	////    valuedObject=[kexpressions::ValuedObject|ID];
	//Esterel_ValuedObject kexpressions::ValuedObject:
	//	ISignal | Constant | TrapSignal | IVariable | ValuedObject
	public EsterelGrammarAccess.Esterel_ValuedObjectElements getEsterel_ValuedObjectAccess() {
		return gaEsterel.getEsterel_ValuedObjectAccess();
	}
	
	public ParserRule getEsterel_ValuedObjectRule() {
		return getEsterel_ValuedObjectAccess().getRule();
	}

	//SCLProgram:
	//	annotations+=Annotation*
	//	'module' name=ID ':'?
	//	declarations+=Declaration* (statements+=InstructionStatement ';' | statements+=super::MetaStatement)*
	//	statements+=Statement?;
	public SCLGrammarAccess.SCLProgramElements getSCLProgramAccess() {
		return gaSCL.getSCLProgramAccess();
	}
	
	public ParserRule getSCLProgramRule() {
		return getSCLProgramAccess().getRule();
	}

	//Statement:
	//	InstructionStatement | super::MetaStatement;
	public SCLGrammarAccess.StatementElements getStatementAccess() {
		return gaSCL.getStatementAccess();
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//InstructionStatement Statement:
	//	Assignment | super::Conditional | Goto | super::Parallel | Pause
	public SCLGrammarAccess.InstructionStatementElements getInstructionStatementAccess() {
		return gaSCL.getInstructionStatementAccess();
	}
	
	public ParserRule getInstructionStatementRule() {
		return getInstructionStatementAccess().getRule();
	}

	//Pause:
	//	{Pause} annotations+=Annotation*
	//	'pause';
	public SCLGrammarAccess.PauseElements getPauseAccess() {
		return gaSCL.getPauseAccess();
	}
	
	public ParserRule getPauseRule() {
		return getPauseAccess().getRule();
	}

	//Label:
	//	annotations+=Annotation* (name=ID ':');
	public SCLGrammarAccess.LabelElements getLabelAccess() {
		return gaSCL.getLabelAccess();
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}

	//Goto:
	//	'goto' target=[Label];
	public SCLGrammarAccess.GotoElements getGotoAccess() {
		return gaSCL.getGotoAccess();
	}
	
	public ParserRule getGotoRule() {
		return getGotoAccess().getRule();
	}

	//Assignment:
	//	annotations+=Annotation*
	//	valuedObject=[kexpressions::ValuedObject] ('[' indices+=super::Expression ']')* "=" expression=super::Expression;
	public SCLGrammarAccess.AssignmentElements getAssignmentAccess() {
		return gaSCL.getAssignmentAccess();
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	/// **
	// * @author ssm
	// * @kieler.design 2015-08-23 proposed 
	// * @kieler.rating 2015-08-23 proposed yellow
	// * / / *
	// * KEXT (KText) provides a general stub for subsequent grammars that will use kexpressions, keffects
	// * and need some kind of declaration mechanism. It is also used to generate the textual KEXT language 
	// * that is used for testing kexpressions and keffects.  
	// * / // ------------ //
	////  KEXT Rules  // 
	//// ------------ //
	//// KEXT Rule
	//// The KEXT lagnuages starts with an optional declaration part. Then, an arbitrary number of 
	//// test entities may follow.
	//Kext kext::Kext:
	//	declarations+=Declaration*
	//	entities+=TestEntity*
	public KExtGrammarAccess.KextElements getKextAccess() {
		return gaKExt.getKextAccess();
	}
	
	public ParserRule getKextRule() {
		return getKextAccess().getRule();
	}

	//// Test Entity Rule
	//// A test entity is either an annotation expression or an effect.
	//TestEntity kext::TestEntity:
	//	expression=AnnotatedExpression | effect=Effect
	public KExtGrammarAccess.TestEntityElements getTestEntityAccess() {
		return gaKExt.getTestEntityAccess();
	}
	
	public ParserRule getTestEntityRule() {
		return getTestEntityAccess().getRule();
	}

	//// Annotated Expression Rule
	//// An annotated expression is declared with the keyword "expression". It may be preceded by a list
	//// of annotations. The expression itself follows the keyword.
	//AnnotatedExpression kext::AnnotatedExpression:
	//	annotations+=Annotation*
	//	'expression'
	//	expression=super::Expression
	public KExtGrammarAccess.AnnotatedExpressionElements getAnnotatedExpressionAccess() {
		return gaKExt.getAnnotatedExpressionAccess();
	}
	
	public ParserRule getAnnotatedExpressionRule() {
		return getAnnotatedExpressionAccess().getRule();
	}

	//// Declaration Rule
	//// A declaration follows the general KIELER pattern for variable declaration. More specific:
	//// this centralized declaration rule should replace any other declaration in drived grammars.
	//// It may start with arbitrary many declarations followed by keywords affecting the type of the
	//// valued objects that follow.
	//// Examples: const float pi = 3.14, input signal I, output bool z  
	//Declaration kexpressions::Declaration:
	//	annotations+=Annotation*
	//	const?='const'?
	//	extern?='extern'?
	//	volatile?='volatile'?
	//	input?='input'?
	//	output?='output'?
	//	static?='static'? (signal?='signal'? type=ValueType | signal?='signal') valuedObjects+=ValuedObject (','
	//	valuedObjects+=ValuedObject)* ';'
	public KExtGrammarAccess.DeclarationElements getDeclarationAccess() {
		return gaKExt.getDeclarationAccess();
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}

	//// Valued Object Rule
	//// A valued object is identified by its name. Then, a part for its cardinalities and an initial 
	//// expression may follow. Additionally, the declaration of the object may be finished by a combine part. 
	//// Examples: array[10], initial = false, z = 0 combine max
	//ValuedObject kexpressions::ValuedObject:
	//	name=ID ('[' cardinalities+=super::Expression ']')* ('=' initialValue=super::Expression)? ('combine'
	//	combineOperator=CombineOperator)?
	public KExtGrammarAccess.ValuedObjectElements getValuedObjectAccess() {
		return gaKExt.getValuedObjectAccess();
	}
	
	public ParserRule getValuedObjectRule() {
		return getValuedObjectAccess().getRule();
	}

	/// **
	// * @author ssm
	// * @kieler.design 2015-08-23 proposed 
	// * @kieler.rating 2015-08-23 proposed yellow
	// * / / *
	// * KEffects allow deriving grammars to use a range of different effects, namely assignments,
	// * postfix effects, esterel like emissions, host code and function call effects.
	// * Of course other grammars may extend this list.
	// * / // ---------------- //
	////  KEffects Rules  // 
	//// ---------------- //
	//// Effect Rule
	//// An effect is either an assignment, a postfix effect, an emission, a hostcode effect or a 
	//// function call effect.
	//Effect keffects::Effect:
	//	super::Assignment | PostfixEffect | Emission | HostcodeEffect | FunctionCallEffect
	public KEffectsGrammarAccess.EffectElements getEffectAccess() {
		return gaKEffects.getEffectAccess();
	}
	
	public ParserRule getEffectRule() {
		return getEffectAccess().getRule();
	}

	//// Emission Rule
	//// An emission is a esterel like 'call' of a signal instance. A transition effect list may simply set
	//// an emission for a specific signal to emit it. Additionally, emission may include a parameter part for
	//// a new value in the case of valued signals. 
	//// Example: A, B(2)
	//// Important: To help the parser and to avoid ambiguities, emissions may only allow restricted 
	//// annotations defined in the annotations grammar.		
	//Emission keffects::Emission:
	//	annotations+=RestrictedAnnotation*
	//	valuedObject=[kexpressions::ValuedObject] ("(" newValue=super::Expression ")")?
	public KEffectsGrammarAccess.EmissionElements getEmissionAccess() {
		return gaKEffects.getEmissionAccess();
	}
	
	public ParserRule getEmissionRule() {
		return getEmissionAccess().getRule();
	}

	//// Postfix Effect
	//// A postfix effect is an assignment missing the part beyond the operator. In this case the operator type
	//// must be a postfix operator.
	//// Example: I++, I-- 
	//PostfixEffect keffects::Assignment:
	//	annotations+=Annotation*
	//	valuedObject=[kexpressions::ValuedObject] ('[' indices+=super::Expression ']')*
	//	operator=PostfixOperator
	public KEffectsGrammarAccess.PostfixEffectElements getPostfixEffectAccess() {
		return gaKEffects.getPostfixEffectAccess();
	}
	
	public ParserRule getPostfixEffectRule() {
		return getPostfixEffectAccess().getRule();
	}

	//// Hostcode Effect Rule
	//// A hostcode effect is an effect that include hostcode. It may be preceded by a list of annotations.
	//HostcodeEffect keffects::HostcodeEffect:
	//	annotations+=Annotation*
	//	text=super::HOSTCODE
	public KEffectsGrammarAccess.HostcodeEffectElements getHostcodeEffectAccess() {
		return gaKEffects.getHostcodeEffectAccess();
	}
	
	public ParserRule getHostcodeEffectRule() {
		return getHostcodeEffectAccess().getRule();
	}

	//// Function Call Effect Rule
	//// A function call effect works similar to the function call expression. Additionally, it may be
	//// preceded by a list of annotations.
	//FunctionCallEffect keffects::FunctionCallEffect:
	//	annotations+=Annotation*
	//	'<' functionName=ExtendedID ('(' parameters+=Parameter (',' parameters+=Parameter)* ')' | '()')?
	//	'>'
	public KEffectsGrammarAccess.FunctionCallEffectElements getFunctionCallEffectAccess() {
		return gaKEffects.getFunctionCallEffectAccess();
	}
	
	public ParserRule getFunctionCallEffectRule() {
		return getFunctionCallEffectAccess().getRule();
	}

	//enum AssignOperator returns keffects::AssignOperator:
	//	ASSIGN="=" | ASSIGNADD="+=" | ASSIGNSUB="-=" | ASSIGNMUL="*=" | ASSIGNDIV="/=";
	public KEffectsGrammarAccess.AssignOperatorElements getAssignOperatorAccess() {
		return gaKEffects.getAssignOperatorAccess();
	}
	
	public EnumRule getAssignOperatorRule() {
		return getAssignOperatorAccess().getRule();
	}

	//enum PostfixOperator returns keffects::AssignOperator:
	//	POSTFIXADD="++" | POSTFIXSUB="--";
	public KEffectsGrammarAccess.PostfixOperatorElements getPostfixOperatorAccess() {
		return gaKEffects.getPostfixOperatorAccess();
	}
	
	public EnumRule getPostfixOperatorRule() {
		return getPostfixOperatorAccess().getRule();
	}

	/// **
	// * @author ssm
	// * @kieler.design 2015-08-21 proposed 
	// * @kieler.rating 2015-08-21 proposed yellow
	// * / // -------------------- //
	////  KExpressions Rules  // 
	//// -------------------- //
	/// * Expression rules are organized in a chain. They pass the actual instance to the next rule but may 
	// * consume tokens to create a specific expression element. Following this pattern, complex constructs
	// * can be created. This also implies an order of precedence.
	// *
	// * Expression
	// * + BooleanExpression
	// *   + LogicalOrExpression
	// *     + LogicalAndExpression
	// *       + BitwiseOrExpression
	// *         + BitwiseAndExpression
	// *           + CompareExpression
	// *             + NotOrValuedExpression
	// *               + ValuedExpression (see valued expression below)
	// *               + NotExpression *
	// *                 + AtomicExpression *
	// *                   + BoolValue
	// *                   + ValuedObjectTestExpression
	// *                     + ValuedObjectReference
	// *                   + FunctionCall
	// *                   + TextExpression
	// * + ValuedExpression
	// *   + AddExpression
	// *     + SubExpression
	// *       + MultExpression
	// *         + DivExpression
	// *           + ModExpression
	// *             + NegExpression *
	// *               + AtomicValuedExpression *
	// *                 + IntValue
	// *                 + FloatValue
	// *                 + StringValue
	// *                 + AtomicExpression
	// * / // Root Rule
	//// Always return an expression.
	//Root ecore::EObject:
	//	super::Expression
	public KExpressionsGrammarAccess.RootElements getRootAccess() {
		return gaKExpressions.getRootAccess();
	}
	
	public ParserRule getRootRule() {
		return getRootAccess().getRule();
	}

	//// Boolean Expression Rule
	//// Boolean expression directs to logical or expression and kept for overview (and legacy) reason. 
	//// One could skip directly to the next rule.
	//BoolExpression Expression:
	//	LogicalOrExpression
	public KExpressionsGrammarAccess.BoolExpressionElements getBoolExpressionAccess() {
		return gaKExpressions.getBoolExpressionAccess();
	}
	
	public ParserRule getBoolExpressionRule() {
		return getBoolExpressionAccess().getRule();
	}

	//// Logical Or Expression Rule
	//// Directs to the 'logical and' rule and may create an operator expression for 'logical or' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//LogicalOrExpression Expression:
	//	LogicalAndExpression ({OperatorExpression.subExpressions+=current} (operator=LogicalOrOperator
	//	subExpressions+=LogicalAndExpression)+)?
	public KExpressionsGrammarAccess.LogicalOrExpressionElements getLogicalOrExpressionAccess() {
		return gaKExpressions.getLogicalOrExpressionAccess();
	}
	
	public ParserRule getLogicalOrExpressionRule() {
		return getLogicalOrExpressionAccess().getRule();
	}

	//// Logical And Expression Rule
	//// Directs to the 'bitwise or' rule and may create an operator expression for 'logical and' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//LogicalAndExpression Expression:
	//	BitwiseOrExpression ({OperatorExpression.subExpressions+=current} (operator=LogicalAndOperator
	//	subExpressions+=BitwiseOrExpression)+)?
	public KExpressionsGrammarAccess.LogicalAndExpressionElements getLogicalAndExpressionAccess() {
		return gaKExpressions.getLogicalAndExpressionAccess();
	}
	
	public ParserRule getLogicalAndExpressionRule() {
		return getLogicalAndExpressionAccess().getRule();
	}

	//// Bitwiese Or Expression Rule
	//// Directs to the 'bitwise and' rule and may create an operator expression for 'bitwise or' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//BitwiseOrExpression Expression:
	//	BitwiseAndExpression ({OperatorExpression.subExpressions+=current} (operator=BitwiseOrOperator
	//	subExpressions+=BitwiseAndExpression)+)?
	public KExpressionsGrammarAccess.BitwiseOrExpressionElements getBitwiseOrExpressionAccess() {
		return gaKExpressions.getBitwiseOrExpressionAccess();
	}
	
	public ParserRule getBitwiseOrExpressionRule() {
		return getBitwiseOrExpressionAccess().getRule();
	}

	//// Bitwise And Expression Rule
	//// Directs to the compare rule and may create an operator expression for 'bitwise and' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//BitwiseAndExpression Expression:
	//	super::CompareOperation ({OperatorExpression.subExpressions+=current} (operator=BitwiseAndOperator
	//	subExpressions+=super::CompareOperation)+)?
	public KExpressionsGrammarAccess.BitwiseAndExpressionElements getBitwiseAndExpressionAccess() {
		return gaKExpressions.getBitwiseAndExpressionAccess();
	}
	
	public ParserRule getBitwiseAndExpressionRule() {
		return getBitwiseAndExpressionAccess().getRule();
	}

	//// Valued Object Reference Rule
	//// References a valued object with arbitrary (including none) indices part.
	//// Example: A, B
	//ValuedObjectReference:
	//	valuedObject=[ValuedObject] ('[' indices+=super::Expression ']')*;
	public KExpressionsGrammarAccess.ValuedObjectReferenceElements getValuedObjectReferenceAccess() {
		return gaKExpressions.getValuedObjectReferenceAccess();
	}
	
	public ParserRule getValuedObjectReferenceRule() {
		return getValuedObjectReferenceAccess().getRule();
	}

	//// Function Call Rule
	//// Calls to functions are indicated by angle brackets. They may include a parameter list. 
	//FunctionCall:
	//	'<' functionName=ExtendedID ('(' parameters+=Parameter (',' parameters+=Parameter)* ')' | '()')?
	//	'>';
	public KExpressionsGrammarAccess.FunctionCallElements getFunctionCallAccess() {
		return gaKExpressions.getFunctionCallAccess();
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}

	//// Parameter Rule
	//// The parameter rule is used by the function call rule. Every expression may be a paramter.
	//// Additionally, a parameter may be preceded by an ampersand to indicate a call by reference.
	//// Analogously, an prefixed exclamation mark marks the parameter as pure output.
	//Parameter:
	//	(pureOutput?='!'? callByReference?='&')?
	//	expression=super::Expression;
	public KExpressionsGrammarAccess.ParameterElements getParameterAccess() {
		return gaKExpressions.getParameterAccess();
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//// Text Expression Rule
	//// The text expression rule returns a text expression. Most times text expressions are used for host code.
	//// Example: 'printf(...)'
	//TextExpression:
	//	text=super::HOSTCODE;
	public KExpressionsGrammarAccess.TextExpressionElements getTextExpressionAccess() {
		return gaKExpressions.getTextExpressionAccess();
	}
	
	public ParserRule getTextExpressionRule() {
		return getTextExpressionAccess().getRule();
	}

	//// Int Value Rule
	//IntValue:
	//	value=INT;
	public KExpressionsGrammarAccess.IntValueElements getIntValueAccess() {
		return gaKExpressions.getIntValueAccess();
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}

	//// Float Value Rule
	//FloatValue:
	//	value=FLOAT;
	public KExpressionsGrammarAccess.FloatValueElements getFloatValueAccess() {
		return gaKExpressions.getFloatValueAccess();
	}
	
	public ParserRule getFloatValueRule() {
		return getFloatValueAccess().getRule();
	}

	//// Bool Value Rule
	//BoolValue:
	//	value=BOOLEAN;
	public KExpressionsGrammarAccess.BoolValueElements getBoolValueAccess() {
		return gaKExpressions.getBoolValueAccess();
	}
	
	public ParserRule getBoolValueRule() {
		return getBoolValueAccess().getRule();
	}

	//// String Value Rule	
	//StringValue:
	//	value=super::STRING;
	public KExpressionsGrammarAccess.StringValueElements getStringValueAccess() {
		return gaKExpressions.getStringValueAccess();
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}

	//// Any Type Rule
	//// Data type rule allowing any kind of value to be accepted,
	//// e.g. as initialValues of valued objects used in Kits.xtext. 
	//AnyType:
	//	BOOLEAN | INT | FLOAT | ID | super::STRING;
	public KExpressionsGrammarAccess.AnyTypeElements getAnyTypeAccess() {
		return gaKExpressions.getAnyTypeAccess();
	}
	
	public ParserRule getAnyTypeRule() {
		return getAnyTypeAccess().getRule();
	}

	//AnyValue Value:
	//	IntValue | FloatValue | BoolValue | StringValue
	public KExpressionsGrammarAccess.AnyValueElements getAnyValueAccess() {
		return gaKExpressions.getAnyValueAccess();
	}
	
	public ParserRule getAnyValueRule() {
		return getAnyValueAccess().getRule();
	}

	//enum CompareOperator returns OperatorType:
	//	EQ="==" | LT="<" | LEQ="<=" | GT=">" | GEQ=">=" | NE="!=";
	public KExpressionsGrammarAccess.CompareOperatorElements getCompareOperatorAccess() {
		return gaKExpressions.getCompareOperatorAccess();
	}
	
	public EnumRule getCompareOperatorRule() {
		return getCompareOperatorAccess().getRule();
	}

	//enum PreOperator returns OperatorType:
	//	PRE="pre";
	public KExpressionsGrammarAccess.PreOperatorElements getPreOperatorAccess() {
		return gaKExpressions.getPreOperatorAccess();
	}
	
	public EnumRule getPreOperatorRule() {
		return getPreOperatorAccess().getRule();
	}

	//enum BitwiseOrOperator returns OperatorType:
	//	BITWISE_OR="|";
	public KExpressionsGrammarAccess.BitwiseOrOperatorElements getBitwiseOrOperatorAccess() {
		return gaKExpressions.getBitwiseOrOperatorAccess();
	}
	
	public EnumRule getBitwiseOrOperatorRule() {
		return getBitwiseOrOperatorAccess().getRule();
	}

	//enum BitwiseAndOperator returns OperatorType:
	//	BITWISE_AND="&";
	public KExpressionsGrammarAccess.BitwiseAndOperatorElements getBitwiseAndOperatorAccess() {
		return gaKExpressions.getBitwiseAndOperatorAccess();
	}
	
	public EnumRule getBitwiseAndOperatorRule() {
		return getBitwiseAndOperatorAccess().getRule();
	}

	//enum NotOperator returns OperatorType:
	//	NOT="!";
	public KExpressionsGrammarAccess.NotOperatorElements getNotOperatorAccess() {
		return gaKExpressions.getNotOperatorAccess();
	}
	
	public EnumRule getNotOperatorRule() {
		return getNotOperatorAccess().getRule();
	}

	//enum AddOperator returns OperatorType:
	//	ADD="+";
	public KExpressionsGrammarAccess.AddOperatorElements getAddOperatorAccess() {
		return gaKExpressions.getAddOperatorAccess();
	}
	
	public EnumRule getAddOperatorRule() {
		return getAddOperatorAccess().getRule();
	}

	//enum SubOperator returns OperatorType:
	//	SUB="-";
	public KExpressionsGrammarAccess.SubOperatorElements getSubOperatorAccess() {
		return gaKExpressions.getSubOperatorAccess();
	}
	
	public EnumRule getSubOperatorRule() {
		return getSubOperatorAccess().getRule();
	}

	//enum MultOperator returns OperatorType:
	//	MULT="*";
	public KExpressionsGrammarAccess.MultOperatorElements getMultOperatorAccess() {
		return gaKExpressions.getMultOperatorAccess();
	}
	
	public EnumRule getMultOperatorRule() {
		return getMultOperatorAccess().getRule();
	}

	//enum ModOperator returns OperatorType:
	//	MOD="%";
	public KExpressionsGrammarAccess.ModOperatorElements getModOperatorAccess() {
		return gaKExpressions.getModOperatorAccess();
	}
	
	public EnumRule getModOperatorRule() {
		return getModOperatorAccess().getRule();
	}

	//enum DivOperator returns OperatorType:
	//	DIV="/";
	public KExpressionsGrammarAccess.DivOperatorElements getDivOperatorAccess() {
		return gaKExpressions.getDivOperatorAccess();
	}
	
	public EnumRule getDivOperatorRule() {
		return getDivOperatorAccess().getRule();
	}

	//enum ValOperator returns OperatorType:
	//	VAL="val";
	public KExpressionsGrammarAccess.ValOperatorElements getValOperatorAccess() {
		return gaKExpressions.getValOperatorAccess();
	}
	
	public EnumRule getValOperatorRule() {
		return getValOperatorAccess().getRule();
	}

	//enum LogicalOrOperator returns OperatorType:
	//	LOGICAL_OR="||";
	public KExpressionsGrammarAccess.LogicalOrOperatorElements getLogicalOrOperatorAccess() {
		return gaKExpressions.getLogicalOrOperatorAccess();
	}
	
	public EnumRule getLogicalOrOperatorRule() {
		return getLogicalOrOperatorAccess().getRule();
	}

	//enum LogicalAndOperator returns OperatorType:
	//	LOGICAL_AND="&&";
	public KExpressionsGrammarAccess.LogicalAndOperatorElements getLogicalAndOperatorAccess() {
		return gaKExpressions.getLogicalAndOperatorAccess();
	}
	
	public EnumRule getLogicalAndOperatorRule() {
		return getLogicalAndOperatorAccess().getRule();
	}

	//enum PostfixAdd returns OperatorType:
	//	POSTFIX_ADD="++";
	public KExpressionsGrammarAccess.PostfixAddElements getPostfixAddAccess() {
		return gaKExpressions.getPostfixAddAccess();
	}
	
	public EnumRule getPostfixAddRule() {
		return getPostfixAddAccess().getRule();
	}

	//enum PostfixSub returns OperatorType:
	//	POSTFIX_SUB="--";
	public KExpressionsGrammarAccess.PostfixSubElements getPostfixSubAccess() {
		return gaKExpressions.getPostfixSubAccess();
	}
	
	public EnumRule getPostfixSubRule() {
		return getPostfixSubAccess().getRule();
	}

	//enum ValueType:
	//	PURE="pure" | BOOL="bool" | UNSIGNED="unsigned" |
	//	INT="int" | FLOAT="float" |
	//	STRING="string" | HOST="host";
	public KExpressionsGrammarAccess.ValueTypeElements getValueTypeAccess() {
		return gaKExpressions.getValueTypeAccess();
	}
	
	public EnumRule getValueTypeRule() {
		return getValueTypeAccess().getRule();
	}

	//enum HostType returns ValueType:
	//	HOST="host";
	public KExpressionsGrammarAccess.HostTypeElements getHostTypeAccess() {
		return gaKExpressions.getHostTypeAccess();
	}
	
	public EnumRule getHostTypeRule() {
		return getHostTypeAccess().getRule();
	}

	//enum CombineOperator:
	//	NONE="none" | ADD="+" | MULT="*" | MAX="max" |
	//	MIN="min" | OR="|" | AND="&" | HOST="host";
	public KExpressionsGrammarAccess.CombineOperatorElements getCombineOperatorAccess() {
		return gaKExpressions.getCombineOperatorAccess();
	}
	
	public EnumRule getCombineOperatorRule() {
		return getCombineOperatorAccess().getRule();
	}

	/// **
	// * @author ssm
	// * @kieler.design 2015-08-21 proposed 
	// * @kieler.rating 2015-08-21 proposed yellow
	// * / // ------------------ //
	////  Annotation Rules  // 
	//// ------------------ //
	//// General rule for annotations
	//// The different annotation sub rules are tested in order. Hence, order matters! 
	//Annotation:
	//	CommentAnnotation | KeyBooleanValueAnnotation | KeyStringValueAnnotation | TypedKeyStringValueAnnotation |
	//	KeyIntValueAnnotation | KeyFloatValueAnnotation | TagAnnotation;
	public AnnotationsGrammarAccess.AnnotationElements getAnnotationAccess() {
		return gaAnnotations.getAnnotationAccess();
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}

	//// Valued Annotation Rule
	//// Valued annotations must have a value. For instance, tag annotations are not allowed.
	//// Derived grammars may use this rule if the general annotation rules compromises the grammar
	//// due to ambiguities.
	//ValuedAnnotation Annotation:
	//	CommentAnnotation | KeyStringValueAnnotation | TypedKeyStringValueAnnotation | KeyBooleanValueAnnotation |
	//	KeyIntValueAnnotation | KeyFloatValueAnnotation
	public AnnotationsGrammarAccess.ValuedAnnotationElements getValuedAnnotationAccess() {
		return gaAnnotations.getValuedAnnotationAccess();
	}
	
	public ParserRule getValuedAnnotationRule() {
		return getValuedAnnotationAccess().getRule();
	}

	//// Restiricted Annotation Rule
	//// The restricted annotation rules uses quoted key string annotations. You can use this rule in 
	//// derived grammars if you don't want to permit unquoted strings. 
	//// (If you are looking for an example, the keffects grammar uses this rule for their emission
	//// rule and to avoid grammar ambiguities.)  
	//RestrictedAnnotation Annotation:
	//	CommentAnnotation | QuotedKeyStringValueAnnotation | QuotedTypedKeyStringValueAnnotation | KeyBooleanValueAnnotation |
	//	KeyIntValueAnnotation | KeyFloatValueAnnotation | TagAnnotation
	public AnnotationsGrammarAccess.RestrictedAnnotationElements getRestrictedAnnotationAccess() {
		return gaAnnotations.getRestrictedAnnotationAccess();
	}
	
	public ParserRule getRestrictedAnnotationRule() {
		return getRestrictedAnnotationAccess().getRule();
	}

	//// CommentAnnotation
	//// e.g.: / ** semantic comment * /
	//CommentAnnotation:
	//	values+=COMMENT_ANNOTATION;
	public AnnotationsGrammarAccess.CommentAnnotationElements getCommentAnnotationAccess() {
		return gaAnnotations.getCommentAnnotationAccess();
	}
	
	public ParserRule getCommentAnnotationRule() {
		return getCommentAnnotationAccess().getRule();
	}

	//// TagAnnotation
	//// e.g.: @HVlayout
	//TagAnnotation Annotation:
	//	'@' name=ExtendedID
	public AnnotationsGrammarAccess.TagAnnotationElements getTagAnnotationAccess() {
		return gaAnnotations.getTagAnnotationAccess();
	}
	
	public ParserRule getTagAnnotationRule() {
		return getTagAnnotationAccess().getRule();
	}

	//// KeyStringValueAnnotation
	//// e.g.: @layouter dot
	//// You may separate different values via comma.   
	//KeyStringValueAnnotation StringAnnotation:
	//	'@' name=ExtendedID values+=EString (',' values+=EString)*
	public AnnotationsGrammarAccess.KeyStringValueAnnotationElements getKeyStringValueAnnotationAccess() {
		return gaAnnotations.getKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getKeyStringValueAnnotationRule() {
		return getKeyStringValueAnnotationAccess().getRule();
	}

	//// TypedKeyStringValueAnnotation
	//// e.g.: @position[de.cau.cs.kieler.core.math.KVector] "(3,2)"
	//TypedKeyStringValueAnnotation TypedStringAnnotation:
	//	'@' name=ExtendedID '[' type=ExtendedID ']' values+=EStringBoolean (',' values+=EStringBoolean)*
	public AnnotationsGrammarAccess.TypedKeyStringValueAnnotationElements getTypedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getTypedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getTypedKeyStringValueAnnotationRule() {
		return getTypedKeyStringValueAnnotationAccess().getRule();
	}

	//// QuotedKeyStringValueAnnotation
	//// The quoted key string value annotation is a replacement derived grammars may use
	//// if they want to disallow quote-less strings in a key string annotation. 
	//QuotedKeyStringValueAnnotation StringAnnotation:
	//	'@' name=ExtendedID values+=super::STRING (',' values+=super::STRING)*
	public AnnotationsGrammarAccess.QuotedKeyStringValueAnnotationElements getQuotedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getQuotedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getQuotedKeyStringValueAnnotationRule() {
		return getQuotedKeyStringValueAnnotationAccess().getRule();
	}

	//// QuotedTypedKeyStringValueAnnotation
	//// The quoted typed key string value annotation is a replacement derived grammars may use
	//// if they want to disallow quote-less strings in a key string annotation. 
	//QuotedTypedKeyStringValueAnnotation TypedStringAnnotation:
	//	'@' name=ExtendedID '[' type=ExtendedID ']' values+=super::STRING (',' values+=super::STRING)*
	public AnnotationsGrammarAccess.QuotedTypedKeyStringValueAnnotationElements getQuotedTypedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getQuotedTypedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getQuotedTypedKeyStringValueAnnotationRule() {
		return getQuotedTypedKeyStringValueAnnotationAccess().getRule();
	}

	//// KeyBooleanValueAnnotation    
	//// e.g.: @visible true;
	//KeyBooleanValueAnnotation BooleanAnnotation:
	//	'@' name=ExtendedID value=BOOLEAN
	public AnnotationsGrammarAccess.KeyBooleanValueAnnotationElements getKeyBooleanValueAnnotationAccess() {
		return gaAnnotations.getKeyBooleanValueAnnotationAccess();
	}
	
	public ParserRule getKeyBooleanValueAnnotationRule() {
		return getKeyBooleanValueAnnotationAccess().getRule();
	}

	//// KeyIntValueAnnotation
	//// e.g.: @minSpace 10;    
	//KeyIntValueAnnotation IntAnnotation:
	//	'@' name=ExtendedID value=Integer
	public AnnotationsGrammarAccess.KeyIntValueAnnotationElements getKeyIntValueAnnotationAccess() {
		return gaAnnotations.getKeyIntValueAnnotationAccess();
	}
	
	public ParserRule getKeyIntValueAnnotationRule() {
		return getKeyIntValueAnnotationAccess().getRule();
	}

	//// KeyFloatValueAnnotation
	//// e.g.: @minSpace 10.0;    
	//KeyFloatValueAnnotation FloatAnnotation:
	//	'@' name=ExtendedID value=Floateger
	public AnnotationsGrammarAccess.KeyFloatValueAnnotationElements getKeyFloatValueAnnotationAccess() {
		return gaAnnotations.getKeyFloatValueAnnotationAccess();
	}
	
	public ParserRule getKeyFloatValueAnnotationRule() {
		return getKeyFloatValueAnnotationAccess().getRule();
	}

	//// EString
	//// Allow strings without quotes if they don't contain spaces.
	//// For quoteless strings the ExtendedID rule is used.
	//EString:
	//	super::STRING | ExtendedID;
	public AnnotationsGrammarAccess.EStringElements getEStringAccess() {
		return gaAnnotations.getEStringAccess();
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//EStringBoolean:
	//	super::STRING | ExtendedID | BOOLEAN;
	public AnnotationsGrammarAccess.EStringBooleanElements getEStringBooleanAccess() {
		return gaAnnotations.getEStringBooleanAccess();
	}
	
	public ParserRule getEStringBooleanRule() {
		return getEStringBooleanAccess().getRule();
	}

	//// ExtendedID
	//// ExtendedID extends the ID rule provided by the terminals grammar.
	//// An ID may have dot separated parts and may close with a number separated by a hash mark.
	//ExtendedID:
	//	ID ("." ID)* ("#" INT)?;
	public AnnotationsGrammarAccess.ExtendedIDElements getExtendedIDAccess() {
		return gaAnnotations.getExtendedIDAccess();
	}
	
	public ParserRule getExtendedIDRule() {
		return getExtendedIDAccess().getRule();
	}

	//// Integer
	//// The integer rule extends the EInt terminal by an optional sign for negative numbers.
	//Integer ecore::EInt:
	//	'-'? INT
	public AnnotationsGrammarAccess.IntegerElements getIntegerAccess() {
		return gaAnnotations.getIntegerAccess();
	}
	
	public ParserRule getIntegerRule() {
		return getIntegerAccess().getRule();
	}

	//// Floateger
	//// The floateger rule extends the EFloat terminal by an optional sign for negative numbers.
	//Floateger ecore::EFloat:
	//	'-'? FLOAT
	public AnnotationsGrammarAccess.FloategerElements getFloategerAccess() {
		return gaAnnotations.getFloategerAccess();
	}
	
	public ParserRule getFloategerRule() {
		return getFloategerAccess().getRule();
	}

	//terminal COMMENT_ANNOTATION:
	//	'/ **'->'* /';
	public TerminalRule getCOMMENT_ANNOTATIONRule() {
		return gaAnnotations.getCOMMENT_ANNOTATIONRule();
	} 

	//terminal fragment NUMBER:
	//	'0'..'9';
	public TerminalRule getNUMBERRule() {
		return gaAnnotations.getNUMBERRule();
	} 

	//terminal INT returns ecore::EInt:
	//	NUMBER+;
	public TerminalRule getINTRule() {
		return gaAnnotations.getINTRule();
	} 

	//terminal FLOAT returns ecore::EFloatObject:
	//	NUMBER+ ('.' NUMBER*) (("e" | "E") ("+" | "-")? NUMBER+)? 'f'? | NUMBER+ 'f';
	public TerminalRule getFLOATRule() {
		return gaAnnotations.getFLOATRule();
	} 

	//terminal BOOLEAN returns ecore::EBooleanObject:
	//	'true' | 'false';
	public TerminalRule getBOOLEANRule() {
		return gaAnnotations.getBOOLEANRule();
	} 

	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
