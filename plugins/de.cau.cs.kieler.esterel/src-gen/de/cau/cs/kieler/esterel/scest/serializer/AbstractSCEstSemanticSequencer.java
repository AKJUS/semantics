/*
 * generated by Xtext
 */
package de.cau.cs.kieler.esterel.scest.serializer;

import com.google.inject.Inject;
import de.cau.cs.kieler.annotations.Annotation;
import de.cau.cs.kieler.annotations.AnnotationsPackage;
import de.cau.cs.kieler.annotations.BooleanAnnotation;
import de.cau.cs.kieler.annotations.CommentAnnotation;
import de.cau.cs.kieler.annotations.FloatAnnotation;
import de.cau.cs.kieler.annotations.IntAnnotation;
import de.cau.cs.kieler.annotations.StringAnnotation;
import de.cau.cs.kieler.annotations.TypedStringAnnotation;
import de.cau.cs.kieler.esterel.esterel.Abort;
import de.cau.cs.kieler.esterel.esterel.Await;
import de.cau.cs.kieler.esterel.esterel.Block;
import de.cau.cs.kieler.esterel.esterel.Case;
import de.cau.cs.kieler.esterel.esterel.Constant;
import de.cau.cs.kieler.esterel.esterel.ConstantDecls;
import de.cau.cs.kieler.esterel.esterel.ConstantExpression;
import de.cau.cs.kieler.esterel.esterel.ConstantRenaming;
import de.cau.cs.kieler.esterel.esterel.DelayExpr;
import de.cau.cs.kieler.esterel.esterel.Do;
import de.cau.cs.kieler.esterel.esterel.ElsIf;
import de.cau.cs.kieler.esterel.esterel.Emit;
import de.cau.cs.kieler.esterel.esterel.EsterelAssignment;
import de.cau.cs.kieler.esterel.esterel.EsterelPackage;
import de.cau.cs.kieler.esterel.esterel.EsterelParallel;
import de.cau.cs.kieler.esterel.esterel.EsterelThread;
import de.cau.cs.kieler.esterel.esterel.EsterelType;
import de.cau.cs.kieler.esterel.esterel.EveryDo;
import de.cau.cs.kieler.esterel.esterel.Exec;
import de.cau.cs.kieler.esterel.esterel.ExecCase;
import de.cau.cs.kieler.esterel.esterel.Exit;
import de.cau.cs.kieler.esterel.esterel.Function;
import de.cau.cs.kieler.esterel.esterel.FunctionDecl;
import de.cau.cs.kieler.esterel.esterel.FunctionExpression;
import de.cau.cs.kieler.esterel.esterel.FunctionRenaming;
import de.cau.cs.kieler.esterel.esterel.Halt;
import de.cau.cs.kieler.esterel.esterel.ISignal;
import de.cau.cs.kieler.esterel.esterel.IVariable;
import de.cau.cs.kieler.esterel.esterel.IfTest;
import de.cau.cs.kieler.esterel.esterel.Input;
import de.cau.cs.kieler.esterel.esterel.InputOutput;
import de.cau.cs.kieler.esterel.esterel.LocalSignalDecl;
import de.cau.cs.kieler.esterel.esterel.LocalVariable;
import de.cau.cs.kieler.esterel.esterel.Loop;
import de.cau.cs.kieler.esterel.esterel.Module;
import de.cau.cs.kieler.esterel.esterel.ModuleRenaming;
import de.cau.cs.kieler.esterel.esterel.Nothing;
import de.cau.cs.kieler.esterel.esterel.OneTypeConstantDecls;
import de.cau.cs.kieler.esterel.esterel.Output;
import de.cau.cs.kieler.esterel.esterel.Present;
import de.cau.cs.kieler.esterel.esterel.PresentCase;
import de.cau.cs.kieler.esterel.esterel.ProcCall;
import de.cau.cs.kieler.esterel.esterel.Procedure;
import de.cau.cs.kieler.esterel.esterel.ProcedureDecl;
import de.cau.cs.kieler.esterel.esterel.ProcedureRenaming;
import de.cau.cs.kieler.esterel.esterel.Program;
import de.cau.cs.kieler.esterel.esterel.Relation;
import de.cau.cs.kieler.esterel.esterel.RelationImplication;
import de.cau.cs.kieler.esterel.esterel.RelationIncompatibility;
import de.cau.cs.kieler.esterel.esterel.Renaming;
import de.cau.cs.kieler.esterel.esterel.Repeat;
import de.cau.cs.kieler.esterel.esterel.Return;
import de.cau.cs.kieler.esterel.esterel.Run;
import de.cau.cs.kieler.esterel.esterel.SensorDecl;
import de.cau.cs.kieler.esterel.esterel.SensorWithType;
import de.cau.cs.kieler.esterel.esterel.SignalReferenceExpr;
import de.cau.cs.kieler.esterel.esterel.SignalRenaming;
import de.cau.cs.kieler.esterel.esterel.Suspend;
import de.cau.cs.kieler.esterel.esterel.Sustain;
import de.cau.cs.kieler.esterel.esterel.Task;
import de.cau.cs.kieler.esterel.esterel.TaskDecl;
import de.cau.cs.kieler.esterel.esterel.TaskRenaming;
import de.cau.cs.kieler.esterel.esterel.Trap;
import de.cau.cs.kieler.esterel.esterel.TrapExpression;
import de.cau.cs.kieler.esterel.esterel.TrapHandler;
import de.cau.cs.kieler.esterel.esterel.TrapReferenceExpr;
import de.cau.cs.kieler.esterel.esterel.TrapSignal;
import de.cau.cs.kieler.esterel.esterel.Type;
import de.cau.cs.kieler.esterel.esterel.TypeDecl;
import de.cau.cs.kieler.esterel.esterel.TypeIdentifier;
import de.cau.cs.kieler.esterel.esterel.TypeRenaming;
import de.cau.cs.kieler.esterel.esterel.VariableDecl;
import de.cau.cs.kieler.esterel.scest.scest.SCEstModule;
import de.cau.cs.kieler.esterel.scest.scest.SCEstProgram;
import de.cau.cs.kieler.esterel.scest.scest.ScestPackage;
import de.cau.cs.kieler.esterel.scest.scest.UnEmit;
import de.cau.cs.kieler.esterel.scest.services.SCEstGrammarAccess;
import de.cau.cs.kieler.esterel.serializer.EsterelSemanticSequencer;
import de.cau.cs.kieler.kexpressions.BoolValue;
import de.cau.cs.kieler.kexpressions.Declaration;
import de.cau.cs.kieler.kexpressions.FloatValue;
import de.cau.cs.kieler.kexpressions.FunctionCall;
import de.cau.cs.kieler.kexpressions.IntValue;
import de.cau.cs.kieler.kexpressions.KExpressionsPackage;
import de.cau.cs.kieler.kexpressions.OperatorExpression;
import de.cau.cs.kieler.kexpressions.StringValue;
import de.cau.cs.kieler.kexpressions.TextExpression;
import de.cau.cs.kieler.kexpressions.ValuedObject;
import de.cau.cs.kieler.kexpressions.ValuedObjectReference;
import de.cau.cs.kieler.kexpressions.keffects.Assignment;
import de.cau.cs.kieler.kexpressions.keffects.Emission;
import de.cau.cs.kieler.kexpressions.keffects.FunctionCallEffect;
import de.cau.cs.kieler.kexpressions.keffects.HostcodeEffect;
import de.cau.cs.kieler.kexpressions.keffects.KEffectsPackage;
import de.cau.cs.kieler.kexpressions.kext.AnnotatedExpression;
import de.cau.cs.kieler.kexpressions.kext.KExtPackage;
import de.cau.cs.kieler.kexpressions.kext.Kext;
import de.cau.cs.kieler.kexpressions.kext.TestEntity;
import de.cau.cs.kieler.scl.scl.Conditional;
import de.cau.cs.kieler.scl.scl.ElseScope;
import de.cau.cs.kieler.scl.scl.Goto;
import de.cau.cs.kieler.scl.scl.Label;
import de.cau.cs.kieler.scl.scl.Parallel;
import de.cau.cs.kieler.scl.scl.Pause;
import de.cau.cs.kieler.scl.scl.SCLProgram;
import de.cau.cs.kieler.scl.scl.SclPackage;
import de.cau.cs.kieler.scl.scl.ScopeStatement;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;

@SuppressWarnings("all")
public abstract class AbstractSCEstSemanticSequencer extends EsterelSemanticSequencer {

	@Inject
	private SCEstGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == AnnotationsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case AnnotationsPackage.ANNOTATION:
				sequence_TagAnnotation(context, (Annotation) semanticObject); 
				return; 
			case AnnotationsPackage.BOOLEAN_ANNOTATION:
				sequence_KeyBooleanValueAnnotation(context, (BooleanAnnotation) semanticObject); 
				return; 
			case AnnotationsPackage.COMMENT_ANNOTATION:
				sequence_CommentAnnotation(context, (CommentAnnotation) semanticObject); 
				return; 
			case AnnotationsPackage.FLOAT_ANNOTATION:
				sequence_KeyFloatValueAnnotation(context, (FloatAnnotation) semanticObject); 
				return; 
			case AnnotationsPackage.INT_ANNOTATION:
				sequence_KeyIntValueAnnotation(context, (IntAnnotation) semanticObject); 
				return; 
			case AnnotationsPackage.STRING_ANNOTATION:
				if (rule == grammarAccess.getAnnotationRule()
						|| rule == grammarAccess.getValuedAnnotationRule()
						|| rule == grammarAccess.getKeyStringValueAnnotationRule()) {
					sequence_KeyStringValueAnnotation(context, (StringAnnotation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRestrictedAnnotationRule()
						|| rule == grammarAccess.getQuotedKeyStringValueAnnotationRule()) {
					sequence_QuotedKeyStringValueAnnotation(context, (StringAnnotation) semanticObject); 
					return; 
				}
				else break;
			case AnnotationsPackage.TYPED_STRING_ANNOTATION:
				if (rule == grammarAccess.getRestrictedAnnotationRule()
						|| rule == grammarAccess.getQuotedTypedKeyStringValueAnnotationRule()) {
					sequence_QuotedTypedKeyStringValueAnnotation(context, (TypedStringAnnotation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAnnotationRule()
						|| rule == grammarAccess.getValuedAnnotationRule()
						|| rule == grammarAccess.getTypedKeyStringValueAnnotationRule()) {
					sequence_TypedKeyStringValueAnnotation(context, (TypedStringAnnotation) semanticObject); 
					return; 
				}
				else break;
			}
		else if (epackage == EsterelPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case EsterelPackage.ABORT:
				sequence_Abort(context, (Abort) semanticObject); 
				return; 
			case EsterelPackage.AWAIT:
				sequence_Await(context, (Await) semanticObject); 
				return; 
			case EsterelPackage.BLOCK:
				sequence_Block(context, (Block) semanticObject); 
				return; 
			case EsterelPackage.CASE:
				sequence_Case(context, (Case) semanticObject); 
				return; 
			case EsterelPackage.CONSTANT:
				sequence_Constant(context, (Constant) semanticObject); 
				return; 
			case EsterelPackage.CONSTANT_DECLS:
				sequence_ConstantDecls(context, (ConstantDecls) semanticObject); 
				return; 
			case EsterelPackage.CONSTANT_EXPRESSION:
				sequence_ConstantExpression(context, (ConstantExpression) semanticObject); 
				return; 
			case EsterelPackage.CONSTANT_RENAMING:
				sequence_ConstantRenaming(context, (ConstantRenaming) semanticObject); 
				return; 
			case EsterelPackage.DELAY_EXPR:
				sequence_DelayExpr(context, (DelayExpr) semanticObject); 
				return; 
			case EsterelPackage.DO:
				sequence_Do(context, (Do) semanticObject); 
				return; 
			case EsterelPackage.ELS_IF:
				sequence_ElsIf(context, (ElsIf) semanticObject); 
				return; 
			case EsterelPackage.EMIT:
				sequence_Emit(context, (Emit) semanticObject); 
				return; 
			case EsterelPackage.ESTEREL_ASSIGNMENT:
				sequence_EsterelAssignment(context, (EsterelAssignment) semanticObject); 
				return; 
			case EsterelPackage.ESTEREL_PARALLEL:
				sequence_EsterelParallel(context, (EsterelParallel) semanticObject); 
				return; 
			case EsterelPackage.ESTEREL_THREAD:
				sequence_EsterelThread(context, (EsterelThread) semanticObject); 
				return; 
			case EsterelPackage.ESTEREL_TYPE:
				sequence_TypeIdentifier(context, (EsterelType) semanticObject); 
				return; 
			case EsterelPackage.EVERY_DO:
				sequence_EveryDo(context, (EveryDo) semanticObject); 
				return; 
			case EsterelPackage.EXEC:
				sequence_Exec(context, (Exec) semanticObject); 
				return; 
			case EsterelPackage.EXEC_CASE:
				sequence_ExecCase(context, (ExecCase) semanticObject); 
				return; 
			case EsterelPackage.EXIT:
				sequence_Exit(context, (Exit) semanticObject); 
				return; 
			case EsterelPackage.FUNCTION:
				sequence_Function(context, (Function) semanticObject); 
				return; 
			case EsterelPackage.FUNCTION_DECL:
				sequence_FunctionDecl(context, (FunctionDecl) semanticObject); 
				return; 
			case EsterelPackage.FUNCTION_EXPRESSION:
				sequence_FunctionExpression(context, (FunctionExpression) semanticObject); 
				return; 
			case EsterelPackage.FUNCTION_RENAMING:
				sequence_FunctionRenaming(context, (FunctionRenaming) semanticObject); 
				return; 
			case EsterelPackage.HALT:
				sequence_Halt(context, (Halt) semanticObject); 
				return; 
			case EsterelPackage.ISIGNAL:
				if (rule == grammarAccess.getISignalRule()
						|| rule == grammarAccess.getEsterel_ValuedObjectRule()) {
					sequence_ISignal(context, (ISignal) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSensorRule()) {
					sequence_Sensor(context, (ISignal) semanticObject); 
					return; 
				}
				else break;
			case EsterelPackage.IVARIABLE:
				sequence_IVariable(context, (IVariable) semanticObject); 
				return; 
			case EsterelPackage.IF_TEST:
				sequence_IfTest(context, (IfTest) semanticObject); 
				return; 
			case EsterelPackage.INPUT:
				sequence_InterfaceSignalDecl(context, (Input) semanticObject); 
				return; 
			case EsterelPackage.INPUT_OUTPUT:
				sequence_InterfaceSignalDecl(context, (InputOutput) semanticObject); 
				return; 
			case EsterelPackage.LOCAL_SIGNAL_DECL:
				sequence_LocalSignalDecl(context, (LocalSignalDecl) semanticObject); 
				return; 
			case EsterelPackage.LOCAL_VARIABLE:
				sequence_LocalVariable(context, (LocalVariable) semanticObject); 
				return; 
			case EsterelPackage.LOOP:
				sequence_Loop(context, (Loop) semanticObject); 
				return; 
			case EsterelPackage.MODULE:
				sequence_Module(context, (Module) semanticObject); 
				return; 
			case EsterelPackage.MODULE_RENAMING:
				sequence_ModuleRenaming(context, (ModuleRenaming) semanticObject); 
				return; 
			case EsterelPackage.NOTHING:
				sequence_Nothing(context, (Nothing) semanticObject); 
				return; 
			case EsterelPackage.ONE_TYPE_CONSTANT_DECLS:
				sequence_OneTypeConstantDecls(context, (OneTypeConstantDecls) semanticObject); 
				return; 
			case EsterelPackage.OUTPUT:
				sequence_InterfaceSignalDecl(context, (Output) semanticObject); 
				return; 
			case EsterelPackage.PRESENT:
				sequence_Present(context, (Present) semanticObject); 
				return; 
			case EsterelPackage.PRESENT_CASE:
				sequence_PresentCase(context, (PresentCase) semanticObject); 
				return; 
			case EsterelPackage.PROC_CALL:
				sequence_ProcCall(context, (ProcCall) semanticObject); 
				return; 
			case EsterelPackage.PROCEDURE:
				sequence_Procedure(context, (Procedure) semanticObject); 
				return; 
			case EsterelPackage.PROCEDURE_DECL:
				sequence_ProcedureDecl(context, (ProcedureDecl) semanticObject); 
				return; 
			case EsterelPackage.PROCEDURE_RENAMING:
				sequence_ProcedureRenaming(context, (ProcedureRenaming) semanticObject); 
				return; 
			case EsterelPackage.PROGRAM:
				sequence_Program(context, (Program) semanticObject); 
				return; 
			case EsterelPackage.RELATION:
				sequence_RelationDecl(context, (Relation) semanticObject); 
				return; 
			case EsterelPackage.RELATION_IMPLICATION:
				sequence_RelationImplication(context, (RelationImplication) semanticObject); 
				return; 
			case EsterelPackage.RELATION_INCOMPATIBILITY:
				sequence_RelationIncompatibility(context, (RelationIncompatibility) semanticObject); 
				return; 
			case EsterelPackage.RENAMING:
				sequence_Renaming(context, (Renaming) semanticObject); 
				return; 
			case EsterelPackage.REPEAT:
				sequence_Repeat(context, (Repeat) semanticObject); 
				return; 
			case EsterelPackage.RETURN:
				sequence_InterfaceSignalDecl(context, (Return) semanticObject); 
				return; 
			case EsterelPackage.RUN:
				sequence_Run(context, (Run) semanticObject); 
				return; 
			case EsterelPackage.SENSOR_DECL:
				sequence_SensorDecl(context, (SensorDecl) semanticObject); 
				return; 
			case EsterelPackage.SENSOR_WITH_TYPE:
				sequence_SensorWithType(context, (SensorWithType) semanticObject); 
				return; 
			case EsterelPackage.SIGNAL_REFERENCE_EXPR:
				sequence_SignalReferenceExpr(context, (SignalReferenceExpr) semanticObject); 
				return; 
			case EsterelPackage.SIGNAL_RENAMING:
				sequence_SignalRenaming(context, (SignalRenaming) semanticObject); 
				return; 
			case EsterelPackage.SUSPEND:
				sequence_Suspend(context, (Suspend) semanticObject); 
				return; 
			case EsterelPackage.SUSTAIN:
				sequence_Sustain(context, (Sustain) semanticObject); 
				return; 
			case EsterelPackage.TASK:
				sequence_Task(context, (Task) semanticObject); 
				return; 
			case EsterelPackage.TASK_DECL:
				sequence_TaskDecl(context, (TaskDecl) semanticObject); 
				return; 
			case EsterelPackage.TASK_RENAMING:
				sequence_TaskRenaming(context, (TaskRenaming) semanticObject); 
				return; 
			case EsterelPackage.TRAP:
				sequence_Trap(context, (Trap) semanticObject); 
				return; 
			case EsterelPackage.TRAP_EXPRESSION:
				sequence_TrapExpression(context, (TrapExpression) semanticObject); 
				return; 
			case EsterelPackage.TRAP_HANDLER:
				sequence_TrapHandler(context, (TrapHandler) semanticObject); 
				return; 
			case EsterelPackage.TRAP_REFERENCE_EXPR:
				sequence_TrapReferenceExpr(context, (TrapReferenceExpr) semanticObject); 
				return; 
			case EsterelPackage.TRAP_SIGNAL:
				sequence_TrapSignal(context, (TrapSignal) semanticObject); 
				return; 
			case EsterelPackage.TYPE:
				sequence_Type(context, (Type) semanticObject); 
				return; 
			case EsterelPackage.TYPE_DECL:
				sequence_TypeDecl(context, (TypeDecl) semanticObject); 
				return; 
			case EsterelPackage.TYPE_IDENTIFIER:
				sequence_TypeIdentifier(context, (TypeIdentifier) semanticObject); 
				return; 
			case EsterelPackage.TYPE_RENAMING:
				sequence_TypeRenaming(context, (TypeRenaming) semanticObject); 
				return; 
			case EsterelPackage.VARIABLE_DECL:
				sequence_VariableDecl(context, (VariableDecl) semanticObject); 
				return; 
			}
		else if (epackage == KEffectsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case KEffectsPackage.ASSIGNMENT:
				sequence_PostfixEffect(context, (Assignment) semanticObject); 
				return; 
			case KEffectsPackage.EMISSION:
				sequence_Emission(context, (Emission) semanticObject); 
				return; 
			case KEffectsPackage.FUNCTION_CALL_EFFECT:
				sequence_FunctionCallEffect(context, (FunctionCallEffect) semanticObject); 
				return; 
			case KEffectsPackage.HOSTCODE_EFFECT:
				sequence_HostcodeEffect(context, (HostcodeEffect) semanticObject); 
				return; 
			}
		else if (epackage == KExpressionsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case KExpressionsPackage.BOOL_VALUE:
				sequence_BoolValue(context, (BoolValue) semanticObject); 
				return; 
			case KExpressionsPackage.DECLARATION:
				sequence_Declaration(context, (Declaration) semanticObject); 
				return; 
			case KExpressionsPackage.FLOAT_VALUE:
				sequence_FloatValue(context, (FloatValue) semanticObject); 
				return; 
			case KExpressionsPackage.FUNCTION_CALL:
				sequence_FunctionCall(context, (FunctionCall) semanticObject); 
				return; 
			case KExpressionsPackage.INT_VALUE:
				sequence_IntValue(context, (IntValue) semanticObject); 
				return; 
			case KExpressionsPackage.OPERATOR_EXPRESSION:
				if (rule == grammarAccess.getBoolExpressionRule()
						|| rule == grammarAccess.getLogicalOrExpressionRule()) {
					sequence_AddExpression_AndExpression_BitwiseAndExpression_BitwiseOrExpression_CompareOperation_DivExpression_LogicalAndExpression_LogicalOrExpression_ModExpression_MultExpression_NegExpression_NotExpression_OrExpression_SubExpression_ValuedObjectTestExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (action == grammarAccess.getLogicalOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalAndExpressionRule()) {
					sequence_AddExpression_AndExpression_BitwiseAndExpression_BitwiseOrExpression_CompareOperation_DivExpression_LogicalAndExpression_ModExpression_MultExpression_NegExpression_NotExpression_OrExpression_SubExpression_ValuedObjectTestExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (action == grammarAccess.getLogicalAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseOrExpressionRule()) {
					sequence_AddExpression_AndExpression_BitwiseAndExpression_BitwiseOrExpression_CompareOperation_DivExpression_ModExpression_MultExpression_NegExpression_NotExpression_OrExpression_SubExpression_ValuedObjectTestExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (action == grammarAccess.getBitwiseOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseAndExpressionRule()) {
					sequence_AddExpression_AndExpression_BitwiseAndExpression_CompareOperation_DivExpression_ModExpression_MultExpression_NegExpression_NotExpression_OrExpression_SubExpression_ValuedObjectTestExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAtomicExpressionRule()
						|| rule == grammarAccess.getAtomicValuedExpressionRule()
						|| rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getBooleanExpressionRule()
						|| rule == grammarAccess.getOrExpressionRule()
						|| action == grammarAccess.getOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getAndExpressionRule()
						|| action == grammarAccess.getAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getCompareOperationRule()
						|| action == grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNotOrValuedExpressionRule()
						|| rule == grammarAccess.getNotExpressionRule()
						|| rule == grammarAccess.getValuedExpressionRule()
						|| rule == grammarAccess.getAddExpressionRule()
						|| action == grammarAccess.getAddExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSubExpressionRule()
						|| action == grammarAccess.getSubExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getMultExpressionRule()
						|| action == grammarAccess.getMultExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getDivExpressionRule()
						|| action == grammarAccess.getDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getModExpressionRule()
						|| action == grammarAccess.getModExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNegExpressionRule()
						|| rule == grammarAccess.getRootRule()
						|| action == grammarAccess.getBitwiseAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()) {
					sequence_AddExpression_AndExpression_CompareOperation_DivExpression_ModExpression_MultExpression_NegExpression_NotExpression_OrExpression_SubExpression_ValuedObjectTestExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSignalExpressionRule()
						|| action == grammarAccess.getSignalExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSignalAndExpressionRule()
						|| action == grammarAccess.getSignalAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSignalNotExpressionRule()
						|| rule == grammarAccess.getSignalAtomicExpressionRule()) {
					sequence_SignalAndExpression_SignalExpression_SignalNotExpression_SignalPreExpr(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getSignalPreExprRule()) {
					sequence_SignalPreExpr(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTrapExprRule()) {
					sequence_TrapAndExpression_TrapExpr_TrapNotExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (action == grammarAccess.getTrapExprAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getTrapAndExpressionRule()) {
					sequence_TrapAndExpression_TrapNotExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (action == grammarAccess.getTrapAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getTrapNotExpressionRule()) {
					sequence_TrapNotExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getValuedObjectTestExpressionRule()) {
					sequence_ValuedObjectTestExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.PARAMETER:
				sequence_Parameter(context, (de.cau.cs.kieler.kexpressions.Parameter) semanticObject); 
				return; 
			case KExpressionsPackage.STRING_VALUE:
				sequence_StringValue(context, (StringValue) semanticObject); 
				return; 
			case KExpressionsPackage.TEXT_EXPRESSION:
				sequence_TextExpression(context, (TextExpression) semanticObject); 
				return; 
			case KExpressionsPackage.VALUED_OBJECT:
				sequence_ValuedObject(context, (ValuedObject) semanticObject); 
				return; 
			case KExpressionsPackage.VALUED_OBJECT_REFERENCE:
				sequence_ValuedObjectReference(context, (ValuedObjectReference) semanticObject); 
				return; 
			}
		else if (epackage == KExtPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case KExtPackage.ANNOTATED_EXPRESSION:
				sequence_AnnotatedExpression(context, (AnnotatedExpression) semanticObject); 
				return; 
			case KExtPackage.KEXT:
				sequence_Kext(context, (Kext) semanticObject); 
				return; 
			case KExtPackage.TEST_ENTITY:
				sequence_TestEntity(context, (TestEntity) semanticObject); 
				return; 
			}
		else if (epackage == ScestPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ScestPackage.SC_EST_MODULE:
				sequence_SCEstModule(context, (SCEstModule) semanticObject); 
				return; 
			case ScestPackage.SC_EST_PROGRAM:
				sequence_SCEstProgram(context, (SCEstProgram) semanticObject); 
				return; 
			case ScestPackage.SET:
				sequence_Set(context, (de.cau.cs.kieler.esterel.scest.scest.Set) semanticObject); 
				return; 
			case ScestPackage.UN_EMIT:
				sequence_UnEmit(context, (UnEmit) semanticObject); 
				return; 
			}
		else if (epackage == SclPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SclPackage.ASSIGNMENT:
				sequence_Assignment(context, (de.cau.cs.kieler.scl.scl.Assignment) semanticObject); 
				return; 
			case SclPackage.CONDITIONAL:
				sequence_Conditional(context, (Conditional) semanticObject); 
				return; 
			case SclPackage.ELSE_SCOPE:
				sequence_ElseScope(context, (ElseScope) semanticObject); 
				return; 
			case SclPackage.GOTO:
				sequence_Goto(context, (Goto) semanticObject); 
				return; 
			case SclPackage.LABEL:
				sequence_Label(context, (Label) semanticObject); 
				return; 
			case SclPackage.PARALLEL:
				sequence_Parallel(context, (Parallel) semanticObject); 
				return; 
			case SclPackage.PAUSE:
				sequence_Pause(context, (Pause) semanticObject); 
				return; 
			case SclPackage.SCL_PROGRAM:
				sequence_SCLProgram(context, (SCLProgram) semanticObject); 
				return; 
			case SclPackage.SCOPE_STATEMENT:
				sequence_ScopeStatement(context, (ScopeStatement) semanticObject); 
				return; 
			case SclPackage.THREAD:
				sequence_Thread(context, (de.cau.cs.kieler.scl.scl.Thread) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     SCEstStatement returns Abort
	 *     SCEstAtomicStatement returns Abort
	 *     Abort returns Abort
	 *     EsterelStatement returns Abort
	 *     AtomicStatement returns Abort
	 *
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         weak?='weak'? 
	 *         (statements+=SCEstStatement | statements+=MetaStatement)* 
	 *         statements+=SCEstStatement? 
	 *         ((delay=DelayExpr (doStatements+=SCEstStatement | doStatements+=MetaStatement)* doStatements+=SCEstStatement?) | delay=DelayExpr | cases+=Case+)
	 *     )
	 */
	protected void sequence_Abort(ISerializationContext context, Abort semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SCEstStatement returns Await
	 *     SCEstAtomicStatement returns Await
	 *     Await returns Await
	 *     EsterelStatement returns Await
	 *     AtomicStatement returns Await
	 *
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         ((delay=DelayExpr (statements+=SCEstStatement | statements+=MetaStatement)* statements+=SCEstStatement?) | cases+=Case+)
	 *     )
	 */
	protected void sequence_Await(ISerializationContext context, Await semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SCEstStatement returns Block
	 *     SCEstAtomicStatement returns Block
	 *     Block returns Block
	 *     EsterelStatement returns Block
	 *     AtomicStatement returns Block
	 *
	 * Constraint:
	 *     (annotations+=Annotation* (statements+=SCEstStatement | statements+=MetaStatement)* statements+=SCEstStatement?)
	 */
	protected void sequence_Block(ISerializationContext context, Block semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Case returns Case
	 *
	 * Constraint:
	 *     (annotations+=Annotation* delay=DelayExpr (statements+=SCEstStatement | statements+=MetaStatement)* statements+=SCEstStatement?)
	 */
	protected void sequence_Case(ISerializationContext context, Case semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StatementContainerInterface returns Conditional
	 *     SCEstStatement returns Conditional
	 *     SCEstAtomicStatement returns Conditional
	 *     Conditional returns Conditional
	 *     Statement returns Conditional
	 *     InstructionStatement returns Conditional
	 *
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         expression=Expression 
	 *         declarations+=Declaration* 
	 *         (statements+=SCEstStatement | statements+=MetaStatement)* 
	 *         statements+=SCEstStatement? 
	 *         else=ElseScope?
	 *     )
	 */
	protected void sequence_Conditional(ISerializationContext context, Conditional semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SCEstStatement returns Do
	 *     SCEstAtomicStatement returns Do
	 *     Do returns Do
	 *     EsterelStatement returns Do
	 *     AtomicStatement returns Do
	 *
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         (statements+=SCEstStatement | statements+=MetaStatement)* 
	 *         statements+=SCEstStatement? 
	 *         (
	 *             (endingAnnotations+=Annotation* expression=DelayExpr) | 
	 *             (
	 *                 endingAnnotations+=Annotation* 
	 *                 delay=DelayExpr 
	 *                 (watchingStatements+=SCEstStatement | watchingStatements+=MetaStatement)* 
	 *                 watchingStatements+=SCEstStatement?
	 *             )
	 *         )
	 *     )
	 */
	protected void sequence_Do(ISerializationContext context, Do semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ElsIf returns ElsIf
	 *
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         expression=Expression 
	 *         (thenStatements+=SCEstStatement | thenStatements+=MetaStatement)* 
	 *         thenStatements+=SCEstStatement?
	 *     )
	 */
	protected void sequence_ElsIf(ISerializationContext context, ElsIf semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StatementContainerInterface returns ElseScope
	 *     ElseScope returns ElseScope
	 *
	 * Constraint:
	 *     (annotations+=Annotation* declarations+=Declaration* (statements+=SCEstStatement | statements+=MetaStatement)* statements+=SCEstStatement?)
	 */
	protected void sequence_ElseScope(ISerializationContext context, ElseScope semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SCEstStatement returns EsterelParallel
	 *     EsterelParallel returns EsterelParallel
	 *     EsterelStatement returns EsterelParallel
	 *
	 * Constraint:
	 *     (threads+=EsterelThread threads+=EsterelThread+)
	 */
	protected void sequence_EsterelParallel(ISerializationContext context, EsterelParallel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EsterelThread returns EsterelThread
	 *
	 * Constraint:
	 *     ((statements+=SCEstAtomicStatement | statements+=MetaStatement)* statements+=SCEstAtomicStatement?)
	 */
	protected void sequence_EsterelThread(ISerializationContext context, EsterelThread semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SCEstStatement returns EveryDo
	 *     SCEstAtomicStatement returns EveryDo
	 *     EveryDo returns EveryDo
	 *     EsterelStatement returns EveryDo
	 *     AtomicStatement returns EveryDo
	 *
	 * Constraint:
	 *     (annotations+=Annotation* delay=DelayExpr (statements+=SCEstStatement | statements+=MetaStatement)* statements+=SCEstStatement?)
	 */
	protected void sequence_EveryDo(ISerializationContext context, EveryDo semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExecCase returns ExecCase
	 *
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         task=[Task|ID] 
	 *         (vars+=[IVariable|ID] vars+=[IVariable|ID]*)? 
	 *         (kexpressions+=Expression kexpressions+=Expression*)? 
	 *         retSignal=[ISignal|ID] 
	 *         (statements+=SCEstStatement | statements+=MetaStatement)* 
	 *         statements+=SCEstStatement?
	 *     )
	 */
	protected void sequence_ExecCase(ISerializationContext context, ExecCase semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SCEstStatement returns Exec
	 *     SCEstAtomicStatement returns Exec
	 *     Exec returns Exec
	 *     EsterelStatement returns Exec
	 *     AtomicStatement returns Exec
	 *
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         (
	 *             (
	 *                 task=[Task|ID] 
	 *                 (vars+=[IVariable|ID] vars+=[IVariable|ID]*)? 
	 *                 (kexpressions+=Expression kexpressions+=Expression*)? 
	 *                 retSignal=[ISignal|ID] 
	 *                 (statements+=SCEstStatement | statements+=MetaStatement)* 
	 *                 statements+=SCEstStatement?
	 *             ) | 
	 *             execCaseList+=ExecCase+
	 *         )
	 *     )
	 */
	protected void sequence_Exec(ISerializationContext context, Exec semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SCEstStatement returns IfTest
	 *     SCEstAtomicStatement returns IfTest
	 *     IfTest returns IfTest
	 *     EsterelStatement returns IfTest
	 *     AtomicStatement returns IfTest
	 *
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         expression=Expression 
	 *         thenAnnotations+=Annotation* 
	 *         (thenStatements+=SCEstStatement | thenStatements+=MetaStatement)* 
	 *         thenStatements+=SCEstStatement? 
	 *         elseif+=ElsIf* 
	 *         elseAnnotations+=Annotation* 
	 *         elseStatements+=MetaStatement? 
	 *         (elseStatements+=SCEstStatement? elseStatements+=MetaStatement?)* 
	 *         elseStatements+=SCEstStatement?
	 *     )
	 */
	protected void sequence_IfTest(ISerializationContext context, IfTest semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SCEstStatement returns LocalSignalDecl
	 *     SCEstAtomicStatement returns LocalSignalDecl
	 *     LocalSignalDecl returns LocalSignalDecl
	 *     EsterelStatement returns LocalSignalDecl
	 *     AtomicStatement returns LocalSignalDecl
	 *
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         signals+=ISignal 
	 *         signals+=ISignal* 
	 *         (statements+=SCEstStatement | statements+=MetaStatement)* 
	 *         statements+=SCEstStatement?
	 *     )
	 */
	protected void sequence_LocalSignalDecl(ISerializationContext context, LocalSignalDecl semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SCEstStatement returns LocalVariable
	 *     SCEstAtomicStatement returns LocalVariable
	 *     LocalVariable returns LocalVariable
	 *     EsterelStatement returns LocalVariable
	 *     AtomicStatement returns LocalVariable
	 *
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         varDecls+=VariableDecl 
	 *         varDecls+=VariableDecl* 
	 *         (statements+=SCEstStatement | statements+=MetaStatement)* 
	 *         statements+=SCEstStatement?
	 *     )
	 */
	protected void sequence_LocalVariable(ISerializationContext context, LocalVariable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SCEstStatement returns Loop
	 *     SCEstAtomicStatement returns Loop
	 *     Loop returns Loop
	 *     EsterelStatement returns Loop
	 *     AtomicStatement returns Loop
	 *
	 * Constraint:
	 *     (annotations+=Annotation* (statements+=SCEstStatement | statements+=MetaStatement)* statements+=SCEstStatement? delay=DelayExpr?)
	 */
	protected void sequence_Loop(ISerializationContext context, Loop semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SCEstStatement returns Parallel
	 *     SCEstAtomicStatement returns Parallel
	 *     Parallel returns Parallel
	 *     Statement returns Parallel
	 *     InstructionStatement returns Parallel
	 *
	 * Constraint:
	 *     (annotations+=Annotation* threads+=Thread threads+=Thread*)
	 */
	protected void sequence_Parallel(ISerializationContext context, Parallel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PresentCase returns PresentCase
	 *
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         (expression=SignalExpression | expression=SignalExpression) 
	 *         statements+=SCEstStatement? 
	 *         (statements+=MetaStatement? statements+=SCEstStatement?)* 
	 *         statements+=SCEstStatement?
	 *     )
	 */
	protected void sequence_PresentCase(ISerializationContext context, PresentCase semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SCEstStatement returns Present
	 *     SCEstAtomicStatement returns Present
	 *     Present returns Present
	 *     EsterelStatement returns Present
	 *     AtomicStatement returns Present
	 *
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         (
	 *             (
	 *                 (expression=SignalExpression | expression=SignalExpression) 
	 *                 thenAnnotations+=Annotation* 
	 *                 thenStatements+=MetaStatement? 
	 *                 (thenStatements+=SCEstStatement? thenStatements+=MetaStatement?)* 
	 *                 thenStatements+=SCEstStatement? 
	 *                 elseAnnotations+=Annotation*
	 *             ) | 
	 *             (cases+=PresentCase+ elseAnnotations+=Annotation*)
	 *         ) 
	 *         elseStatements+=MetaStatement? 
	 *         (elseStatements+=SCEstStatement? elseStatements+=MetaStatement?)* 
	 *         elseStatements+=SCEstStatement?
	 *     )
	 */
	protected void sequence_Present(ISerializationContext context, Present semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SCEstStatement returns Repeat
	 *     SCEstAtomicStatement returns Repeat
	 *     Repeat returns Repeat
	 *     EsterelStatement returns Repeat
	 *     AtomicStatement returns Repeat
	 *
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         positive?='positive'? 
	 *         expression=Expression 
	 *         (statements+=SCEstStatement | statements+=MetaStatement)* 
	 *         statements+=SCEstStatement?
	 *     )
	 */
	protected void sequence_Repeat(ISerializationContext context, Repeat semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SCEstModule returns SCEstModule
	 *     StatementContainerInterface returns SCEstModule
	 *
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         name=ID 
	 *         (
	 *             (
	 *                 (
	 *                     intSignalDecls+=InterfaceSignalDecl | 
	 *                     intTypeDecls+=TypeDecl | 
	 *                     intSensorDecls+=SensorDecl | 
	 *                     intConstantDecls+=ConstantDecls | 
	 *                     intRelationDecls+=RelationDecl | 
	 *                     intTaskDecls+=TaskDecl | 
	 *                     intFunctionDecls+=FunctionDecl | 
	 *                     intProcedureDecls+=ProcedureDecl
	 *                 )* 
	 *                 statements+=SCEstStatement? 
	 *                 (statements+=MetaStatement? statements+=SCEstStatement?)* 
	 *                 statements+=SCEstStatement?
	 *             ) | 
	 *             (declarations+=Declaration* (statements+=SCEstStatement | statements+=MetaStatement)* statements+=SCEstStatement?)
	 *         )
	 *     )
	 */
	protected void sequence_SCEstModule(ISerializationContext context, SCEstModule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SCEstProgram returns SCEstProgram
	 *
	 * Constraint:
	 *     modules+=SCEstModule+
	 */
	protected void sequence_SCEstProgram(ISerializationContext context, SCEstProgram semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StatementContainerInterface returns ScopeStatement
	 *     MetaStatement returns ScopeStatement
	 *     ScopeStatement returns ScopeStatement
	 *     Statement returns ScopeStatement
	 *
	 * Constraint:
	 *     (annotations+=Annotation* declarations+=Declaration* (statements+=SCEstStatement | statements+=MetaStatement)* statements+=SCEstStatement?)
	 */
	protected void sequence_ScopeStatement(ISerializationContext context, ScopeStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SCEstStatement returns Set
	 *     SCEstAtomicStatement returns Set
	 *     Set returns Set
	 *
	 * Constraint:
	 *     (annotations+=Annotation* signal=[ISignal|ID] expression=Expression)
	 */
	protected void sequence_Set(ISerializationContext context, de.cau.cs.kieler.esterel.scest.scest.Set semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SCEstStatement returns Suspend
	 *     SCEstAtomicStatement returns Suspend
	 *     Suspend returns Suspend
	 *     EsterelStatement returns Suspend
	 *     AtomicStatement returns Suspend
	 *
	 * Constraint:
	 *     (annotations+=Annotation* weak?='weak'? (statements+=SCEstStatement | statements+=MetaStatement)* statements+=SCEstStatement? delay=DelayExpr)
	 */
	protected void sequence_Suspend(ISerializationContext context, Suspend semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StatementContainerInterface returns Thread
	 *     Thread returns Thread
	 *
	 * Constraint:
	 *     (
	 *         (annotations+=Annotation* declarations+=Declaration* (statements+=SCEstStatement | statements+=MetaStatement)* statements+=SCEstStatement?) | 
	 *         ((statements+=SCEstStatement | statements+=MetaStatement)* statements+=SCEstStatement?)
	 *     )
	 */
	protected void sequence_Thread(ISerializationContext context, de.cau.cs.kieler.scl.scl.Thread semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TrapHandler returns TrapHandler
	 *
	 * Constraint:
	 *     (annotations+=Annotation* trapExpr=TrapExpr (statements+=SCEstStatement | statements+=MetaStatement)* statements+=SCEstStatement?)
	 */
	protected void sequence_TrapHandler(ISerializationContext context, TrapHandler semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SCEstStatement returns Trap
	 *     SCEstAtomicStatement returns Trap
	 *     Trap returns Trap
	 *     EsterelStatement returns Trap
	 *     AtomicStatement returns Trap
	 *
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         trapSignals+=TrapSignal 
	 *         trapSignals+=TrapSignal* 
	 *         (statements+=SCEstStatement | statements+=MetaStatement)* 
	 *         statements+=SCEstStatement? 
	 *         trapHandler+=TrapHandler*
	 *     )
	 */
	protected void sequence_Trap(ISerializationContext context, Trap semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SCEstStatement returns UnEmit
	 *     SCEstAtomicStatement returns UnEmit
	 *     UnEmit returns UnEmit
	 *
	 * Constraint:
	 *     (annotations+=Annotation* signal=[ISignal|ID])
	 */
	protected void sequence_UnEmit(ISerializationContext context, UnEmit semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
