/*
 * generated by Xtext
 */
grammar InternalSCEst;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package de.cau.cs.kieler.esterel.scest.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.cau.cs.kieler.esterel.scest.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.cau.cs.kieler.esterel.scest.services.SCEstGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private SCEstGrammarAccess grammarAccess;
 	
    public InternalSCEstParser(TokenStream input, SCEstGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "SCEstProgram";	
   	}
   	
   	@Override
   	protected SCEstGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleSCEstProgram
entryRuleSCEstProgram returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_SL_COMMENT", "RULE_ML_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getSCEstProgramRule()); }
	 iv_ruleSCEstProgram=ruleSCEstProgram 
	 { $current=$iv_ruleSCEstProgram.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule SCEstProgram
ruleSCEstProgram returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_SL_COMMENT", "RULE_ML_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getSCEstProgramAccess().getModulesSCEstModuleParserRuleCall_0()); 
	    }
		lv_modules_0_0=ruleSCEstModule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSCEstProgramRule());
	        }
       		add(
       			$current, 
       			"modules",
        		lv_modules_0_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.SCEstModule");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleSCEstModule
entryRuleSCEstModule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSCEstModuleRule()); }
	 iv_ruleSCEstModule=ruleSCEstModule 
	 { $current=$iv_ruleSCEstModule.current; } 
	 EOF 
;

// Rule SCEstModule
ruleSCEstModule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getSCEstModuleAccess().getSCEstModuleAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSCEstModuleAccess().getAnnotationsAnnotationParserRuleCall_1_0()); 
	    }
		lv_annotations_1_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSCEstModuleRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_1_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_2='module' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSCEstModuleAccess().getModuleKeyword_2());
    }
(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getSCEstModuleAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSCEstModuleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSCEstModuleAccess().getColonKeyword_4());
    }
((((
(
		{ 
	        newCompositeNode(grammarAccess.getSCEstModuleAccess().getIntSignalDeclsInterfaceSignalDeclParserRuleCall_5_0_0_0_0()); 
	    }
		lv_intSignalDecls_5_0=ruleInterfaceSignalDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSCEstModuleRule());
	        }
       		add(
       			$current, 
       			"intSignalDecls",
        		lv_intSignalDecls_5_0, 
        		"de.cau.cs.kieler.esterel.Esterel.InterfaceSignalDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getSCEstModuleAccess().getIntTypeDeclsTypeDeclParserRuleCall_5_0_0_1_0()); 
	    }
		lv_intTypeDecls_6_0=ruleTypeDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSCEstModuleRule());
	        }
       		add(
       			$current, 
       			"intTypeDecls",
        		lv_intTypeDecls_6_0, 
        		"de.cau.cs.kieler.esterel.Esterel.TypeDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getSCEstModuleAccess().getIntSensorDeclsSensorDeclParserRuleCall_5_0_0_2_0()); 
	    }
		lv_intSensorDecls_7_0=ruleSensorDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSCEstModuleRule());
	        }
       		add(
       			$current, 
       			"intSensorDecls",
        		lv_intSensorDecls_7_0, 
        		"de.cau.cs.kieler.esterel.Esterel.SensorDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getSCEstModuleAccess().getIntConstantDeclsConstantDeclsParserRuleCall_5_0_0_3_0()); 
	    }
		lv_intConstantDecls_8_0=ruleConstantDecls		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSCEstModuleRule());
	        }
       		add(
       			$current, 
       			"intConstantDecls",
        		lv_intConstantDecls_8_0, 
        		"de.cau.cs.kieler.esterel.Esterel.ConstantDecls");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getSCEstModuleAccess().getIntRelationDeclsRelationDeclParserRuleCall_5_0_0_4_0()); 
	    }
		lv_intRelationDecls_9_0=ruleRelationDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSCEstModuleRule());
	        }
       		add(
       			$current, 
       			"intRelationDecls",
        		lv_intRelationDecls_9_0, 
        		"de.cau.cs.kieler.esterel.Esterel.RelationDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getSCEstModuleAccess().getIntTaskDeclsTaskDeclParserRuleCall_5_0_0_5_0()); 
	    }
		lv_intTaskDecls_10_0=ruleTaskDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSCEstModuleRule());
	        }
       		add(
       			$current, 
       			"intTaskDecls",
        		lv_intTaskDecls_10_0, 
        		"de.cau.cs.kieler.esterel.Esterel.TaskDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getSCEstModuleAccess().getIntFunctionDeclsFunctionDeclParserRuleCall_5_0_0_6_0()); 
	    }
		lv_intFunctionDecls_11_0=ruleFunctionDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSCEstModuleRule());
	        }
       		add(
       			$current, 
       			"intFunctionDecls",
        		lv_intFunctionDecls_11_0, 
        		"de.cau.cs.kieler.esterel.Esterel.FunctionDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getSCEstModuleAccess().getIntProcedureDeclsProcedureDeclParserRuleCall_5_0_0_7_0()); 
	    }
		lv_intProcedureDecls_12_0=ruleProcedureDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSCEstModuleRule());
	        }
       		add(
       			$current, 
       			"intProcedureDecls",
        		lv_intProcedureDecls_12_0, 
        		"de.cau.cs.kieler.esterel.Esterel.ProcedureDecl");
	        afterParserOrEnumRuleCall();
	    }

)
))*((((
(
		{ 
	        newCompositeNode(grammarAccess.getSCEstModuleAccess().getStatementsSCEstStatementParserRuleCall_5_0_1_0_0_0_0()); 
	    }
		lv_statements_13_0=ruleSCEstStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSCEstModuleRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_13_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.SCEstStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_14=';' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getSCEstModuleAccess().getSemicolonKeyword_5_0_1_0_0_1());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getSCEstModuleAccess().getStatementsMetaStatementParserRuleCall_5_0_1_0_1_0()); 
	    }
		lv_statements_15_0=ruleMetaStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSCEstModuleRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_15_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.MetaStatement");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getSCEstModuleAccess().getStatementsSCEstStatementParserRuleCall_5_0_1_1_0()); 
	    }
		lv_statements_16_0=ruleSCEstStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSCEstModuleRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_16_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.SCEstStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)?)((	otherlv_17='end' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getSCEstModuleAccess().getEndKeyword_5_0_2_0_0());
    }
	otherlv_18='module' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getSCEstModuleAccess().getModuleKeyword_5_0_2_0_1());
    }
)
    |	otherlv_19='.' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getSCEstModuleAccess().getFullStopKeyword_5_0_2_1());
    }
))
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getSCEstModuleAccess().getDeclarationsDeclarationParserRuleCall_5_1_0_0()); 
	    }
		lv_declarations_20_0=ruleDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSCEstModuleRule());
	        }
       		add(
       			$current, 
       			"declarations",
        		lv_declarations_20_0, 
        		"de.cau.cs.kieler.kexpressions.kext.KExt.Declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_21='{' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getSCEstModuleAccess().getLeftCurlyBracketKeyword_5_1_1());
    }
((((
(
		{ 
	        newCompositeNode(grammarAccess.getSCEstModuleAccess().getStatementsSCEstStatementParserRuleCall_5_1_2_0_0_0_0()); 
	    }
		lv_statements_22_0=ruleSCEstStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSCEstModuleRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_22_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.SCEstStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_23=';' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getSCEstModuleAccess().getSemicolonKeyword_5_1_2_0_0_1());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getSCEstModuleAccess().getStatementsMetaStatementParserRuleCall_5_1_2_0_1_0()); 
	    }
		lv_statements_24_0=ruleMetaStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSCEstModuleRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_24_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.MetaStatement");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getSCEstModuleAccess().getStatementsSCEstStatementParserRuleCall_5_1_2_1_0()); 
	    }
		lv_statements_25_0=ruleSCEstStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSCEstModuleRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_25_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.SCEstStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)?)	otherlv_26='}' 
    {
    	newLeafNode(otherlv_26, grammarAccess.getSCEstModuleAccess().getRightCurlyBracketKeyword_5_1_3());
    }
)))
;







// Entry rule entryRuleSCEstStatement
entryRuleSCEstStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSCEstStatementRule()); }
	 iv_ruleSCEstStatement=ruleSCEstStatement 
	 { $current=$iv_ruleSCEstStatement.current; } 
	 EOF 
;

// Rule SCEstStatement
ruleSCEstStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSCEstStatementAccess().getEsterelParallelParserRuleCall_0()); 
    }
    this_EsterelParallel_0=ruleEsterelParallel
    { 
        $current = $this_EsterelParallel_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSCEstStatementAccess().getSCEstAtomicStatementParserRuleCall_1()); 
    }
    this_SCEstAtomicStatement_1=ruleSCEstAtomicStatement
    { 
        $current = $this_SCEstAtomicStatement_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSCEstAtomicStatement
entryRuleSCEstAtomicStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSCEstAtomicStatementRule()); }
	 iv_ruleSCEstAtomicStatement=ruleSCEstAtomicStatement 
	 { $current=$iv_ruleSCEstAtomicStatement.current; } 
	 EOF 
;

// Rule SCEstAtomicStatement
ruleSCEstAtomicStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSCEstAtomicStatementAccess().getAbortParserRuleCall_0()); 
    }
    this_Abort_0=ruleAbort
    { 
        $current = $this_Abort_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSCEstAtomicStatementAccess().getEsterelAssignmentParserRuleCall_1()); 
    }
    this_EsterelAssignment_1=ruleEsterelAssignment
    { 
        $current = $this_EsterelAssignment_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSCEstAtomicStatementAccess().getAwaitParserRuleCall_2()); 
    }
    this_Await_2=ruleAwait
    { 
        $current = $this_Await_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSCEstAtomicStatementAccess().getBlockParserRuleCall_3()); 
    }
    this_Block_3=ruleBlock
    { 
        $current = $this_Block_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSCEstAtomicStatementAccess().getProcCallParserRuleCall_4()); 
    }
    this_ProcCall_4=ruleProcCall
    { 
        $current = $this_ProcCall_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSCEstAtomicStatementAccess().getDoParserRuleCall_5()); 
    }
    this_Do_5=ruleDo
    { 
        $current = $this_Do_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSCEstAtomicStatementAccess().getEmitParserRuleCall_6()); 
    }
    this_Emit_6=ruleEmit
    { 
        $current = $this_Emit_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSCEstAtomicStatementAccess().getEveryDoParserRuleCall_7()); 
    }
    this_EveryDo_7=ruleEveryDo
    { 
        $current = $this_EveryDo_7.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSCEstAtomicStatementAccess().getExitParserRuleCall_8()); 
    }
    this_Exit_8=ruleExit
    { 
        $current = $this_Exit_8.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSCEstAtomicStatementAccess().getExecParserRuleCall_9()); 
    }
    this_Exec_9=ruleExec
    { 
        $current = $this_Exec_9.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSCEstAtomicStatementAccess().getHaltParserRuleCall_10()); 
    }
    this_Halt_10=ruleHalt
    { 
        $current = $this_Halt_10.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSCEstAtomicStatementAccess().getIfTestParserRuleCall_11()); 
    }
    this_IfTest_11=ruleIfTest
    { 
        $current = $this_IfTest_11.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSCEstAtomicStatementAccess().getLocalSignalDeclParserRuleCall_12()); 
    }
    this_LocalSignalDecl_12=ruleLocalSignalDecl
    { 
        $current = $this_LocalSignalDecl_12.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSCEstAtomicStatementAccess().getLoopParserRuleCall_13()); 
    }
    this_Loop_13=ruleLoop
    { 
        $current = $this_Loop_13.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSCEstAtomicStatementAccess().getNothingParserRuleCall_14()); 
    }
    this_Nothing_14=ruleNothing
    { 
        $current = $this_Nothing_14.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSCEstAtomicStatementAccess().getPauseParserRuleCall_15()); 
    }
    this_Pause_15=rulePause
    { 
        $current = $this_Pause_15.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSCEstAtomicStatementAccess().getPresentParserRuleCall_16()); 
    }
    this_Present_16=rulePresent
    { 
        $current = $this_Present_16.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSCEstAtomicStatementAccess().getRepeatParserRuleCall_17()); 
    }
    this_Repeat_17=ruleRepeat
    { 
        $current = $this_Repeat_17.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSCEstAtomicStatementAccess().getRunParserRuleCall_18()); 
    }
    this_Run_18=ruleRun
    { 
        $current = $this_Run_18.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSCEstAtomicStatementAccess().getSuspendParserRuleCall_19()); 
    }
    this_Suspend_19=ruleSuspend
    { 
        $current = $this_Suspend_19.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSCEstAtomicStatementAccess().getSustainParserRuleCall_20()); 
    }
    this_Sustain_20=ruleSustain
    { 
        $current = $this_Sustain_20.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSCEstAtomicStatementAccess().getTrapParserRuleCall_21()); 
    }
    this_Trap_21=ruleTrap
    { 
        $current = $this_Trap_21.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSCEstAtomicStatementAccess().getLocalVariableParserRuleCall_22()); 
    }
    this_LocalVariable_22=ruleLocalVariable
    { 
        $current = $this_LocalVariable_22.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSCEstAtomicStatementAccess().getGotoParserRuleCall_23()); 
    }
    this_Goto_23=ruleGoto
    { 
        $current = $this_Goto_23.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSCEstAtomicStatementAccess().getUnEmitParserRuleCall_24()); 
    }
    this_UnEmit_24=ruleUnEmit
    { 
        $current = $this_UnEmit_24.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSCEstAtomicStatementAccess().getSetParserRuleCall_25()); 
    }
    this_Set_25=ruleSet
    { 
        $current = $this_Set_25.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSCEstAtomicStatementAccess().getAssignmentParserRuleCall_26()); 
    }
    this_Assignment_26=ruleAssignment
    { 
        $current = $this_Assignment_26.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSCEstAtomicStatementAccess().getParallelParserRuleCall_27()); 
    }
    this_Parallel_27=ruleParallel
    { 
        $current = $this_Parallel_27.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSCEstAtomicStatementAccess().getConditionalParserRuleCall_28()); 
    }
    this_Conditional_28=ruleConditional
    { 
        $current = $this_Conditional_28.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleEsterelParallel
entryRuleEsterelParallel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEsterelParallelRule()); }
	 iv_ruleEsterelParallel=ruleEsterelParallel 
	 { $current=$iv_ruleEsterelParallel.current; } 
	 EOF 
;

// Rule EsterelParallel
ruleEsterelParallel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getEsterelParallelAccess().getThreadsEsterelThreadParserRuleCall_0_0()); 
	    }
		lv_threads_0_0=ruleEsterelThread		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEsterelParallelRule());
	        }
       		add(
       			$current, 
       			"threads",
        		lv_threads_0_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.EsterelThread");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='||' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEsterelParallelAccess().getVerticalLineVerticalLineKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEsterelParallelAccess().getThreadsEsterelThreadParserRuleCall_1_1_0()); 
	    }
		lv_threads_2_0=ruleEsterelThread		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEsterelParallelRule());
	        }
       		add(
       			$current, 
       			"threads",
        		lv_threads_2_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.EsterelThread");
	        afterParserOrEnumRuleCall();
	    }

)
))+)
;





// Entry rule entryRuleEsterelThread
entryRuleEsterelThread returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEsterelThreadRule()); }
	 iv_ruleEsterelThread=ruleEsterelThread 
	 { $current=$iv_ruleEsterelThread.current; } 
	 EOF 
;

// Rule EsterelThread
ruleEsterelThread returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getEsterelThreadAccess().getEsterelThreadAction_0(),
            $current);
    }
)(((
(
		{ 
	        newCompositeNode(grammarAccess.getEsterelThreadAccess().getStatementsSCEstAtomicStatementParserRuleCall_1_0_0_0()); 
	    }
		lv_statements_1_0=ruleSCEstAtomicStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEsterelThreadRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_1_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.SCEstAtomicStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEsterelThreadAccess().getSemicolonKeyword_1_0_1());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getEsterelThreadAccess().getStatementsMetaStatementParserRuleCall_1_1_0()); 
	    }
		lv_statements_3_0=ruleMetaStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEsterelThreadRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_3_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.MetaStatement");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getEsterelThreadAccess().getStatementsSCEstAtomicStatementParserRuleCall_2_0()); 
	    }
		lv_statements_4_0=ruleSCEstAtomicStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEsterelThreadRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_4_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.SCEstAtomicStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleBlock
entryRuleBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	 iv_ruleBlock=ruleBlock 
	 { $current=$iv_ruleBlock.current; } 
	 EOF 
;

// Rule Block
ruleBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getBlockAccess().getBlockAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBlockAccess().getAnnotationsAnnotationParserRuleCall_1_0()); 
	    }
		lv_annotations_1_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlockRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_1_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBlockAccess().getLeftSquareBracketKeyword_2());
    }
((((
(
		{ 
	        newCompositeNode(grammarAccess.getBlockAccess().getStatementsSCEstStatementParserRuleCall_3_0_0_0_0()); 
	    }
		lv_statements_3_0=ruleSCEstStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlockRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_3_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.SCEstStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getBlockAccess().getSemicolonKeyword_3_0_0_1());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getBlockAccess().getStatementsMetaStatementParserRuleCall_3_0_1_0()); 
	    }
		lv_statements_5_0=ruleMetaStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlockRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_5_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.MetaStatement");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getBlockAccess().getStatementsSCEstStatementParserRuleCall_3_1_0()); 
	    }
		lv_statements_6_0=ruleSCEstStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlockRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_6_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.SCEstStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)?)	otherlv_7=']' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getBlockAccess().getRightSquareBracketKeyword_4());
    }
)
;





// Entry rule entryRulePresent
entryRulePresent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPresentRule()); }
	 iv_rulePresent=rulePresent 
	 { $current=$iv_rulePresent.current; } 
	 EOF 
;

// Rule Present
rulePresent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPresentAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPresentRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='present' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPresentAccess().getPresentKeyword_1());
    }
((((
(
		{ 
	        newCompositeNode(grammarAccess.getPresentAccess().getExpressionSignalExpressionParserRuleCall_2_0_0_0_0()); 
	    }
		lv_expression_2_0=ruleSignalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPresentRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"de.cau.cs.kieler.esterel.Esterel.SignalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(	otherlv_3='[' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPresentAccess().getLeftSquareBracketKeyword_2_0_0_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPresentAccess().getExpressionSignalExpressionParserRuleCall_2_0_0_1_1_0()); 
	    }
		lv_expression_4_0=ruleSignalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPresentRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_4_0, 
        		"de.cau.cs.kieler.esterel.Esterel.SignalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=']' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getPresentAccess().getRightSquareBracketKeyword_2_0_0_1_2());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPresentAccess().getTickTickParserRuleCall_2_0_0_2_0()); 
	    }
		lv_tick_6_0=ruleTick		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPresentRule());
	        }
       		set(
       			$current, 
       			"tick",
        		lv_tick_6_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Tick");
	        afterParserOrEnumRuleCall();
	    }

)
))((
(
		{ 
	        newCompositeNode(grammarAccess.getPresentAccess().getThenAnnotationsAnnotationParserRuleCall_2_0_1_0_0()); 
	    }
		lv_thenAnnotations_7_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPresentRule());
	        }
       		add(
       			$current, 
       			"thenAnnotations",
        		lv_thenAnnotations_7_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_8='then' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getPresentAccess().getThenKeyword_2_0_1_1());
    }
((((
(
		{ 
	        newCompositeNode(grammarAccess.getPresentAccess().getThenStatementsSCEstStatementParserRuleCall_2_0_1_2_0_0_0_0()); 
	    }
		lv_thenStatements_9_0=ruleSCEstStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPresentRule());
	        }
       		add(
       			$current, 
       			"thenStatements",
        		lv_thenStatements_9_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.SCEstStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_10=';' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getPresentAccess().getSemicolonKeyword_2_0_1_2_0_0_1());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPresentAccess().getThenStatementsMetaStatementParserRuleCall_2_0_1_2_0_1_0()); 
	    }
		lv_thenStatements_11_0=ruleMetaStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPresentRule());
	        }
       		add(
       			$current, 
       			"thenStatements",
        		lv_thenStatements_11_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.MetaStatement");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getPresentAccess().getThenStatementsSCEstStatementParserRuleCall_2_0_1_2_1_0()); 
	    }
		lv_thenStatements_12_0=ruleSCEstStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPresentRule());
	        }
       		add(
       			$current, 
       			"thenStatements",
        		lv_thenStatements_12_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.SCEstStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)?))?)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPresentAccess().getCasesPresentCaseParserRuleCall_2_1_0()); 
	    }
		lv_cases_13_0=rulePresentCase		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPresentRule());
	        }
       		add(
       			$current, 
       			"cases",
        		lv_cases_13_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.PresentCase");
	        afterParserOrEnumRuleCall();
	    }

)
)+)((
(
		{ 
	        newCompositeNode(grammarAccess.getPresentAccess().getElseAnnotationsAnnotationParserRuleCall_3_0_0()); 
	    }
		lv_elseAnnotations_14_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPresentRule());
	        }
       		add(
       			$current, 
       			"elseAnnotations",
        		lv_elseAnnotations_14_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_15='else' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getPresentAccess().getElseKeyword_3_1());
    }
((((
(
		{ 
	        newCompositeNode(grammarAccess.getPresentAccess().getElseStatementsSCEstStatementParserRuleCall_3_2_0_0_0_0()); 
	    }
		lv_elseStatements_16_0=ruleSCEstStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPresentRule());
	        }
       		add(
       			$current, 
       			"elseStatements",
        		lv_elseStatements_16_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.SCEstStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_17=';' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getPresentAccess().getSemicolonKeyword_3_2_0_0_1());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPresentAccess().getElseStatementsMetaStatementParserRuleCall_3_2_0_1_0()); 
	    }
		lv_elseStatements_18_0=ruleMetaStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPresentRule());
	        }
       		add(
       			$current, 
       			"elseStatements",
        		lv_elseStatements_18_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.MetaStatement");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getPresentAccess().getElseStatementsSCEstStatementParserRuleCall_3_2_1_0()); 
	    }
		lv_elseStatements_19_0=ruleSCEstStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPresentRule());
	        }
       		add(
       			$current, 
       			"elseStatements",
        		lv_elseStatements_19_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.SCEstStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)?))?	otherlv_20='end' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getPresentAccess().getEndKeyword_4());
    }
(	otherlv_21='present' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getPresentAccess().getPresentKeyword_5());
    }
)?)
;





// Entry rule entryRulePresentCase
entryRulePresentCase returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPresentCaseRule()); }
	 iv_rulePresentCase=rulePresentCase 
	 { $current=$iv_rulePresentCase.current; } 
	 EOF 
;

// Rule PresentCase
rulePresentCase returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPresentCaseAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPresentCaseRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='case' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPresentCaseAccess().getCaseKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getPresentCaseAccess().getExpressionSignalExpressionParserRuleCall_2_0_0()); 
	    }
		lv_expression_2_0=ruleSignalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPresentCaseRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"de.cau.cs.kieler.esterel.Esterel.SignalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(	otherlv_3='[' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPresentCaseAccess().getLeftSquareBracketKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPresentCaseAccess().getExpressionSignalExpressionParserRuleCall_2_1_1_0()); 
	    }
		lv_expression_4_0=ruleSignalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPresentCaseRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_4_0, 
        		"de.cau.cs.kieler.esterel.Esterel.SignalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=']' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getPresentCaseAccess().getRightSquareBracketKeyword_2_1_2());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPresentCaseAccess().getTickTickParserRuleCall_2_2_0()); 
	    }
		lv_tick_6_0=ruleTick		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPresentCaseRule());
	        }
       		set(
       			$current, 
       			"tick",
        		lv_tick_6_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Tick");
	        afterParserOrEnumRuleCall();
	    }

)
))(	otherlv_7='do' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getPresentCaseAccess().getDoKeyword_3_0());
    }
((((
(
		{ 
	        newCompositeNode(grammarAccess.getPresentCaseAccess().getStatementsSCEstStatementParserRuleCall_3_1_0_0_0_0()); 
	    }
		lv_statements_8_0=ruleSCEstStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPresentCaseRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_8_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.SCEstStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_9=';' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getPresentCaseAccess().getSemicolonKeyword_3_1_0_0_1());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPresentCaseAccess().getStatementsMetaStatementParserRuleCall_3_1_0_1_0()); 
	    }
		lv_statements_10_0=ruleMetaStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPresentCaseRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_10_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.MetaStatement");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getPresentCaseAccess().getStatementsSCEstStatementParserRuleCall_3_1_1_0()); 
	    }
		lv_statements_11_0=ruleSCEstStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPresentCaseRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_11_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.SCEstStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)?))?)
;





// Entry rule entryRuleIfTest
entryRuleIfTest returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfTestRule()); }
	 iv_ruleIfTest=ruleIfTest 
	 { $current=$iv_ruleIfTest.current; } 
	 EOF 
;

// Rule IfTest
ruleIfTest returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getIfTestAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfTestRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='if' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIfTestAccess().getIfKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfTestAccess().getExprExpressionParserRuleCall_2_0()); 
	    }
		lv_expr_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfTestRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getIfTestAccess().getThenAnnotationsAnnotationParserRuleCall_3_0_0()); 
	    }
		lv_thenAnnotations_3_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfTestRule());
	        }
       		add(
       			$current, 
       			"thenAnnotations",
        		lv_thenAnnotations_3_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='then' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getIfTestAccess().getThenKeyword_3_1());
    }
((((
(
		{ 
	        newCompositeNode(grammarAccess.getIfTestAccess().getThenStatementsSCEstStatementParserRuleCall_3_2_0_0_0_0()); 
	    }
		lv_thenStatements_5_0=ruleSCEstStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfTestRule());
	        }
       		add(
       			$current, 
       			"thenStatements",
        		lv_thenStatements_5_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.SCEstStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getIfTestAccess().getSemicolonKeyword_3_2_0_0_1());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getIfTestAccess().getThenStatementsMetaStatementParserRuleCall_3_2_0_1_0()); 
	    }
		lv_thenStatements_7_0=ruleMetaStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfTestRule());
	        }
       		add(
       			$current, 
       			"thenStatements",
        		lv_thenStatements_7_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.MetaStatement");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getIfTestAccess().getThenStatementsSCEstStatementParserRuleCall_3_2_1_0()); 
	    }
		lv_thenStatements_8_0=ruleSCEstStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfTestRule());
	        }
       		add(
       			$current, 
       			"thenStatements",
        		lv_thenStatements_8_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.SCEstStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)?))?(
(
		{ 
	        newCompositeNode(grammarAccess.getIfTestAccess().getElseifElsIfParserRuleCall_4_0()); 
	    }
		lv_elseif_9_0=ruleElsIf		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfTestRule());
	        }
       		add(
       			$current, 
       			"elseif",
        		lv_elseif_9_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.ElsIf");
	        afterParserOrEnumRuleCall();
	    }

)
)*((
(
		{ 
	        newCompositeNode(grammarAccess.getIfTestAccess().getElseAnnotationsAnnotationParserRuleCall_5_0_0()); 
	    }
		lv_elseAnnotations_10_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfTestRule());
	        }
       		add(
       			$current, 
       			"elseAnnotations",
        		lv_elseAnnotations_10_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_11='else' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getIfTestAccess().getElseKeyword_5_1());
    }
((((
(
		{ 
	        newCompositeNode(grammarAccess.getIfTestAccess().getElseStatementsSCEstStatementParserRuleCall_5_2_0_0_0_0()); 
	    }
		lv_elseStatements_12_0=ruleSCEstStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfTestRule());
	        }
       		add(
       			$current, 
       			"elseStatements",
        		lv_elseStatements_12_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.SCEstStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_13=';' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getIfTestAccess().getSemicolonKeyword_5_2_0_0_1());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getIfTestAccess().getElseStatementsMetaStatementParserRuleCall_5_2_0_1_0()); 
	    }
		lv_elseStatements_14_0=ruleMetaStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfTestRule());
	        }
       		add(
       			$current, 
       			"elseStatements",
        		lv_elseStatements_14_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.MetaStatement");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getIfTestAccess().getElseStatementsSCEstStatementParserRuleCall_5_2_1_0()); 
	    }
		lv_elseStatements_15_0=ruleSCEstStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfTestRule());
	        }
       		add(
       			$current, 
       			"elseStatements",
        		lv_elseStatements_15_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.SCEstStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)?))?	otherlv_16='end' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getIfTestAccess().getEndKeyword_6());
    }
(	otherlv_17='if' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getIfTestAccess().getIfKeyword_7());
    }
)?)
;





// Entry rule entryRuleElsIf
entryRuleElsIf returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElsIfRule()); }
	 iv_ruleElsIf=ruleElsIf 
	 { $current=$iv_ruleElsIf.current; } 
	 EOF 
;

// Rule ElsIf
ruleElsIf returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getElsIfAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElsIfRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='elsif' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getElsIfAccess().getElsifKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getElsIfAccess().getExprExpressionParserRuleCall_2_0()); 
	    }
		lv_expr_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElsIfRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getElsIfAccess().getThenAnnotationsAnnotationParserRuleCall_3_0_0()); 
	    }
		lv_thenAnnotations_3_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElsIfRule());
	        }
       		add(
       			$current, 
       			"thenAnnotations",
        		lv_thenAnnotations_3_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='then' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getElsIfAccess().getThenKeyword_3_1());
    }
((((
(
		{ 
	        newCompositeNode(grammarAccess.getElsIfAccess().getThenStatementsSCEstStatementParserRuleCall_3_2_0_0_0_0()); 
	    }
		lv_thenStatements_5_0=ruleSCEstStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElsIfRule());
	        }
       		add(
       			$current, 
       			"thenStatements",
        		lv_thenStatements_5_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.SCEstStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getElsIfAccess().getSemicolonKeyword_3_2_0_0_1());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getElsIfAccess().getThenStatementsMetaStatementParserRuleCall_3_2_0_1_0()); 
	    }
		lv_thenStatements_7_0=ruleMetaStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElsIfRule());
	        }
       		add(
       			$current, 
       			"thenStatements",
        		lv_thenStatements_7_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.MetaStatement");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getElsIfAccess().getThenStatementsSCEstStatementParserRuleCall_3_2_1_0()); 
	    }
		lv_thenStatements_8_0=ruleSCEstStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElsIfRule());
	        }
       		add(
       			$current, 
       			"thenStatements",
        		lv_thenStatements_8_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.SCEstStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)?))?)
;





// Entry rule entryRuleLoop
entryRuleLoop returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLoopRule()); }
	 iv_ruleLoop=ruleLoop 
	 { $current=$iv_ruleLoop.current; } 
	 EOF 
;

// Rule Loop
ruleLoop returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getLoopAccess().getLoopAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLoopAccess().getAnnotationsAnnotationParserRuleCall_1_0()); 
	    }
		lv_annotations_1_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoopRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_1_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_2='loop' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLoopAccess().getLoopKeyword_2());
    }
((((
(
		{ 
	        newCompositeNode(grammarAccess.getLoopAccess().getStatementsSCEstStatementParserRuleCall_3_0_0_0_0()); 
	    }
		lv_statements_3_0=ruleSCEstStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoopRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_3_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.SCEstStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getLoopAccess().getSemicolonKeyword_3_0_0_1());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getLoopAccess().getStatementsMetaStatementParserRuleCall_3_0_1_0()); 
	    }
		lv_statements_5_0=ruleMetaStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoopRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_5_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.MetaStatement");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getLoopAccess().getStatementsSCEstStatementParserRuleCall_3_1_0()); 
	    }
		lv_statements_6_0=ruleSCEstStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoopRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_6_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.SCEstStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)?)((	otherlv_7='end' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getLoopAccess().getEndKeyword_4_0_0());
    }
(	otherlv_8='loop' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getLoopAccess().getLoopKeyword_4_0_1());
    }
)?)
    |(	otherlv_9='each' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getLoopAccess().getEachKeyword_4_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLoopAccess().getDelayDelayExprParserRuleCall_4_1_1_0()); 
	    }
		lv_delay_10_0=ruleDelayExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoopRule());
	        }
       		set(
       			$current, 
       			"delay",
        		lv_delay_10_0, 
        		"de.cau.cs.kieler.esterel.Esterel.DelayExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))))
;





// Entry rule entryRuleRepeat
entryRuleRepeat returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRepeatRule()); }
	 iv_ruleRepeat=ruleRepeat 
	 { $current=$iv_ruleRepeat.current; } 
	 EOF 
;

// Rule Repeat
ruleRepeat returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRepeatAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRepeatRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		lv_positive_1_0=	'positive' 
    {
        newLeafNode(lv_positive_1_0, grammarAccess.getRepeatAccess().getPositivePositiveKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRepeatRule());
	        }
       		setWithLastConsumed($current, "positive", true, "positive");
	    }

)
)?	otherlv_2='repeat' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRepeatAccess().getRepeatKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRepeatAccess().getExpressionExpressionParserRuleCall_3_0()); 
	    }
		lv_expression_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRepeatRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_3_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='times' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRepeatAccess().getTimesKeyword_4());
    }
((((
(
		{ 
	        newCompositeNode(grammarAccess.getRepeatAccess().getStatementsSCEstStatementParserRuleCall_5_0_0_0_0()); 
	    }
		lv_statements_5_0=ruleSCEstStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRepeatRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_5_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.SCEstStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getRepeatAccess().getSemicolonKeyword_5_0_0_1());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getRepeatAccess().getStatementsMetaStatementParserRuleCall_5_0_1_0()); 
	    }
		lv_statements_7_0=ruleMetaStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRepeatRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_7_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.MetaStatement");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getRepeatAccess().getStatementsSCEstStatementParserRuleCall_5_1_0()); 
	    }
		lv_statements_8_0=ruleSCEstStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRepeatRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_8_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.SCEstStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)?)	otherlv_9='end' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getRepeatAccess().getEndKeyword_6());
    }
(	otherlv_10='repeat' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getRepeatAccess().getRepeatKeyword_7());
    }
)?)
;





// Entry rule entryRuleAbort
entryRuleAbort returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbortRule()); }
	 iv_ruleAbort=ruleAbort 
	 { $current=$iv_ruleAbort.current; } 
	 EOF 
;

// Rule Abort
ruleAbort returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAbortAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAbortRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*((
(
		lv_weak_1_0=	'weak' 
    {
        newLeafNode(lv_weak_1_0, grammarAccess.getAbortAccess().getWeakWeakKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAbortRule());
	        }
       		setWithLastConsumed($current, "weak", true, "weak");
	    }

)
)?	otherlv_2='abort' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAbortAccess().getAbortKeyword_1_1());
    }
)((((
(
		{ 
	        newCompositeNode(grammarAccess.getAbortAccess().getStatementsSCEstStatementParserRuleCall_2_0_0_0_0()); 
	    }
		lv_statements_3_0=ruleSCEstStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAbortRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_3_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.SCEstStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAbortAccess().getSemicolonKeyword_2_0_0_1());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getAbortAccess().getStatementsMetaStatementParserRuleCall_2_0_1_0()); 
	    }
		lv_statements_5_0=ruleMetaStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAbortRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_5_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.MetaStatement");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getAbortAccess().getStatementsSCEstStatementParserRuleCall_2_1_0()); 
	    }
		lv_statements_6_0=ruleSCEstStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAbortRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_6_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.SCEstStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)?)	otherlv_7='when' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getAbortAccess().getWhenKeyword_3());
    }
(((
(
		{ 
	        newCompositeNode(grammarAccess.getAbortAccess().getDelayDelayExprParserRuleCall_4_0_0_0()); 
	    }
		lv_delay_8_0=ruleDelayExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAbortRule());
	        }
       		set(
       			$current, 
       			"delay",
        		lv_delay_8_0, 
        		"de.cau.cs.kieler.esterel.Esterel.DelayExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_9='do' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getAbortAccess().getDoKeyword_4_0_1_0());
    }
((((
(
		{ 
	        newCompositeNode(grammarAccess.getAbortAccess().getDoStatementsSCEstStatementParserRuleCall_4_0_1_1_0_0_0_0()); 
	    }
		lv_doStatements_10_0=ruleSCEstStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAbortRule());
	        }
       		add(
       			$current, 
       			"doStatements",
        		lv_doStatements_10_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.SCEstStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_11=';' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getAbortAccess().getSemicolonKeyword_4_0_1_1_0_0_1());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getAbortAccess().getDoStatementsMetaStatementParserRuleCall_4_0_1_1_0_1_0()); 
	    }
		lv_doStatements_12_0=ruleMetaStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAbortRule());
	        }
       		add(
       			$current, 
       			"doStatements",
        		lv_doStatements_12_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.MetaStatement");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getAbortAccess().getDoStatementsSCEstStatementParserRuleCall_4_0_1_1_1_0()); 
	    }
		lv_doStatements_13_0=ruleSCEstStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAbortRule());
	        }
       		add(
       			$current, 
       			"doStatements",
        		lv_doStatements_13_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.SCEstStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)?))?	otherlv_14='end' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getAbortAccess().getEndKeyword_4_0_2());
    }
((	otherlv_15='weak' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getAbortAccess().getWeakKeyword_4_0_3_0_0());
    }
	otherlv_16='abort' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getAbortAccess().getAbortKeyword_4_0_3_0_1());
    }
)
    |	otherlv_17='abort' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getAbortAccess().getAbortKeyword_4_0_3_1());
    }
)?)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getAbortAccess().getDelayDelayExprParserRuleCall_4_1_0_0()); 
	    }
		lv_delay_18_0=ruleDelayExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAbortRule());
	        }
       		set(
       			$current, 
       			"delay",
        		lv_delay_18_0, 
        		"de.cau.cs.kieler.esterel.Esterel.DelayExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_19='end' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getAbortAccess().getEndKeyword_4_1_1_0());
    }

    |(	otherlv_20='end' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getAbortAccess().getEndKeyword_4_1_1_1_0());
    }
(	otherlv_21='weak' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getAbortAccess().getWeakKeyword_4_1_1_1_1());
    }
)?	otherlv_22='abort' 
    {
    	newLeafNode(otherlv_22, grammarAccess.getAbortAccess().getAbortKeyword_4_1_1_1_2());
    }
))?)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getAbortAccess().getCasesCaseParserRuleCall_4_2_0_0()); 
	    }
		lv_cases_23_0=ruleCase		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAbortRule());
	        }
       		add(
       			$current, 
       			"cases",
        		lv_cases_23_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.Case");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_24='end' 
    {
    	newLeafNode(otherlv_24, grammarAccess.getAbortAccess().getEndKeyword_4_2_1());
    }
((	otherlv_25='weak' 
    {
    	newLeafNode(otherlv_25, grammarAccess.getAbortAccess().getWeakKeyword_4_2_2_0_0());
    }
	otherlv_26='abort' 
    {
    	newLeafNode(otherlv_26, grammarAccess.getAbortAccess().getAbortKeyword_4_2_2_0_1());
    }
)
    |	otherlv_27='abort' 
    {
    	newLeafNode(otherlv_27, grammarAccess.getAbortAccess().getAbortKeyword_4_2_2_1());
    }
)?)))
;





// Entry rule entryRuleCase
entryRuleCase returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCaseRule()); }
	 iv_ruleCase=ruleCase 
	 { $current=$iv_ruleCase.current; } 
	 EOF 
;

// Rule Case
ruleCase returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getCaseAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCaseRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='case' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCaseAccess().getCaseKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCaseAccess().getDelayDelayExprParserRuleCall_2_0()); 
	    }
		lv_delay_2_0=ruleDelayExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCaseRule());
	        }
       		set(
       			$current, 
       			"delay",
        		lv_delay_2_0, 
        		"de.cau.cs.kieler.esterel.Esterel.DelayExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='do' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCaseAccess().getDoKeyword_3_0());
    }
((((
(
		{ 
	        newCompositeNode(grammarAccess.getCaseAccess().getStatementsSCEstStatementParserRuleCall_3_1_0_0_0_0()); 
	    }
		lv_statements_4_0=ruleSCEstStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCaseRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_4_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.SCEstStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getCaseAccess().getSemicolonKeyword_3_1_0_0_1());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getCaseAccess().getStatementsMetaStatementParserRuleCall_3_1_0_1_0()); 
	    }
		lv_statements_6_0=ruleMetaStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCaseRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_6_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.MetaStatement");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getCaseAccess().getStatementsSCEstStatementParserRuleCall_3_1_1_0()); 
	    }
		lv_statements_7_0=ruleSCEstStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCaseRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_7_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.SCEstStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)?))?)
;





// Entry rule entryRuleAwait
entryRuleAwait returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAwaitRule()); }
	 iv_ruleAwait=ruleAwait 
	 { $current=$iv_ruleAwait.current; } 
	 EOF 
;

// Rule Await
ruleAwait returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAwaitAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAwaitRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='await' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAwaitAccess().getAwaitKeyword_1());
    }
(((
(
		{ 
	        newCompositeNode(grammarAccess.getAwaitAccess().getDelayDelayExprParserRuleCall_2_0_0_0()); 
	    }
		lv_delay_2_0=ruleDelayExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAwaitRule());
	        }
       		set(
       			$current, 
       			"delay",
        		lv_delay_2_0, 
        		"de.cau.cs.kieler.esterel.Esterel.DelayExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='do' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAwaitAccess().getDoKeyword_2_0_1_0());
    }
((((
(
		{ 
	        newCompositeNode(grammarAccess.getAwaitAccess().getStatementsSCEstStatementParserRuleCall_2_0_1_1_0_0_0_0()); 
	    }
		lv_statements_4_0=ruleSCEstStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAwaitRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_4_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.SCEstStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAwaitAccess().getSemicolonKeyword_2_0_1_1_0_0_1());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getAwaitAccess().getStatementsMetaStatementParserRuleCall_2_0_1_1_0_1_0()); 
	    }
		lv_statements_6_0=ruleMetaStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAwaitRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_6_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.MetaStatement");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getAwaitAccess().getStatementsSCEstStatementParserRuleCall_2_0_1_1_1_0()); 
	    }
		lv_statements_7_0=ruleSCEstStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAwaitRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_7_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.SCEstStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)?)	otherlv_8='end' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getAwaitAccess().getEndKeyword_2_0_1_2());
    }
(	otherlv_9='await' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getAwaitAccess().getAwaitKeyword_2_0_1_3());
    }
)?)?)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getAwaitAccess().getCasesCaseParserRuleCall_2_1_0_0()); 
	    }
		lv_cases_10_0=ruleCase		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAwaitRule());
	        }
       		add(
       			$current, 
       			"cases",
        		lv_cases_10_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.Case");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_11='end' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getAwaitAccess().getEndKeyword_2_1_1());
    }
(	otherlv_12='await' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getAwaitAccess().getAwaitKeyword_2_1_2());
    }
)?)))
;





// Entry rule entryRuleEveryDo
entryRuleEveryDo returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEveryDoRule()); }
	 iv_ruleEveryDo=ruleEveryDo 
	 { $current=$iv_ruleEveryDo.current; } 
	 EOF 
;

// Rule EveryDo
ruleEveryDo returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getEveryDoAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEveryDoRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='every' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEveryDoAccess().getEveryKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEveryDoAccess().getDelayDelayExprParserRuleCall_2_0()); 
	    }
		lv_delay_2_0=ruleDelayExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEveryDoRule());
	        }
       		set(
       			$current, 
       			"delay",
        		lv_delay_2_0, 
        		"de.cau.cs.kieler.esterel.Esterel.DelayExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='do' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getEveryDoAccess().getDoKeyword_3());
    }
((((
(
		{ 
	        newCompositeNode(grammarAccess.getEveryDoAccess().getStatementsSCEstStatementParserRuleCall_4_0_0_0_0()); 
	    }
		lv_statements_4_0=ruleSCEstStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEveryDoRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_4_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.SCEstStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getEveryDoAccess().getSemicolonKeyword_4_0_0_1());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getEveryDoAccess().getStatementsMetaStatementParserRuleCall_4_0_1_0()); 
	    }
		lv_statements_6_0=ruleMetaStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEveryDoRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_6_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.MetaStatement");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getEveryDoAccess().getStatementsSCEstStatementParserRuleCall_4_1_0()); 
	    }
		lv_statements_7_0=ruleSCEstStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEveryDoRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_7_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.SCEstStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)?)	otherlv_8='end' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getEveryDoAccess().getEndKeyword_5());
    }
(	otherlv_9='every' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getEveryDoAccess().getEveryKeyword_6());
    }
)?)
;





// Entry rule entryRuleSuspend
entryRuleSuspend returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSuspendRule()); }
	 iv_ruleSuspend=ruleSuspend 
	 { $current=$iv_ruleSuspend.current; } 
	 EOF 
;

// Rule Suspend
ruleSuspend returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSuspendAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSuspendRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*((
(
		lv_weak_1_0=	'weak' 
    {
        newLeafNode(lv_weak_1_0, grammarAccess.getSuspendAccess().getWeakWeakKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSuspendRule());
	        }
       		setWithLastConsumed($current, "weak", true, "weak");
	    }

)
)?	otherlv_2='suspend' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSuspendAccess().getSuspendKeyword_1_1());
    }
)((((
(
		{ 
	        newCompositeNode(grammarAccess.getSuspendAccess().getStatementsSCEstStatementParserRuleCall_2_0_0_0_0()); 
	    }
		lv_statements_3_0=ruleSCEstStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSuspendRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_3_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.SCEstStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSuspendAccess().getSemicolonKeyword_2_0_0_1());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getSuspendAccess().getStatementsMetaStatementParserRuleCall_2_0_1_0()); 
	    }
		lv_statements_5_0=ruleMetaStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSuspendRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_5_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.MetaStatement");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getSuspendAccess().getStatementsSCEstStatementParserRuleCall_2_1_0()); 
	    }
		lv_statements_6_0=ruleSCEstStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSuspendRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_6_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.SCEstStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)?)	otherlv_7='when' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getSuspendAccess().getWhenKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSuspendAccess().getDelayDelayExprParserRuleCall_4_0()); 
	    }
		lv_delay_8_0=ruleDelayExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSuspendRule());
	        }
       		set(
       			$current, 
       			"delay",
        		lv_delay_8_0, 
        		"de.cau.cs.kieler.esterel.Esterel.DelayExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTrap
entryRuleTrap returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTrapRule()); }
	 iv_ruleTrap=ruleTrap 
	 { $current=$iv_ruleTrap.current; } 
	 EOF 
;

// Rule Trap
ruleTrap returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTrapAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTrapRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='trap' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTrapAccess().getTrapKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTrapAccess().getTrapSignalsTrapSignalParserRuleCall_2_0()); 
	    }
		lv_trapSignals_2_0=ruleTrapSignal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTrapRule());
	        }
       		add(
       			$current, 
       			"trapSignals",
        		lv_trapSignals_2_0, 
        		"de.cau.cs.kieler.esterel.Esterel.TrapSignal");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTrapAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTrapAccess().getTrapSignalsTrapSignalParserRuleCall_3_1_0()); 
	    }
		lv_trapSignals_4_0=ruleTrapSignal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTrapRule());
	        }
       		add(
       			$current, 
       			"trapSignals",
        		lv_trapSignals_4_0, 
        		"de.cau.cs.kieler.esterel.Esterel.TrapSignal");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5='in' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTrapAccess().getInKeyword_4());
    }
((((
(
		{ 
	        newCompositeNode(grammarAccess.getTrapAccess().getStatementsSCEstStatementParserRuleCall_5_0_0_0_0()); 
	    }
		lv_statements_6_0=ruleSCEstStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTrapRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_6_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.SCEstStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=';' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getTrapAccess().getSemicolonKeyword_5_0_0_1());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getTrapAccess().getStatementsMetaStatementParserRuleCall_5_0_1_0()); 
	    }
		lv_statements_8_0=ruleMetaStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTrapRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_8_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.MetaStatement");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getTrapAccess().getStatementsSCEstStatementParserRuleCall_5_1_0()); 
	    }
		lv_statements_9_0=ruleSCEstStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTrapRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_9_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.SCEstStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)?)(
(
		{ 
	        newCompositeNode(grammarAccess.getTrapAccess().getTrapHandlerTrapHandlerParserRuleCall_6_0()); 
	    }
		lv_trapHandler_10_0=ruleTrapHandler		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTrapRule());
	        }
       		add(
       			$current, 
       			"trapHandler",
        		lv_trapHandler_10_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.TrapHandler");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_11='end' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getTrapAccess().getEndKeyword_7());
    }
(	otherlv_12='trap' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getTrapAccess().getTrapKeyword_8());
    }
)?)
;





// Entry rule entryRuleTrapHandler
entryRuleTrapHandler returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTrapHandlerRule()); }
	 iv_ruleTrapHandler=ruleTrapHandler 
	 { $current=$iv_ruleTrapHandler.current; } 
	 EOF 
;

// Rule TrapHandler
ruleTrapHandler returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTrapHandlerAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTrapHandlerRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='handle' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTrapHandlerAccess().getHandleKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTrapHandlerAccess().getTrapExprTrapExprParserRuleCall_2_0()); 
	    }
		lv_trapExpr_2_0=ruleTrapExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTrapHandlerRule());
	        }
       		set(
       			$current, 
       			"trapExpr",
        		lv_trapExpr_2_0, 
        		"de.cau.cs.kieler.esterel.Esterel.TrapExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='do' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTrapHandlerAccess().getDoKeyword_3());
    }
((((
(
		{ 
	        newCompositeNode(grammarAccess.getTrapHandlerAccess().getStatementsSCEstStatementParserRuleCall_4_0_0_0_0()); 
	    }
		lv_statements_4_0=ruleSCEstStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTrapHandlerRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_4_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.SCEstStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTrapHandlerAccess().getSemicolonKeyword_4_0_0_1());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getTrapHandlerAccess().getStatementsMetaStatementParserRuleCall_4_0_1_0()); 
	    }
		lv_statements_6_0=ruleMetaStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTrapHandlerRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_6_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.MetaStatement");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getTrapHandlerAccess().getStatementsSCEstStatementParserRuleCall_4_1_0()); 
	    }
		lv_statements_7_0=ruleSCEstStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTrapHandlerRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_7_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.SCEstStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)?))
;





// Entry rule entryRuleExec
entryRuleExec returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExecRule()); }
	 iv_ruleExec=ruleExec 
	 { $current=$iv_ruleExec.current; } 
	 EOF 
;

// Rule Exec
ruleExec returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExecAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExecRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*((	otherlv_1='exec' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExecAccess().getExecKeyword_1_0_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getExecRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getExecAccess().getTaskTaskCrossReference_1_0_1_0()); 
	}

)
)	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getExecAccess().getLeftParenthesisKeyword_1_0_2());
    }
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getExecRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getExecAccess().getVarsIVariableCrossReference_1_0_3_0_0()); 
	}

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getExecAccess().getCommaKeyword_1_0_3_1_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getExecRule());
	        }
        }
	otherlv_6=RULE_ID
	{
		newLeafNode(otherlv_6, grammarAccess.getExecAccess().getVarsIVariableCrossReference_1_0_3_1_1_0()); 
	}

)
))*)?	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getExecAccess().getRightParenthesisKeyword_1_0_4());
    }
	otherlv_8='(' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getExecAccess().getLeftParenthesisKeyword_1_0_5());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getExecAccess().getKexpressionsExpressionParserRuleCall_1_0_6_0_0()); 
	    }
		lv_kexpressions_9_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExecRule());
	        }
       		add(
       			$current, 
       			"kexpressions",
        		lv_kexpressions_9_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_10=',' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getExecAccess().getCommaKeyword_1_0_6_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExecAccess().getKexpressionsExpressionParserRuleCall_1_0_6_1_1_0()); 
	    }
		lv_kexpressions_11_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExecRule());
	        }
       		add(
       			$current, 
       			"kexpressions",
        		lv_kexpressions_11_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_12=')' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getExecAccess().getRightParenthesisKeyword_1_0_7());
    }
	otherlv_13='return' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getExecAccess().getReturnKeyword_1_0_8());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getExecRule());
	        }
        }
	otherlv_14=RULE_ID
	{
		newLeafNode(otherlv_14, grammarAccess.getExecAccess().getRetSignalISignalCrossReference_1_0_9_0()); 
	}

)
)(	otherlv_15='do' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getExecAccess().getDoKeyword_1_0_10_0());
    }
((((
(
		{ 
	        newCompositeNode(grammarAccess.getExecAccess().getStatementsSCEstStatementParserRuleCall_1_0_10_1_0_0_0_0()); 
	    }
		lv_statements_16_0=ruleSCEstStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExecRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_16_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.SCEstStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_17=';' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getExecAccess().getSemicolonKeyword_1_0_10_1_0_0_1());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getExecAccess().getStatementsMetaStatementParserRuleCall_1_0_10_1_0_1_0()); 
	    }
		lv_statements_18_0=ruleMetaStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExecRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_18_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.MetaStatement");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getExecAccess().getStatementsSCEstStatementParserRuleCall_1_0_10_1_1_0()); 
	    }
		lv_statements_19_0=ruleSCEstStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExecRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_19_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.SCEstStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)?))?)
    |(	otherlv_20='exec' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getExecAccess().getExecKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExecAccess().getExecCaseListExecCaseParserRuleCall_1_1_1_0()); 
	    }
		lv_execCaseList_21_0=ruleExecCase		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExecRule());
	        }
       		add(
       			$current, 
       			"execCaseList",
        		lv_execCaseList_21_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.ExecCase");
	        afterParserOrEnumRuleCall();
	    }

)
)+))	otherlv_22='end' 
    {
    	newLeafNode(otherlv_22, grammarAccess.getExecAccess().getEndKeyword_2());
    }
(	otherlv_23='exec' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getExecAccess().getExecKeyword_3());
    }
)?)
;





// Entry rule entryRuleExecCase
entryRuleExecCase returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExecCaseRule()); }
	 iv_ruleExecCase=ruleExecCase 
	 { $current=$iv_ruleExecCase.current; } 
	 EOF 
;

// Rule ExecCase
ruleExecCase returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExecCaseAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExecCaseRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='case' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExecCaseAccess().getCaseKeyword_1());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getExecCaseRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getExecCaseAccess().getTaskTaskCrossReference_2_0()); 
	}

)
)	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getExecCaseAccess().getLeftParenthesisKeyword_3());
    }
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getExecCaseRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getExecCaseAccess().getVarsIVariableCrossReference_4_0_0()); 
	}

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getExecCaseAccess().getCommaKeyword_4_1_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getExecCaseRule());
	        }
        }
	otherlv_6=RULE_ID
	{
		newLeafNode(otherlv_6, grammarAccess.getExecCaseAccess().getVarsIVariableCrossReference_4_1_1_0()); 
	}

)
))*)?	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getExecCaseAccess().getRightParenthesisKeyword_5());
    }
	otherlv_8='(' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getExecCaseAccess().getLeftParenthesisKeyword_6());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getExecCaseAccess().getKexpressionsExpressionParserRuleCall_7_0_0()); 
	    }
		lv_kexpressions_9_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExecCaseRule());
	        }
       		add(
       			$current, 
       			"kexpressions",
        		lv_kexpressions_9_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_10=',' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getExecCaseAccess().getCommaKeyword_7_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExecCaseAccess().getKexpressionsExpressionParserRuleCall_7_1_1_0()); 
	    }
		lv_kexpressions_11_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExecCaseRule());
	        }
       		add(
       			$current, 
       			"kexpressions",
        		lv_kexpressions_11_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_12=')' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getExecCaseAccess().getRightParenthesisKeyword_8());
    }
	otherlv_13='return' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getExecCaseAccess().getReturnKeyword_9());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getExecCaseRule());
	        }
        }
	otherlv_14=RULE_ID
	{
		newLeafNode(otherlv_14, grammarAccess.getExecCaseAccess().getRetSignalISignalCrossReference_10_0()); 
	}

)
)(	otherlv_15='do' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getExecCaseAccess().getDoKeyword_11_0());
    }
((((
(
		{ 
	        newCompositeNode(grammarAccess.getExecCaseAccess().getStatementsSCEstStatementParserRuleCall_11_1_0_0_0_0()); 
	    }
		lv_statements_16_0=ruleSCEstStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExecCaseRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_16_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.SCEstStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_17=';' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getExecCaseAccess().getSemicolonKeyword_11_1_0_0_1());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getExecCaseAccess().getStatementsMetaStatementParserRuleCall_11_1_0_1_0()); 
	    }
		lv_statements_18_0=ruleMetaStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExecCaseRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_18_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.MetaStatement");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getExecCaseAccess().getStatementsSCEstStatementParserRuleCall_11_1_1_0()); 
	    }
		lv_statements_19_0=ruleSCEstStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExecCaseRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_19_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.SCEstStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)?))?)
;





// Entry rule entryRuleLocalSignalDecl
entryRuleLocalSignalDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLocalSignalDeclRule()); }
	 iv_ruleLocalSignalDecl=ruleLocalSignalDecl 
	 { $current=$iv_ruleLocalSignalDecl.current; } 
	 EOF 
;

// Rule LocalSignalDecl
ruleLocalSignalDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLocalSignalDeclAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalSignalDeclRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='signal' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLocalSignalDeclAccess().getSignalKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLocalSignalDeclAccess().getSignalsISignalParserRuleCall_2_0()); 
	    }
		lv_signals_2_0=ruleISignal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalSignalDeclRule());
	        }
       		add(
       			$current, 
       			"signals",
        		lv_signals_2_0, 
        		"de.cau.cs.kieler.esterel.Esterel.ISignal");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getLocalSignalDeclAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLocalSignalDeclAccess().getSignalsISignalParserRuleCall_3_1_0()); 
	    }
		lv_signals_4_0=ruleISignal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalSignalDeclRule());
	        }
       		add(
       			$current, 
       			"signals",
        		lv_signals_4_0, 
        		"de.cau.cs.kieler.esterel.Esterel.ISignal");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5='in' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getLocalSignalDeclAccess().getInKeyword_4());
    }
((((
(
		{ 
	        newCompositeNode(grammarAccess.getLocalSignalDeclAccess().getStatementsSCEstStatementParserRuleCall_5_0_0_0_0()); 
	    }
		lv_statements_6_0=ruleSCEstStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalSignalDeclRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_6_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.SCEstStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=';' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getLocalSignalDeclAccess().getSemicolonKeyword_5_0_0_1());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getLocalSignalDeclAccess().getStatementsMetaStatementParserRuleCall_5_0_1_0()); 
	    }
		lv_statements_8_0=ruleMetaStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalSignalDeclRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_8_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.MetaStatement");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getLocalSignalDeclAccess().getStatementsSCEstStatementParserRuleCall_5_1_0()); 
	    }
		lv_statements_9_0=ruleSCEstStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalSignalDeclRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_9_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.SCEstStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)?)	otherlv_10='end' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getLocalSignalDeclAccess().getEndKeyword_6());
    }
(	otherlv_11='signal' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getLocalSignalDeclAccess().getSignalKeyword_7());
    }
)?)
;





// Entry rule entryRuleLocalVariable
entryRuleLocalVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLocalVariableRule()); }
	 iv_ruleLocalVariable=ruleLocalVariable 
	 { $current=$iv_ruleLocalVariable.current; } 
	 EOF 
;

// Rule LocalVariable
ruleLocalVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLocalVariableAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalVariableRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='var' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLocalVariableAccess().getVarKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLocalVariableAccess().getVarDeclsVariableDeclParserRuleCall_2_0()); 
	    }
		lv_varDecls_2_0=ruleVariableDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalVariableRule());
	        }
       		add(
       			$current, 
       			"varDecls",
        		lv_varDecls_2_0, 
        		"de.cau.cs.kieler.esterel.Esterel.VariableDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getLocalVariableAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLocalVariableAccess().getVarDeclsVariableDeclParserRuleCall_3_1_0()); 
	    }
		lv_varDecls_4_0=ruleVariableDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalVariableRule());
	        }
       		add(
       			$current, 
       			"varDecls",
        		lv_varDecls_4_0, 
        		"de.cau.cs.kieler.esterel.Esterel.VariableDecl");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5='in' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getLocalVariableAccess().getInKeyword_4());
    }
((((
(
		{ 
	        newCompositeNode(grammarAccess.getLocalVariableAccess().getStatementsSCEstStatementParserRuleCall_5_0_0_0_0()); 
	    }
		lv_statements_6_0=ruleSCEstStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalVariableRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_6_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.SCEstStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=';' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getLocalVariableAccess().getSemicolonKeyword_5_0_0_1());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getLocalVariableAccess().getStatementsMetaStatementParserRuleCall_5_0_1_0()); 
	    }
		lv_statements_8_0=ruleMetaStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalVariableRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_8_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.MetaStatement");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getLocalVariableAccess().getStatementsSCEstStatementParserRuleCall_5_1_0()); 
	    }
		lv_statements_9_0=ruleSCEstStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalVariableRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_9_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.SCEstStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)?)	otherlv_10='end' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getLocalVariableAccess().getEndKeyword_6());
    }
(	otherlv_11='var' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getLocalVariableAccess().getVarKeyword_7());
    }
)?)
;





// Entry rule entryRuleDo
entryRuleDo returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDoRule()); }
	 iv_ruleDo=ruleDo 
	 { $current=$iv_ruleDo.current; } 
	 EOF 
;

// Rule Do
ruleDo returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDoAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDoRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='do' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDoAccess().getDoKeyword_1());
    }
((((
(
		{ 
	        newCompositeNode(grammarAccess.getDoAccess().getStatementsSCEstStatementParserRuleCall_2_0_0_0_0()); 
	    }
		lv_statements_2_0=ruleSCEstStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDoRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_2_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.SCEstStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDoAccess().getSemicolonKeyword_2_0_0_1());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getDoAccess().getStatementsMetaStatementParserRuleCall_2_0_1_0()); 
	    }
		lv_statements_4_0=ruleMetaStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDoRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_4_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.MetaStatement");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getDoAccess().getStatementsSCEstStatementParserRuleCall_2_1_0()); 
	    }
		lv_statements_5_0=ruleSCEstStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDoRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_5_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.SCEstStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)?)(((
(
		{ 
	        newCompositeNode(grammarAccess.getDoAccess().getEndingAnnotationsAnnotationParserRuleCall_3_0_0_0()); 
	    }
		lv_endingAnnotations_6_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDoRule());
	        }
       		add(
       			$current, 
       			"endingAnnotations",
        		lv_endingAnnotations_6_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_7='upto' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getDoAccess().getUptoKeyword_3_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDoAccess().getExprDelayExprParserRuleCall_3_0_2_0()); 
	    }
		lv_expr_8_0=ruleDelayExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDoRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_8_0, 
        		"de.cau.cs.kieler.esterel.Esterel.DelayExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getDoAccess().getEndingAnnotationsAnnotationParserRuleCall_3_1_0_0()); 
	    }
		lv_endingAnnotations_9_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDoRule());
	        }
       		add(
       			$current, 
       			"endingAnnotations",
        		lv_endingAnnotations_9_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_10='watching' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getDoAccess().getWatchingKeyword_3_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDoAccess().getDelayDelayExprParserRuleCall_3_1_2_0()); 
	    }
		lv_delay_11_0=ruleDelayExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDoRule());
	        }
       		set(
       			$current, 
       			"delay",
        		lv_delay_11_0, 
        		"de.cau.cs.kieler.esterel.Esterel.DelayExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_12='timeout' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getDoAccess().getTimeoutKeyword_3_1_3_0());
    }
((((
(
		{ 
	        newCompositeNode(grammarAccess.getDoAccess().getWatchingStatementsSCEstStatementParserRuleCall_3_1_3_1_0_0_0_0()); 
	    }
		lv_watchingStatements_13_0=ruleSCEstStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDoRule());
	        }
       		add(
       			$current, 
       			"watchingStatements",
        		lv_watchingStatements_13_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.SCEstStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_14=';' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getDoAccess().getSemicolonKeyword_3_1_3_1_0_0_1());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getDoAccess().getWatchingStatementsMetaStatementParserRuleCall_3_1_3_1_0_1_0()); 
	    }
		lv_watchingStatements_15_0=ruleMetaStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDoRule());
	        }
       		add(
       			$current, 
       			"watchingStatements",
        		lv_watchingStatements_15_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.MetaStatement");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getDoAccess().getWatchingStatementsSCEstStatementParserRuleCall_3_1_3_1_1_0()); 
	    }
		lv_watchingStatements_16_0=ruleSCEstStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDoRule());
	        }
       		add(
       			$current, 
       			"watchingStatements",
        		lv_watchingStatements_16_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.SCEstStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)?)	otherlv_17='end' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getDoAccess().getEndKeyword_3_1_3_2());
    }
(	otherlv_18='timeout' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getDoAccess().getTimeoutKeyword_3_1_3_3());
    }
)?)?)))
;





// Entry rule entryRuleUnEmit
entryRuleUnEmit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnEmitRule()); }
	 iv_ruleUnEmit=ruleUnEmit 
	 { $current=$iv_ruleUnEmit.current; } 
	 EOF 
;

// Rule UnEmit
ruleUnEmit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getUnEmitAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnEmitRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='unemit' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getUnEmitAccess().getUnemitKeyword_1());
    }
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnEmitRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getUnEmitAccess().getSignalISignalCrossReference_2_0_0()); 
	}

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getUnEmitAccess().getTickTickParserRuleCall_2_1_0()); 
	    }
		lv_tick_3_0=ruleTick		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnEmitRule());
	        }
       		set(
       			$current, 
       			"tick",
        		lv_tick_3_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Tick");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleSet
entryRuleSet returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSetRule()); }
	 iv_ruleSet=ruleSet 
	 { $current=$iv_ruleSet.current; } 
	 EOF 
;

// Rule Set
ruleSet returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSetAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSetRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='set' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSetAccess().getSetKeyword_1());
    }
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSetRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getSetAccess().getSignalISignalCrossReference_2_0_0()); 
	}

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getSetAccess().getTickTickParserRuleCall_2_1_0()); 
	    }
		lv_tick_3_0=ruleTick		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSetRule());
	        }
       		set(
       			$current, 
       			"tick",
        		lv_tick_3_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Tick");
	        afterParserOrEnumRuleCall();
	    }

)
))(	otherlv_4='(' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSetAccess().getLeftParenthesisKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSetAccess().getExprExpressionParserRuleCall_3_1_0()); 
	    }
		lv_expr_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSetRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_5_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSetAccess().getRightParenthesisKeyword_3_2());
    }
))
;





// Entry rule entryRuleConditional
entryRuleConditional returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionalRule()); }
	 iv_ruleConditional=ruleConditional 
	 { $current=$iv_ruleConditional.current; } 
	 EOF 
;

// Rule Conditional
ruleConditional returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='if' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConditionalAccess().getIfKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalAccess().getExpressionExpressionParserRuleCall_2_0()); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_3='then' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getConditionalAccess().getThenKeyword_3_0());
    }
)?	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getConditionalAccess().getLeftCurlyBracketKeyword_3_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalAccess().getDeclarationsDeclarationParserRuleCall_3_2_0()); 
	    }
		lv_declarations_5_0=ruleDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalRule());
	        }
       		add(
       			$current, 
       			"declarations",
        		lv_declarations_5_0, 
        		"de.cau.cs.kieler.kexpressions.kext.KExt.Declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*((((
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalAccess().getStatementsSCEstStatementParserRuleCall_3_3_0_0_0_0()); 
	    }
		lv_statements_6_0=ruleSCEstStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_6_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.SCEstStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=';' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getConditionalAccess().getSemicolonKeyword_3_3_0_0_1());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalAccess().getStatementsMetaStatementParserRuleCall_3_3_0_1_0()); 
	    }
		lv_statements_8_0=ruleMetaStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_8_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.MetaStatement");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalAccess().getStatementsSCEstStatementParserRuleCall_3_3_1_0()); 
	    }
		lv_statements_9_0=ruleSCEstStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_9_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.SCEstStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)?)	otherlv_10='}' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getConditionalAccess().getRightCurlyBracketKeyword_3_4());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalAccess().getElseElseScopeParserRuleCall_4_0()); 
	    }
		lv_else_11_0=ruleElseScope		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalRule());
	        }
       		set(
       			$current, 
       			"else",
        		lv_else_11_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.ElseScope");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleElseScope
entryRuleElseScope returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElseScopeRule()); }
	 iv_ruleElseScope=ruleElseScope 
	 { $current=$iv_ruleElseScope.current; } 
	 EOF 
;

// Rule ElseScope
ruleElseScope returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getElseScopeAccess().getElseScopeAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getElseScopeAccess().getAnnotationsAnnotationParserRuleCall_1_0()); 
	    }
		lv_annotations_1_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElseScopeRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_1_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_2='else' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getElseScopeAccess().getElseKeyword_2());
    }
	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getElseScopeAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getElseScopeAccess().getDeclarationsDeclarationParserRuleCall_4_0()); 
	    }
		lv_declarations_4_0=ruleDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElseScopeRule());
	        }
       		add(
       			$current, 
       			"declarations",
        		lv_declarations_4_0, 
        		"de.cau.cs.kieler.kexpressions.kext.KExt.Declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*((((
(
		{ 
	        newCompositeNode(grammarAccess.getElseScopeAccess().getStatementsSCEstStatementParserRuleCall_5_0_0_0_0()); 
	    }
		lv_statements_5_0=ruleSCEstStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElseScopeRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_5_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.SCEstStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getElseScopeAccess().getSemicolonKeyword_5_0_0_1());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getElseScopeAccess().getStatementsMetaStatementParserRuleCall_5_0_1_0()); 
	    }
		lv_statements_7_0=ruleMetaStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElseScopeRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_7_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.MetaStatement");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getElseScopeAccess().getStatementsSCEstStatementParserRuleCall_5_1_0()); 
	    }
		lv_statements_8_0=ruleSCEstStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElseScopeRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_8_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.SCEstStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)?)	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getElseScopeAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleMetaStatement
entryRuleMetaStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMetaStatementRule()); }
	 iv_ruleMetaStatement=ruleMetaStatement 
	 { $current=$iv_ruleMetaStatement.current; } 
	 EOF 
;

// Rule MetaStatement
ruleMetaStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getMetaStatementAccess().getLabelParserRuleCall_0()); 
    }
    this_Label_0=ruleLabel
    { 
        $current = $this_Label_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getMetaStatementAccess().getScopeStatementParserRuleCall_1()); 
    }
    this_ScopeStatement_1=ruleScopeStatement
    { 
        $current = $this_ScopeStatement_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleThread
entryRuleThread returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getThreadRule()); }
	 iv_ruleThread=ruleThread 
	 { $current=$iv_ruleThread.current; } 
	 EOF 
;

// Rule Thread
ruleThread returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getThreadAccess().getThreadAction_0(),
            $current);
    }
)(((
(
		{ 
	        newCompositeNode(grammarAccess.getThreadAccess().getAnnotationsAnnotationParserRuleCall_1_0_0_0()); 
	    }
		lv_annotations_1_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getThreadRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_1_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getThreadAccess().getLeftCurlyBracketKeyword_1_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getThreadAccess().getDeclarationsDeclarationParserRuleCall_1_0_2_0()); 
	    }
		lv_declarations_3_0=ruleDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getThreadRule());
	        }
       		add(
       			$current, 
       			"declarations",
        		lv_declarations_3_0, 
        		"de.cau.cs.kieler.kexpressions.kext.KExt.Declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*((((
(
		{ 
	        newCompositeNode(grammarAccess.getThreadAccess().getStatementsSCEstStatementParserRuleCall_1_0_3_0_0_0_0()); 
	    }
		lv_statements_4_0=ruleSCEstStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getThreadRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_4_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.SCEstStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getThreadAccess().getSemicolonKeyword_1_0_3_0_0_1());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getThreadAccess().getStatementsMetaStatementParserRuleCall_1_0_3_0_1_0()); 
	    }
		lv_statements_6_0=ruleMetaStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getThreadRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_6_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.MetaStatement");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getThreadAccess().getStatementsSCEstStatementParserRuleCall_1_0_3_1_0()); 
	    }
		lv_statements_7_0=ruleSCEstStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getThreadRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_7_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.SCEstStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)?)	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getThreadAccess().getRightCurlyBracketKeyword_1_0_4());
    }
)
    |((((
(
		{ 
	        newCompositeNode(grammarAccess.getThreadAccess().getStatementsSCEstStatementParserRuleCall_1_1_0_0_0_0()); 
	    }
		lv_statements_9_0=ruleSCEstStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getThreadRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_9_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.SCEstStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_10=';' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getThreadAccess().getSemicolonKeyword_1_1_0_0_1());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getThreadAccess().getStatementsMetaStatementParserRuleCall_1_1_0_1_0()); 
	    }
		lv_statements_11_0=ruleMetaStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getThreadRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_11_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.MetaStatement");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getThreadAccess().getStatementsSCEstStatementParserRuleCall_1_1_1_0()); 
	    }
		lv_statements_12_0=ruleSCEstStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getThreadRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_12_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.SCEstStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)?)))
;





// Entry rule entryRuleParallel
entryRuleParallel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParallelRule()); }
	 iv_ruleParallel=ruleParallel 
	 { $current=$iv_ruleParallel.current; } 
	 EOF 
;

// Rule Parallel
ruleParallel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getParallelAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParallelRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='fork' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParallelAccess().getForkKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getParallelAccess().getThreadsThreadParserRuleCall_2_0_0()); 
	    }
		lv_threads_2_0=ruleThread		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParallelRule());
	        }
       		add(
       			$current, 
       			"threads",
        		lv_threads_2_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.Thread");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='par' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getParallelAccess().getParKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParallelAccess().getThreadsThreadParserRuleCall_2_1_1_0()); 
	    }
		lv_threads_4_0=ruleThread		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParallelRule());
	        }
       		add(
       			$current, 
       			"threads",
        		lv_threads_4_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.Thread");
	        afterParserOrEnumRuleCall();
	    }

)
))*)	otherlv_5='join' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getParallelAccess().getJoinKeyword_3());
    }
)
;





// Entry rule entryRuleScopeStatement
entryRuleScopeStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getScopeStatementRule()); }
	 iv_ruleScopeStatement=ruleScopeStatement 
	 { $current=$iv_ruleScopeStatement.current; } 
	 EOF 
;

// Rule ScopeStatement
ruleScopeStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getScopeStatementAccess().getScopeStatementAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getScopeStatementAccess().getAnnotationsAnnotationParserRuleCall_1_0()); 
	    }
		lv_annotations_1_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScopeStatementRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_1_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getScopeStatementAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getScopeStatementAccess().getDeclarationsDeclarationParserRuleCall_3_0()); 
	    }
		lv_declarations_3_0=ruleDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScopeStatementRule());
	        }
       		add(
       			$current, 
       			"declarations",
        		lv_declarations_3_0, 
        		"de.cau.cs.kieler.kexpressions.kext.KExt.Declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*((((
(
		{ 
	        newCompositeNode(grammarAccess.getScopeStatementAccess().getStatementsSCEstStatementParserRuleCall_4_0_0_0_0()); 
	    }
		lv_statements_4_0=ruleSCEstStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScopeStatementRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_4_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.SCEstStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getScopeStatementAccess().getSemicolonKeyword_4_0_0_1());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getScopeStatementAccess().getStatementsMetaStatementParserRuleCall_4_0_1_0()); 
	    }
		lv_statements_6_0=ruleMetaStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScopeStatementRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_6_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.MetaStatement");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getScopeStatementAccess().getStatementsSCEstStatementParserRuleCall_4_1_0()); 
	    }
		lv_statements_7_0=ruleSCEstStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScopeStatementRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_7_0, 
        		"de.cau.cs.kieler.esterel.scest.SCEst.SCEstStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)?)	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getScopeStatementAccess().getRightCurlyBracketKeyword_5());
    }
)
;







// Entry rule entryRuleModule
entryRuleModule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModuleRule()); }
	 iv_ruleModule=ruleModule 
	 { $current=$iv_ruleModule.current; } 
	 EOF 
;

// Rule Module
ruleModule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='module' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getModuleAccess().getModuleKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getModuleAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getModuleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getModuleAccess().getColonKeyword_3());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getIntSignalDeclsInterfaceSignalDeclParserRuleCall_4_0_0()); 
	    }
		lv_intSignalDecls_4_0=ruleInterfaceSignalDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleRule());
	        }
       		add(
       			$current, 
       			"intSignalDecls",
        		lv_intSignalDecls_4_0, 
        		"de.cau.cs.kieler.esterel.Esterel.InterfaceSignalDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getIntTypeDeclsTypeDeclParserRuleCall_4_1_0()); 
	    }
		lv_intTypeDecls_5_0=ruleTypeDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleRule());
	        }
       		add(
       			$current, 
       			"intTypeDecls",
        		lv_intTypeDecls_5_0, 
        		"de.cau.cs.kieler.esterel.Esterel.TypeDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getIntSensorDeclsSensorDeclParserRuleCall_4_2_0()); 
	    }
		lv_intSensorDecls_6_0=ruleSensorDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleRule());
	        }
       		add(
       			$current, 
       			"intSensorDecls",
        		lv_intSensorDecls_6_0, 
        		"de.cau.cs.kieler.esterel.Esterel.SensorDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getIntConstantDeclsConstantDeclsParserRuleCall_4_3_0()); 
	    }
		lv_intConstantDecls_7_0=ruleConstantDecls		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleRule());
	        }
       		add(
       			$current, 
       			"intConstantDecls",
        		lv_intConstantDecls_7_0, 
        		"de.cau.cs.kieler.esterel.Esterel.ConstantDecls");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getIntRelationDeclsRelationDeclParserRuleCall_4_4_0()); 
	    }
		lv_intRelationDecls_8_0=ruleRelationDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleRule());
	        }
       		add(
       			$current, 
       			"intRelationDecls",
        		lv_intRelationDecls_8_0, 
        		"de.cau.cs.kieler.esterel.Esterel.RelationDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getIntTaskDeclsTaskDeclParserRuleCall_4_5_0()); 
	    }
		lv_intTaskDecls_9_0=ruleTaskDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleRule());
	        }
       		add(
       			$current, 
       			"intTaskDecls",
        		lv_intTaskDecls_9_0, 
        		"de.cau.cs.kieler.esterel.Esterel.TaskDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getIntFunctionDeclsFunctionDeclParserRuleCall_4_6_0()); 
	    }
		lv_intFunctionDecls_10_0=ruleFunctionDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleRule());
	        }
       		add(
       			$current, 
       			"intFunctionDecls",
        		lv_intFunctionDecls_10_0, 
        		"de.cau.cs.kieler.esterel.Esterel.FunctionDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getIntProcedureDeclsProcedureDeclParserRuleCall_4_7_0()); 
	    }
		lv_intProcedureDecls_11_0=ruleProcedureDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleRule());
	        }
       		add(
       			$current, 
       			"intProcedureDecls",
        		lv_intProcedureDecls_11_0, 
        		"de.cau.cs.kieler.esterel.Esterel.ProcedureDecl");
	        afterParserOrEnumRuleCall();
	    }

)
))*(((
(
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getStatementsEsterelStatementParserRuleCall_5_0_0_0()); 
	    }
		lv_statements_12_0=ruleEsterelStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_12_0, 
        		"de.cau.cs.kieler.esterel.Esterel.EsterelStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_13=';' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getModuleAccess().getSemicolonKeyword_5_0_1());
    }
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getStatementsEsterelStatementParserRuleCall_5_1_0()); 
	    }
		lv_statements_14_0=ruleEsterelStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_14_0, 
        		"de.cau.cs.kieler.esterel.Esterel.EsterelStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)?)((	otherlv_15='end' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getModuleAccess().getEndKeyword_6_0_0());
    }
	otherlv_16='module' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getModuleAccess().getModuleKeyword_6_0_1());
    }
)
    |	otherlv_17='.' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getModuleAccess().getFullStopKeyword_6_1());
    }
))
;





// Entry rule entryRuleTypeIdentifier
entryRuleTypeIdentifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeIdentifierRule()); }
	 iv_ruleTypeIdentifier=ruleTypeIdentifier 
	 { $current=$iv_ruleTypeIdentifier.current; } 
	 EOF 
;

// Rule TypeIdentifier
ruleTypeIdentifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTypeIdentifierAccess().getTypeEsterel_ValueTypeEnumRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleEsterel_ValueType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeIdentifierRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Esterel_ValueType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_typeID_1_0=RULE_ID
		{
			newLeafNode(lv_typeID_1_0, grammarAccess.getTypeIdentifierAccess().getTypeIDIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeIdentifierRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"typeID",
        		lv_typeID_1_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)
    |(	otherlv_2='combine' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTypeIdentifierAccess().getCombineKeyword_2_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getTypeIdentifierAccess().getTypeEsterel_ValueTypeEnumRuleCall_2_1_0_0()); 
	    }
		lv_type_3_0=ruleEsterel_ValueType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeIdentifierRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Esterel_ValueType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_typeID_4_0=RULE_ID
		{
			newLeafNode(lv_typeID_4_0, grammarAccess.getTypeIdentifierAccess().getTypeIDIDTerminalRuleCall_2_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeIdentifierRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"typeID",
        		lv_typeID_4_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
))	otherlv_5='with' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTypeIdentifierAccess().getWithKeyword_2_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeIdentifierAccess().getOperatorEsterel_CombineOperatorEnumRuleCall_2_3_0()); 
	    }
		lv_operator_6_0=ruleEsterel_CombineOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeIdentifierRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_6_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Esterel_CombineOperator");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getTypeIdentifierAccess().getEsterelTypeAction_3_0(),
            $current);
    }
)(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeIdentifierRule());
	        }
        }
	otherlv_8=RULE_ID
	{
		newLeafNode(otherlv_8, grammarAccess.getTypeIdentifierAccess().getEstTypeTypeCrossReference_3_1_0()); 
	}

)
)))
;





// Entry rule entryRuleTypeDecl
entryRuleTypeDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeDeclRule()); }
	 iv_ruleTypeDecl=ruleTypeDecl 
	 { $current=$iv_ruleTypeDecl.current; } 
	 EOF 
;

// Rule TypeDecl
ruleTypeDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTypeDeclAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeDeclRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='type' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTypeDeclAccess().getTypeKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeDeclAccess().getTypesTypeParserRuleCall_2_0()); 
	    }
		lv_types_2_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeDeclRule());
	        }
       		add(
       			$current, 
       			"types",
        		lv_types_2_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTypeDeclAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeDeclAccess().getTypesTypeParserRuleCall_3_1_0()); 
	    }
		lv_types_4_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeDeclRule());
	        }
       		add(
       			$current, 
       			"types",
        		lv_types_4_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Type");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTypeDeclAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleType
entryRuleType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getTypeAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)
;





// Entry rule entryRuleConstantDecls
entryRuleConstantDecls returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantDeclsRule()); }
	 iv_ruleConstantDecls=ruleConstantDecls 
	 { $current=$iv_ruleConstantDecls.current; } 
	 EOF 
;

// Rule ConstantDecls
ruleConstantDecls returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getConstantDeclsAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantDeclsRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='constant' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConstantDeclsAccess().getConstantKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstantDeclsAccess().getConstantsOneTypeConstantDeclsParserRuleCall_2_0()); 
	    }
		lv_constants_2_0=ruleOneTypeConstantDecls		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantDeclsRule());
	        }
       		add(
       			$current, 
       			"constants",
        		lv_constants_2_0, 
        		"de.cau.cs.kieler.esterel.Esterel.OneTypeConstantDecls");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getConstantDeclsAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstantDeclsAccess().getConstantsOneTypeConstantDeclsParserRuleCall_3_1_0()); 
	    }
		lv_constants_4_0=ruleOneTypeConstantDecls		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantDeclsRule());
	        }
       		add(
       			$current, 
       			"constants",
        		lv_constants_4_0, 
        		"de.cau.cs.kieler.esterel.Esterel.OneTypeConstantDecls");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getConstantDeclsAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleOneTypeConstantDecls
entryRuleOneTypeConstantDecls returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOneTypeConstantDeclsRule()); }
	 iv_ruleOneTypeConstantDecls=ruleOneTypeConstantDecls 
	 { $current=$iv_ruleOneTypeConstantDecls.current; } 
	 EOF 
;

// Rule OneTypeConstantDecls
ruleOneTypeConstantDecls returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getOneTypeConstantDeclsAccess().getConstantsConstantParserRuleCall_0_0()); 
	    }
		lv_constants_0_0=ruleConstant		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOneTypeConstantDeclsRule());
	        }
       		add(
       			$current, 
       			"constants",
        		lv_constants_0_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Constant");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOneTypeConstantDeclsAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOneTypeConstantDeclsAccess().getConstantsConstantParserRuleCall_1_1_0()); 
	    }
		lv_constants_2_0=ruleConstant		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOneTypeConstantDeclsRule());
	        }
       		add(
       			$current, 
       			"constants",
        		lv_constants_2_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Constant");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getOneTypeConstantDeclsAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOneTypeConstantDeclsAccess().getTypeTypeIdentifierParserRuleCall_3_0()); 
	    }
		lv_type_4_0=ruleTypeIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOneTypeConstantDeclsRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_4_0, 
        		"de.cau.cs.kieler.esterel.Esterel.TypeIdentifier");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleConstant
entryRuleConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantRule()); }
	 iv_ruleConstant=ruleConstant 
	 { $current=$iv_ruleConstant.current; } 
	 EOF 
;

// Rule Constant
ruleConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getConstantAccess().getConstantAction_0(),
            $current);
    }
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getConstantAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)(	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getConstantAccess().getEqualsSignKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstantAccess().getValueConstantValueParserRuleCall_2_1_0()); 
	    }
		lv_value_3_0=ruleConstantValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"de.cau.cs.kieler.esterel.Esterel.ConstantValue");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleConstantValue
entryRuleConstantValue returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantValueRule()); } 
	 iv_ruleConstantValue=ruleConstantValue 
	 { $current=$iv_ruleConstantValue.current.getText(); }  
	 EOF 
;

// Rule ConstantValue
ruleConstantValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getConstantValueAccess().getINTTerminalRuleCall_0()); 
    }

    |    this_FLOAT_1=RULE_FLOAT    {
		$current.merge(this_FLOAT_1);
    }

    { 
    newLeafNode(this_FLOAT_1, grammarAccess.getConstantValueAccess().getFLOATTerminalRuleCall_1()); 
    }

    |    this_BOOLEAN_2=RULE_BOOLEAN    {
		$current.merge(this_BOOLEAN_2);
    }

    { 
    newLeafNode(this_BOOLEAN_2, grammarAccess.getConstantValueAccess().getBOOLEANTerminalRuleCall_2()); 
    }

    |    this_ID_3=RULE_ID    {
		$current.merge(this_ID_3);
    }

    { 
    newLeafNode(this_ID_3, grammarAccess.getConstantValueAccess().getIDTerminalRuleCall_3()); 
    }

    |    this_STRING_4=RULE_STRING    {
		$current.merge(this_STRING_4);
    }

    { 
    newLeafNode(this_STRING_4, grammarAccess.getConstantValueAccess().getSTRINGTerminalRuleCall_4()); 
    }
)
    ;





// Entry rule entryRuleFunctionDecl
entryRuleFunctionDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionDeclRule()); }
	 iv_ruleFunctionDecl=ruleFunctionDecl 
	 { $current=$iv_ruleFunctionDecl.current; } 
	 EOF 
;

// Rule FunctionDecl
ruleFunctionDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='function' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFunctionDeclAccess().getFunctionKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclAccess().getFunctionsFunctionParserRuleCall_2_0()); 
	    }
		lv_functions_2_0=ruleFunction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclRule());
	        }
       		add(
       			$current, 
       			"functions",
        		lv_functions_2_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Function");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFunctionDeclAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclAccess().getFunctionsFunctionParserRuleCall_3_1_0()); 
	    }
		lv_functions_4_0=ruleFunction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclRule());
	        }
       		add(
       			$current, 
       			"functions",
        		lv_functions_4_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Function");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFunctionDeclAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleFunction
entryRuleFunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionRule()); }
	 iv_ruleFunction=ruleFunction 
	 { $current=$iv_ruleFunction.current; } 
	 EOF 
;

// Rule Function
ruleFunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionAccess().getIdListTypeIdentifierParserRuleCall_2_0_0()); 
	    }
		lv_idList_2_0=ruleTypeIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionRule());
	        }
       		add(
       			$current, 
       			"idList",
        		lv_idList_2_0, 
        		"de.cau.cs.kieler.esterel.Esterel.TypeIdentifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFunctionAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionAccess().getIdListTypeIdentifierParserRuleCall_2_1_1_0()); 
	    }
		lv_idList_4_0=ruleTypeIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionRule());
	        }
       		add(
       			$current, 
       			"idList",
        		lv_idList_4_0, 
        		"de.cau.cs.kieler.esterel.Esterel.TypeIdentifier");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFunctionAccess().getRightParenthesisKeyword_3());
    }
	otherlv_6=':' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFunctionAccess().getColonKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionAccess().getTypeTypeIdentifierParserRuleCall_5_0()); 
	    }
		lv_type_7_0=ruleTypeIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_7_0, 
        		"de.cau.cs.kieler.esterel.Esterel.TypeIdentifier");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleProcedureDecl
entryRuleProcedureDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProcedureDeclRule()); }
	 iv_ruleProcedureDecl=ruleProcedureDecl 
	 { $current=$iv_ruleProcedureDecl.current; } 
	 EOF 
;

// Rule ProcedureDecl
ruleProcedureDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getProcedureDeclAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcedureDeclRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='procedure' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getProcedureDeclAccess().getProcedureKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProcedureDeclAccess().getProceduresProcedureParserRuleCall_2_0()); 
	    }
		lv_procedures_2_0=ruleProcedure		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcedureDeclRule());
	        }
       		add(
       			$current, 
       			"procedures",
        		lv_procedures_2_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Procedure");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getProcedureDeclAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProcedureDeclAccess().getProceduresProcedureParserRuleCall_3_1_0()); 
	    }
		lv_procedures_4_0=ruleProcedure		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcedureDeclRule());
	        }
       		add(
       			$current, 
       			"procedures",
        		lv_procedures_4_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Procedure");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getProcedureDeclAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleProcedure
entryRuleProcedure returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProcedureRule()); }
	 iv_ruleProcedure=ruleProcedure 
	 { $current=$iv_ruleProcedure.current; } 
	 EOF 
;

// Rule Procedure
ruleProcedure returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getProcedureAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getProcedureRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getProcedureAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getProcedureAccess().getVariablesTypeIdentifierParserRuleCall_2_0_0()); 
	    }
		lv_variables_2_0=ruleTypeIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcedureRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_2_0, 
        		"de.cau.cs.kieler.esterel.Esterel.TypeIdentifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getProcedureAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProcedureAccess().getVariablesTypeIdentifierParserRuleCall_2_1_1_0()); 
	    }
		lv_variables_4_0=ruleTypeIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcedureRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_4_0, 
        		"de.cau.cs.kieler.esterel.Esterel.TypeIdentifier");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getProcedureAccess().getRightParenthesisKeyword_3());
    }
	otherlv_6='(' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getProcedureAccess().getLeftParenthesisKeyword_4());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getProcedureAccess().getExpressionsTypeIdentifierParserRuleCall_5_0_0()); 
	    }
		lv_expressions_7_0=ruleTypeIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcedureRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_7_0, 
        		"de.cau.cs.kieler.esterel.Esterel.TypeIdentifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_8=',' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getProcedureAccess().getCommaKeyword_5_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProcedureAccess().getExpressionsTypeIdentifierParserRuleCall_5_1_1_0()); 
	    }
		lv_expressions_9_0=ruleTypeIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcedureRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_9_0, 
        		"de.cau.cs.kieler.esterel.Esterel.TypeIdentifier");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_10=')' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getProcedureAccess().getRightParenthesisKeyword_6());
    }
)
;





// Entry rule entryRuleTaskDecl
entryRuleTaskDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTaskDeclRule()); }
	 iv_ruleTaskDecl=ruleTaskDecl 
	 { $current=$iv_ruleTaskDecl.current; } 
	 EOF 
;

// Rule TaskDecl
ruleTaskDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTaskDeclAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTaskDeclRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='task' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTaskDeclAccess().getTaskKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTaskDeclAccess().getTasksTaskParserRuleCall_2_0()); 
	    }
		lv_tasks_2_0=ruleTask		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTaskDeclRule());
	        }
       		add(
       			$current, 
       			"tasks",
        		lv_tasks_2_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Task");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTaskDeclAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTaskDeclAccess().getTasksTaskParserRuleCall_3_1_0()); 
	    }
		lv_tasks_4_0=ruleTask		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTaskDeclRule());
	        }
       		add(
       			$current, 
       			"tasks",
        		lv_tasks_4_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Task");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTaskDeclAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleTask
entryRuleTask returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTaskRule()); }
	 iv_ruleTask=ruleTask 
	 { $current=$iv_ruleTask.current; } 
	 EOF 
;

// Rule Task
ruleTask returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getTaskAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTaskRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTaskAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getTaskAccess().getVariablesTypeIdentifierParserRuleCall_2_0_0()); 
	    }
		lv_variables_2_0=ruleTypeIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTaskRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_2_0, 
        		"de.cau.cs.kieler.esterel.Esterel.TypeIdentifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTaskAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTaskAccess().getVariablesTypeIdentifierParserRuleCall_2_1_1_0()); 
	    }
		lv_variables_4_0=ruleTypeIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTaskRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_4_0, 
        		"de.cau.cs.kieler.esterel.Esterel.TypeIdentifier");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTaskAccess().getRightParenthesisKeyword_3());
    }
	otherlv_6='(' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getTaskAccess().getLeftParenthesisKeyword_4());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getTaskAccess().getExpressionsTypeIdentifierParserRuleCall_5_0_0()); 
	    }
		lv_expressions_7_0=ruleTypeIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTaskRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_7_0, 
        		"de.cau.cs.kieler.esterel.Esterel.TypeIdentifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_8=',' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getTaskAccess().getCommaKeyword_5_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTaskAccess().getExpressionsTypeIdentifierParserRuleCall_5_1_1_0()); 
	    }
		lv_expressions_9_0=ruleTypeIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTaskRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_9_0, 
        		"de.cau.cs.kieler.esterel.Esterel.TypeIdentifier");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_10=')' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getTaskAccess().getRightParenthesisKeyword_6());
    }
)
;





// Entry rule entryRuleInterfaceSignalDecl
entryRuleInterfaceSignalDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterfaceSignalDeclRule()); }
	 iv_ruleInterfaceSignalDecl=ruleInterfaceSignalDecl 
	 { $current=$iv_ruleInterfaceSignalDecl.current; } 
	 EOF 
;

// Rule InterfaceSignalDecl
ruleInterfaceSignalDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getInterfaceSignalDeclAccess().getInputAction_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceSignalDeclAccess().getAnnotationsAnnotationParserRuleCall_0_1_0()); 
	    }
		lv_annotations_1_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceSignalDeclRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_1_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_2='input' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInterfaceSignalDeclAccess().getInputKeyword_0_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceSignalDeclAccess().getSignalsISignalParserRuleCall_0_3_0()); 
	    }
		lv_signals_3_0=ruleISignal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceSignalDeclRule());
	        }
       		add(
       			$current, 
       			"signals",
        		lv_signals_3_0, 
        		"de.cau.cs.kieler.esterel.Esterel.ISignal");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getInterfaceSignalDeclAccess().getCommaKeyword_0_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceSignalDeclAccess().getSignalsISignalParserRuleCall_0_4_1_0()); 
	    }
		lv_signals_5_0=ruleISignal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceSignalDeclRule());
	        }
       		add(
       			$current, 
       			"signals",
        		lv_signals_5_0, 
        		"de.cau.cs.kieler.esterel.Esterel.ISignal");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getInterfaceSignalDeclAccess().getSemicolonKeyword_0_5());
    }
)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getInterfaceSignalDeclAccess().getOutputAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceSignalDeclAccess().getAnnotationsAnnotationParserRuleCall_1_1_0()); 
	    }
		lv_annotations_8_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceSignalDeclRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_8_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_9='output' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getInterfaceSignalDeclAccess().getOutputKeyword_1_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceSignalDeclAccess().getSignalsISignalParserRuleCall_1_3_0()); 
	    }
		lv_signals_10_0=ruleISignal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceSignalDeclRule());
	        }
       		add(
       			$current, 
       			"signals",
        		lv_signals_10_0, 
        		"de.cau.cs.kieler.esterel.Esterel.ISignal");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_11=',' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getInterfaceSignalDeclAccess().getCommaKeyword_1_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceSignalDeclAccess().getSignalsISignalParserRuleCall_1_4_1_0()); 
	    }
		lv_signals_12_0=ruleISignal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceSignalDeclRule());
	        }
       		add(
       			$current, 
       			"signals",
        		lv_signals_12_0, 
        		"de.cau.cs.kieler.esterel.Esterel.ISignal");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_13=';' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getInterfaceSignalDeclAccess().getSemicolonKeyword_1_5());
    }
)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getInterfaceSignalDeclAccess().getInputOutputAction_2_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceSignalDeclAccess().getAnnotationsAnnotationParserRuleCall_2_1_0()); 
	    }
		lv_annotations_15_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceSignalDeclRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_15_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_16='inputoutput' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getInterfaceSignalDeclAccess().getInputoutputKeyword_2_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceSignalDeclAccess().getSignalsISignalParserRuleCall_2_3_0()); 
	    }
		lv_signals_17_0=ruleISignal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceSignalDeclRule());
	        }
       		add(
       			$current, 
       			"signals",
        		lv_signals_17_0, 
        		"de.cau.cs.kieler.esterel.Esterel.ISignal");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_18=',' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getInterfaceSignalDeclAccess().getCommaKeyword_2_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceSignalDeclAccess().getSignalsISignalParserRuleCall_2_4_1_0()); 
	    }
		lv_signals_19_0=ruleISignal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceSignalDeclRule());
	        }
       		add(
       			$current, 
       			"signals",
        		lv_signals_19_0, 
        		"de.cau.cs.kieler.esterel.Esterel.ISignal");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_20=';' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getInterfaceSignalDeclAccess().getSemicolonKeyword_2_5());
    }
)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getInterfaceSignalDeclAccess().getReturnAction_3_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceSignalDeclAccess().getAnnotationsAnnotationParserRuleCall_3_1_0()); 
	    }
		lv_annotations_22_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceSignalDeclRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_22_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_23='return' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getInterfaceSignalDeclAccess().getReturnKeyword_3_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceSignalDeclAccess().getSignalsISignalParserRuleCall_3_3_0()); 
	    }
		lv_signals_24_0=ruleISignal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceSignalDeclRule());
	        }
       		add(
       			$current, 
       			"signals",
        		lv_signals_24_0, 
        		"de.cau.cs.kieler.esterel.Esterel.ISignal");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_25=',' 
    {
    	newLeafNode(otherlv_25, grammarAccess.getInterfaceSignalDeclAccess().getCommaKeyword_3_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceSignalDeclAccess().getSignalsISignalParserRuleCall_3_4_1_0()); 
	    }
		lv_signals_26_0=ruleISignal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceSignalDeclRule());
	        }
       		add(
       			$current, 
       			"signals",
        		lv_signals_26_0, 
        		"de.cau.cs.kieler.esterel.Esterel.ISignal");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_27=';' 
    {
    	newLeafNode(otherlv_27, grammarAccess.getInterfaceSignalDeclAccess().getSemicolonKeyword_3_5());
    }
))
;





// Entry rule entryRuleISignal
entryRuleISignal returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getISignalRule()); }
	 iv_ruleISignal=ruleISignal 
	 { $current=$iv_ruleISignal.current; } 
	 EOF 
;

// Rule ISignal
ruleISignal returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getISignalAccess().getISignalAction_0(),
            $current);
    }
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getISignalAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getISignalRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)(((	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getISignalAccess().getColonKeyword_2_0_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getISignalAccess().getTypeEsterel_ValueTypeEnumRuleCall_2_0_0_1_0()); 
	    }
		lv_type_3_0=ruleEsterel_ValueType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getISignalRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Esterel_ValueType");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		lv_typeID_4_0=RULE_ID
		{
			newLeafNode(lv_typeID_4_0, grammarAccess.getISignalAccess().getTypeIDIDTerminalRuleCall_2_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getISignalRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"typeID",
        		lv_typeID_4_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)
    |(	otherlv_5='combine' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getISignalAccess().getCombineKeyword_2_0_2_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getISignalAccess().getTypeEsterel_ValueTypeEnumRuleCall_2_0_2_1_0_0()); 
	    }
		lv_type_6_0=ruleEsterel_ValueType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getISignalRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_6_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Esterel_ValueType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_typeID_7_0=RULE_ID
		{
			newLeafNode(lv_typeID_7_0, grammarAccess.getISignalAccess().getTypeIDIDTerminalRuleCall_2_0_2_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getISignalRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"typeID",
        		lv_typeID_7_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
))	otherlv_8='with' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getISignalAccess().getWithKeyword_2_0_2_2());
    }
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getISignalRule());
	        }
        }
	otherlv_9=RULE_ID
	{
		newLeafNode(otherlv_9, grammarAccess.getISignalAccess().getFuncFunctionCrossReference_2_0_2_3_0_0()); 
	}

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getISignalAccess().getOperatorEsterel_CombineOperatorEnumRuleCall_2_0_2_3_1_0()); 
	    }
		lv_operator_10_0=ruleEsterel_CombineOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getISignalRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_10_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Esterel_CombineOperator");
	        afterParserOrEnumRuleCall();
	    }

)
))))
    |((	otherlv_11='(' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getISignalAccess().getLeftParenthesisKeyword_2_1_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getISignalAccess().getTypeEsterel_ValueTypeEnumRuleCall_2_1_0_1_0()); 
	    }
		lv_type_12_0=ruleEsterel_ValueType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getISignalRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_12_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Esterel_ValueType");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		lv_typeID_13_0=RULE_ID
		{
			newLeafNode(lv_typeID_13_0, grammarAccess.getISignalAccess().getTypeIDIDTerminalRuleCall_2_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getISignalRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"typeID",
        		lv_typeID_13_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)
    |((	otherlv_14='combine' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getISignalAccess().getCombineKeyword_2_1_2_0_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getISignalAccess().getTypeEsterel_ValueTypeEnumRuleCall_2_1_2_0_1_0_0()); 
	    }
		lv_type_15_0=ruleEsterel_ValueType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getISignalRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_15_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Esterel_ValueType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_typeID_16_0=RULE_ID
		{
			newLeafNode(lv_typeID_16_0, grammarAccess.getISignalAccess().getTypeIDIDTerminalRuleCall_2_1_2_0_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getISignalRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"typeID",
        		lv_typeID_16_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
))	otherlv_17='with' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getISignalAccess().getWithKeyword_2_1_2_0_2());
    }
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getISignalRule());
	        }
        }
	otherlv_18=RULE_ID
	{
		newLeafNode(otherlv_18, grammarAccess.getISignalAccess().getFuncFunctionCrossReference_2_1_2_0_3_0_0()); 
	}

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getISignalAccess().getOperatorEsterel_CombineOperatorEnumRuleCall_2_1_2_0_3_1_0()); 
	    }
		lv_operator_19_0=ruleEsterel_CombineOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getISignalRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_19_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Esterel_CombineOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)))	otherlv_20=')' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getISignalAccess().getRightParenthesisKeyword_2_1_2_1());
    }
))
    |((	otherlv_21=':=' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getISignalAccess().getColonEqualsSignKeyword_2_2_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getISignalAccess().getExpressionExpressionParserRuleCall_2_2_0_1_0()); 
	    }
		lv_expression_22_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getISignalRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_22_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_23=':' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getISignalAccess().getColonKeyword_2_2_0_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getISignalAccess().getTypeEsterel_ValueTypeEnumRuleCall_2_2_0_3_0()); 
	    }
		lv_type_24_0=ruleEsterel_ValueType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getISignalRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_24_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Esterel_ValueType");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		lv_typeID_25_0=RULE_ID
		{
			newLeafNode(lv_typeID_25_0, grammarAccess.getISignalAccess().getTypeIDIDTerminalRuleCall_2_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getISignalRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"typeID",
        		lv_typeID_25_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)
    |(	otherlv_26='combine' 
    {
    	newLeafNode(otherlv_26, grammarAccess.getISignalAccess().getCombineKeyword_2_2_2_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getISignalAccess().getTypeEsterel_ValueTypeEnumRuleCall_2_2_2_1_0_0()); 
	    }
		lv_type_27_0=ruleEsterel_ValueType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getISignalRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_27_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Esterel_ValueType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_typeID_28_0=RULE_ID
		{
			newLeafNode(lv_typeID_28_0, grammarAccess.getISignalAccess().getTypeIDIDTerminalRuleCall_2_2_2_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getISignalRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"typeID",
        		lv_typeID_28_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
))	otherlv_29='with' 
    {
    	newLeafNode(otherlv_29, grammarAccess.getISignalAccess().getWithKeyword_2_2_2_2());
    }
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getISignalRule());
	        }
        }
	otherlv_30=RULE_ID
	{
		newLeafNode(otherlv_30, grammarAccess.getISignalAccess().getFuncFunctionCrossReference_2_2_2_3_0_0()); 
	}

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getISignalAccess().getOperatorEsterel_CombineOperatorEnumRuleCall_2_2_2_3_1_0()); 
	    }
		lv_operator_31_0=ruleEsterel_CombineOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getISignalRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_31_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Esterel_CombineOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)))))?)
;





// Entry rule entryRuleTick
entryRuleTick returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTickRule()); }
	 iv_ruleTick=ruleTick 
	 { $current=$iv_ruleTick.current; } 
	 EOF 
;

// Rule Tick
ruleTick returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=	'tick' 
    {
        newLeafNode(lv_name_0_0, grammarAccess.getTickAccess().getNameTickKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTickRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_0, "tick");
	    }

)
)
;





// Entry rule entryRuleSensorDecl
entryRuleSensorDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSensorDeclRule()); }
	 iv_ruleSensorDecl=ruleSensorDecl 
	 { $current=$iv_ruleSensorDecl.current; } 
	 EOF 
;

// Rule SensorDecl
ruleSensorDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSensorDeclAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSensorDeclRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='sensor' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSensorDeclAccess().getSensorKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSensorDeclAccess().getSensorsSensorWithTypeParserRuleCall_2_0()); 
	    }
		lv_sensors_2_0=ruleSensorWithType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSensorDeclRule());
	        }
       		add(
       			$current, 
       			"sensors",
        		lv_sensors_2_0, 
        		"de.cau.cs.kieler.esterel.Esterel.SensorWithType");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSensorDeclAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSensorDeclAccess().getSensorsSensorWithTypeParserRuleCall_3_1_0()); 
	    }
		lv_sensors_4_0=ruleSensorWithType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSensorDeclRule());
	        }
       		add(
       			$current, 
       			"sensors",
        		lv_sensors_4_0, 
        		"de.cau.cs.kieler.esterel.Esterel.SensorWithType");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSensorDeclAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleSensorWithType
entryRuleSensorWithType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSensorWithTypeRule()); }
	 iv_ruleSensorWithType=ruleSensorWithType 
	 { $current=$iv_ruleSensorWithType.current; } 
	 EOF 
;

// Rule SensorWithType
ruleSensorWithType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSensorWithTypeAccess().getSensorSensorParserRuleCall_0_0()); 
	    }
		lv_sensor_0_0=ruleSensor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSensorWithTypeRule());
	        }
       		set(
       			$current, 
       			"sensor",
        		lv_sensor_0_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Sensor");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSensorWithTypeAccess().getColonKeyword_1_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSensorWithTypeAccess().getTypeTypeIdentifierParserRuleCall_1_0_1_0()); 
	    }
		lv_type_2_0=ruleTypeIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSensorWithTypeRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"de.cau.cs.kieler.esterel.Esterel.TypeIdentifier");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSensorWithTypeAccess().getLeftParenthesisKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSensorWithTypeAccess().getTypeTypeIdentifierParserRuleCall_1_1_1_0()); 
	    }
		lv_type_4_0=ruleTypeIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSensorWithTypeRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_4_0, 
        		"de.cau.cs.kieler.esterel.Esterel.TypeIdentifier");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSensorWithTypeAccess().getRightParenthesisKeyword_1_1_2());
    }
)))
;





// Entry rule entryRuleSensor
entryRuleSensor returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSensorRule()); }
	 iv_ruleSensor=ruleSensor 
	 { $current=$iv_ruleSensor.current; } 
	 EOF 
;

// Rule Sensor
ruleSensor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getSensorAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSensorRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)
;





// Entry rule entryRuleRelationDecl
entryRuleRelationDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationDeclRule()); }
	 iv_ruleRelationDecl=ruleRelationDecl 
	 { $current=$iv_ruleRelationDecl.current; } 
	 EOF 
;

// Rule RelationDecl
ruleRelationDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getRelationDeclAccess().getRelationAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationDeclAccess().getAnnotationsAnnotationParserRuleCall_1_0()); 
	    }
		lv_annotations_1_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationDeclRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_1_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_2='relation' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRelationDeclAccess().getRelationKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationDeclAccess().getRelationsRelationTypeParserRuleCall_3_0()); 
	    }
		lv_relations_3_0=ruleRelationType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationDeclRule());
	        }
       		add(
       			$current, 
       			"relations",
        		lv_relations_3_0, 
        		"de.cau.cs.kieler.esterel.Esterel.RelationType");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRelationDeclAccess().getCommaKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationDeclAccess().getRelationsRelationTypeParserRuleCall_4_1_0()); 
	    }
		lv_relations_5_0=ruleRelationType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationDeclRule());
	        }
       		add(
       			$current, 
       			"relations",
        		lv_relations_5_0, 
        		"de.cau.cs.kieler.esterel.Esterel.RelationType");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getRelationDeclAccess().getSemicolonKeyword_5());
    }
)
;





// Entry rule entryRuleRelationType
entryRuleRelationType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationTypeRule()); }
	 iv_ruleRelationType=ruleRelationType 
	 { $current=$iv_ruleRelationType.current; } 
	 EOF 
;

// Rule RelationType
ruleRelationType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getRelationTypeAccess().getRelationImplicationParserRuleCall_0()); 
    }
    this_RelationImplication_0=ruleRelationImplication
    { 
        $current = $this_RelationImplication_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getRelationTypeAccess().getRelationIncompatibilityParserRuleCall_1()); 
    }
    this_RelationIncompatibility_1=ruleRelationIncompatibility
    { 
        $current = $this_RelationIncompatibility_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleRelationImplication
entryRuleRelationImplication returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationImplicationRule()); }
	 iv_ruleRelationImplication=ruleRelationImplication 
	 { $current=$iv_ruleRelationImplication.current; } 
	 EOF 
;

// Rule RelationImplication
ruleRelationImplication returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationImplicationRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getRelationImplicationAccess().getFirstISignalCrossReference_0_0()); 
	}

)
)(
(
		lv_type_1_0=	'=>' 
    {
        newLeafNode(lv_type_1_0, grammarAccess.getRelationImplicationAccess().getTypeEqualsSignGreaterThanSignKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationImplicationRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_1_0, "=>");
	    }

)
)(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationImplicationRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getRelationImplicationAccess().getSecondISignalCrossReference_2_0()); 
	}

)
))
;





// Entry rule entryRuleRelationIncompatibility
entryRuleRelationIncompatibility returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationIncompatibilityRule()); }
	 iv_ruleRelationIncompatibility=ruleRelationIncompatibility 
	 { $current=$iv_ruleRelationIncompatibility.current; } 
	 EOF 
;

// Rule RelationIncompatibility
ruleRelationIncompatibility returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationIncompatibilityRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getRelationIncompatibilityAccess().getIncompISignalCrossReference_0_0()); 
	}

)
)(
(
		lv_type_1_0=	'#' 
    {
        newLeafNode(lv_type_1_0, grammarAccess.getRelationIncompatibilityAccess().getTypeNumberSignKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationIncompatibilityRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_1_0, "#");
	    }

)
)(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationIncompatibilityRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getRelationIncompatibilityAccess().getIncompISignalCrossReference_2_0()); 
	}

)
)(	otherlv_3='#' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRelationIncompatibilityAccess().getNumberSignKeyword_3_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationIncompatibilityRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getRelationIncompatibilityAccess().getIncompISignalCrossReference_3_1_0()); 
	}

)
))*)
;





// Entry rule entryRuleEsterelStatement
entryRuleEsterelStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEsterelStatementRule()); }
	 iv_ruleEsterelStatement=ruleEsterelStatement 
	 { $current=$iv_ruleEsterelStatement.current; } 
	 EOF 
;

// Rule EsterelStatement
ruleEsterelStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEsterelStatementAccess().getEsterelParallelParserRuleCall_0()); 
    }
    this_EsterelParallel_0=ruleEsterelParallel
    { 
        $current = $this_EsterelParallel_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEsterelStatementAccess().getAtomicStatementParserRuleCall_1()); 
    }
    this_AtomicStatement_1=ruleAtomicStatement
    { 
        $current = $this_AtomicStatement_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAtomicStatement
entryRuleAtomicStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtomicStatementRule()); }
	 iv_ruleAtomicStatement=ruleAtomicStatement 
	 { $current=$iv_ruleAtomicStatement.current; } 
	 EOF 
;

// Rule AtomicStatement
ruleAtomicStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicStatementAccess().getAbortParserRuleCall_0()); 
    }
    this_Abort_0=ruleAbort
    { 
        $current = $this_Abort_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicStatementAccess().getEsterelAssignmentParserRuleCall_1()); 
    }
    this_EsterelAssignment_1=ruleEsterelAssignment
    { 
        $current = $this_EsterelAssignment_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicStatementAccess().getAwaitParserRuleCall_2()); 
    }
    this_Await_2=ruleAwait
    { 
        $current = $this_Await_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicStatementAccess().getBlockParserRuleCall_3()); 
    }
    this_Block_3=ruleBlock
    { 
        $current = $this_Block_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicStatementAccess().getProcCallParserRuleCall_4()); 
    }
    this_ProcCall_4=ruleProcCall
    { 
        $current = $this_ProcCall_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicStatementAccess().getDoParserRuleCall_5()); 
    }
    this_Do_5=ruleDo
    { 
        $current = $this_Do_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicStatementAccess().getEmitParserRuleCall_6()); 
    }
    this_Emit_6=ruleEmit
    { 
        $current = $this_Emit_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicStatementAccess().getEveryDoParserRuleCall_7()); 
    }
    this_EveryDo_7=ruleEveryDo
    { 
        $current = $this_EveryDo_7.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicStatementAccess().getExitParserRuleCall_8()); 
    }
    this_Exit_8=ruleExit
    { 
        $current = $this_Exit_8.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicStatementAccess().getExecParserRuleCall_9()); 
    }
    this_Exec_9=ruleExec
    { 
        $current = $this_Exec_9.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicStatementAccess().getHaltParserRuleCall_10()); 
    }
    this_Halt_10=ruleHalt
    { 
        $current = $this_Halt_10.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicStatementAccess().getIfTestParserRuleCall_11()); 
    }
    this_IfTest_11=ruleIfTest
    { 
        $current = $this_IfTest_11.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicStatementAccess().getLocalSignalDeclParserRuleCall_12()); 
    }
    this_LocalSignalDecl_12=ruleLocalSignalDecl
    { 
        $current = $this_LocalSignalDecl_12.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicStatementAccess().getLoopParserRuleCall_13()); 
    }
    this_Loop_13=ruleLoop
    { 
        $current = $this_Loop_13.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicStatementAccess().getNothingParserRuleCall_14()); 
    }
    this_Nothing_14=ruleNothing
    { 
        $current = $this_Nothing_14.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicStatementAccess().getPauseParserRuleCall_15()); 
    }
    this_Pause_15=rulePause
    { 
        $current = $this_Pause_15.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicStatementAccess().getPresentParserRuleCall_16()); 
    }
    this_Present_16=rulePresent
    { 
        $current = $this_Present_16.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicStatementAccess().getRepeatParserRuleCall_17()); 
    }
    this_Repeat_17=ruleRepeat
    { 
        $current = $this_Repeat_17.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicStatementAccess().getRunParserRuleCall_18()); 
    }
    this_Run_18=ruleRun
    { 
        $current = $this_Run_18.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicStatementAccess().getSuspendParserRuleCall_19()); 
    }
    this_Suspend_19=ruleSuspend
    { 
        $current = $this_Suspend_19.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicStatementAccess().getSustainParserRuleCall_20()); 
    }
    this_Sustain_20=ruleSustain
    { 
        $current = $this_Sustain_20.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicStatementAccess().getTrapParserRuleCall_21()); 
    }
    this_Trap_21=ruleTrap
    { 
        $current = $this_Trap_21.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicStatementAccess().getLocalVariableParserRuleCall_22()); 
    }
    this_LocalVariable_22=ruleLocalVariable
    { 
        $current = $this_LocalVariable_22.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleNothing
entryRuleNothing returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNothingRule()); }
	 iv_ruleNothing=ruleNothing 
	 { $current=$iv_ruleNothing.current; } 
	 EOF 
;

// Rule Nothing
ruleNothing returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getNothingAccess().getNothingAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNothingAccess().getAnnotationsAnnotationParserRuleCall_1_0()); 
	    }
		lv_annotations_1_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNothingRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_1_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_2='nothing' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getNothingAccess().getNothingKeyword_2());
    }
)
;





// Entry rule entryRuleHalt
entryRuleHalt returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getHaltRule()); }
	 iv_ruleHalt=ruleHalt 
	 { $current=$iv_ruleHalt.current; } 
	 EOF 
;

// Rule Halt
ruleHalt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getHaltAccess().getHaltAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getHaltAccess().getAnnotationsAnnotationParserRuleCall_1_0()); 
	    }
		lv_annotations_1_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHaltRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_1_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_2='halt' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getHaltAccess().getHaltKeyword_2());
    }
)
;





// Entry rule entryRuleEmit
entryRuleEmit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEmitRule()); }
	 iv_ruleEmit=ruleEmit 
	 { $current=$iv_ruleEmit.current; } 
	 EOF 
;

// Rule Emit
ruleEmit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getEmitAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEmitRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='emit' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEmitAccess().getEmitKeyword_1());
    }
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEmitRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getEmitAccess().getSignalISignalCrossReference_2_0_0()); 
	}

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getEmitAccess().getTickTickParserRuleCall_2_1_0()); 
	    }
		lv_tick_3_0=ruleTick		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEmitRule());
	        }
       		set(
       			$current, 
       			"tick",
        		lv_tick_3_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Tick");
	        afterParserOrEnumRuleCall();
	    }

)
))(	otherlv_4='(' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getEmitAccess().getLeftParenthesisKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEmitAccess().getExprExpressionParserRuleCall_3_1_0()); 
	    }
		lv_expr_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEmitRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_5_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getEmitAccess().getRightParenthesisKeyword_3_2());
    }
)?)
;





// Entry rule entryRuleSustain
entryRuleSustain returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSustainRule()); }
	 iv_ruleSustain=ruleSustain 
	 { $current=$iv_ruleSustain.current; } 
	 EOF 
;

// Rule Sustain
ruleSustain returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSustainAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSustainRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='sustain' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSustainAccess().getSustainKeyword_1());
    }
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSustainRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getSustainAccess().getSignalISignalCrossReference_2_0_0()); 
	}

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getSustainAccess().getTickTickParserRuleCall_2_1_0()); 
	    }
		lv_tick_3_0=ruleTick		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSustainRule());
	        }
       		set(
       			$current, 
       			"tick",
        		lv_tick_3_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Tick");
	        afterParserOrEnumRuleCall();
	    }

)
))(	otherlv_4='(' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSustainAccess().getLeftParenthesisKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSustainAccess().getExpressionExpressionParserRuleCall_3_1_0()); 
	    }
		lv_expression_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSustainRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_5_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSustainAccess().getRightParenthesisKeyword_3_2());
    }
)?)
;





// Entry rule entryRuleEsterelAssignment
entryRuleEsterelAssignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEsterelAssignmentRule()); }
	 iv_ruleEsterelAssignment=ruleEsterelAssignment 
	 { $current=$iv_ruleEsterelAssignment.current; } 
	 EOF 
;

// Rule EsterelAssignment
ruleEsterelAssignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEsterelAssignmentRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getEsterelAssignmentAccess().getVarIVariableCrossReference_0_0()); 
	}

)
)	otherlv_1=':=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEsterelAssignmentAccess().getColonEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEsterelAssignmentAccess().getExprExpressionParserRuleCall_2_0()); 
	    }
		lv_expr_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEsterelAssignmentRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleProcCall
entryRuleProcCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProcCallRule()); }
	 iv_ruleProcCall=ruleProcCall 
	 { $current=$iv_ruleProcCall.current; } 
	 EOF 
;

// Rule ProcCall
ruleProcCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getProcCallAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcCallRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='call' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getProcCallAccess().getCallKeyword_1());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getProcCallRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getProcCallAccess().getProcProcedureCrossReference_2_0()); 
	}

)
)	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getProcCallAccess().getLeftParenthesisKeyword_3());
    }
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getProcCallRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getProcCallAccess().getVarListIVariableCrossReference_4_0_0()); 
	}

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getProcCallAccess().getCommaKeyword_4_1_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getProcCallRule());
	        }
        }
	otherlv_6=RULE_ID
	{
		newLeafNode(otherlv_6, grammarAccess.getProcCallAccess().getVarListIVariableCrossReference_4_1_1_0()); 
	}

)
))*)?	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getProcCallAccess().getRightParenthesisKeyword_5());
    }
	otherlv_8='(' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getProcCallAccess().getLeftParenthesisKeyword_6());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getProcCallAccess().getKexpressionsExpressionParserRuleCall_7_0_0()); 
	    }
		lv_kexpressions_9_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcCallRule());
	        }
       		add(
       			$current, 
       			"kexpressions",
        		lv_kexpressions_9_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_10=',' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getProcCallAccess().getCommaKeyword_7_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProcCallAccess().getKexpressionsExpressionParserRuleCall_7_1_1_0()); 
	    }
		lv_kexpressions_11_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcCallRule());
	        }
       		add(
       			$current, 
       			"kexpressions",
        		lv_kexpressions_11_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_12=')' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getProcCallAccess().getRightParenthesisKeyword_8());
    }
)
;





// Entry rule entryRuleTrapSignal
entryRuleTrapSignal returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTrapSignalRule()); }
	 iv_ruleTrapSignal=ruleTrapSignal 
	 { $current=$iv_ruleTrapSignal.current; } 
	 EOF 
;

// Rule TrapSignal
ruleTrapSignal returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getTrapSignalAccess().getTrapSignalAction_0(),
            $current);
    }
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getTrapSignalAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTrapSignalRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)(((	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTrapSignalAccess().getColonKeyword_2_0_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTrapSignalAccess().getTypeEsterel_ValueTypeEnumRuleCall_2_0_0_1_0()); 
	    }
		lv_type_3_0=ruleEsterel_ValueType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTrapSignalRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Esterel_ValueType");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		lv_typeID_4_0=RULE_ID
		{
			newLeafNode(lv_typeID_4_0, grammarAccess.getTrapSignalAccess().getTypeIDIDTerminalRuleCall_2_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTrapSignalRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"typeID",
        		lv_typeID_4_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)
    |(	otherlv_5='combine' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTrapSignalAccess().getCombineKeyword_2_0_2_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getTrapSignalAccess().getTypeEsterel_ValueTypeEnumRuleCall_2_0_2_1_0_0()); 
	    }
		lv_type_6_0=ruleEsterel_ValueType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTrapSignalRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_6_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Esterel_ValueType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_typeID_7_0=RULE_ID
		{
			newLeafNode(lv_typeID_7_0, grammarAccess.getTrapSignalAccess().getTypeIDIDTerminalRuleCall_2_0_2_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTrapSignalRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"typeID",
        		lv_typeID_7_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
))	otherlv_8='with' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getTrapSignalAccess().getWithKeyword_2_0_2_2());
    }
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTrapSignalRule());
	        }
        }
	otherlv_9=RULE_ID
	{
		newLeafNode(otherlv_9, grammarAccess.getTrapSignalAccess().getFuncFunctionCrossReference_2_0_2_3_0_0()); 
	}

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getTrapSignalAccess().getOperatorEsterel_CombineOperatorEnumRuleCall_2_0_2_3_1_0()); 
	    }
		lv_operator_10_0=ruleEsterel_CombineOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTrapSignalRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_10_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Esterel_CombineOperator");
	        afterParserOrEnumRuleCall();
	    }

)
))))
    |((	otherlv_11='(' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getTrapSignalAccess().getLeftParenthesisKeyword_2_1_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTrapSignalAccess().getTypeEsterel_ValueTypeEnumRuleCall_2_1_0_1_0()); 
	    }
		lv_type_12_0=ruleEsterel_ValueType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTrapSignalRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_12_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Esterel_ValueType");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		lv_typeID_13_0=RULE_ID
		{
			newLeafNode(lv_typeID_13_0, grammarAccess.getTrapSignalAccess().getTypeIDIDTerminalRuleCall_2_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTrapSignalRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"typeID",
        		lv_typeID_13_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)
    |((	otherlv_14='combine' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getTrapSignalAccess().getCombineKeyword_2_1_2_0_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getTrapSignalAccess().getTypeEsterel_ValueTypeEnumRuleCall_2_1_2_0_1_0_0()); 
	    }
		lv_type_15_0=ruleEsterel_ValueType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTrapSignalRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_15_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Esterel_ValueType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_typeID_16_0=RULE_ID
		{
			newLeafNode(lv_typeID_16_0, grammarAccess.getTrapSignalAccess().getTypeIDIDTerminalRuleCall_2_1_2_0_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTrapSignalRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"typeID",
        		lv_typeID_16_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
))	otherlv_17='with' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getTrapSignalAccess().getWithKeyword_2_1_2_0_2());
    }
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTrapSignalRule());
	        }
        }
	otherlv_18=RULE_ID
	{
		newLeafNode(otherlv_18, grammarAccess.getTrapSignalAccess().getFuncFunctionCrossReference_2_1_2_0_3_0_0()); 
	}

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getTrapSignalAccess().getOperatorEsterel_CombineOperatorEnumRuleCall_2_1_2_0_3_1_0()); 
	    }
		lv_operator_19_0=ruleEsterel_CombineOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTrapSignalRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_19_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Esterel_CombineOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)))	otherlv_20=')' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getTrapSignalAccess().getRightParenthesisKeyword_2_1_2_1());
    }
))
    |((	otherlv_21=':=' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getTrapSignalAccess().getColonEqualsSignKeyword_2_2_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTrapSignalAccess().getExpressionExpressionParserRuleCall_2_2_0_1_0()); 
	    }
		lv_expression_22_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTrapSignalRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_22_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_23=':' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getTrapSignalAccess().getColonKeyword_2_2_0_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTrapSignalAccess().getTypeEsterel_ValueTypeEnumRuleCall_2_2_0_3_0()); 
	    }
		lv_type_24_0=ruleEsterel_ValueType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTrapSignalRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_24_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Esterel_ValueType");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		lv_typeID_25_0=RULE_ID
		{
			newLeafNode(lv_typeID_25_0, grammarAccess.getTrapSignalAccess().getTypeIDIDTerminalRuleCall_2_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTrapSignalRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"typeID",
        		lv_typeID_25_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)
    |(	otherlv_26='combine' 
    {
    	newLeafNode(otherlv_26, grammarAccess.getTrapSignalAccess().getCombineKeyword_2_2_2_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getTrapSignalAccess().getTypeEsterel_ValueTypeEnumRuleCall_2_2_2_1_0_0()); 
	    }
		lv_type_27_0=ruleEsterel_ValueType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTrapSignalRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_27_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Esterel_ValueType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_typeID_28_0=RULE_ID
		{
			newLeafNode(lv_typeID_28_0, grammarAccess.getTrapSignalAccess().getTypeIDIDTerminalRuleCall_2_2_2_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTrapSignalRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"typeID",
        		lv_typeID_28_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
))	otherlv_29='with' 
    {
    	newLeafNode(otherlv_29, grammarAccess.getTrapSignalAccess().getWithKeyword_2_2_2_2());
    }
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTrapSignalRule());
	        }
        }
	otherlv_30=RULE_ID
	{
		newLeafNode(otherlv_30, grammarAccess.getTrapSignalAccess().getFuncFunctionCrossReference_2_2_2_3_0_0()); 
	}

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getTrapSignalAccess().getOperatorEsterel_CombineOperatorEnumRuleCall_2_2_2_3_1_0()); 
	    }
		lv_operator_31_0=ruleEsterel_CombineOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTrapSignalRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_31_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Esterel_CombineOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)))))?)
;





// Entry rule entryRuleExit
entryRuleExit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExitRule()); }
	 iv_ruleExit=ruleExit 
	 { $current=$iv_ruleExit.current; } 
	 EOF 
;

// Rule Exit
ruleExit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExitAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExitRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='exit' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExitAccess().getExitKeyword_1());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getExitRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getExitAccess().getTrapTrapSignalCrossReference_2_0()); 
	}

)
)(	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getExitAccess().getLeftParenthesisKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExitAccess().getExpressionExpressionParserRuleCall_3_1_0()); 
	    }
		lv_expression_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExitRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_4_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getExitAccess().getRightParenthesisKeyword_3_2());
    }
)?)
;





// Entry rule entryRuleVariableDecl
entryRuleVariableDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableDeclRule()); }
	 iv_ruleVariableDecl=ruleVariableDecl 
	 { $current=$iv_ruleVariableDecl.current; } 
	 EOF 
;

// Rule VariableDecl
ruleVariableDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclAccess().getVariablesIVariableParserRuleCall_0_0()); 
	    }
		lv_variables_0_0=ruleIVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_0_0, 
        		"de.cau.cs.kieler.esterel.Esterel.IVariable");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVariableDeclAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclAccess().getVariablesIVariableParserRuleCall_1_1_0()); 
	    }
		lv_variables_2_0=ruleIVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_2_0, 
        		"de.cau.cs.kieler.esterel.Esterel.IVariable");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getVariableDeclAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclAccess().getTypeTypeIdentifierParserRuleCall_3_0()); 
	    }
		lv_type_4_0=ruleTypeIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_4_0, 
        		"de.cau.cs.kieler.esterel.Esterel.TypeIdentifier");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleIVariable
entryRuleIVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIVariableRule()); }
	 iv_ruleIVariable=ruleIVariable 
	 { $current=$iv_ruleIVariable.current; } 
	 EOF 
;

// Rule IVariable
ruleIVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getIVariableAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIVariableRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)(	otherlv_1=':=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIVariableAccess().getColonEqualsSignKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIVariableAccess().getExpressionExpressionParserRuleCall_1_1_0()); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIVariableRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleRun
entryRuleRun returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRunRule()); }
	 iv_ruleRun=ruleRun 
	 { $current=$iv_ruleRun.current; } 
	 EOF 
;

// Rule Run
ruleRun returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRunAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRunRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*((	otherlv_1='run' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRunAccess().getRunKeyword_1_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRunAccess().getModuleModuleRenamingParserRuleCall_1_0_1_0()); 
	    }
		lv_module_2_0=ruleModuleRenaming		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRunRule());
	        }
       		set(
       			$current, 
       			"module",
        		lv_module_2_0, 
        		"de.cau.cs.kieler.esterel.Esterel.ModuleRenaming");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='[' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRunAccess().getLeftSquareBracketKeyword_1_0_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRunAccess().getListRenamingParserRuleCall_1_0_2_1_0()); 
	    }
		lv_list_4_0=ruleRenaming		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRunRule());
	        }
       		add(
       			$current, 
       			"list",
        		lv_list_4_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Renaming");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getRunAccess().getSemicolonKeyword_1_0_2_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRunAccess().getListRenamingParserRuleCall_1_0_2_2_1_0()); 
	    }
		lv_list_6_0=ruleRenaming		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRunRule());
	        }
       		add(
       			$current, 
       			"list",
        		lv_list_6_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Renaming");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_7=']' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getRunAccess().getRightSquareBracketKeyword_1_0_2_3());
    }
)?)
    |(	otherlv_8='copymodule' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getRunAccess().getCopymoduleKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRunAccess().getModuleModuleRenamingParserRuleCall_1_1_1_0()); 
	    }
		lv_module_9_0=ruleModuleRenaming		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRunRule());
	        }
       		set(
       			$current, 
       			"module",
        		lv_module_9_0, 
        		"de.cau.cs.kieler.esterel.Esterel.ModuleRenaming");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_10='[' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getRunAccess().getLeftSquareBracketKeyword_1_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRunAccess().getListRenamingParserRuleCall_1_1_2_1_0()); 
	    }
		lv_list_11_0=ruleRenaming		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRunRule());
	        }
       		add(
       			$current, 
       			"list",
        		lv_list_11_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Renaming");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_12=';' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getRunAccess().getSemicolonKeyword_1_1_2_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRunAccess().getListRenamingParserRuleCall_1_1_2_2_1_0()); 
	    }
		lv_list_13_0=ruleRenaming		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRunRule());
	        }
       		add(
       			$current, 
       			"list",
        		lv_list_13_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Renaming");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_14=']' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getRunAccess().getRightSquareBracketKeyword_1_1_2_3());
    }
)?)))
;





// Entry rule entryRuleModuleRenaming
entryRuleModuleRenaming returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModuleRenamingRule()); }
	 iv_ruleModuleRenaming=ruleModuleRenaming 
	 { $current=$iv_ruleModuleRenaming.current; } 
	 EOF 
;

// Rule ModuleRenaming
ruleModuleRenaming returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getModuleRenamingRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getModuleRenamingAccess().getModuleModuleCrossReference_0_0()); 
	}

)
)
    |((
(
		lv_newName_1_0=RULE_ID
		{
			newLeafNode(lv_newName_1_0, grammarAccess.getModuleRenamingAccess().getNewNameIDTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getModuleRenamingRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"newName",
        		lv_newName_1_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)	otherlv_2='/' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getModuleRenamingAccess().getSolidusKeyword_1_1());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getModuleRenamingRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getModuleRenamingAccess().getModuleModuleCrossReference_1_2_0()); 
	}

)
)))
;





// Entry rule entryRuleRenaming
entryRuleRenaming returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRenamingRule()); }
	 iv_ruleRenaming=ruleRenaming 
	 { $current=$iv_ruleRenaming.current; } 
	 EOF 
;

// Rule Renaming
ruleRenaming returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRenamingAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRenamingRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*((	otherlv_1='type' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRenamingAccess().getTypeKeyword_1_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRenamingAccess().getRenamingsTypeRenamingParserRuleCall_1_0_1_0()); 
	    }
		lv_renamings_2_0=ruleTypeRenaming		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRenamingRule());
	        }
       		add(
       			$current, 
       			"renamings",
        		lv_renamings_2_0, 
        		"de.cau.cs.kieler.esterel.Esterel.TypeRenaming");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRenamingAccess().getCommaKeyword_1_0_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRenamingAccess().getRenamingsTypeRenamingParserRuleCall_1_0_2_1_0()); 
	    }
		lv_renamings_4_0=ruleTypeRenaming		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRenamingRule());
	        }
       		add(
       			$current, 
       			"renamings",
        		lv_renamings_4_0, 
        		"de.cau.cs.kieler.esterel.Esterel.TypeRenaming");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
    |(	otherlv_5='constant' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getRenamingAccess().getConstantKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRenamingAccess().getRenamingsConstantRenamingParserRuleCall_1_1_1_0()); 
	    }
		lv_renamings_6_0=ruleConstantRenaming		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRenamingRule());
	        }
       		add(
       			$current, 
       			"renamings",
        		lv_renamings_6_0, 
        		"de.cau.cs.kieler.esterel.Esterel.ConstantRenaming");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_7=',' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getRenamingAccess().getCommaKeyword_1_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRenamingAccess().getRenamingsConstantRenamingParserRuleCall_1_1_2_1_0()); 
	    }
		lv_renamings_8_0=ruleConstantRenaming		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRenamingRule());
	        }
       		add(
       			$current, 
       			"renamings",
        		lv_renamings_8_0, 
        		"de.cau.cs.kieler.esterel.Esterel.ConstantRenaming");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
    |(	otherlv_9='function' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getRenamingAccess().getFunctionKeyword_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRenamingAccess().getRenamingsFunctionRenamingParserRuleCall_1_2_1_0()); 
	    }
		lv_renamings_10_0=ruleFunctionRenaming		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRenamingRule());
	        }
       		add(
       			$current, 
       			"renamings",
        		lv_renamings_10_0, 
        		"de.cau.cs.kieler.esterel.Esterel.FunctionRenaming");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_11=',' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getRenamingAccess().getCommaKeyword_1_2_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRenamingAccess().getRenamingsFunctionRenamingParserRuleCall_1_2_2_1_0()); 
	    }
		lv_renamings_12_0=ruleFunctionRenaming		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRenamingRule());
	        }
       		add(
       			$current, 
       			"renamings",
        		lv_renamings_12_0, 
        		"de.cau.cs.kieler.esterel.Esterel.FunctionRenaming");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
    |(	otherlv_13='procedure' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getRenamingAccess().getProcedureKeyword_1_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRenamingAccess().getRenamingsProcedureRenamingParserRuleCall_1_3_1_0()); 
	    }
		lv_renamings_14_0=ruleProcedureRenaming		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRenamingRule());
	        }
       		add(
       			$current, 
       			"renamings",
        		lv_renamings_14_0, 
        		"de.cau.cs.kieler.esterel.Esterel.ProcedureRenaming");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_15=',' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getRenamingAccess().getCommaKeyword_1_3_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRenamingAccess().getRenamingsProcedureRenamingParserRuleCall_1_3_2_1_0()); 
	    }
		lv_renamings_16_0=ruleProcedureRenaming		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRenamingRule());
	        }
       		add(
       			$current, 
       			"renamings",
        		lv_renamings_16_0, 
        		"de.cau.cs.kieler.esterel.Esterel.ProcedureRenaming");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
    |(	otherlv_17='task' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getRenamingAccess().getTaskKeyword_1_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRenamingAccess().getRenamingsTaskRenamingParserRuleCall_1_4_1_0()); 
	    }
		lv_renamings_18_0=ruleTaskRenaming		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRenamingRule());
	        }
       		add(
       			$current, 
       			"renamings",
        		lv_renamings_18_0, 
        		"de.cau.cs.kieler.esterel.Esterel.TaskRenaming");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_19=',' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getRenamingAccess().getCommaKeyword_1_4_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRenamingAccess().getRenamingsTaskRenamingParserRuleCall_1_4_2_1_0()); 
	    }
		lv_renamings_20_0=ruleTaskRenaming		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRenamingRule());
	        }
       		add(
       			$current, 
       			"renamings",
        		lv_renamings_20_0, 
        		"de.cau.cs.kieler.esterel.Esterel.TaskRenaming");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
    |(	otherlv_21='signal' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getRenamingAccess().getSignalKeyword_1_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRenamingAccess().getRenamingsSignalRenamingParserRuleCall_1_5_1_0()); 
	    }
		lv_renamings_22_0=ruleSignalRenaming		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRenamingRule());
	        }
       		add(
       			$current, 
       			"renamings",
        		lv_renamings_22_0, 
        		"de.cau.cs.kieler.esterel.Esterel.SignalRenaming");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_23=',' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getRenamingAccess().getCommaKeyword_1_5_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRenamingAccess().getRenamingsSignalRenamingParserRuleCall_1_5_2_1_0()); 
	    }
		lv_renamings_24_0=ruleSignalRenaming		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRenamingRule());
	        }
       		add(
       			$current, 
       			"renamings",
        		lv_renamings_24_0, 
        		"de.cau.cs.kieler.esterel.Esterel.SignalRenaming");
	        afterParserOrEnumRuleCall();
	    }

)
))*)))
;





// Entry rule entryRuleTypeRenaming
entryRuleTypeRenaming returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRenamingRule()); }
	 iv_ruleTypeRenaming=ruleTypeRenaming 
	 { $current=$iv_ruleTypeRenaming.current; } 
	 EOF 
;

// Rule TypeRenaming
ruleTypeRenaming returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRenamingRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getTypeRenamingAccess().getNewNameTypeCrossReference_0_0_0()); 
	}

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeRenamingAccess().getNewTypeEsterel_ValueTypeEnumRuleCall_0_1_0()); 
	    }
		lv_newType_1_0=ruleEsterel_ValueType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRenamingRule());
	        }
       		set(
       			$current, 
       			"newType",
        		lv_newType_1_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Esterel_ValueType");
	        afterParserOrEnumRuleCall();
	    }

)
))	otherlv_2='/' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTypeRenamingAccess().getSolidusKeyword_1());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRenamingRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getTypeRenamingAccess().getOldNameTypeCrossReference_2_0()); 
	}

)
))
;





// Entry rule entryRuleConstantRenaming
entryRuleConstantRenaming returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantRenamingRule()); }
	 iv_ruleConstantRenaming=ruleConstantRenaming 
	 { $current=$iv_ruleConstantRenaming.current; } 
	 EOF 
;

// Rule ConstantRenaming
ruleConstantRenaming returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantRenamingRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getConstantRenamingAccess().getNewNameValuedObjectCrossReference_0_0_0()); 
	}

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getConstantRenamingAccess().getNewValueConstantValueParserRuleCall_0_1_0()); 
	    }
		lv_newValue_1_0=ruleConstantValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantRenamingRule());
	        }
       		set(
       			$current, 
       			"newValue",
        		lv_newValue_1_0, 
        		"de.cau.cs.kieler.esterel.Esterel.ConstantValue");
	        afterParserOrEnumRuleCall();
	    }

)
))	otherlv_2='/' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getConstantRenamingAccess().getSolidusKeyword_1());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantRenamingRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getConstantRenamingAccess().getOldNameValuedObjectCrossReference_2_0()); 
	}

)
))
;





// Entry rule entryRuleFunctionRenaming
entryRuleFunctionRenaming returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionRenamingRule()); }
	 iv_ruleFunctionRenaming=ruleFunctionRenaming 
	 { $current=$iv_ruleFunctionRenaming.current; } 
	 EOF 
;

// Rule FunctionRenaming
ruleFunctionRenaming returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionRenamingRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getFunctionRenamingAccess().getNewNameFunctionCrossReference_0_0_0()); 
	}

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionRenamingAccess().getNewFuncBuildInFunctionParserRuleCall_0_1_0()); 
	    }
		lv_newFunc_1_0=ruleBuildInFunction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionRenamingRule());
	        }
       		set(
       			$current, 
       			"newFunc",
        		lv_newFunc_1_0, 
        		"de.cau.cs.kieler.esterel.Esterel.BuildInFunction");
	        afterParserOrEnumRuleCall();
	    }

)
))	otherlv_2='/' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFunctionRenamingAccess().getSolidusKeyword_1());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionRenamingRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getFunctionRenamingAccess().getOldNameFunctionCrossReference_2_0()); 
	}

)
))
;





// Entry rule entryRuleProcedureRenaming
entryRuleProcedureRenaming returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProcedureRenamingRule()); }
	 iv_ruleProcedureRenaming=ruleProcedureRenaming 
	 { $current=$iv_ruleProcedureRenaming.current; } 
	 EOF 
;

// Rule ProcedureRenaming
ruleProcedureRenaming returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getProcedureRenamingRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getProcedureRenamingAccess().getNewNameProcedureCrossReference_0_0()); 
	}

)
)	otherlv_1='/' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getProcedureRenamingAccess().getSolidusKeyword_1());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getProcedureRenamingRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getProcedureRenamingAccess().getOldNameProcedureCrossReference_2_0()); 
	}

)
))
;





// Entry rule entryRuleTaskRenaming
entryRuleTaskRenaming returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTaskRenamingRule()); }
	 iv_ruleTaskRenaming=ruleTaskRenaming 
	 { $current=$iv_ruleTaskRenaming.current; } 
	 EOF 
;

// Rule TaskRenaming
ruleTaskRenaming returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTaskRenamingRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getTaskRenamingAccess().getNewNameTaskCrossReference_0_0()); 
	}

)
)	otherlv_1='/' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTaskRenamingAccess().getSolidusKeyword_1());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTaskRenamingRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getTaskRenamingAccess().getOldNameTaskCrossReference_2_0()); 
	}

)
))
;





// Entry rule entryRuleSignalRenaming
entryRuleSignalRenaming returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSignalRenamingRule()); }
	 iv_ruleSignalRenaming=ruleSignalRenaming 
	 { $current=$iv_ruleSignalRenaming.current; } 
	 EOF 
;

// Rule SignalRenaming
ruleSignalRenaming returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSignalRenamingRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getSignalRenamingAccess().getNewNameISignalCrossReference_0_0_0()); 
	}

)
)
    |	otherlv_1='tick' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSignalRenamingAccess().getTickKeyword_0_1());
    }
)	otherlv_2='/' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSignalRenamingAccess().getSolidusKeyword_1());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSignalRenamingRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getSignalRenamingAccess().getOldNameISignalCrossReference_2_0()); 
	}

)
))
;





// Entry rule entryRuleBuildInFunction
entryRuleBuildInFunction returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBuildInFunctionRule()); } 
	 iv_ruleBuildInFunction=ruleBuildInFunction 
	 { $current=$iv_ruleBuildInFunction.current.getText(); }  
	 EOF 
;

// Rule BuildInFunction
ruleBuildInFunction returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuildInFunctionAccess().getAsteriskKeyword_0()); 
    }

    |
	kw='/' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuildInFunctionAccess().getSolidusKeyword_1()); 
    }

    |
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuildInFunctionAccess().getPlusSignKeyword_2()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuildInFunctionAccess().getHyphenMinusKeyword_3()); 
    }

    |
	kw='mod' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuildInFunctionAccess().getModKeyword_4()); 
    }

    |
	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuildInFunctionAccess().getEqualsSignKeyword_5()); 
    }

    |
	kw='<>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuildInFunctionAccess().getLessThanSignGreaterThanSignKeyword_6()); 
    }

    |
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuildInFunctionAccess().getGreaterThanSignKeyword_7()); 
    }

    |
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuildInFunctionAccess().getLessThanSignKeyword_8()); 
    }

    |
	kw='<=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuildInFunctionAccess().getLessThanSignEqualsSignKeyword_9()); 
    }

    |
	kw='>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuildInFunctionAccess().getGreaterThanSignEqualsSignKeyword_10()); 
    }

    |
	kw='not' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuildInFunctionAccess().getNotKeyword_11()); 
    }

    |
	kw='and' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuildInFunctionAccess().getAndKeyword_12()); 
    }

    |
	kw='or' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuildInFunctionAccess().getOrKeyword_13()); 
    }
)
    ;





// Entry rule entryRuleAtomicExpression
entryRuleAtomicExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtomicExpressionRule()); }
	 iv_ruleAtomicExpression=ruleAtomicExpression 
	 { $current=$iv_ruleAtomicExpression.current; } 
	 EOF 
;

// Rule AtomicExpression
ruleAtomicExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicExpressionAccess().getFunctionExpressionParserRuleCall_0()); 
    }
    this_FunctionExpression_0=ruleFunctionExpression
    { 
        $current = $this_FunctionExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicExpressionAccess().getTrapExpressionParserRuleCall_1()); 
    }
    this_TrapExpression_1=ruleTrapExpression
    { 
        $current = $this_TrapExpression_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicExpressionAccess().getBooleanValueParserRuleCall_2()); 
    }
    this_BooleanValue_2=ruleBooleanValue
    { 
        $current = $this_BooleanValue_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicExpressionAccess().getValuedObjectTestExpressionParserRuleCall_3()); 
    }
    this_ValuedObjectTestExpression_3=ruleValuedObjectTestExpression
    { 
        $current = $this_ValuedObjectTestExpression_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicExpressionAccess().getTextExpressionParserRuleCall_4()); 
    }
    this_TextExpression_4=ruleTextExpression
    { 
        $current = $this_TextExpression_4.current; 
        afterParserOrEnumRuleCall();
    }

    |(	otherlv_5='(' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAtomicExpressionAccess().getLeftParenthesisKeyword_5_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicExpressionAccess().getBooleanExpressionParserRuleCall_5_1()); 
    }
    this_BooleanExpression_6=ruleBooleanExpression
    { 
        $current = $this_BooleanExpression_6.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getAtomicExpressionAccess().getRightParenthesisKeyword_5_2());
    }
)
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicExpressionAccess().getConstantExpressionParserRuleCall_6()); 
    }
    this_ConstantExpression_8=ruleConstantExpression
    { 
        $current = $this_ConstantExpression_8.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleTrapExpression
entryRuleTrapExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTrapExpressionRule()); }
	 iv_ruleTrapExpression=ruleTrapExpression 
	 { $current=$iv_ruleTrapExpression.current; } 
	 EOF 
;

// Rule TrapExpression
ruleTrapExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getTrapExpressionAccess().getTrapExpressionAction_0(),
            $current);
    }
)	otherlv_1='??' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTrapExpressionAccess().getQuestionMarkQuestionMarkKeyword_1());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTrapExpressionRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getTrapExpressionAccess().getTrapISignalCrossReference_2_0()); 
	}

)
))
;





// Entry rule entryRuleFunctionExpression
entryRuleFunctionExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionExpressionRule()); }
	 iv_ruleFunctionExpression=ruleFunctionExpression 
	 { $current=$iv_ruleFunctionExpression.current; } 
	 EOF 
;

// Rule FunctionExpression
ruleFunctionExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getFunctionExpressionAccess().getFunctionExpressionAction_0(),
            $current);
    }
)(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionExpressionRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getFunctionExpressionAccess().getFunctionFunctionCrossReference_1_0()); 
	}

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFunctionExpressionAccess().getLeftParenthesisKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionExpressionAccess().getKexpressionsExpressionParserRuleCall_3_0_0()); 
	    }
		lv_kexpressions_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionExpressionRule());
	        }
       		add(
       			$current, 
       			"kexpressions",
        		lv_kexpressions_3_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFunctionExpressionAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionExpressionAccess().getKexpressionsExpressionParserRuleCall_3_1_1_0()); 
	    }
		lv_kexpressions_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionExpressionRule());
	        }
       		add(
       			$current, 
       			"kexpressions",
        		lv_kexpressions_5_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFunctionExpressionAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleConstantExpression
entryRuleConstantExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantExpressionRule()); }
	 iv_ruleConstantExpression=ruleConstantExpression 
	 { $current=$iv_ruleConstantExpression.current; } 
	 EOF 
;

// Rule ConstantExpression
ruleConstantExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getConstantExpressionAccess().getConstantExpressionAction_0(),
            $current);
    }
)((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantExpressionRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getConstantExpressionAccess().getConstantConstantCrossReference_1_0_0()); 
	}

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getConstantExpressionAccess().getValueConstantValueParserRuleCall_1_1_0()); 
	    }
		lv_value_2_0=ruleConstantValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantExpressionRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"de.cau.cs.kieler.esterel.Esterel.ConstantValue");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleTrapExpr
entryRuleTrapExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTrapExprRule()); }
	 iv_ruleTrapExpr=ruleTrapExpr 
	 { $current=$iv_ruleTrapExpr.current; } 
	 EOF 
;

// Rule TrapExpr
ruleTrapExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTrapExprAccess().getSignalExpressionParserRuleCall()); 
    }
    this_SignalExpression_0=ruleSignalExpression
    { 
        $current = $this_SignalExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleSignalExpression
entryRuleSignalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSignalExpressionRule()); }
	 iv_ruleSignalExpression=ruleSignalExpression 
	 { $current=$iv_ruleSignalExpression.current; } 
	 EOF 
;

// Rule SignalExpression
ruleSignalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSignalExpressionAccess().getSignalAndExpressionParserRuleCall_0()); 
    }
    this_SignalAndExpression_0=ruleSignalAndExpression
    { 
        $current = $this_SignalAndExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getSignalExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSignalExpressionAccess().getOperatorEsterel_OrOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleEsterel_OrOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignalExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Esterel_OrOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSignalExpressionAccess().getSubExpressionsSignalAndExpressionParserRuleCall_1_2_0()); 
	    }
		lv_subExpressions_3_0=ruleSignalAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignalExpressionRule());
	        }
       		add(
       			$current, 
       			"subExpressions",
        		lv_subExpressions_3_0, 
        		"de.cau.cs.kieler.esterel.Esterel.SignalAndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleSignalAndExpression
entryRuleSignalAndExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSignalAndExpressionRule()); }
	 iv_ruleSignalAndExpression=ruleSignalAndExpression 
	 { $current=$iv_ruleSignalAndExpression.current; } 
	 EOF 
;

// Rule SignalAndExpression
ruleSignalAndExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSignalAndExpressionAccess().getSignalNotExpressionParserRuleCall_0()); 
    }
    this_SignalNotExpression_0=ruleSignalNotExpression
    { 
        $current = $this_SignalNotExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getSignalAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSignalAndExpressionAccess().getOperatorEsterel_AndOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleEsterel_AndOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignalAndExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Esterel_AndOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSignalAndExpressionAccess().getSubExpressionsSignalNotExpressionParserRuleCall_1_2_0()); 
	    }
		lv_subExpressions_3_0=ruleSignalNotExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignalAndExpressionRule());
	        }
       		add(
       			$current, 
       			"subExpressions",
        		lv_subExpressions_3_0, 
        		"de.cau.cs.kieler.esterel.Esterel.SignalNotExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleSignalNotExpression
entryRuleSignalNotExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSignalNotExpressionRule()); }
	 iv_ruleSignalNotExpression=ruleSignalNotExpression 
	 { $current=$iv_ruleSignalNotExpression.current; } 
	 EOF 
;

// Rule SignalNotExpression
ruleSignalNotExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getSignalNotExpressionAccess().getOperatorExpressionAction_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSignalNotExpressionAccess().getOperatorEsterel_NotOperatorEnumRuleCall_0_1_0()); 
	    }
		lv_operator_1_0=ruleEsterel_NotOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignalNotExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_1_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Esterel_NotOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSignalNotExpressionAccess().getSubExpressionsSignalNotExpressionParserRuleCall_0_2_0()); 
	    }
		lv_subExpressions_2_0=ruleSignalNotExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignalNotExpressionRule());
	        }
       		add(
       			$current, 
       			"subExpressions",
        		lv_subExpressions_2_0, 
        		"de.cau.cs.kieler.esterel.Esterel.SignalNotExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSignalNotExpressionAccess().getSignalAtomicExpressionParserRuleCall_1()); 
    }
    this_SignalAtomicExpression_3=ruleSignalAtomicExpression
    { 
        $current = $this_SignalAtomicExpression_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSignalAtomicExpression
entryRuleSignalAtomicExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSignalAtomicExpressionRule()); }
	 iv_ruleSignalAtomicExpression=ruleSignalAtomicExpression 
	 { $current=$iv_ruleSignalAtomicExpression.current; } 
	 EOF 
;

// Rule SignalAtomicExpression
ruleSignalAtomicExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSignalAtomicExpressionAccess().getSignalReferenceExprParserRuleCall_0()); 
    }
    this_SignalReferenceExpr_0=ruleSignalReferenceExpr
    { 
        $current = $this_SignalReferenceExpr_0.current; 
        afterParserOrEnumRuleCall();
    }

    |(	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSignalAtomicExpressionAccess().getLeftParenthesisKeyword_1_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSignalAtomicExpressionAccess().getSignalExpressionParserRuleCall_1_1()); 
    }
    this_SignalExpression_2=ruleSignalExpression
    { 
        $current = $this_SignalExpression_2.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSignalAtomicExpressionAccess().getRightParenthesisKeyword_1_2());
    }
)
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSignalAtomicExpressionAccess().getSignalPreExprParserRuleCall_2()); 
    }
    this_SignalPreExpr_4=ruleSignalPreExpr
    { 
        $current = $this_SignalPreExpr_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSignalAtomicExpressionAccess().getTrapReferenceExprParserRuleCall_3()); 
    }
    this_TrapReferenceExpr_5=ruleTrapReferenceExpr
    { 
        $current = $this_TrapReferenceExpr_5.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSignalReferenceExpr
entryRuleSignalReferenceExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSignalReferenceExprRule()); }
	 iv_ruleSignalReferenceExpr=ruleSignalReferenceExpr 
	 { $current=$iv_ruleSignalReferenceExpr.current; } 
	 EOF 
;

// Rule SignalReferenceExpr
ruleSignalReferenceExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSignalReferenceExprRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getSignalReferenceExprAccess().getValuedObjectISignalCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleSignalPreExpr
entryRuleSignalPreExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSignalPreExprRule()); }
	 iv_ruleSignalPreExpr=ruleSignalPreExpr 
	 { $current=$iv_ruleSignalPreExpr.current; } 
	 EOF 
;

// Rule SignalPreExpr
ruleSignalPreExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getSignalPreExprAccess().getOperatorExpressionAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSignalPreExprAccess().getOperatorEsterel_PreOperatorEnumRuleCall_1_0()); 
	    }
		lv_operator_1_0=ruleEsterel_PreOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignalPreExprRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_1_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Esterel_PreOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSignalPreExprAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSignalPreExprAccess().getSubExpressionsSignalReferenceExprParserRuleCall_3_0()); 
	    }
		lv_subExpressions_3_0=ruleSignalReferenceExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignalPreExprRule());
	        }
       		add(
       			$current, 
       			"subExpressions",
        		lv_subExpressions_3_0, 
        		"de.cau.cs.kieler.esterel.Esterel.SignalReferenceExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSignalPreExprAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleTrapReferenceExpr
entryRuleTrapReferenceExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTrapReferenceExprRule()); }
	 iv_ruleTrapReferenceExpr=ruleTrapReferenceExpr 
	 { $current=$iv_ruleTrapReferenceExpr.current; } 
	 EOF 
;

// Rule TrapReferenceExpr
ruleTrapReferenceExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getTrapReferenceExprAccess().getTrapReferenceExprAction_0(),
            $current);
    }
)(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTrapReferenceExprRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getTrapReferenceExprAccess().getValuedObjectTrapSignalCrossReference_1_0()); 
	}

)
))
;





// Entry rule entryRuleDelayExpr
entryRuleDelayExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDelayExprRule()); }
	 iv_ruleDelayExpr=ruleDelayExpr 
	 { $current=$iv_ruleDelayExpr.current; } 
	 EOF 
;

// Rule DelayExpr
ruleDelayExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getDelayExprAccess().getExprExpressionParserRuleCall_0_0_0()); 
	    }
		lv_expr_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDelayExprRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_0_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getDelayExprAccess().getTickTickParserRuleCall_0_1_0_0()); 
	    }
		lv_tick_1_0=ruleTick		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDelayExprRule());
	        }
       		set(
       			$current, 
       			"tick",
        		lv_tick_1_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Tick");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getDelayExprAccess().getSignalExprSignalReferenceExprParserRuleCall_0_1_1_0()); 
	    }
		lv_signalExpr_2_0=ruleSignalReferenceExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDelayExprRule());
	        }
       		set(
       			$current, 
       			"signalExpr",
        		lv_signalExpr_2_0, 
        		"de.cau.cs.kieler.esterel.Esterel.SignalReferenceExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(	otherlv_3='[' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDelayExprAccess().getLeftSquareBracketKeyword_0_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDelayExprAccess().getSignalExprSignalExpressionParserRuleCall_0_1_2_1_0()); 
	    }
		lv_signalExpr_4_0=ruleSignalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDelayExprRule());
	        }
       		set(
       			$current, 
       			"signalExpr",
        		lv_signalExpr_4_0, 
        		"de.cau.cs.kieler.esterel.Esterel.SignalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=']' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getDelayExprAccess().getRightSquareBracketKeyword_0_1_2_2());
    }
)))
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getDelayExprAccess().getTickTickParserRuleCall_1_0_0()); 
	    }
		lv_tick_6_0=ruleTick		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDelayExprRule());
	        }
       		set(
       			$current, 
       			"tick",
        		lv_tick_6_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Tick");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getDelayExprAccess().getSignalExprSignalReferenceExprParserRuleCall_1_1_0()); 
	    }
		lv_signalExpr_7_0=ruleSignalReferenceExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDelayExprRule());
	        }
       		set(
       			$current, 
       			"signalExpr",
        		lv_signalExpr_7_0, 
        		"de.cau.cs.kieler.esterel.Esterel.SignalReferenceExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(	otherlv_8='[' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getDelayExprAccess().getLeftSquareBracketKeyword_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDelayExprAccess().getSignalExprSignalExpressionParserRuleCall_1_2_1_0()); 
	    }
		lv_signalExpr_9_0=ruleSignalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDelayExprRule());
	        }
       		set(
       			$current, 
       			"signalExpr",
        		lv_signalExpr_9_0, 
        		"de.cau.cs.kieler.esterel.Esterel.SignalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_10=']' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getDelayExprAccess().getRightSquareBracketKeyword_1_2_2());
    }
))
    |((
(
		lv_isImmediate_11_0=	'immediate' 
    {
        newLeafNode(lv_isImmediate_11_0, grammarAccess.getDelayExprAccess().getIsImmediateImmediateKeyword_2_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDelayExprRule());
	        }
       		setWithLastConsumed($current, "isImmediate", true, "immediate");
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getDelayExprAccess().getTickTickParserRuleCall_2_1_0_0()); 
	    }
		lv_tick_12_0=ruleTick		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDelayExprRule());
	        }
       		set(
       			$current, 
       			"tick",
        		lv_tick_12_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Tick");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getDelayExprAccess().getSignalExprSignalReferenceExprParserRuleCall_2_1_1_0()); 
	    }
		lv_signalExpr_13_0=ruleSignalReferenceExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDelayExprRule());
	        }
       		set(
       			$current, 
       			"signalExpr",
        		lv_signalExpr_13_0, 
        		"de.cau.cs.kieler.esterel.Esterel.SignalReferenceExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(	otherlv_14='[' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getDelayExprAccess().getLeftSquareBracketKeyword_2_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDelayExprAccess().getSignalExprSignalExpressionParserRuleCall_2_1_2_1_0()); 
	    }
		lv_signalExpr_15_0=ruleSignalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDelayExprRule());
	        }
       		set(
       			$current, 
       			"signalExpr",
        		lv_signalExpr_15_0, 
        		"de.cau.cs.kieler.esterel.Esterel.SignalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_16=']' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getDelayExprAccess().getRightSquareBracketKeyword_2_1_2_2());
    }
))))
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((	ruleBooleanExpression)=>
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getBooleanExpressionParserRuleCall_0()); 
    }
    this_BooleanExpression_0=ruleBooleanExpression
    { 
        $current = $this_BooleanExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getValuedExpressionParserRuleCall_1()); 
    }
    this_ValuedExpression_1=ruleValuedExpression
    { 
        $current = $this_ValuedExpression_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleBooleanExpression
entryRuleBooleanExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanExpressionRule()); }
	 iv_ruleBooleanExpression=ruleBooleanExpression 
	 { $current=$iv_ruleBooleanExpression.current; } 
	 EOF 
;

// Rule BooleanExpression
ruleBooleanExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBooleanExpressionAccess().getOrExpressionParserRuleCall()); 
    }
    this_OrExpression_0=ruleOrExpression
    { 
        $current = $this_OrExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleOrExpression
entryRuleOrExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrExpressionRule()); }
	 iv_ruleOrExpression=ruleOrExpression 
	 { $current=$iv_ruleOrExpression.current; } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); 
    }
    this_AndExpression_0=ruleAndExpression
    { 
        $current = $this_AndExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getOrExpressionAccess().getOperatorEsterel_OrOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleEsterel_OrOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Esterel_OrOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getOrExpressionAccess().getSubExpressionsAndExpressionParserRuleCall_1_2_0()); 
	    }
		lv_subExpressions_3_0=ruleAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrExpressionRule());
	        }
       		add(
       			$current, 
       			"subExpressions",
        		lv_subExpressions_3_0, 
        		"de.cau.cs.kieler.esterel.Esterel.AndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAndExpression
entryRuleAndExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAndExpressionRule()); }
	 iv_ruleAndExpression=ruleAndExpression 
	 { $current=$iv_ruleAndExpression.current; } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAndExpressionAccess().getCompareOperationParserRuleCall_0()); 
    }
    this_CompareOperation_0=ruleCompareOperation
    { 
        $current = $this_CompareOperation_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAndExpressionAccess().getOperatorEsterel_AndOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleEsterel_AndOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Esterel_AndOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAndExpressionAccess().getSubExpressionsCompareOperationParserRuleCall_1_2_0()); 
	    }
		lv_subExpressions_3_0=ruleCompareOperation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndExpressionRule());
	        }
       		add(
       			$current, 
       			"subExpressions",
        		lv_subExpressions_3_0, 
        		"de.cau.cs.kieler.esterel.Esterel.CompareOperation");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleCompareOperation
entryRuleCompareOperation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompareOperationRule()); }
	 iv_ruleCompareOperation=ruleCompareOperation 
	 { $current=$iv_ruleCompareOperation.current; } 
	 EOF 
;

// Rule CompareOperation
ruleCompareOperation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((((	ruleNotOrValuedExpression)=>
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCompareOperationAccess().getNotOrValuedExpressionParserRuleCall_0_0()); 
    }
    this_NotOrValuedExpression_0=ruleNotOrValuedExpression
    { 
        $current = $this_NotOrValuedExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
)((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_0_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCompareOperationAccess().getOperatorEsterel_CompareOperatorEnumRuleCall_0_1_1_0()); 
	    }
		lv_operator_2_0=ruleEsterel_CompareOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompareOperationRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Esterel_CompareOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCompareOperationAccess().getSubExpressionsNotOrValuedExpressionParserRuleCall_0_1_2_0()); 
	    }
		lv_subExpressions_3_0=ruleNotOrValuedExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompareOperationRule());
	        }
       		add(
       			$current, 
       			"subExpressions",
        		lv_subExpressions_3_0, 
        		"de.cau.cs.kieler.esterel.Esterel.NotOrValuedExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)))
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCompareOperationAccess().getNotExpressionParserRuleCall_1()); 
    }
    this_NotExpression_4=ruleNotExpression
    { 
        $current = $this_NotExpression_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleNotOrValuedExpression
entryRuleNotOrValuedExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNotOrValuedExpressionRule()); }
	 iv_ruleNotOrValuedExpression=ruleNotOrValuedExpression 
	 { $current=$iv_ruleNotOrValuedExpression.current; } 
	 EOF 
;

// Rule NotOrValuedExpression
ruleNotOrValuedExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((	ruleValuedExpression)=>
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getNotOrValuedExpressionAccess().getValuedExpressionParserRuleCall_0()); 
    }
    this_ValuedExpression_0=ruleValuedExpression
    { 
        $current = $this_ValuedExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getNotOrValuedExpressionAccess().getNotExpressionParserRuleCall_1()); 
    }
    this_NotExpression_1=ruleNotExpression
    { 
        $current = $this_NotExpression_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleNotExpression
entryRuleNotExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNotExpressionRule()); }
	 iv_ruleNotExpression=ruleNotExpression 
	 { $current=$iv_ruleNotExpression.current; } 
	 EOF 
;

// Rule NotExpression
ruleNotExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getNotExpressionAccess().getOperatorExpressionAction_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNotExpressionAccess().getOperatorEsterel_NotOperatorEnumRuleCall_0_1_0()); 
	    }
		lv_operator_1_0=ruleEsterel_NotOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNotExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_1_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Esterel_NotOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNotExpressionAccess().getSubExpressionsNotExpressionParserRuleCall_0_2_0()); 
	    }
		lv_subExpressions_2_0=ruleNotExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNotExpressionRule());
	        }
       		add(
       			$current, 
       			"subExpressions",
        		lv_subExpressions_2_0, 
        		"de.cau.cs.kieler.esterel.Esterel.NotExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getNotExpressionAccess().getAtomicExpressionParserRuleCall_1()); 
    }
    this_AtomicExpression_3=ruleAtomicExpression
    { 
        $current = $this_AtomicExpression_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleValuedExpression
entryRuleValuedExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValuedExpressionRule()); }
	 iv_ruleValuedExpression=ruleValuedExpression 
	 { $current=$iv_ruleValuedExpression.current; } 
	 EOF 
;

// Rule ValuedExpression
ruleValuedExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getValuedExpressionAccess().getAddExpressionParserRuleCall()); 
    }
    this_AddExpression_0=ruleAddExpression
    { 
        $current = $this_AddExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleAddExpression
entryRuleAddExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAddExpressionRule()); }
	 iv_ruleAddExpression=ruleAddExpression 
	 { $current=$iv_ruleAddExpression.current; } 
	 EOF 
;

// Rule AddExpression
ruleAddExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAddExpressionAccess().getSubExpressionParserRuleCall_0()); 
    }
    this_SubExpression_0=ruleSubExpression
    { 
        $current = $this_SubExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getAddExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAddExpressionAccess().getOperatorEsterel_AddOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleEsterel_AddOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAddExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Esterel_AddOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAddExpressionAccess().getSubExpressionsSubExpressionParserRuleCall_1_2_0()); 
	    }
		lv_subExpressions_3_0=ruleSubExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAddExpressionRule());
	        }
       		add(
       			$current, 
       			"subExpressions",
        		lv_subExpressions_3_0, 
        		"de.cau.cs.kieler.esterel.Esterel.SubExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleSubExpression
entryRuleSubExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSubExpressionRule()); }
	 iv_ruleSubExpression=ruleSubExpression 
	 { $current=$iv_ruleSubExpression.current; } 
	 EOF 
;

// Rule SubExpression
ruleSubExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSubExpressionAccess().getMultExpressionParserRuleCall_0()); 
    }
    this_MultExpression_0=ruleMultExpression
    { 
        $current = $this_MultExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getSubExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSubExpressionAccess().getOperatorEsterel_SubOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleEsterel_SubOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Esterel_SubOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSubExpressionAccess().getSubExpressionsMultExpressionParserRuleCall_1_2_0()); 
	    }
		lv_subExpressions_3_0=ruleMultExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubExpressionRule());
	        }
       		add(
       			$current, 
       			"subExpressions",
        		lv_subExpressions_3_0, 
        		"de.cau.cs.kieler.esterel.Esterel.MultExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleMultExpression
entryRuleMultExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultExpressionRule()); }
	 iv_ruleMultExpression=ruleMultExpression 
	 { $current=$iv_ruleMultExpression.current; } 
	 EOF 
;

// Rule MultExpression
ruleMultExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getMultExpressionAccess().getDivExpressionParserRuleCall_0()); 
    }
    this_DivExpression_0=ruleDivExpression
    { 
        $current = $this_DivExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getMultExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultExpressionAccess().getOperatorEsterel_MultOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleEsterel_MultOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Esterel_MultOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultExpressionAccess().getSubExpressionsDivExpressionParserRuleCall_1_2_0()); 
	    }
		lv_subExpressions_3_0=ruleDivExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultExpressionRule());
	        }
       		add(
       			$current, 
       			"subExpressions",
        		lv_subExpressions_3_0, 
        		"de.cau.cs.kieler.esterel.Esterel.DivExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleDivExpression
entryRuleDivExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDivExpressionRule()); }
	 iv_ruleDivExpression=ruleDivExpression 
	 { $current=$iv_ruleDivExpression.current; } 
	 EOF 
;

// Rule DivExpression
ruleDivExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getDivExpressionAccess().getModExpressionParserRuleCall_0()); 
    }
    this_ModExpression_0=ruleModExpression
    { 
        $current = $this_ModExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDivExpressionAccess().getOperatorEsterel_DivOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleEsterel_DivOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDivExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Esterel_DivOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDivExpressionAccess().getSubExpressionsModExpressionParserRuleCall_1_2_0()); 
	    }
		lv_subExpressions_3_0=ruleModExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDivExpressionRule());
	        }
       		add(
       			$current, 
       			"subExpressions",
        		lv_subExpressions_3_0, 
        		"de.cau.cs.kieler.esterel.Esterel.ModExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleModExpression
entryRuleModExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModExpressionRule()); }
	 iv_ruleModExpression=ruleModExpression 
	 { $current=$iv_ruleModExpression.current; } 
	 EOF 
;

// Rule ModExpression
ruleModExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getModExpressionAccess().getNegExpressionParserRuleCall_0()); 
    }
    this_NegExpression_0=ruleNegExpression
    { 
        $current = $this_NegExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getModExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getModExpressionAccess().getOperatorEsterel_ModOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleEsterel_ModOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Esterel_ModOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getModExpressionAccess().getSubExpressionsAtomicValuedExpressionParserRuleCall_1_2_0()); 
	    }
		lv_subExpressions_3_0=ruleAtomicValuedExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModExpressionRule());
	        }
       		add(
       			$current, 
       			"subExpressions",
        		lv_subExpressions_3_0, 
        		"de.cau.cs.kieler.esterel.Esterel.AtomicValuedExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleNegExpression
entryRuleNegExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNegExpressionRule()); }
	 iv_ruleNegExpression=ruleNegExpression 
	 { $current=$iv_ruleNegExpression.current; } 
	 EOF 
;

// Rule NegExpression
ruleNegExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getNegExpressionAccess().getOperatorExpressionAction_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNegExpressionAccess().getOperatorEsterel_SubOperatorEnumRuleCall_0_1_0()); 
	    }
		lv_operator_1_0=ruleEsterel_SubOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNegExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_1_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Esterel_SubOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNegExpressionAccess().getSubExpressionsNegExpressionParserRuleCall_0_2_0()); 
	    }
		lv_subExpressions_2_0=ruleNegExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNegExpressionRule());
	        }
       		add(
       			$current, 
       			"subExpressions",
        		lv_subExpressions_2_0, 
        		"de.cau.cs.kieler.esterel.Esterel.NegExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getNegExpressionAccess().getAtomicValuedExpressionParserRuleCall_1()); 
    }
    this_AtomicValuedExpression_3=ruleAtomicValuedExpression
    { 
        $current = $this_AtomicValuedExpression_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAtomicValuedExpression
entryRuleAtomicValuedExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtomicValuedExpressionRule()); }
	 iv_ruleAtomicValuedExpression=ruleAtomicValuedExpression 
	 { $current=$iv_ruleAtomicValuedExpression.current; } 
	 EOF 
;

// Rule AtomicValuedExpression
ruleAtomicValuedExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicValuedExpressionAccess().getEsterel_IntValueParserRuleCall_0()); 
    }
    this_Esterel_IntValue_0=ruleEsterel_IntValue
    { 
        $current = $this_Esterel_IntValue_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicValuedExpressionAccess().getFloatValueParserRuleCall_1()); 
    }
    this_FloatValue_1=ruleFloatValue
    { 
        $current = $this_FloatValue_1.current; 
        afterParserOrEnumRuleCall();
    }

    |(((	'(' 
)=>	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAtomicValuedExpressionAccess().getLeftParenthesisKeyword_2_0());
    }
)
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicValuedExpressionAccess().getValuedExpressionParserRuleCall_2_1()); 
    }
    this_ValuedExpression_3=ruleValuedExpression
    { 
        $current = $this_ValuedExpression_3.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAtomicValuedExpressionAccess().getRightParenthesisKeyword_2_2());
    }
)
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicValuedExpressionAccess().getAtomicExpressionParserRuleCall_3()); 
    }
    this_AtomicExpression_5=ruleAtomicExpression
    { 
        $current = $this_AtomicExpression_5.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleValuedObjectTestExpression
entryRuleValuedObjectTestExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValuedObjectTestExpressionRule()); }
	 iv_ruleValuedObjectTestExpression=ruleValuedObjectTestExpression 
	 { $current=$iv_ruleValuedObjectTestExpression.current; } 
	 EOF 
;

// Rule ValuedObjectTestExpression
ruleValuedObjectTestExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getValuedObjectTestExpressionAccess().getOperatorExpressionAction_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getValuedObjectTestExpressionAccess().getOperatorEsterel_PreOperatorEnumRuleCall_0_1_0()); 
	    }
		lv_operator_1_0=ruleEsterel_PreOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValuedObjectTestExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_1_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Esterel_PreOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getValuedObjectTestExpressionAccess().getLeftParenthesisKeyword_0_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getValuedObjectTestExpressionAccess().getSubExpressionsValuedObjectTestExpressionParserRuleCall_0_3_0()); 
	    }
		lv_subExpressions_3_0=ruleValuedObjectTestExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValuedObjectTestExpressionRule());
	        }
       		add(
       			$current, 
       			"subExpressions",
        		lv_subExpressions_3_0, 
        		"de.cau.cs.kieler.esterel.Esterel.ValuedObjectTestExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getValuedObjectTestExpressionAccess().getRightParenthesisKeyword_0_4());
    }
)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getValuedObjectTestExpressionAccess().getOperatorExpressionAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getValuedObjectTestExpressionAccess().getOperatorEsterel_ValueTestOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_6_0=ruleEsterel_ValueTestOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValuedObjectTestExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_6_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Esterel_ValueTestOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getValuedObjectTestExpressionAccess().getSubExpressionsEsterel_ValuedObjectReferenceParserRuleCall_1_2_0()); 
	    }
		lv_subExpressions_7_0=ruleEsterel_ValuedObjectReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValuedObjectTestExpressionRule());
	        }
       		add(
       			$current, 
       			"subExpressions",
        		lv_subExpressions_7_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Esterel_ValuedObjectReference");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getValuedObjectTestExpressionAccess().getEsterel_ValuedObjectReferenceParserRuleCall_2()); 
    }
    this_Esterel_ValuedObjectReference_8=ruleEsterel_ValuedObjectReference
    { 
        $current = $this_Esterel_ValuedObjectReference_8.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleEsterel_ValuedObjectReference
entryRuleEsterel_ValuedObjectReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEsterel_ValuedObjectReferenceRule()); }
	 iv_ruleEsterel_ValuedObjectReference=ruleEsterel_ValuedObjectReference 
	 { $current=$iv_ruleEsterel_ValuedObjectReference.current; } 
	 EOF 
;

// Rule Esterel_ValuedObjectReference
ruleEsterel_ValuedObjectReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getEsterel_ValuedObjectReferenceAccess().getEsterel_ValuedObjectReferenceAction_0(),
            $current);
    }
)(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEsterel_ValuedObjectReferenceRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getEsterel_ValuedObjectReferenceAccess().getValuedObjectValuedObjectCrossReference_1_0()); 
	}

)
))
;





// Entry rule entryRuleTextExpression
entryRuleTextExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTextExpressionRule()); }
	 iv_ruleTextExpression=ruleTextExpression 
	 { $current=$iv_ruleTextExpression.current; } 
	 EOF 
;

// Rule TextExpression
ruleTextExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_code_0_0=RULE_HOSTCODE
		{
			newLeafNode(lv_code_0_0, grammarAccess.getTextExpressionAccess().getCodeHOSTCODETerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTextExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"code",
        		lv_code_0_0, 
        		"de.cau.cs.kieler.esterel.Esterel.HOSTCODE");
	    }

)
)(	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTextExpressionAccess().getLeftParenthesisKeyword_1_0());
    }
(
(
		lv_type_2_0=RULE_ID
		{
			newLeafNode(lv_type_2_0, grammarAccess.getTextExpressionAccess().getTypeIDTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTextExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTextExpressionAccess().getRightParenthesisKeyword_1_2());
    }
)?)
;





// Entry rule entryRuleEsterel_IntValue
entryRuleEsterel_IntValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEsterel_IntValueRule()); }
	 iv_ruleEsterel_IntValue=ruleEsterel_IntValue 
	 { $current=$iv_ruleEsterel_IntValue.current; } 
	 EOF 
;

// Rule Esterel_IntValue
ruleEsterel_IntValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_INT
		{
			newLeafNode(lv_value_0_0, grammarAccess.getEsterel_IntValueAccess().getValueINTTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEsterel_IntValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"de.cau.cs.kieler.annotations.Annotations.INT");
	    }

)
)
;





// Entry rule entryRuleFloatValue
entryRuleFloatValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFloatValueRule()); }
	 iv_ruleFloatValue=ruleFloatValue 
	 { $current=$iv_ruleFloatValue.current; } 
	 EOF 
;

// Rule FloatValue
ruleFloatValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_FLOAT
		{
			newLeafNode(lv_value_0_0, grammarAccess.getFloatValueAccess().getValueFLOATTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFloatValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"de.cau.cs.kieler.annotations.Annotations.FLOAT");
	    }

)
)
;





// Entry rule entryRuleBooleanValue
entryRuleBooleanValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanValueRule()); }
	 iv_ruleBooleanValue=ruleBooleanValue 
	 { $current=$iv_ruleBooleanValue.current; } 
	 EOF 
;

// Rule BooleanValue
ruleBooleanValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_BOOLEAN
		{
			newLeafNode(lv_value_0_0, grammarAccess.getBooleanValueAccess().getValueBOOLEANTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"de.cau.cs.kieler.annotations.Annotations.BOOLEAN");
	    }

)
)
;











// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getInstructionStatementParserRuleCall_0()); 
    }
    this_InstructionStatement_0=ruleInstructionStatement
    { 
        $current = $this_InstructionStatement_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getMetaStatementParserRuleCall_1()); 
    }
    this_MetaStatement_1=ruleMetaStatement
    { 
        $current = $this_MetaStatement_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleInstructionStatement
entryRuleInstructionStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInstructionStatementRule()); }
	 iv_ruleInstructionStatement=ruleInstructionStatement 
	 { $current=$iv_ruleInstructionStatement.current; } 
	 EOF 
;

// Rule InstructionStatement
ruleInstructionStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getInstructionStatementAccess().getAssignmentParserRuleCall_0()); 
    }
    this_Assignment_0=ruleAssignment
    { 
        $current = $this_Assignment_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getInstructionStatementAccess().getConditionalParserRuleCall_1()); 
    }
    this_Conditional_1=ruleConditional
    { 
        $current = $this_Conditional_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getInstructionStatementAccess().getGotoParserRuleCall_2()); 
    }
    this_Goto_2=ruleGoto
    { 
        $current = $this_Goto_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getInstructionStatementAccess().getParallelParserRuleCall_3()); 
    }
    this_Parallel_3=ruleParallel
    { 
        $current = $this_Parallel_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getInstructionStatementAccess().getPauseParserRuleCall_4()); 
    }
    this_Pause_4=rulePause
    { 
        $current = $this_Pause_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulePause
entryRulePause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPauseRule()); }
	 iv_rulePause=rulePause 
	 { $current=$iv_rulePause.current; } 
	 EOF 
;

// Rule Pause
rulePause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getPauseAccess().getPauseAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPauseAccess().getAnnotationsAnnotationParserRuleCall_1_0()); 
	    }
		lv_annotations_1_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPauseRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_1_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_2='pause' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPauseAccess().getPauseKeyword_2());
    }
)
;





// Entry rule entryRuleLabel
entryRuleLabel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLabelRule()); }
	 iv_ruleLabel=ruleLabel 
	 { $current=$iv_ruleLabel.current; } 
	 EOF 
;

// Rule Label
ruleLabel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLabelAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLabelRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*((
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getLabelAccess().getNameIDTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLabelRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLabelAccess().getColonKeyword_1_1());
    }
))
;





// Entry rule entryRuleGoto
entryRuleGoto returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGotoRule()); }
	 iv_ruleGoto=ruleGoto 
	 { $current=$iv_ruleGoto.current; } 
	 EOF 
;

// Rule Goto
ruleGoto returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='goto' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGotoAccess().getGotoKeyword_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getGotoRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getGotoAccess().getTargetLabelCrossReference_1_0()); 
	}

)
))
;





// Entry rule entryRuleAssignment
entryRuleAssignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignmentRule()); }
	 iv_ruleAssignment=ruleAssignment 
	 { $current=$iv_ruleAssignment.current; } 
	 EOF 
;

// Rule Assignment
ruleAssignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAssignmentRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getAssignmentAccess().getValuedObjectValuedObjectCrossReference_1_0()); 
	}

)
)(	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAssignmentAccess().getLeftSquareBracketKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentAccess().getIndicesExpressionParserRuleCall_2_1_0()); 
	    }
		lv_indices_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentRule());
	        }
       		add(
       			$current, 
       			"indices",
        		lv_indices_3_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAssignmentAccess().getRightSquareBracketKeyword_2_2());
    }
)*	otherlv_5='=' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAssignmentAccess().getEqualsSignKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentAccess().getExpressionExpressionParserRuleCall_4_0()); 
	    }
		lv_expression_6_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_6_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;







// Entry rule entryRuleTestEntity
entryRuleTestEntity returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTestEntityRule()); }
	 iv_ruleTestEntity=ruleTestEntity 
	 { $current=$iv_ruleTestEntity.current; } 
	 EOF 
;

// Rule TestEntity
ruleTestEntity returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTestEntityAccess().getExpressionAnnotatedExpressionParserRuleCall_0_0()); 
	    }
		lv_expression_0_0=ruleAnnotatedExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTestEntityRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_0_0, 
        		"de.cau.cs.kieler.kexpressions.kext.KExt.AnnotatedExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getTestEntityAccess().getEffectEffectParserRuleCall_1_0()); 
	    }
		lv_effect_1_0=ruleEffect		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTestEntityRule());
	        }
       		set(
       			$current, 
       			"effect",
        		lv_effect_1_0, 
        		"de.cau.cs.kieler.kexpressions.keffects.KEffects.Effect");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAnnotatedExpression
entryRuleAnnotatedExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnnotatedExpressionRule()); }
	 iv_ruleAnnotatedExpression=ruleAnnotatedExpression 
	 { $current=$iv_ruleAnnotatedExpression.current; } 
	 EOF 
;

// Rule AnnotatedExpression
ruleAnnotatedExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotatedExpressionAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotatedExpressionRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='expression' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAnnotatedExpressionAccess().getExpressionKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAnnotatedExpressionAccess().getExpressionExpressionParserRuleCall_2_0()); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnnotatedExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDeclaration
entryRuleDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclarationRule()); }
	 iv_ruleDeclaration=ruleDeclaration 
	 { $current=$iv_ruleDeclaration.current; } 
	 EOF 
;

// Rule Declaration
ruleDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDeclarationAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclarationRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		lv_const_1_0=	'const' 
    {
        newLeafNode(lv_const_1_0, grammarAccess.getDeclarationAccess().getConstConstKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDeclarationRule());
	        }
       		setWithLastConsumed($current, "const", true, "const");
	    }

)
)?(
(
		lv_extern_2_0=	'extern' 
    {
        newLeafNode(lv_extern_2_0, grammarAccess.getDeclarationAccess().getExternExternKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDeclarationRule());
	        }
       		setWithLastConsumed($current, "extern", true, "extern");
	    }

)
)?(
(
		lv_volatile_3_0=	'volatile' 
    {
        newLeafNode(lv_volatile_3_0, grammarAccess.getDeclarationAccess().getVolatileVolatileKeyword_3_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDeclarationRule());
	        }
       		setWithLastConsumed($current, "volatile", true, "volatile");
	    }

)
)?(
(
		lv_input_4_0=	'input' 
    {
        newLeafNode(lv_input_4_0, grammarAccess.getDeclarationAccess().getInputInputKeyword_4_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDeclarationRule());
	        }
       		setWithLastConsumed($current, "input", true, "input");
	    }

)
)?(
(
		lv_output_5_0=	'output' 
    {
        newLeafNode(lv_output_5_0, grammarAccess.getDeclarationAccess().getOutputOutputKeyword_5_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDeclarationRule());
	        }
       		setWithLastConsumed($current, "output", true, "output");
	    }

)
)?(
(
		lv_static_6_0=	'static' 
    {
        newLeafNode(lv_static_6_0, grammarAccess.getDeclarationAccess().getStaticStaticKeyword_6_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDeclarationRule());
	        }
       		setWithLastConsumed($current, "static", true, "static");
	    }

)
)?(((
(
		lv_signal_7_0=	'signal' 
    {
        newLeafNode(lv_signal_7_0, grammarAccess.getDeclarationAccess().getSignalSignalKeyword_7_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDeclarationRule());
	        }
       		setWithLastConsumed($current, "signal", true, "signal");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclarationAccess().getTypeValueTypeEnumRuleCall_7_0_1_0()); 
	    }
		lv_type_8_0=ruleValueType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_8_0, 
        		"de.cau.cs.kieler.kexpressions.KExpressions.ValueType");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		lv_signal_9_0=	'signal' 
    {
        newLeafNode(lv_signal_9_0, grammarAccess.getDeclarationAccess().getSignalSignalKeyword_7_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDeclarationRule());
	        }
       		setWithLastConsumed($current, "signal", true, "signal");
	    }

)
))(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclarationAccess().getValuedObjectsValuedObjectParserRuleCall_8_0()); 
	    }
		lv_valuedObjects_10_0=ruleValuedObject		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclarationRule());
	        }
       		add(
       			$current, 
       			"valuedObjects",
        		lv_valuedObjects_10_0, 
        		"de.cau.cs.kieler.kexpressions.kext.KExt.ValuedObject");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_11=',' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getDeclarationAccess().getCommaKeyword_9_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclarationAccess().getValuedObjectsValuedObjectParserRuleCall_9_1_0()); 
	    }
		lv_valuedObjects_12_0=ruleValuedObject		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclarationRule());
	        }
       		add(
       			$current, 
       			"valuedObjects",
        		lv_valuedObjects_12_0, 
        		"de.cau.cs.kieler.kexpressions.kext.KExt.ValuedObject");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_13=';' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getDeclarationAccess().getSemicolonKeyword_10());
    }
)
;





// Entry rule entryRuleValuedObject
entryRuleValuedObject returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValuedObjectRule()); }
	 iv_ruleValuedObject=ruleValuedObject 
	 { $current=$iv_ruleValuedObject.current; } 
	 EOF 
;

// Rule ValuedObject
ruleValuedObject returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getValuedObjectAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getValuedObjectRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)(	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getValuedObjectAccess().getLeftSquareBracketKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getValuedObjectAccess().getCardinalitiesExpressionParserRuleCall_1_1_0()); 
	    }
		lv_cardinalities_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValuedObjectRule());
	        }
       		add(
       			$current, 
       			"cardinalities",
        		lv_cardinalities_2_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getValuedObjectAccess().getRightSquareBracketKeyword_1_2());
    }
)*(	otherlv_4='=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getValuedObjectAccess().getEqualsSignKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getValuedObjectAccess().getInitialValueExpressionParserRuleCall_2_1_0()); 
	    }
		lv_initialValue_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValuedObjectRule());
	        }
       		set(
       			$current, 
       			"initialValue",
        		lv_initialValue_5_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_6='combine' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getValuedObjectAccess().getCombineKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getValuedObjectAccess().getCombineOperatorCombineOperatorEnumRuleCall_3_1_0()); 
	    }
		lv_combineOperator_7_0=ruleCombineOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValuedObjectRule());
	        }
       		set(
       			$current, 
       			"combineOperator",
        		lv_combineOperator_7_0, 
        		"de.cau.cs.kieler.kexpressions.KExpressions.CombineOperator");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleEffect
entryRuleEffect returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEffectRule()); }
	 iv_ruleEffect=ruleEffect 
	 { $current=$iv_ruleEffect.current; } 
	 EOF 
;

// Rule Effect
ruleEffect returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEffectAccess().getAssignmentParserRuleCall_0()); 
    }
    this_Assignment_0=ruleAssignment
    { 
        $current = $this_Assignment_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEffectAccess().getPostfixEffectParserRuleCall_1()); 
    }
    this_PostfixEffect_1=rulePostfixEffect
    { 
        $current = $this_PostfixEffect_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEffectAccess().getEmissionParserRuleCall_2()); 
    }
    this_Emission_2=ruleEmission
    { 
        $current = $this_Emission_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEffectAccess().getHostcodeEffectParserRuleCall_3()); 
    }
    this_HostcodeEffect_3=ruleHostcodeEffect
    { 
        $current = $this_HostcodeEffect_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEffectAccess().getFunctionCallEffectParserRuleCall_4()); 
    }
    this_FunctionCallEffect_4=ruleFunctionCallEffect
    { 
        $current = $this_FunctionCallEffect_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleEmission
entryRuleEmission returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEmissionRule()); }
	 iv_ruleEmission=ruleEmission 
	 { $current=$iv_ruleEmission.current; } 
	 EOF 
;

// Rule Emission
ruleEmission returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getEmissionAccess().getAnnotationsRestrictedAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleRestrictedAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEmissionRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"de.cau.cs.kieler.annotations.Annotations.RestrictedAnnotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEmissionRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getEmissionAccess().getValuedObjectValuedObjectCrossReference_1_0()); 
	}

)
)(	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEmissionAccess().getLeftParenthesisKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEmissionAccess().getNewValueExpressionParserRuleCall_2_1_0()); 
	    }
		lv_newValue_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEmissionRule());
	        }
       		set(
       			$current, 
       			"newValue",
        		lv_newValue_3_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getEmissionAccess().getRightParenthesisKeyword_2_2());
    }
)?)
;





// Entry rule entryRulePostfixEffect
entryRulePostfixEffect returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPostfixEffectRule()); }
	 iv_rulePostfixEffect=rulePostfixEffect 
	 { $current=$iv_rulePostfixEffect.current; } 
	 EOF 
;

// Rule PostfixEffect
rulePostfixEffect returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPostfixEffectAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPostfixEffectRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getPostfixEffectRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getPostfixEffectAccess().getValuedObjectValuedObjectCrossReference_1_0()); 
	}

)
)(	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPostfixEffectAccess().getLeftSquareBracketKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPostfixEffectAccess().getIndicesExpressionParserRuleCall_2_1_0()); 
	    }
		lv_indices_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPostfixEffectRule());
	        }
       		add(
       			$current, 
       			"indices",
        		lv_indices_3_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPostfixEffectAccess().getRightSquareBracketKeyword_2_2());
    }
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getPostfixEffectAccess().getOperatorPostfixOperatorEnumRuleCall_3_0()); 
	    }
		lv_operator_5_0=rulePostfixOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPostfixEffectRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_5_0, 
        		"de.cau.cs.kieler.kexpressions.keffects.KEffects.PostfixOperator");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleHostcodeEffect
entryRuleHostcodeEffect returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getHostcodeEffectRule()); }
	 iv_ruleHostcodeEffect=ruleHostcodeEffect 
	 { $current=$iv_ruleHostcodeEffect.current; } 
	 EOF 
;

// Rule HostcodeEffect
ruleHostcodeEffect returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getHostcodeEffectAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHostcodeEffectRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		lv_text_1_0=RULE_HOSTCODE
		{
			newLeafNode(lv_text_1_0, grammarAccess.getHostcodeEffectAccess().getTextHOSTCODETerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getHostcodeEffectRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"text",
        		lv_text_1_0, 
        		"de.cau.cs.kieler.esterel.Esterel.HOSTCODE");
	    }

)
))
;





// Entry rule entryRuleFunctionCallEffect
entryRuleFunctionCallEffect returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionCallEffectRule()); }
	 iv_ruleFunctionCallEffect=ruleFunctionCallEffect 
	 { $current=$iv_ruleFunctionCallEffect.current; } 
	 EOF 
;

// Rule FunctionCallEffect
ruleFunctionCallEffect returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionCallEffectAccess().getAnnotationsAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionCallEffectRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='<' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFunctionCallEffectAccess().getLessThanSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionCallEffectAccess().getFunctionNameExtendedIDParserRuleCall_2_0()); 
	    }
		lv_functionName_2_0=ruleExtendedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionCallEffectRule());
	        }
       		set(
       			$current, 
       			"functionName",
        		lv_functionName_2_0, 
        		"de.cau.cs.kieler.annotations.Annotations.ExtendedID");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFunctionCallEffectAccess().getLeftParenthesisKeyword_3_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionCallEffectAccess().getParametersParameterParserRuleCall_3_0_1_0()); 
	    }
		lv_parameters_4_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionCallEffectRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_4_0, 
        		"de.cau.cs.kieler.kexpressions.KExpressions.Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFunctionCallEffectAccess().getCommaKeyword_3_0_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionCallEffectAccess().getParametersParameterParserRuleCall_3_0_2_1_0()); 
	    }
		lv_parameters_6_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionCallEffectRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_6_0, 
        		"de.cau.cs.kieler.kexpressions.KExpressions.Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getFunctionCallEffectAccess().getRightParenthesisKeyword_3_0_3());
    }
)
    |	otherlv_8='()' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getFunctionCallEffectAccess().getLeftParenthesisRightParenthesisKeyword_3_1());
    }
)?	otherlv_9='>' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getFunctionCallEffectAccess().getGreaterThanSignKeyword_4());
    }
)
;









// Entry rule entryRuleLogicalOrExpression
entryRuleLogicalOrExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogicalOrExpressionRule()); }
	 iv_ruleLogicalOrExpression=ruleLogicalOrExpression 
	 { $current=$iv_ruleLogicalOrExpression.current; } 
	 EOF 
;

// Rule LogicalOrExpression
ruleLogicalOrExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLogicalOrExpressionAccess().getLogicalAndExpressionParserRuleCall_0()); 
    }
    this_LogicalAndExpression_0=ruleLogicalAndExpression
    { 
        $current = $this_LogicalAndExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getLogicalOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalOrExpressionAccess().getOperatorLogicalOrOperatorEnumRuleCall_1_1_0_0()); 
	    }
		lv_operator_2_0=ruleLogicalOrOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalOrExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"de.cau.cs.kieler.kexpressions.KExpressions.LogicalOrOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalOrExpressionAccess().getSubExpressionsLogicalAndExpressionParserRuleCall_1_1_1_0()); 
	    }
		lv_subExpressions_3_0=ruleLogicalAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalOrExpressionRule());
	        }
       		add(
       			$current, 
       			"subExpressions",
        		lv_subExpressions_3_0, 
        		"de.cau.cs.kieler.kexpressions.KExpressions.LogicalAndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))+)?)
;





// Entry rule entryRuleLogicalAndExpression
entryRuleLogicalAndExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogicalAndExpressionRule()); }
	 iv_ruleLogicalAndExpression=ruleLogicalAndExpression 
	 { $current=$iv_ruleLogicalAndExpression.current; } 
	 EOF 
;

// Rule LogicalAndExpression
ruleLogicalAndExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLogicalAndExpressionAccess().getBitwiseOrExpressionParserRuleCall_0()); 
    }
    this_BitwiseOrExpression_0=ruleBitwiseOrExpression
    { 
        $current = $this_BitwiseOrExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getLogicalAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalAndExpressionAccess().getOperatorLogicalAndOperatorEnumRuleCall_1_1_0_0()); 
	    }
		lv_operator_2_0=ruleLogicalAndOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalAndExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"de.cau.cs.kieler.kexpressions.KExpressions.LogicalAndOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalAndExpressionAccess().getSubExpressionsBitwiseOrExpressionParserRuleCall_1_1_1_0()); 
	    }
		lv_subExpressions_3_0=ruleBitwiseOrExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalAndExpressionRule());
	        }
       		add(
       			$current, 
       			"subExpressions",
        		lv_subExpressions_3_0, 
        		"de.cau.cs.kieler.kexpressions.KExpressions.BitwiseOrExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))+)?)
;





// Entry rule entryRuleBitwiseOrExpression
entryRuleBitwiseOrExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBitwiseOrExpressionRule()); }
	 iv_ruleBitwiseOrExpression=ruleBitwiseOrExpression 
	 { $current=$iv_ruleBitwiseOrExpression.current; } 
	 EOF 
;

// Rule BitwiseOrExpression
ruleBitwiseOrExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBitwiseOrExpressionAccess().getBitwiseAndExpressionParserRuleCall_0()); 
    }
    this_BitwiseAndExpression_0=ruleBitwiseAndExpression
    { 
        $current = $this_BitwiseAndExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getBitwiseOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getBitwiseOrExpressionAccess().getOperatorBitwiseOrOperatorEnumRuleCall_1_1_0_0()); 
	    }
		lv_operator_2_0=ruleBitwiseOrOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBitwiseOrExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"de.cau.cs.kieler.kexpressions.KExpressions.BitwiseOrOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBitwiseOrExpressionAccess().getSubExpressionsBitwiseAndExpressionParserRuleCall_1_1_1_0()); 
	    }
		lv_subExpressions_3_0=ruleBitwiseAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBitwiseOrExpressionRule());
	        }
       		add(
       			$current, 
       			"subExpressions",
        		lv_subExpressions_3_0, 
        		"de.cau.cs.kieler.kexpressions.KExpressions.BitwiseAndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))+)?)
;





// Entry rule entryRuleBitwiseAndExpression
entryRuleBitwiseAndExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBitwiseAndExpressionRule()); }
	 iv_ruleBitwiseAndExpression=ruleBitwiseAndExpression 
	 { $current=$iv_ruleBitwiseAndExpression.current; } 
	 EOF 
;

// Rule BitwiseAndExpression
ruleBitwiseAndExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBitwiseAndExpressionAccess().getCompareOperationParserRuleCall_0()); 
    }
    this_CompareOperation_0=ruleCompareOperation
    { 
        $current = $this_CompareOperation_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getBitwiseAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getBitwiseAndExpressionAccess().getOperatorBitwiseAndOperatorEnumRuleCall_1_1_0_0()); 
	    }
		lv_operator_2_0=ruleBitwiseAndOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBitwiseAndExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"de.cau.cs.kieler.kexpressions.KExpressions.BitwiseAndOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBitwiseAndExpressionAccess().getSubExpressionsCompareOperationParserRuleCall_1_1_1_0()); 
	    }
		lv_subExpressions_3_0=ruleCompareOperation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBitwiseAndExpressionRule());
	        }
       		add(
       			$current, 
       			"subExpressions",
        		lv_subExpressions_3_0, 
        		"de.cau.cs.kieler.esterel.Esterel.CompareOperation");
	        afterParserOrEnumRuleCall();
	    }

)
))+)?)
;









// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_pureOutput_0_0=	'!' 
    {
        newLeafNode(lv_pureOutput_0_0, grammarAccess.getParameterAccess().getPureOutputExclamationMarkKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterRule());
	        }
       		setWithLastConsumed($current, "pureOutput", true, "!");
	    }

)
)?(
(
		lv_callByReference_1_0=	'&' 
    {
        newLeafNode(lv_callByReference_1_0, grammarAccess.getParameterAccess().getCallByReferenceAmpersandKeyword_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterRule());
	        }
       		setWithLastConsumed($current, "callByReference", true, "&");
	    }

)
))?(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getExpressionExpressionParserRuleCall_1_0()); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"de.cau.cs.kieler.esterel.Esterel.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleIntValue
entryRuleIntValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntValueRule()); }
	 iv_ruleIntValue=ruleIntValue 
	 { $current=$iv_ruleIntValue.current; } 
	 EOF 
;

// Rule IntValue
ruleIntValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_INT
		{
			newLeafNode(lv_value_0_0, grammarAccess.getIntValueAccess().getValueINTTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"de.cau.cs.kieler.annotations.Annotations.INT");
	    }

)
)
;





// Entry rule entryRuleBoolValue
entryRuleBoolValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBoolValueRule()); }
	 iv_ruleBoolValue=ruleBoolValue 
	 { $current=$iv_ruleBoolValue.current; } 
	 EOF 
;

// Rule BoolValue
ruleBoolValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_BOOLEAN
		{
			newLeafNode(lv_value_0_0, grammarAccess.getBoolValueAccess().getValueBOOLEANTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBoolValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"de.cau.cs.kieler.annotations.Annotations.BOOLEAN");
	    }

)
)
;





// Entry rule entryRuleStringValue
entryRuleStringValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringValueRule()); }
	 iv_ruleStringValue=ruleStringValue 
	 { $current=$iv_ruleStringValue.current; } 
	 EOF 
;

// Rule StringValue
ruleStringValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_STRING
		{
			newLeafNode(lv_value_0_0, grammarAccess.getStringValueAccess().getValueSTRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"de.cau.cs.kieler.esterel.Esterel.STRING");
	    }

)
)
;







// Entry rule entryRuleAnnotation
entryRuleAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnnotationRule()); }
	 iv_ruleAnnotation=ruleAnnotation 
	 { $current=$iv_ruleAnnotation.current; } 
	 EOF 
;

// Rule Annotation
ruleAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAnnotationAccess().getCommentAnnotationParserRuleCall_0()); 
    }
    this_CommentAnnotation_0=ruleCommentAnnotation
    { 
        $current = $this_CommentAnnotation_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAnnotationAccess().getKeyBooleanValueAnnotationParserRuleCall_1()); 
    }
    this_KeyBooleanValueAnnotation_1=ruleKeyBooleanValueAnnotation
    { 
        $current = $this_KeyBooleanValueAnnotation_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAnnotationAccess().getKeyStringValueAnnotationParserRuleCall_2()); 
    }
    this_KeyStringValueAnnotation_2=ruleKeyStringValueAnnotation
    { 
        $current = $this_KeyStringValueAnnotation_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAnnotationAccess().getTypedKeyStringValueAnnotationParserRuleCall_3()); 
    }
    this_TypedKeyStringValueAnnotation_3=ruleTypedKeyStringValueAnnotation
    { 
        $current = $this_TypedKeyStringValueAnnotation_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAnnotationAccess().getKeyIntValueAnnotationParserRuleCall_4()); 
    }
    this_KeyIntValueAnnotation_4=ruleKeyIntValueAnnotation
    { 
        $current = $this_KeyIntValueAnnotation_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAnnotationAccess().getKeyFloatValueAnnotationParserRuleCall_5()); 
    }
    this_KeyFloatValueAnnotation_5=ruleKeyFloatValueAnnotation
    { 
        $current = $this_KeyFloatValueAnnotation_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAnnotationAccess().getTagAnnotationParserRuleCall_6()); 
    }
    this_TagAnnotation_6=ruleTagAnnotation
    { 
        $current = $this_TagAnnotation_6.current; 
        afterParserOrEnumRuleCall();
    }
)
;







// Entry rule entryRuleRestrictedAnnotation
entryRuleRestrictedAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRestrictedAnnotationRule()); }
	 iv_ruleRestrictedAnnotation=ruleRestrictedAnnotation 
	 { $current=$iv_ruleRestrictedAnnotation.current; } 
	 EOF 
;

// Rule RestrictedAnnotation
ruleRestrictedAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getRestrictedAnnotationAccess().getCommentAnnotationParserRuleCall_0()); 
    }
    this_CommentAnnotation_0=ruleCommentAnnotation
    { 
        $current = $this_CommentAnnotation_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getRestrictedAnnotationAccess().getQuotedKeyStringValueAnnotationParserRuleCall_1()); 
    }
    this_QuotedKeyStringValueAnnotation_1=ruleQuotedKeyStringValueAnnotation
    { 
        $current = $this_QuotedKeyStringValueAnnotation_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getRestrictedAnnotationAccess().getQuotedTypedKeyStringValueAnnotationParserRuleCall_2()); 
    }
    this_QuotedTypedKeyStringValueAnnotation_2=ruleQuotedTypedKeyStringValueAnnotation
    { 
        $current = $this_QuotedTypedKeyStringValueAnnotation_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getRestrictedAnnotationAccess().getKeyBooleanValueAnnotationParserRuleCall_3()); 
    }
    this_KeyBooleanValueAnnotation_3=ruleKeyBooleanValueAnnotation
    { 
        $current = $this_KeyBooleanValueAnnotation_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getRestrictedAnnotationAccess().getKeyIntValueAnnotationParserRuleCall_4()); 
    }
    this_KeyIntValueAnnotation_4=ruleKeyIntValueAnnotation
    { 
        $current = $this_KeyIntValueAnnotation_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getRestrictedAnnotationAccess().getKeyFloatValueAnnotationParserRuleCall_5()); 
    }
    this_KeyFloatValueAnnotation_5=ruleKeyFloatValueAnnotation
    { 
        $current = $this_KeyFloatValueAnnotation_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getRestrictedAnnotationAccess().getTagAnnotationParserRuleCall_6()); 
    }
    this_TagAnnotation_6=ruleTagAnnotation
    { 
        $current = $this_TagAnnotation_6.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleCommentAnnotation
entryRuleCommentAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCommentAnnotationRule()); }
	 iv_ruleCommentAnnotation=ruleCommentAnnotation 
	 { $current=$iv_ruleCommentAnnotation.current; } 
	 EOF 
;

// Rule CommentAnnotation
ruleCommentAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_values_0_0=RULE_COMMENT_ANNOTATION
		{
			newLeafNode(lv_values_0_0, grammarAccess.getCommentAnnotationAccess().getValuesCOMMENT_ANNOTATIONTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCommentAnnotationRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"values",
        		lv_values_0_0, 
        		"de.cau.cs.kieler.annotations.Annotations.COMMENT_ANNOTATION");
	    }

)
)
;





// Entry rule entryRuleTagAnnotation
entryRuleTagAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTagAnnotationRule()); }
	 iv_ruleTagAnnotation=ruleTagAnnotation 
	 { $current=$iv_ruleTagAnnotation.current; } 
	 EOF 
;

// Rule TagAnnotation
ruleTagAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTagAnnotationAccess().getCommercialAtKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTagAnnotationAccess().getNameExtendedIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleExtendedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTagAnnotationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"de.cau.cs.kieler.annotations.Annotations.ExtendedID");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleKeyStringValueAnnotation
entryRuleKeyStringValueAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getKeyStringValueAnnotationRule()); }
	 iv_ruleKeyStringValueAnnotation=ruleKeyStringValueAnnotation 
	 { $current=$iv_ruleKeyStringValueAnnotation.current; } 
	 EOF 
;

// Rule KeyStringValueAnnotation
ruleKeyStringValueAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getKeyStringValueAnnotationAccess().getCommercialAtKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getKeyStringValueAnnotationAccess().getNameExtendedIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleExtendedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKeyStringValueAnnotationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"de.cau.cs.kieler.annotations.Annotations.ExtendedID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getKeyStringValueAnnotationAccess().getValuesEStringParserRuleCall_2_0()); 
	    }
		lv_values_2_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKeyStringValueAnnotationRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_2_0, 
        		"de.cau.cs.kieler.annotations.Annotations.EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getKeyStringValueAnnotationAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getKeyStringValueAnnotationAccess().getValuesEStringParserRuleCall_3_1_0()); 
	    }
		lv_values_4_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKeyStringValueAnnotationRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_4_0, 
        		"de.cau.cs.kieler.annotations.Annotations.EString");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleTypedKeyStringValueAnnotation
entryRuleTypedKeyStringValueAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypedKeyStringValueAnnotationRule()); }
	 iv_ruleTypedKeyStringValueAnnotation=ruleTypedKeyStringValueAnnotation 
	 { $current=$iv_ruleTypedKeyStringValueAnnotation.current; } 
	 EOF 
;

// Rule TypedKeyStringValueAnnotation
ruleTypedKeyStringValueAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTypedKeyStringValueAnnotationAccess().getCommercialAtKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypedKeyStringValueAnnotationAccess().getNameExtendedIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleExtendedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypedKeyStringValueAnnotationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"de.cau.cs.kieler.annotations.Annotations.ExtendedID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTypedKeyStringValueAnnotationAccess().getLeftSquareBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypedKeyStringValueAnnotationAccess().getTypeExtendedIDParserRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleExtendedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypedKeyStringValueAnnotationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"de.cau.cs.kieler.annotations.Annotations.ExtendedID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTypedKeyStringValueAnnotationAccess().getRightSquareBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypedKeyStringValueAnnotationAccess().getValuesEStringBooleanParserRuleCall_5_0()); 
	    }
		lv_values_5_0=ruleEStringBoolean		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypedKeyStringValueAnnotationRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_5_0, 
        		"de.cau.cs.kieler.annotations.Annotations.EStringBoolean");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getTypedKeyStringValueAnnotationAccess().getCommaKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypedKeyStringValueAnnotationAccess().getValuesEStringBooleanParserRuleCall_6_1_0()); 
	    }
		lv_values_7_0=ruleEStringBoolean		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypedKeyStringValueAnnotationRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_7_0, 
        		"de.cau.cs.kieler.annotations.Annotations.EStringBoolean");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleQuotedKeyStringValueAnnotation
entryRuleQuotedKeyStringValueAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQuotedKeyStringValueAnnotationRule()); }
	 iv_ruleQuotedKeyStringValueAnnotation=ruleQuotedKeyStringValueAnnotation 
	 { $current=$iv_ruleQuotedKeyStringValueAnnotation.current; } 
	 EOF 
;

// Rule QuotedKeyStringValueAnnotation
ruleQuotedKeyStringValueAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getQuotedKeyStringValueAnnotationAccess().getCommercialAtKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getQuotedKeyStringValueAnnotationAccess().getNameExtendedIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleExtendedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQuotedKeyStringValueAnnotationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"de.cau.cs.kieler.annotations.Annotations.ExtendedID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_values_2_0=RULE_STRING
		{
			newLeafNode(lv_values_2_0, grammarAccess.getQuotedKeyStringValueAnnotationAccess().getValuesSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getQuotedKeyStringValueAnnotationRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"values",
        		lv_values_2_0, 
        		"de.cau.cs.kieler.esterel.Esterel.STRING");
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getQuotedKeyStringValueAnnotationAccess().getCommaKeyword_3_0());
    }
(
(
		lv_values_4_0=RULE_STRING
		{
			newLeafNode(lv_values_4_0, grammarAccess.getQuotedKeyStringValueAnnotationAccess().getValuesSTRINGTerminalRuleCall_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getQuotedKeyStringValueAnnotationRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"values",
        		lv_values_4_0, 
        		"de.cau.cs.kieler.esterel.Esterel.STRING");
	    }

)
))*)
;





// Entry rule entryRuleQuotedTypedKeyStringValueAnnotation
entryRuleQuotedTypedKeyStringValueAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQuotedTypedKeyStringValueAnnotationRule()); }
	 iv_ruleQuotedTypedKeyStringValueAnnotation=ruleQuotedTypedKeyStringValueAnnotation 
	 { $current=$iv_ruleQuotedTypedKeyStringValueAnnotation.current; } 
	 EOF 
;

// Rule QuotedTypedKeyStringValueAnnotation
ruleQuotedTypedKeyStringValueAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getQuotedTypedKeyStringValueAnnotationAccess().getCommercialAtKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getQuotedTypedKeyStringValueAnnotationAccess().getNameExtendedIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleExtendedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQuotedTypedKeyStringValueAnnotationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"de.cau.cs.kieler.annotations.Annotations.ExtendedID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getQuotedTypedKeyStringValueAnnotationAccess().getLeftSquareBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getQuotedTypedKeyStringValueAnnotationAccess().getTypeExtendedIDParserRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleExtendedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQuotedTypedKeyStringValueAnnotationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"de.cau.cs.kieler.annotations.Annotations.ExtendedID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getQuotedTypedKeyStringValueAnnotationAccess().getRightSquareBracketKeyword_4());
    }
(
(
		lv_values_5_0=RULE_STRING
		{
			newLeafNode(lv_values_5_0, grammarAccess.getQuotedTypedKeyStringValueAnnotationAccess().getValuesSTRINGTerminalRuleCall_5_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getQuotedTypedKeyStringValueAnnotationRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"values",
        		lv_values_5_0, 
        		"de.cau.cs.kieler.esterel.Esterel.STRING");
	    }

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getQuotedTypedKeyStringValueAnnotationAccess().getCommaKeyword_6_0());
    }
(
(
		lv_values_7_0=RULE_STRING
		{
			newLeafNode(lv_values_7_0, grammarAccess.getQuotedTypedKeyStringValueAnnotationAccess().getValuesSTRINGTerminalRuleCall_6_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getQuotedTypedKeyStringValueAnnotationRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"values",
        		lv_values_7_0, 
        		"de.cau.cs.kieler.esterel.Esterel.STRING");
	    }

)
))*)
;





// Entry rule entryRuleKeyBooleanValueAnnotation
entryRuleKeyBooleanValueAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getKeyBooleanValueAnnotationRule()); }
	 iv_ruleKeyBooleanValueAnnotation=ruleKeyBooleanValueAnnotation 
	 { $current=$iv_ruleKeyBooleanValueAnnotation.current; } 
	 EOF 
;

// Rule KeyBooleanValueAnnotation
ruleKeyBooleanValueAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getKeyBooleanValueAnnotationAccess().getCommercialAtKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getKeyBooleanValueAnnotationAccess().getNameExtendedIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleExtendedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKeyBooleanValueAnnotationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"de.cau.cs.kieler.annotations.Annotations.ExtendedID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_value_2_0=RULE_BOOLEAN
		{
			newLeafNode(lv_value_2_0, grammarAccess.getKeyBooleanValueAnnotationAccess().getValueBOOLEANTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getKeyBooleanValueAnnotationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"de.cau.cs.kieler.annotations.Annotations.BOOLEAN");
	    }

)
))
;





// Entry rule entryRuleKeyIntValueAnnotation
entryRuleKeyIntValueAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getKeyIntValueAnnotationRule()); }
	 iv_ruleKeyIntValueAnnotation=ruleKeyIntValueAnnotation 
	 { $current=$iv_ruleKeyIntValueAnnotation.current; } 
	 EOF 
;

// Rule KeyIntValueAnnotation
ruleKeyIntValueAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getKeyIntValueAnnotationAccess().getCommercialAtKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getKeyIntValueAnnotationAccess().getNameExtendedIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleExtendedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKeyIntValueAnnotationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"de.cau.cs.kieler.annotations.Annotations.ExtendedID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getKeyIntValueAnnotationAccess().getValueIntegerParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleInteger		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKeyIntValueAnnotationRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Integer");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleKeyFloatValueAnnotation
entryRuleKeyFloatValueAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getKeyFloatValueAnnotationRule()); }
	 iv_ruleKeyFloatValueAnnotation=ruleKeyFloatValueAnnotation 
	 { $current=$iv_ruleKeyFloatValueAnnotation.current; } 
	 EOF 
;

// Rule KeyFloatValueAnnotation
ruleKeyFloatValueAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getKeyFloatValueAnnotationAccess().getCommercialAtKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getKeyFloatValueAnnotationAccess().getNameExtendedIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleExtendedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKeyFloatValueAnnotationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"de.cau.cs.kieler.annotations.Annotations.ExtendedID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getKeyFloatValueAnnotationAccess().getValueFloategerParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleFloateger		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKeyFloatValueAnnotationRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"de.cau.cs.kieler.annotations.Annotations.Floateger");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleEString
entryRuleEString returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEStringRule()); } 
	 iv_ruleEString=ruleEString 
	 { $current=$iv_ruleEString.current.getText(); }  
	 EOF 
;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getEStringAccess().getExtendedIDParserRuleCall_1()); 
    }
    this_ExtendedID_1=ruleExtendedID    {
		$current.merge(this_ExtendedID_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleEStringBoolean
entryRuleEStringBoolean returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEStringBooleanRule()); } 
	 iv_ruleEStringBoolean=ruleEStringBoolean 
	 { $current=$iv_ruleEStringBoolean.current.getText(); }  
	 EOF 
;

// Rule EStringBoolean
ruleEStringBoolean returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getEStringBooleanAccess().getSTRINGTerminalRuleCall_0()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getEStringBooleanAccess().getExtendedIDParserRuleCall_1()); 
    }
    this_ExtendedID_1=ruleExtendedID    {
		$current.merge(this_ExtendedID_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |    this_BOOLEAN_2=RULE_BOOLEAN    {
		$current.merge(this_BOOLEAN_2);
    }

    { 
    newLeafNode(this_BOOLEAN_2, grammarAccess.getEStringBooleanAccess().getBOOLEANTerminalRuleCall_2()); 
    }
)
    ;





// Entry rule entryRuleExtendedID
entryRuleExtendedID returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getExtendedIDRule()); } 
	 iv_ruleExtendedID=ruleExtendedID 
	 { $current=$iv_ruleExtendedID.current.getText(); }  
	 EOF 
;

// Rule ExtendedID
ruleExtendedID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getExtendedIDAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExtendedIDAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getExtendedIDAccess().getIDTerminalRuleCall_1_1()); 
    }
)*(
	kw='#' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExtendedIDAccess().getNumberSignKeyword_2_0()); 
    }
    this_INT_4=RULE_INT    {
		$current.merge(this_INT_4);
    }

    { 
    newLeafNode(this_INT_4, grammarAccess.getExtendedIDAccess().getINTTerminalRuleCall_2_1()); 
    }
)?)
    ;





// Entry rule entryRuleInteger
entryRuleInteger returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntegerRule()); } 
	 iv_ruleInteger=ruleInteger 
	 { $current=$iv_ruleInteger.current.getText(); }  
	 EOF 
;

// Rule Integer
ruleInteger returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIntegerAccess().getHyphenMinusKeyword_0()); 
    }
)?    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getIntegerAccess().getINTTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleFloateger
entryRuleFloateger returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFloategerRule()); } 
	 iv_ruleFloateger=ruleFloateger 
	 { $current=$iv_ruleFloateger.current.getText(); }  
	 EOF 
;

// Rule Floateger
ruleFloateger returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFloategerAccess().getHyphenMinusKeyword_0()); 
    }
)?    this_FLOAT_1=RULE_FLOAT    {
		$current.merge(this_FLOAT_1);
    }

    { 
    newLeafNode(this_FLOAT_1, grammarAccess.getFloategerAccess().getFLOATTerminalRuleCall_1()); 
    }
)
    ;





// Rule Esterel_CompareOperator
ruleEsterel_CompareOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='=' 
	{
        $current = grammarAccess.getEsterel_CompareOperatorAccess().getEQEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getEsterel_CompareOperatorAccess().getEQEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='<' 
	{
        $current = grammarAccess.getEsterel_CompareOperatorAccess().getLTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getEsterel_CompareOperatorAccess().getLTEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='<=' 
	{
        $current = grammarAccess.getEsterel_CompareOperatorAccess().getLEQEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getEsterel_CompareOperatorAccess().getLEQEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='>' 
	{
        $current = grammarAccess.getEsterel_CompareOperatorAccess().getGTEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getEsterel_CompareOperatorAccess().getGTEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='>=' 
	{
        $current = grammarAccess.getEsterel_CompareOperatorAccess().getGEQEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getEsterel_CompareOperatorAccess().getGEQEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='<>' 
	{
        $current = grammarAccess.getEsterel_CompareOperatorAccess().getNEEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getEsterel_CompareOperatorAccess().getNEEnumLiteralDeclaration_5()); 
    }
));



// Rule Esterel_PreOperator
ruleEsterel_PreOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='pre' 
	{
        $current = grammarAccess.getEsterel_PreOperatorAccess().getPREEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getEsterel_PreOperatorAccess().getPREEnumLiteralDeclaration()); 
    }
);



// Rule Esterel_OrOperator
ruleEsterel_OrOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='or' 
	{
        $current = grammarAccess.getEsterel_OrOperatorAccess().getOREnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getEsterel_OrOperatorAccess().getOREnumLiteralDeclaration()); 
    }
);



// Rule Esterel_AndOperator
ruleEsterel_AndOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='and' 
	{
        $current = grammarAccess.getEsterel_AndOperatorAccess().getANDEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getEsterel_AndOperatorAccess().getANDEnumLiteralDeclaration()); 
    }
);



// Rule Esterel_NotOperator
ruleEsterel_NotOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='not' 
	{
        $current = grammarAccess.getEsterel_NotOperatorAccess().getNOTEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getEsterel_NotOperatorAccess().getNOTEnumLiteralDeclaration()); 
    }
);



// Rule Esterel_AddOperator
ruleEsterel_AddOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='+' 
	{
        $current = grammarAccess.getEsterel_AddOperatorAccess().getADDEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getEsterel_AddOperatorAccess().getADDEnumLiteralDeclaration()); 
    }
);



// Rule Esterel_SubOperator
ruleEsterel_SubOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='-' 
	{
        $current = grammarAccess.getEsterel_SubOperatorAccess().getSUBEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getEsterel_SubOperatorAccess().getSUBEnumLiteralDeclaration()); 
    }
);



// Rule Esterel_MultOperator
ruleEsterel_MultOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='*' 
	{
        $current = grammarAccess.getEsterel_MultOperatorAccess().getMULTEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getEsterel_MultOperatorAccess().getMULTEnumLiteralDeclaration()); 
    }
);



// Rule Esterel_ModOperator
ruleEsterel_ModOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='mod' 
	{
        $current = grammarAccess.getEsterel_ModOperatorAccess().getMODEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getEsterel_ModOperatorAccess().getMODEnumLiteralDeclaration()); 
    }
);



// Rule Esterel_DivOperator
ruleEsterel_DivOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='/' 
	{
        $current = grammarAccess.getEsterel_DivOperatorAccess().getDIVEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getEsterel_DivOperatorAccess().getDIVEnumLiteralDeclaration()); 
    }
);



// Rule Esterel_ValueTestOperator
ruleEsterel_ValueTestOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='?' 
	{
        $current = grammarAccess.getEsterel_ValueTestOperatorAccess().getVALEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getEsterel_ValueTestOperatorAccess().getVALEnumLiteralDeclaration()); 
    }
);



// Rule Esterel_ValueType
ruleEsterel_ValueType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='pure' 
	{
        $current = grammarAccess.getEsterel_ValueTypeAccess().getPUREEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getEsterel_ValueTypeAccess().getPUREEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='boolean' 
	{
        $current = grammarAccess.getEsterel_ValueTypeAccess().getBOOLEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getEsterel_ValueTypeAccess().getBOOLEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='unsigned' 
	{
        $current = grammarAccess.getEsterel_ValueTypeAccess().getUNSIGNEDEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getEsterel_ValueTypeAccess().getUNSIGNEDEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='integer' 
	{
        $current = grammarAccess.getEsterel_ValueTypeAccess().getINTEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getEsterel_ValueTypeAccess().getINTEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='float' 
	{
        $current = grammarAccess.getEsterel_ValueTypeAccess().getFLOATEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getEsterel_ValueTypeAccess().getFLOATEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='double' 
	{
        $current = grammarAccess.getEsterel_ValueTypeAccess().getDOUBLEEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getEsterel_ValueTypeAccess().getDOUBLEEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='string' 
	{
        $current = grammarAccess.getEsterel_ValueTypeAccess().getSTRINGEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getEsterel_ValueTypeAccess().getSTRINGEnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='host' 
	{
        $current = grammarAccess.getEsterel_ValueTypeAccess().getHOSTEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getEsterel_ValueTypeAccess().getHOSTEnumLiteralDeclaration_7()); 
    }
));



// Rule Esterel_CombineOperator
ruleEsterel_CombineOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='none' 
	{
        $current = grammarAccess.getEsterel_CombineOperatorAccess().getNONEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getEsterel_CombineOperatorAccess().getNONEEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='+' 
	{
        $current = grammarAccess.getEsterel_CombineOperatorAccess().getADDEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getEsterel_CombineOperatorAccess().getADDEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='*' 
	{
        $current = grammarAccess.getEsterel_CombineOperatorAccess().getMULTEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getEsterel_CombineOperatorAccess().getMULTEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='max' 
	{
        $current = grammarAccess.getEsterel_CombineOperatorAccess().getMAXEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getEsterel_CombineOperatorAccess().getMAXEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='min' 
	{
        $current = grammarAccess.getEsterel_CombineOperatorAccess().getMINEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getEsterel_CombineOperatorAccess().getMINEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='or' 
	{
        $current = grammarAccess.getEsterel_CombineOperatorAccess().getOREnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getEsterel_CombineOperatorAccess().getOREnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='and' 
	{
        $current = grammarAccess.getEsterel_CombineOperatorAccess().getANDEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getEsterel_CombineOperatorAccess().getANDEnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='host' 
	{
        $current = grammarAccess.getEsterel_CombineOperatorAccess().getHOSTEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getEsterel_CombineOperatorAccess().getHOSTEnumLiteralDeclaration_7()); 
    }
));





// Rule PostfixOperator
rulePostfixOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='++' 
	{
        $current = grammarAccess.getPostfixOperatorAccess().getPOSTFIXADDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getPostfixOperatorAccess().getPOSTFIXADDEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='--' 
	{
        $current = grammarAccess.getPostfixOperatorAccess().getPOSTFIXSUBEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getPostfixOperatorAccess().getPOSTFIXSUBEnumLiteralDeclaration_1()); 
    }
));







// Rule BitwiseOrOperator
ruleBitwiseOrOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='|' 
	{
        $current = grammarAccess.getBitwiseOrOperatorAccess().getBITWISE_OREnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getBitwiseOrOperatorAccess().getBITWISE_OREnumLiteralDeclaration()); 
    }
);



// Rule BitwiseAndOperator
ruleBitwiseAndOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='&' 
	{
        $current = grammarAccess.getBitwiseAndOperatorAccess().getBITWISE_ANDEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getBitwiseAndOperatorAccess().getBITWISE_ANDEnumLiteralDeclaration()); 
    }
);

















// Rule LogicalOrOperator
ruleLogicalOrOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='||' 
	{
        $current = grammarAccess.getLogicalOrOperatorAccess().getLOGICAL_OREnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getLogicalOrOperatorAccess().getLOGICAL_OREnumLiteralDeclaration()); 
    }
);



// Rule LogicalAndOperator
ruleLogicalAndOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='&&' 
	{
        $current = grammarAccess.getLogicalAndOperatorAccess().getLOGICAL_ANDEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getLogicalAndOperatorAccess().getLOGICAL_ANDEnumLiteralDeclaration()); 
    }
);







// Rule ValueType
ruleValueType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='pure' 
	{
        $current = grammarAccess.getValueTypeAccess().getPUREEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getValueTypeAccess().getPUREEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='bool' 
	{
        $current = grammarAccess.getValueTypeAccess().getBOOLEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getValueTypeAccess().getBOOLEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='unsigned' 
	{
        $current = grammarAccess.getValueTypeAccess().getUNSIGNEDEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getValueTypeAccess().getUNSIGNEDEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='int' 
	{
        $current = grammarAccess.getValueTypeAccess().getINTEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getValueTypeAccess().getINTEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='float' 
	{
        $current = grammarAccess.getValueTypeAccess().getFLOATEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getValueTypeAccess().getFLOATEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='string' 
	{
        $current = grammarAccess.getValueTypeAccess().getSTRINGEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getValueTypeAccess().getSTRINGEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='host' 
	{
        $current = grammarAccess.getValueTypeAccess().getHOSTEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getValueTypeAccess().getHOSTEnumLiteralDeclaration_6()); 
    }
));





// Rule CombineOperator
ruleCombineOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='none' 
	{
        $current = grammarAccess.getCombineOperatorAccess().getNONEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getCombineOperatorAccess().getNONEEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='+' 
	{
        $current = grammarAccess.getCombineOperatorAccess().getADDEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getCombineOperatorAccess().getADDEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='*' 
	{
        $current = grammarAccess.getCombineOperatorAccess().getMULTEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getCombineOperatorAccess().getMULTEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='max' 
	{
        $current = grammarAccess.getCombineOperatorAccess().getMAXEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getCombineOperatorAccess().getMAXEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='min' 
	{
        $current = grammarAccess.getCombineOperatorAccess().getMINEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getCombineOperatorAccess().getMINEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='|' 
	{
        $current = grammarAccess.getCombineOperatorAccess().getOREnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getCombineOperatorAccess().getOREnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='&' 
	{
        $current = grammarAccess.getCombineOperatorAccess().getANDEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getCombineOperatorAccess().getANDEnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='host' 
	{
        $current = grammarAccess.getCombineOperatorAccess().getHOSTEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getCombineOperatorAccess().getHOSTEnumLiteralDeclaration_7()); 
    }
));



RULE_ML_COMMENT : ('%' '{' ( options {greedy=false;} : . )*'}' '%'|'/*' ~('*') ( options {greedy=false;} : . )*'*/');

RULE_SL_COMMENT : ('//'|'%') ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_STRING : '"' (~('"')|'"' '"')* '"';

RULE_HOSTCODE : '\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'';

RULE_COMMENT_ANNOTATION : '/**' ( options {greedy=false;} : . )*'*/';

fragment RULE_NUMBER : '0'..'9';

RULE_INT : RULE_NUMBER+;

RULE_FLOAT : (RULE_NUMBER+ '.' RULE_NUMBER* (('e'|'E') ('+'|'-')? RULE_NUMBER+)? 'f'?|RULE_NUMBER+ 'f');

RULE_BOOLEAN : ('true'|'false');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


