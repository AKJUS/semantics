/*
 * generated by Xtext
 */
package de.cau.cs.kieler.esterel.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import de.cau.cs.kieler.scl.services.SCLGrammarAccess;
import de.cau.cs.kieler.kexpressions.kext.services.KExtGrammarAccess;
import de.cau.cs.kieler.kexpressions.keffects.services.KEffectsGrammarAccess;
import de.cau.cs.kieler.kexpressions.services.KExpressionsGrammarAccess;
import de.cau.cs.kieler.annotations.services.AnnotationsGrammarAccess;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class EsterelGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Program");
		private final Assignment cModulesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cModulesModuleParserRuleCall_0 = (RuleCall)cModulesAssignment.eContents().get(0);
		
		////  root rule. an esterel file can contain multiple modules
		//Program hidden(SL_COMMENT, ML_COMMENT, WS):
		//	modules+=Module*;
		@Override public ParserRule getRule() { return rule; }

		//modules+=Module*
		public Assignment getModulesAssignment() { return cModulesAssignment; }

		//Module
		public RuleCall getModulesModuleParserRuleCall_0() { return cModulesModuleParserRuleCall_0; }
	}

	public class ModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Module");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cModuleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cIntSignalDeclsAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cIntSignalDeclsInterfaceSignalDeclParserRuleCall_4_0_0 = (RuleCall)cIntSignalDeclsAssignment_4_0.eContents().get(0);
		private final Assignment cIntTypeDeclsAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cIntTypeDeclsTypeDeclParserRuleCall_4_1_0 = (RuleCall)cIntTypeDeclsAssignment_4_1.eContents().get(0);
		private final Assignment cIntSensorDeclsAssignment_4_2 = (Assignment)cAlternatives_4.eContents().get(2);
		private final RuleCall cIntSensorDeclsSensorDeclParserRuleCall_4_2_0 = (RuleCall)cIntSensorDeclsAssignment_4_2.eContents().get(0);
		private final Assignment cIntConstantDeclsAssignment_4_3 = (Assignment)cAlternatives_4.eContents().get(3);
		private final RuleCall cIntConstantDeclsConstantDeclsParserRuleCall_4_3_0 = (RuleCall)cIntConstantDeclsAssignment_4_3.eContents().get(0);
		private final Assignment cIntRelationDeclsAssignment_4_4 = (Assignment)cAlternatives_4.eContents().get(4);
		private final RuleCall cIntRelationDeclsRelationDeclParserRuleCall_4_4_0 = (RuleCall)cIntRelationDeclsAssignment_4_4.eContents().get(0);
		private final Assignment cIntTaskDeclsAssignment_4_5 = (Assignment)cAlternatives_4.eContents().get(5);
		private final RuleCall cIntTaskDeclsTaskDeclParserRuleCall_4_5_0 = (RuleCall)cIntTaskDeclsAssignment_4_5.eContents().get(0);
		private final Assignment cIntFunctionDeclsAssignment_4_6 = (Assignment)cAlternatives_4.eContents().get(6);
		private final RuleCall cIntFunctionDeclsFunctionDeclParserRuleCall_4_6_0 = (RuleCall)cIntFunctionDeclsAssignment_4_6.eContents().get(0);
		private final Assignment cIntProcedureDeclsAssignment_4_7 = (Assignment)cAlternatives_4.eContents().get(7);
		private final RuleCall cIntProcedureDeclsProcedureDeclParserRuleCall_4_7_0 = (RuleCall)cIntProcedureDeclsAssignment_4_7.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cGroup_5.eContents().get(0);
		private final Assignment cStatementsAssignment_5_0_0 = (Assignment)cGroup_5_0.eContents().get(0);
		private final RuleCall cStatementsEsterelStatementParserRuleCall_5_0_0_0 = (RuleCall)cStatementsAssignment_5_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_0_1 = (Keyword)cGroup_5_0.eContents().get(1);
		private final Assignment cStatementsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cStatementsEsterelStatementParserRuleCall_5_1_0 = (RuleCall)cStatementsAssignment_5_1.eContents().get(0);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Group cGroup_6_0 = (Group)cAlternatives_6.eContents().get(0);
		private final Keyword cEndKeyword_6_0_0 = (Keyword)cGroup_6_0.eContents().get(0);
		private final Keyword cModuleKeyword_6_0_1 = (Keyword)cGroup_6_0.eContents().get(1);
		private final Keyword cFullStopKeyword_6_1 = (Keyword)cAlternatives_6.eContents().get(1);
		
		/// * ###################################################
		// * ###                 7.2 Modules                 ###
		// * ###################################################
		// * / // ==> module: a module consists of an interface and a body
		//// -------------------------------------
		//Module:
		//	annotations+=Annotation*
		//	"module" name=ID ":" (intSignalDecls+=InterfaceSignalDecl
		//	| intTypeDecls+=TypeDecl
		//	| intSensorDecls+=SensorDecl
		//	| intConstantDecls+=ConstantDecls
		//	| intRelationDecls+=RelationDecl
		//	| intTaskDecls+=TaskDecl
		//	| intFunctionDecls+=FunctionDecl
		//	| intProcedureDecls+=ProcedureDecl)* ((statements+=EsterelStatement ";")* statements+=EsterelStatement?) ("end"
		//	"module" | ".");
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* "module" name=ID ":" (intSignalDecls+=InterfaceSignalDecl | intTypeDecls+=TypeDecl |
		//intSensorDecls+=SensorDecl | intConstantDecls+=ConstantDecls | intRelationDecls+=RelationDecl | intTaskDecls+=TaskDecl
		//| intFunctionDecls+=FunctionDecl | intProcedureDecls+=ProcedureDecl)* ((statements+=EsterelStatement ";")*
		//statements+=EsterelStatement?) ("end" "module" | ".")
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//"module"
		public Keyword getModuleKeyword_1() { return cModuleKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//(intSignalDecls+=InterfaceSignalDecl | intTypeDecls+=TypeDecl | intSensorDecls+=SensorDecl |
		//intConstantDecls+=ConstantDecls | intRelationDecls+=RelationDecl | intTaskDecls+=TaskDecl |
		//intFunctionDecls+=FunctionDecl | intProcedureDecls+=ProcedureDecl)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//intSignalDecls+=InterfaceSignalDecl
		public Assignment getIntSignalDeclsAssignment_4_0() { return cIntSignalDeclsAssignment_4_0; }

		//InterfaceSignalDecl
		public RuleCall getIntSignalDeclsInterfaceSignalDeclParserRuleCall_4_0_0() { return cIntSignalDeclsInterfaceSignalDeclParserRuleCall_4_0_0; }

		//intTypeDecls+=TypeDecl
		public Assignment getIntTypeDeclsAssignment_4_1() { return cIntTypeDeclsAssignment_4_1; }

		//TypeDecl
		public RuleCall getIntTypeDeclsTypeDeclParserRuleCall_4_1_0() { return cIntTypeDeclsTypeDeclParserRuleCall_4_1_0; }

		//intSensorDecls+=SensorDecl
		public Assignment getIntSensorDeclsAssignment_4_2() { return cIntSensorDeclsAssignment_4_2; }

		//SensorDecl
		public RuleCall getIntSensorDeclsSensorDeclParserRuleCall_4_2_0() { return cIntSensorDeclsSensorDeclParserRuleCall_4_2_0; }

		//intConstantDecls+=ConstantDecls
		public Assignment getIntConstantDeclsAssignment_4_3() { return cIntConstantDeclsAssignment_4_3; }

		//ConstantDecls
		public RuleCall getIntConstantDeclsConstantDeclsParserRuleCall_4_3_0() { return cIntConstantDeclsConstantDeclsParserRuleCall_4_3_0; }

		//intRelationDecls+=RelationDecl
		public Assignment getIntRelationDeclsAssignment_4_4() { return cIntRelationDeclsAssignment_4_4; }

		//RelationDecl
		public RuleCall getIntRelationDeclsRelationDeclParserRuleCall_4_4_0() { return cIntRelationDeclsRelationDeclParserRuleCall_4_4_0; }

		//intTaskDecls+=TaskDecl
		public Assignment getIntTaskDeclsAssignment_4_5() { return cIntTaskDeclsAssignment_4_5; }

		//TaskDecl
		public RuleCall getIntTaskDeclsTaskDeclParserRuleCall_4_5_0() { return cIntTaskDeclsTaskDeclParserRuleCall_4_5_0; }

		//intFunctionDecls+=FunctionDecl
		public Assignment getIntFunctionDeclsAssignment_4_6() { return cIntFunctionDeclsAssignment_4_6; }

		//FunctionDecl
		public RuleCall getIntFunctionDeclsFunctionDeclParserRuleCall_4_6_0() { return cIntFunctionDeclsFunctionDeclParserRuleCall_4_6_0; }

		//intProcedureDecls+=ProcedureDecl
		public Assignment getIntProcedureDeclsAssignment_4_7() { return cIntProcedureDeclsAssignment_4_7; }

		//ProcedureDecl
		public RuleCall getIntProcedureDeclsProcedureDeclParserRuleCall_4_7_0() { return cIntProcedureDeclsProcedureDeclParserRuleCall_4_7_0; }

		//((statements+=EsterelStatement ";")* statements+=EsterelStatement?)
		public Group getGroup_5() { return cGroup_5; }

		//(statements+=EsterelStatement ";")*
		public Group getGroup_5_0() { return cGroup_5_0; }

		//statements+=EsterelStatement
		public Assignment getStatementsAssignment_5_0_0() { return cStatementsAssignment_5_0_0; }

		//EsterelStatement
		public RuleCall getStatementsEsterelStatementParserRuleCall_5_0_0_0() { return cStatementsEsterelStatementParserRuleCall_5_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_5_0_1() { return cSemicolonKeyword_5_0_1; }

		//statements+=EsterelStatement?
		public Assignment getStatementsAssignment_5_1() { return cStatementsAssignment_5_1; }

		//EsterelStatement
		public RuleCall getStatementsEsterelStatementParserRuleCall_5_1_0() { return cStatementsEsterelStatementParserRuleCall_5_1_0; }

		//("end" "module" | ".")
		public Alternatives getAlternatives_6() { return cAlternatives_6; }

		//"end" "module"
		public Group getGroup_6_0() { return cGroup_6_0; }

		//"end"
		public Keyword getEndKeyword_6_0_0() { return cEndKeyword_6_0_0; }

		//"module"
		public Keyword getModuleKeyword_6_0_1() { return cModuleKeyword_6_0_1; }

		//"."
		public Keyword getFullStopKeyword_6_1() { return cFullStopKeyword_6_1; }
	}

	public class TypeIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.TypeIdentifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cTypeEsterel_ValueTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cTypeIDAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cTypeIDIDTerminalRuleCall_1_0 = (RuleCall)cTypeIDAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cCombineKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Assignment cTypeAssignment_2_1_0 = (Assignment)cAlternatives_2_1.eContents().get(0);
		private final RuleCall cTypeEsterel_ValueTypeEnumRuleCall_2_1_0_0 = (RuleCall)cTypeAssignment_2_1_0.eContents().get(0);
		private final Assignment cTypeIDAssignment_2_1_1 = (Assignment)cAlternatives_2_1.eContents().get(1);
		private final RuleCall cTypeIDIDTerminalRuleCall_2_1_1_0 = (RuleCall)cTypeIDAssignment_2_1_1.eContents().get(0);
		private final Keyword cWithKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cOperatorAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cOperatorEsterel_CombineOperatorEnumRuleCall_2_3_0 = (RuleCall)cOperatorAssignment_2_3.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cEsterelTypeAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cEstTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cEstTypeTypeCrossReference_3_1_0 = (CrossReference)cEstTypeAssignment_3_1.eContents().get(0);
		private final RuleCall cEstTypeTypeIDTerminalRuleCall_3_1_0_1 = (RuleCall)cEstTypeTypeCrossReference_3_1_0.eContents().get(1);
		
		/// * ###################################################
		// * ###        7.3 Interface Declaration            ###
		// * ###################################################
		// * / // ==> Interface Declaration
		//// ----------------------------------------------
		//// overwrite to allow type definitions in a specific module
		//TypeIdentifier:
		//	type=Esterel_ValueType
		//	| typeID=ID
		//	| "combine" (type=Esterel_ValueType | typeID=ID) "with" operator=Esterel_CombineOperator | {EsterelType}
		//	estType=[Type];
		@Override public ParserRule getRule() { return rule; }

		//type=Esterel_ValueType | typeID=ID | "combine" (type=Esterel_ValueType | typeID=ID) "with"
		//operator=Esterel_CombineOperator | {EsterelType} estType=[Type]
		public Alternatives getAlternatives() { return cAlternatives; }

		//type=Esterel_ValueType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//Esterel_ValueType
		public RuleCall getTypeEsterel_ValueTypeEnumRuleCall_0_0() { return cTypeEsterel_ValueTypeEnumRuleCall_0_0; }

		//typeID=ID
		public Assignment getTypeIDAssignment_1() { return cTypeIDAssignment_1; }

		//ID
		public RuleCall getTypeIDIDTerminalRuleCall_1_0() { return cTypeIDIDTerminalRuleCall_1_0; }

		//"combine" (type=Esterel_ValueType | typeID=ID) "with" operator=Esterel_CombineOperator
		public Group getGroup_2() { return cGroup_2; }

		//"combine"
		public Keyword getCombineKeyword_2_0() { return cCombineKeyword_2_0; }

		//(type=Esterel_ValueType | typeID=ID)
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }

		//type=Esterel_ValueType
		public Assignment getTypeAssignment_2_1_0() { return cTypeAssignment_2_1_0; }

		//Esterel_ValueType
		public RuleCall getTypeEsterel_ValueTypeEnumRuleCall_2_1_0_0() { return cTypeEsterel_ValueTypeEnumRuleCall_2_1_0_0; }

		//typeID=ID
		public Assignment getTypeIDAssignment_2_1_1() { return cTypeIDAssignment_2_1_1; }

		//ID
		public RuleCall getTypeIDIDTerminalRuleCall_2_1_1_0() { return cTypeIDIDTerminalRuleCall_2_1_1_0; }

		//"with"
		public Keyword getWithKeyword_2_2() { return cWithKeyword_2_2; }

		//operator=Esterel_CombineOperator
		public Assignment getOperatorAssignment_2_3() { return cOperatorAssignment_2_3; }

		//Esterel_CombineOperator
		public RuleCall getOperatorEsterel_CombineOperatorEnumRuleCall_2_3_0() { return cOperatorEsterel_CombineOperatorEnumRuleCall_2_3_0; }

		//{EsterelType} estType=[Type]
		public Group getGroup_3() { return cGroup_3; }

		//{EsterelType}
		public Action getEsterelTypeAction_3_0() { return cEsterelTypeAction_3_0; }

		//estType=[Type]
		public Assignment getEstTypeAssignment_3_1() { return cEstTypeAssignment_3_1; }

		//[Type]
		public CrossReference getEstTypeTypeCrossReference_3_1_0() { return cEstTypeTypeCrossReference_3_1_0; }

		//ID
		public RuleCall getEstTypeTypeIDTerminalRuleCall_3_1_0_1() { return cEstTypeTypeIDTerminalRuleCall_3_1_0_1; }
	}

	public class TypeDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.TypeDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypesTypeParserRuleCall_2_0 = (RuleCall)cTypesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTypesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTypesTypeParserRuleCall_3_1_0 = (RuleCall)cTypesAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// ==> 7.3.1 Type Declarations
		//// -------------------------------------
		//TypeDecl:
		//	annotations+=Annotation*
		//	"type"
		//	types+=Type ("," types+=Type)*
		//	";";
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* "type" types+=Type ("," types+=Type)* ";"
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//"type"
		public Keyword getTypeKeyword_1() { return cTypeKeyword_1; }

		//types+=Type
		public Assignment getTypesAssignment_2() { return cTypesAssignment_2; }

		//Type
		public RuleCall getTypesTypeParserRuleCall_2_0() { return cTypesTypeParserRuleCall_2_0; }

		//("," types+=Type)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//types+=Type
		public Assignment getTypesAssignment_3_1() { return cTypesAssignment_3_1; }

		//Type
		public RuleCall getTypesTypeParserRuleCall_3_1_0() { return cTypesTypeParserRuleCall_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Type");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Type:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class ConstantDeclsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.ConstantDecls");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cConstantKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConstantsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConstantsOneTypeConstantDeclsParserRuleCall_2_0 = (RuleCall)cConstantsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cConstantsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cConstantsOneTypeConstantDeclsParserRuleCall_3_1_0 = (RuleCall)cConstantsAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// ==> 7.3.2 Constant Declarations
		//// -------------------------------------
		//ConstantDecls:
		//	annotations+=Annotation*
		//	"constant"
		//	constants+=OneTypeConstantDecls ("," constants+=OneTypeConstantDecls)*
		//	";";
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* "constant" constants+=OneTypeConstantDecls ("," constants+=OneTypeConstantDecls)* ";"
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//"constant"
		public Keyword getConstantKeyword_1() { return cConstantKeyword_1; }

		//constants+=OneTypeConstantDecls
		public Assignment getConstantsAssignment_2() { return cConstantsAssignment_2; }

		//OneTypeConstantDecls
		public RuleCall getConstantsOneTypeConstantDeclsParserRuleCall_2_0() { return cConstantsOneTypeConstantDeclsParserRuleCall_2_0; }

		//("," constants+=OneTypeConstantDecls)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//constants+=OneTypeConstantDecls
		public Assignment getConstantsAssignment_3_1() { return cConstantsAssignment_3_1; }

		//OneTypeConstantDecls
		public RuleCall getConstantsOneTypeConstantDeclsParserRuleCall_3_1_0() { return cConstantsOneTypeConstantDeclsParserRuleCall_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class OneTypeConstantDeclsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.OneTypeConstantDecls");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConstantsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConstantsConstantParserRuleCall_0_0 = (RuleCall)cConstantsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cConstantsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cConstantsConstantParserRuleCall_1_1_0 = (RuleCall)cConstantsAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeIdentifierParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//OneTypeConstantDecls:
		//	constants+=Constant ("," constants+=Constant)* ":" type=TypeIdentifier;
		@Override public ParserRule getRule() { return rule; }

		//constants+=Constant ("," constants+=Constant)* ":" type=TypeIdentifier
		public Group getGroup() { return cGroup; }

		//constants+=Constant
		public Assignment getConstantsAssignment_0() { return cConstantsAssignment_0; }

		//Constant
		public RuleCall getConstantsConstantParserRuleCall_0_0() { return cConstantsConstantParserRuleCall_0_0; }

		//("," constants+=Constant)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//constants+=Constant
		public Assignment getConstantsAssignment_1_1() { return cConstantsAssignment_1_1; }

		//Constant
		public RuleCall getConstantsConstantParserRuleCall_1_1_0() { return cConstantsConstantParserRuleCall_1_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=TypeIdentifier
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//TypeIdentifier
		public RuleCall getTypeTypeIdentifierParserRuleCall_3_0() { return cTypeTypeIdentifierParserRuleCall_3_0; }
	}

	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Constant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstantAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueConstantValueParserRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		
		//Constant ValuedObject:
		//	{Constant} name=ID ("=" value=ConstantValue)?
		@Override public ParserRule getRule() { return rule; }

		//{Constant} name=ID ("=" value=ConstantValue)?
		public Group getGroup() { return cGroup; }

		//{Constant}
		public Action getConstantAction_0() { return cConstantAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("=" value=ConstantValue)?
		public Group getGroup_2() { return cGroup_2; }

		//"="
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }

		//value=ConstantValue
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//ConstantValue
		public RuleCall getValueConstantValueParserRuleCall_2_1_0() { return cValueConstantValueParserRuleCall_2_1_0; }
	}

	public class ConstantValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.ConstantValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFLOATTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBOOLEANTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIDTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSTRINGTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//ConstantValue:
		//	INT | FLOAT | BOOLEAN | ID | STRING;
		@Override public ParserRule getRule() { return rule; }

		//INT | FLOAT | BOOLEAN | ID | STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//FLOAT
		public RuleCall getFLOATTerminalRuleCall_1() { return cFLOATTerminalRuleCall_1; }

		//BOOLEAN
		public RuleCall getBOOLEANTerminalRuleCall_2() { return cBOOLEANTerminalRuleCall_2; }

		//ID
		public RuleCall getIDTerminalRuleCall_3() { return cIDTerminalRuleCall_3; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_4() { return cSTRINGTerminalRuleCall_4; }
	}

	public class FunctionDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.FunctionDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cFunctionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFunctionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFunctionsFunctionParserRuleCall_2_0 = (RuleCall)cFunctionsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFunctionsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFunctionsFunctionParserRuleCall_3_1_0 = (RuleCall)cFunctionsAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// ==> 7.3.3 Function Declaration
		//// -------------------------------------
		//FunctionDecl:
		//	annotations+=Annotation*
		//	"function"
		//	functions+=Function ("," functions+=Function)*
		//	";";
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* "function" functions+=Function ("," functions+=Function)* ";"
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//"function"
		public Keyword getFunctionKeyword_1() { return cFunctionKeyword_1; }

		//functions+=Function
		public Assignment getFunctionsAssignment_2() { return cFunctionsAssignment_2; }

		//Function
		public RuleCall getFunctionsFunctionParserRuleCall_2_0() { return cFunctionsFunctionParserRuleCall_2_0; }

		//("," functions+=Function)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//functions+=Function
		public Assignment getFunctionsAssignment_3_1() { return cFunctionsAssignment_3_1; }

		//Function
		public RuleCall getFunctionsFunctionParserRuleCall_3_1_0() { return cFunctionsFunctionParserRuleCall_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cIdListAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cIdListTypeIdentifierParserRuleCall_2_0_0 = (RuleCall)cIdListAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cIdListAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cIdListTypeIdentifierParserRuleCall_2_1_1_0 = (RuleCall)cIdListAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTypeTypeIdentifierParserRuleCall_5_0 = (RuleCall)cTypeAssignment_5.eContents().get(0);
		
		//Function:
		//	name=ID
		//	"(" (idList+=TypeIdentifier ("," idList+=TypeIdentifier)*)? ")"
		//	":" type=TypeIdentifier;
		@Override public ParserRule getRule() { return rule; }

		//name=ID "(" (idList+=TypeIdentifier ("," idList+=TypeIdentifier)*)? ")" ":" type=TypeIdentifier
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(idList+=TypeIdentifier ("," idList+=TypeIdentifier)*)?
		public Group getGroup_2() { return cGroup_2; }

		//idList+=TypeIdentifier
		public Assignment getIdListAssignment_2_0() { return cIdListAssignment_2_0; }

		//TypeIdentifier
		public RuleCall getIdListTypeIdentifierParserRuleCall_2_0_0() { return cIdListTypeIdentifierParserRuleCall_2_0_0; }

		//("," idList+=TypeIdentifier)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//idList+=TypeIdentifier
		public Assignment getIdListAssignment_2_1_1() { return cIdListAssignment_2_1_1; }

		//TypeIdentifier
		public RuleCall getIdListTypeIdentifierParserRuleCall_2_1_1_0() { return cIdListTypeIdentifierParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }

		//type=TypeIdentifier
		public Assignment getTypeAssignment_5() { return cTypeAssignment_5; }

		//TypeIdentifier
		public RuleCall getTypeTypeIdentifierParserRuleCall_5_0() { return cTypeTypeIdentifierParserRuleCall_5_0; }
	}

	public class ProcedureDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.ProcedureDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cProcedureKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cProceduresAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cProceduresProcedureParserRuleCall_2_0 = (RuleCall)cProceduresAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cProceduresAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cProceduresProcedureParserRuleCall_3_1_0 = (RuleCall)cProceduresAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// ==> 7.3.4 Procedure Declaration
		//// -------------------------------------
		//ProcedureDecl:
		//	annotations+=Annotation*
		//	"procedure" procedures+=Procedure ("," procedures+=Procedure)*
		//	";";
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* "procedure" procedures+=Procedure ("," procedures+=Procedure)* ";"
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//"procedure"
		public Keyword getProcedureKeyword_1() { return cProcedureKeyword_1; }

		//procedures+=Procedure
		public Assignment getProceduresAssignment_2() { return cProceduresAssignment_2; }

		//Procedure
		public RuleCall getProceduresProcedureParserRuleCall_2_0() { return cProceduresProcedureParserRuleCall_2_0; }

		//("," procedures+=Procedure)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//procedures+=Procedure
		public Assignment getProceduresAssignment_3_1() { return cProceduresAssignment_3_1; }

		//Procedure
		public RuleCall getProceduresProcedureParserRuleCall_3_1_0() { return cProceduresProcedureParserRuleCall_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class ProcedureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Procedure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cVariablesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cVariablesTypeIdentifierParserRuleCall_2_0_0 = (RuleCall)cVariablesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cVariablesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cVariablesTypeIdentifierParserRuleCall_2_1_1_0 = (RuleCall)cVariablesAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cExpressionsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cExpressionsTypeIdentifierParserRuleCall_5_0_0 = (RuleCall)cExpressionsAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cExpressionsAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cExpressionsTypeIdentifierParserRuleCall_5_1_1_0 = (RuleCall)cExpressionsAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Procedure:
		//	name=ID
		//	"(" (variables+=TypeIdentifier ("," variables+=TypeIdentifier)*)? ")"
		//	"(" (expressions+=TypeIdentifier ("," expressions+=TypeIdentifier)*)? ")";
		@Override public ParserRule getRule() { return rule; }

		//name=ID "(" (variables+=TypeIdentifier ("," variables+=TypeIdentifier)*)? ")" "(" (expressions+=TypeIdentifier (","
		//expressions+=TypeIdentifier)*)? ")"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(variables+=TypeIdentifier ("," variables+=TypeIdentifier)*)?
		public Group getGroup_2() { return cGroup_2; }

		//variables+=TypeIdentifier
		public Assignment getVariablesAssignment_2_0() { return cVariablesAssignment_2_0; }

		//TypeIdentifier
		public RuleCall getVariablesTypeIdentifierParserRuleCall_2_0_0() { return cVariablesTypeIdentifierParserRuleCall_2_0_0; }

		//("," variables+=TypeIdentifier)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//variables+=TypeIdentifier
		public Assignment getVariablesAssignment_2_1_1() { return cVariablesAssignment_2_1_1; }

		//TypeIdentifier
		public RuleCall getVariablesTypeIdentifierParserRuleCall_2_1_1_0() { return cVariablesTypeIdentifierParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//(expressions+=TypeIdentifier ("," expressions+=TypeIdentifier)*)?
		public Group getGroup_5() { return cGroup_5; }

		//expressions+=TypeIdentifier
		public Assignment getExpressionsAssignment_5_0() { return cExpressionsAssignment_5_0; }

		//TypeIdentifier
		public RuleCall getExpressionsTypeIdentifierParserRuleCall_5_0_0() { return cExpressionsTypeIdentifierParserRuleCall_5_0_0; }

		//("," expressions+=TypeIdentifier)*
		public Group getGroup_5_1() { return cGroup_5_1; }

		//","
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }

		//expressions+=TypeIdentifier
		public Assignment getExpressionsAssignment_5_1_1() { return cExpressionsAssignment_5_1_1; }

		//TypeIdentifier
		public RuleCall getExpressionsTypeIdentifierParserRuleCall_5_1_1_0() { return cExpressionsTypeIdentifierParserRuleCall_5_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class TaskDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.TaskDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cTaskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTasksAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTasksTaskParserRuleCall_2_0 = (RuleCall)cTasksAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTasksAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTasksTaskParserRuleCall_3_1_0 = (RuleCall)cTasksAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// ==> 7.3.5 Task Declaration
		//// -------------------------------------
		//TaskDecl:
		//	annotations+=Annotation*
		//	"task" tasks+=Task ("," tasks+=Task)*
		//	";";
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* "task" tasks+=Task ("," tasks+=Task)* ";"
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//"task"
		public Keyword getTaskKeyword_1() { return cTaskKeyword_1; }

		//tasks+=Task
		public Assignment getTasksAssignment_2() { return cTasksAssignment_2; }

		//Task
		public RuleCall getTasksTaskParserRuleCall_2_0() { return cTasksTaskParserRuleCall_2_0; }

		//("," tasks+=Task)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//tasks+=Task
		public Assignment getTasksAssignment_3_1() { return cTasksAssignment_3_1; }

		//Task
		public RuleCall getTasksTaskParserRuleCall_3_1_0() { return cTasksTaskParserRuleCall_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class TaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Task");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cVariablesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cVariablesTypeIdentifierParserRuleCall_2_0_0 = (RuleCall)cVariablesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cVariablesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cVariablesTypeIdentifierParserRuleCall_2_1_1_0 = (RuleCall)cVariablesAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cExpressionsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cExpressionsTypeIdentifierParserRuleCall_5_0_0 = (RuleCall)cExpressionsAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cExpressionsAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cExpressionsTypeIdentifierParserRuleCall_5_1_1_0 = (RuleCall)cExpressionsAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Task:
		//	name=ID
		//	"(" (variables+=TypeIdentifier ("," variables+=TypeIdentifier)*)? ")"
		//	"(" (expressions+=TypeIdentifier ("," expressions+=TypeIdentifier)*)? ")";
		@Override public ParserRule getRule() { return rule; }

		//name=ID "(" (variables+=TypeIdentifier ("," variables+=TypeIdentifier)*)? ")" "(" (expressions+=TypeIdentifier (","
		//expressions+=TypeIdentifier)*)? ")"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(variables+=TypeIdentifier ("," variables+=TypeIdentifier)*)?
		public Group getGroup_2() { return cGroup_2; }

		//variables+=TypeIdentifier
		public Assignment getVariablesAssignment_2_0() { return cVariablesAssignment_2_0; }

		//TypeIdentifier
		public RuleCall getVariablesTypeIdentifierParserRuleCall_2_0_0() { return cVariablesTypeIdentifierParserRuleCall_2_0_0; }

		//("," variables+=TypeIdentifier)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//variables+=TypeIdentifier
		public Assignment getVariablesAssignment_2_1_1() { return cVariablesAssignment_2_1_1; }

		//TypeIdentifier
		public RuleCall getVariablesTypeIdentifierParserRuleCall_2_1_1_0() { return cVariablesTypeIdentifierParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//(expressions+=TypeIdentifier ("," expressions+=TypeIdentifier)*)?
		public Group getGroup_5() { return cGroup_5; }

		//expressions+=TypeIdentifier
		public Assignment getExpressionsAssignment_5_0() { return cExpressionsAssignment_5_0; }

		//TypeIdentifier
		public RuleCall getExpressionsTypeIdentifierParserRuleCall_5_0_0() { return cExpressionsTypeIdentifierParserRuleCall_5_0_0; }

		//("," expressions+=TypeIdentifier)*
		public Group getGroup_5_1() { return cGroup_5_1; }

		//","
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }

		//expressions+=TypeIdentifier
		public Assignment getExpressionsAssignment_5_1_1() { return cExpressionsAssignment_5_1_1; }

		//TypeIdentifier
		public RuleCall getExpressionsTypeIdentifierParserRuleCall_5_1_1_0() { return cExpressionsTypeIdentifierParserRuleCall_5_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class InterfaceSignalDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.InterfaceSignalDecl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cInputAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cAnnotationsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_1_0 = (RuleCall)cAnnotationsAssignment_0_1.eContents().get(0);
		private final Keyword cInputKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cSignalsAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cSignalsISignalParserRuleCall_0_3_0 = (RuleCall)cSignalsAssignment_0_3.eContents().get(0);
		private final Group cGroup_0_4 = (Group)cGroup_0.eContents().get(4);
		private final Keyword cCommaKeyword_0_4_0 = (Keyword)cGroup_0_4.eContents().get(0);
		private final Assignment cSignalsAssignment_0_4_1 = (Assignment)cGroup_0_4.eContents().get(1);
		private final RuleCall cSignalsISignalParserRuleCall_0_4_1_0 = (RuleCall)cSignalsAssignment_0_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cOutputAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_1_0 = (RuleCall)cAnnotationsAssignment_1_1.eContents().get(0);
		private final Keyword cOutputKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cSignalsAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cSignalsISignalParserRuleCall_1_3_0 = (RuleCall)cSignalsAssignment_1_3.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final Keyword cCommaKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Assignment cSignalsAssignment_1_4_1 = (Assignment)cGroup_1_4.eContents().get(1);
		private final RuleCall cSignalsISignalParserRuleCall_1_4_1_0 = (RuleCall)cSignalsAssignment_1_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cInputOutputAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cAnnotationsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_2_1_0 = (RuleCall)cAnnotationsAssignment_2_1.eContents().get(0);
		private final Keyword cInputoutputKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cSignalsAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cSignalsISignalParserRuleCall_2_3_0 = (RuleCall)cSignalsAssignment_2_3.eContents().get(0);
		private final Group cGroup_2_4 = (Group)cGroup_2.eContents().get(4);
		private final Keyword cCommaKeyword_2_4_0 = (Keyword)cGroup_2_4.eContents().get(0);
		private final Assignment cSignalsAssignment_2_4_1 = (Assignment)cGroup_2_4.eContents().get(1);
		private final RuleCall cSignalsISignalParserRuleCall_2_4_1_0 = (RuleCall)cSignalsAssignment_2_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cReturnAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cAnnotationsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_3_1_0 = (RuleCall)cAnnotationsAssignment_3_1.eContents().get(0);
		private final Keyword cReturnKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cSignalsAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cSignalsISignalParserRuleCall_3_3_0 = (RuleCall)cSignalsAssignment_3_3.eContents().get(0);
		private final Group cGroup_3_4 = (Group)cGroup_3.eContents().get(4);
		private final Keyword cCommaKeyword_3_4_0 = (Keyword)cGroup_3_4.eContents().get(0);
		private final Assignment cSignalsAssignment_3_4_1 = (Assignment)cGroup_3_4.eContents().get(1);
		private final RuleCall cSignalsISignalParserRuleCall_3_4_1_0 = (RuleCall)cSignalsAssignment_3_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_5 = (Keyword)cGroup_3.eContents().get(5);
		
		//// ==> 7.3.6 Signal Declaration
		//// -------------------------------------
		//InterfaceSignalDecl:
		//	{Input} annotations+=Annotation* "input" signals+=ISignal ("," signals+=ISignal)* ";"
		//	| {Output} annotations+=Annotation* "output" signals+=ISignal ("," signals+=ISignal)* ";"
		//	| {InputOutput} annotations+=Annotation* "inputoutput" signals+=ISignal ("," signals+=ISignal)* ";"
		//	| {Return} annotations+=Annotation* "return" signals+=ISignal ("," signals+=ISignal)* ";";
		@Override public ParserRule getRule() { return rule; }

		//{Input} annotations+=Annotation* "input" signals+=ISignal ("," signals+=ISignal)* ";" | {Output}
		//annotations+=Annotation* "output" signals+=ISignal ("," signals+=ISignal)* ";" | {InputOutput} annotations+=Annotation*
		//"inputoutput" signals+=ISignal ("," signals+=ISignal)* ";" | {Return} annotations+=Annotation* "return"
		//signals+=ISignal ("," signals+=ISignal)* ";"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Input} annotations+=Annotation* "input" signals+=ISignal ("," signals+=ISignal)* ";"
		public Group getGroup_0() { return cGroup_0; }

		//{Input}
		public Action getInputAction_0_0() { return cInputAction_0_0; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0_1() { return cAnnotationsAssignment_0_1; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_1_0() { return cAnnotationsAnnotationParserRuleCall_0_1_0; }

		//"input"
		public Keyword getInputKeyword_0_2() { return cInputKeyword_0_2; }

		//signals+=ISignal
		public Assignment getSignalsAssignment_0_3() { return cSignalsAssignment_0_3; }

		//ISignal
		public RuleCall getSignalsISignalParserRuleCall_0_3_0() { return cSignalsISignalParserRuleCall_0_3_0; }

		//("," signals+=ISignal)*
		public Group getGroup_0_4() { return cGroup_0_4; }

		//","
		public Keyword getCommaKeyword_0_4_0() { return cCommaKeyword_0_4_0; }

		//signals+=ISignal
		public Assignment getSignalsAssignment_0_4_1() { return cSignalsAssignment_0_4_1; }

		//ISignal
		public RuleCall getSignalsISignalParserRuleCall_0_4_1_0() { return cSignalsISignalParserRuleCall_0_4_1_0; }

		//";"
		public Keyword getSemicolonKeyword_0_5() { return cSemicolonKeyword_0_5; }

		//{Output} annotations+=Annotation* "output" signals+=ISignal ("," signals+=ISignal)* ";"
		public Group getGroup_1() { return cGroup_1; }

		//{Output}
		public Action getOutputAction_1_0() { return cOutputAction_1_0; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_1_1() { return cAnnotationsAssignment_1_1; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_1_0() { return cAnnotationsAnnotationParserRuleCall_1_1_0; }

		//"output"
		public Keyword getOutputKeyword_1_2() { return cOutputKeyword_1_2; }

		//signals+=ISignal
		public Assignment getSignalsAssignment_1_3() { return cSignalsAssignment_1_3; }

		//ISignal
		public RuleCall getSignalsISignalParserRuleCall_1_3_0() { return cSignalsISignalParserRuleCall_1_3_0; }

		//("," signals+=ISignal)*
		public Group getGroup_1_4() { return cGroup_1_4; }

		//","
		public Keyword getCommaKeyword_1_4_0() { return cCommaKeyword_1_4_0; }

		//signals+=ISignal
		public Assignment getSignalsAssignment_1_4_1() { return cSignalsAssignment_1_4_1; }

		//ISignal
		public RuleCall getSignalsISignalParserRuleCall_1_4_1_0() { return cSignalsISignalParserRuleCall_1_4_1_0; }

		//";"
		public Keyword getSemicolonKeyword_1_5() { return cSemicolonKeyword_1_5; }

		//{InputOutput} annotations+=Annotation* "inputoutput" signals+=ISignal ("," signals+=ISignal)* ";"
		public Group getGroup_2() { return cGroup_2; }

		//{InputOutput}
		public Action getInputOutputAction_2_0() { return cInputOutputAction_2_0; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_2_1() { return cAnnotationsAssignment_2_1; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_2_1_0() { return cAnnotationsAnnotationParserRuleCall_2_1_0; }

		//"inputoutput"
		public Keyword getInputoutputKeyword_2_2() { return cInputoutputKeyword_2_2; }

		//signals+=ISignal
		public Assignment getSignalsAssignment_2_3() { return cSignalsAssignment_2_3; }

		//ISignal
		public RuleCall getSignalsISignalParserRuleCall_2_3_0() { return cSignalsISignalParserRuleCall_2_3_0; }

		//("," signals+=ISignal)*
		public Group getGroup_2_4() { return cGroup_2_4; }

		//","
		public Keyword getCommaKeyword_2_4_0() { return cCommaKeyword_2_4_0; }

		//signals+=ISignal
		public Assignment getSignalsAssignment_2_4_1() { return cSignalsAssignment_2_4_1; }

		//ISignal
		public RuleCall getSignalsISignalParserRuleCall_2_4_1_0() { return cSignalsISignalParserRuleCall_2_4_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2_5() { return cSemicolonKeyword_2_5; }

		//{Return} annotations+=Annotation* "return" signals+=ISignal ("," signals+=ISignal)* ";"
		public Group getGroup_3() { return cGroup_3; }

		//{Return}
		public Action getReturnAction_3_0() { return cReturnAction_3_0; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_3_1() { return cAnnotationsAssignment_3_1; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_3_1_0() { return cAnnotationsAnnotationParserRuleCall_3_1_0; }

		//"return"
		public Keyword getReturnKeyword_3_2() { return cReturnKeyword_3_2; }

		//signals+=ISignal
		public Assignment getSignalsAssignment_3_3() { return cSignalsAssignment_3_3; }

		//ISignal
		public RuleCall getSignalsISignalParserRuleCall_3_3_0() { return cSignalsISignalParserRuleCall_3_3_0; }

		//("," signals+=ISignal)*
		public Group getGroup_3_4() { return cGroup_3_4; }

		//","
		public Keyword getCommaKeyword_3_4_0() { return cCommaKeyword_3_4_0; }

		//signals+=ISignal
		public Assignment getSignalsAssignment_3_4_1() { return cSignalsAssignment_3_4_1; }

		//ISignal
		public RuleCall getSignalsISignalParserRuleCall_3_4_1_0() { return cSignalsISignalParserRuleCall_3_4_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3_5() { return cSemicolonKeyword_3_5; }
	}

	public class ISignalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.ISignal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cISignalAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_0_0 = (Group)cAlternatives_2_0.eContents().get(0);
		private final Keyword cColonKeyword_2_0_0_0 = (Keyword)cGroup_2_0_0.eContents().get(0);
		private final Assignment cTypeAssignment_2_0_0_1 = (Assignment)cGroup_2_0_0.eContents().get(1);
		private final RuleCall cTypeEsterel_ValueTypeEnumRuleCall_2_0_0_1_0 = (RuleCall)cTypeAssignment_2_0_0_1.eContents().get(0);
		private final Assignment cTypeIDAssignment_2_0_1 = (Assignment)cAlternatives_2_0.eContents().get(1);
		private final RuleCall cTypeIDIDTerminalRuleCall_2_0_1_0 = (RuleCall)cTypeIDAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_0_2 = (Group)cAlternatives_2_0.eContents().get(2);
		private final Keyword cCombineKeyword_2_0_2_0 = (Keyword)cGroup_2_0_2.eContents().get(0);
		private final Alternatives cAlternatives_2_0_2_1 = (Alternatives)cGroup_2_0_2.eContents().get(1);
		private final Assignment cTypeAssignment_2_0_2_1_0 = (Assignment)cAlternatives_2_0_2_1.eContents().get(0);
		private final RuleCall cTypeEsterel_ValueTypeEnumRuleCall_2_0_2_1_0_0 = (RuleCall)cTypeAssignment_2_0_2_1_0.eContents().get(0);
		private final Assignment cTypeIDAssignment_2_0_2_1_1 = (Assignment)cAlternatives_2_0_2_1.eContents().get(1);
		private final RuleCall cTypeIDIDTerminalRuleCall_2_0_2_1_1_0 = (RuleCall)cTypeIDAssignment_2_0_2_1_1.eContents().get(0);
		private final Keyword cWithKeyword_2_0_2_2 = (Keyword)cGroup_2_0_2.eContents().get(2);
		private final Alternatives cAlternatives_2_0_2_3 = (Alternatives)cGroup_2_0_2.eContents().get(3);
		private final Assignment cFuncAssignment_2_0_2_3_0 = (Assignment)cAlternatives_2_0_2_3.eContents().get(0);
		private final CrossReference cFuncFunctionCrossReference_2_0_2_3_0_0 = (CrossReference)cFuncAssignment_2_0_2_3_0.eContents().get(0);
		private final RuleCall cFuncFunctionIDTerminalRuleCall_2_0_2_3_0_0_1 = (RuleCall)cFuncFunctionCrossReference_2_0_2_3_0_0.eContents().get(1);
		private final Assignment cOperatorAssignment_2_0_2_3_1 = (Assignment)cAlternatives_2_0_2_3.eContents().get(1);
		private final RuleCall cOperatorEsterel_CombineOperatorEnumRuleCall_2_0_2_3_1_0 = (RuleCall)cOperatorAssignment_2_0_2_3_1.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cAlternatives_2.eContents().get(1);
		private final Group cGroup_2_1_0 = (Group)cAlternatives_2_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1_0_0 = (Keyword)cGroup_2_1_0.eContents().get(0);
		private final Assignment cTypeAssignment_2_1_0_1 = (Assignment)cGroup_2_1_0.eContents().get(1);
		private final RuleCall cTypeEsterel_ValueTypeEnumRuleCall_2_1_0_1_0 = (RuleCall)cTypeAssignment_2_1_0_1.eContents().get(0);
		private final Assignment cTypeIDAssignment_2_1_1 = (Assignment)cAlternatives_2_1.eContents().get(1);
		private final RuleCall cTypeIDIDTerminalRuleCall_2_1_1_0 = (RuleCall)cTypeIDAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_1_2 = (Group)cAlternatives_2_1.eContents().get(2);
		private final Group cGroup_2_1_2_0 = (Group)cGroup_2_1_2.eContents().get(0);
		private final Keyword cCombineKeyword_2_1_2_0_0 = (Keyword)cGroup_2_1_2_0.eContents().get(0);
		private final Alternatives cAlternatives_2_1_2_0_1 = (Alternatives)cGroup_2_1_2_0.eContents().get(1);
		private final Assignment cTypeAssignment_2_1_2_0_1_0 = (Assignment)cAlternatives_2_1_2_0_1.eContents().get(0);
		private final RuleCall cTypeEsterel_ValueTypeEnumRuleCall_2_1_2_0_1_0_0 = (RuleCall)cTypeAssignment_2_1_2_0_1_0.eContents().get(0);
		private final Assignment cTypeIDAssignment_2_1_2_0_1_1 = (Assignment)cAlternatives_2_1_2_0_1.eContents().get(1);
		private final RuleCall cTypeIDIDTerminalRuleCall_2_1_2_0_1_1_0 = (RuleCall)cTypeIDAssignment_2_1_2_0_1_1.eContents().get(0);
		private final Keyword cWithKeyword_2_1_2_0_2 = (Keyword)cGroup_2_1_2_0.eContents().get(2);
		private final Alternatives cAlternatives_2_1_2_0_3 = (Alternatives)cGroup_2_1_2_0.eContents().get(3);
		private final Assignment cFuncAssignment_2_1_2_0_3_0 = (Assignment)cAlternatives_2_1_2_0_3.eContents().get(0);
		private final CrossReference cFuncFunctionCrossReference_2_1_2_0_3_0_0 = (CrossReference)cFuncAssignment_2_1_2_0_3_0.eContents().get(0);
		private final RuleCall cFuncFunctionIDTerminalRuleCall_2_1_2_0_3_0_0_1 = (RuleCall)cFuncFunctionCrossReference_2_1_2_0_3_0_0.eContents().get(1);
		private final Assignment cOperatorAssignment_2_1_2_0_3_1 = (Assignment)cAlternatives_2_1_2_0_3.eContents().get(1);
		private final RuleCall cOperatorEsterel_CombineOperatorEnumRuleCall_2_1_2_0_3_1_0 = (RuleCall)cOperatorAssignment_2_1_2_0_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_1_2_1 = (Keyword)cGroup_2_1_2.eContents().get(1);
		private final Alternatives cAlternatives_2_2 = (Alternatives)cAlternatives_2.eContents().get(2);
		private final Group cGroup_2_2_0 = (Group)cAlternatives_2_2.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_2_2_0_0 = (Keyword)cGroup_2_2_0.eContents().get(0);
		private final Assignment cExpressionAssignment_2_2_0_1 = (Assignment)cGroup_2_2_0.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_2_2_0_1_0 = (RuleCall)cExpressionAssignment_2_2_0_1.eContents().get(0);
		private final Keyword cColonKeyword_2_2_0_2 = (Keyword)cGroup_2_2_0.eContents().get(2);
		private final Assignment cTypeAssignment_2_2_0_3 = (Assignment)cGroup_2_2_0.eContents().get(3);
		private final RuleCall cTypeEsterel_ValueTypeEnumRuleCall_2_2_0_3_0 = (RuleCall)cTypeAssignment_2_2_0_3.eContents().get(0);
		private final Assignment cTypeIDAssignment_2_2_1 = (Assignment)cAlternatives_2_2.eContents().get(1);
		private final RuleCall cTypeIDIDTerminalRuleCall_2_2_1_0 = (RuleCall)cTypeIDAssignment_2_2_1.eContents().get(0);
		private final Group cGroup_2_2_2 = (Group)cAlternatives_2_2.eContents().get(2);
		private final Keyword cCombineKeyword_2_2_2_0 = (Keyword)cGroup_2_2_2.eContents().get(0);
		private final Alternatives cAlternatives_2_2_2_1 = (Alternatives)cGroup_2_2_2.eContents().get(1);
		private final Assignment cTypeAssignment_2_2_2_1_0 = (Assignment)cAlternatives_2_2_2_1.eContents().get(0);
		private final RuleCall cTypeEsterel_ValueTypeEnumRuleCall_2_2_2_1_0_0 = (RuleCall)cTypeAssignment_2_2_2_1_0.eContents().get(0);
		private final Assignment cTypeIDAssignment_2_2_2_1_1 = (Assignment)cAlternatives_2_2_2_1.eContents().get(1);
		private final RuleCall cTypeIDIDTerminalRuleCall_2_2_2_1_1_0 = (RuleCall)cTypeIDAssignment_2_2_2_1_1.eContents().get(0);
		private final Keyword cWithKeyword_2_2_2_2 = (Keyword)cGroup_2_2_2.eContents().get(2);
		private final Alternatives cAlternatives_2_2_2_3 = (Alternatives)cGroup_2_2_2.eContents().get(3);
		private final Assignment cFuncAssignment_2_2_2_3_0 = (Assignment)cAlternatives_2_2_2_3.eContents().get(0);
		private final CrossReference cFuncFunctionCrossReference_2_2_2_3_0_0 = (CrossReference)cFuncAssignment_2_2_2_3_0.eContents().get(0);
		private final RuleCall cFuncFunctionIDTerminalRuleCall_2_2_2_3_0_0_1 = (RuleCall)cFuncFunctionCrossReference_2_2_2_3_0_0.eContents().get(1);
		private final Assignment cOperatorAssignment_2_2_2_3_1 = (Assignment)cAlternatives_2_2_2_3.eContents().get(1);
		private final RuleCall cOperatorEsterel_CombineOperatorEnumRuleCall_2_2_2_3_1_0 = (RuleCall)cOperatorAssignment_2_2_2_3_1.eContents().get(0);
		
		//// example 1:   A : combine boolean with or
		//// example 2:   A (combine boolean with or)
		//// example 3:   A := 0 : combine integer with '+'
		//ISignal:
		//	{ISignal} name=ID ((":" type=Esterel_ValueType
		//	| typeID=ID
		//	| "combine" (type=Esterel_ValueType | typeID=ID) "with" (func=[Function] | operator=Esterel_CombineOperator)) | ("("
		//	type=Esterel_ValueType
		//	| typeID=ID
		//	| ("combine" (type=Esterel_ValueType | typeID=ID) "with" (func=[Function] | operator=Esterel_CombineOperator))
		//	")") | (":=" expression=Expression ":"
		//	type=Esterel_ValueType
		//	| typeID=ID
		//	| "combine" (type=Esterel_ValueType | typeID=ID) "with" (func=[Function] | operator=Esterel_CombineOperator)))?;
		@Override public ParserRule getRule() { return rule; }

		//{ISignal} name=ID ((":" type=Esterel_ValueType | typeID=ID | "combine" (type=Esterel_ValueType | typeID=ID) "with"
		//(func=[Function] | operator=Esterel_CombineOperator)) | ("(" type=Esterel_ValueType | typeID=ID | ("combine"
		//(type=Esterel_ValueType | typeID=ID) "with" (func=[Function] | operator=Esterel_CombineOperator)) ")") | (":="
		//expression=Expression ":" type=Esterel_ValueType | typeID=ID | "combine" (type=Esterel_ValueType | typeID=ID) "with"
		//(func=[Function] | operator=Esterel_CombineOperator)))?
		public Group getGroup() { return cGroup; }

		//{ISignal}
		public Action getISignalAction_0() { return cISignalAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//((":" type=Esterel_ValueType | typeID=ID | "combine" (type=Esterel_ValueType | typeID=ID) "with" (func=[Function] |
		//operator=Esterel_CombineOperator)) | ("(" type=Esterel_ValueType | typeID=ID | ("combine" (type=Esterel_ValueType |
		//typeID=ID) "with" (func=[Function] | operator=Esterel_CombineOperator)) ")") | (":=" expression=Expression ":"
		//type=Esterel_ValueType | typeID=ID | "combine" (type=Esterel_ValueType | typeID=ID) "with" (func=[Function] |
		//operator=Esterel_CombineOperator)))?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//(":" type=Esterel_ValueType | typeID=ID | "combine" (type=Esterel_ValueType | typeID=ID) "with" (func=[Function] |
		//operator=Esterel_CombineOperator))
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }

		//":" type=Esterel_ValueType
		public Group getGroup_2_0_0() { return cGroup_2_0_0; }

		//":"
		public Keyword getColonKeyword_2_0_0_0() { return cColonKeyword_2_0_0_0; }

		//type=Esterel_ValueType
		public Assignment getTypeAssignment_2_0_0_1() { return cTypeAssignment_2_0_0_1; }

		//Esterel_ValueType
		public RuleCall getTypeEsterel_ValueTypeEnumRuleCall_2_0_0_1_0() { return cTypeEsterel_ValueTypeEnumRuleCall_2_0_0_1_0; }

		//typeID=ID
		public Assignment getTypeIDAssignment_2_0_1() { return cTypeIDAssignment_2_0_1; }

		//ID
		public RuleCall getTypeIDIDTerminalRuleCall_2_0_1_0() { return cTypeIDIDTerminalRuleCall_2_0_1_0; }

		//"combine" (type=Esterel_ValueType | typeID=ID) "with" (func=[Function] | operator=Esterel_CombineOperator)
		public Group getGroup_2_0_2() { return cGroup_2_0_2; }

		//"combine"
		public Keyword getCombineKeyword_2_0_2_0() { return cCombineKeyword_2_0_2_0; }

		//(type=Esterel_ValueType | typeID=ID)
		public Alternatives getAlternatives_2_0_2_1() { return cAlternatives_2_0_2_1; }

		//type=Esterel_ValueType
		public Assignment getTypeAssignment_2_0_2_1_0() { return cTypeAssignment_2_0_2_1_0; }

		//Esterel_ValueType
		public RuleCall getTypeEsterel_ValueTypeEnumRuleCall_2_0_2_1_0_0() { return cTypeEsterel_ValueTypeEnumRuleCall_2_0_2_1_0_0; }

		//typeID=ID
		public Assignment getTypeIDAssignment_2_0_2_1_1() { return cTypeIDAssignment_2_0_2_1_1; }

		//ID
		public RuleCall getTypeIDIDTerminalRuleCall_2_0_2_1_1_0() { return cTypeIDIDTerminalRuleCall_2_0_2_1_1_0; }

		//"with"
		public Keyword getWithKeyword_2_0_2_2() { return cWithKeyword_2_0_2_2; }

		//(func=[Function] | operator=Esterel_CombineOperator)
		public Alternatives getAlternatives_2_0_2_3() { return cAlternatives_2_0_2_3; }

		//func=[Function]
		public Assignment getFuncAssignment_2_0_2_3_0() { return cFuncAssignment_2_0_2_3_0; }

		//[Function]
		public CrossReference getFuncFunctionCrossReference_2_0_2_3_0_0() { return cFuncFunctionCrossReference_2_0_2_3_0_0; }

		//ID
		public RuleCall getFuncFunctionIDTerminalRuleCall_2_0_2_3_0_0_1() { return cFuncFunctionIDTerminalRuleCall_2_0_2_3_0_0_1; }

		//operator=Esterel_CombineOperator
		public Assignment getOperatorAssignment_2_0_2_3_1() { return cOperatorAssignment_2_0_2_3_1; }

		//Esterel_CombineOperator
		public RuleCall getOperatorEsterel_CombineOperatorEnumRuleCall_2_0_2_3_1_0() { return cOperatorEsterel_CombineOperatorEnumRuleCall_2_0_2_3_1_0; }

		//("(" type=Esterel_ValueType | typeID=ID | ("combine" (type=Esterel_ValueType | typeID=ID) "with" (func=[Function] |
		//operator=Esterel_CombineOperator)) ")")
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }

		//"(" type=Esterel_ValueType
		public Group getGroup_2_1_0() { return cGroup_2_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_1_0_0() { return cLeftParenthesisKeyword_2_1_0_0; }

		//type=Esterel_ValueType
		public Assignment getTypeAssignment_2_1_0_1() { return cTypeAssignment_2_1_0_1; }

		//Esterel_ValueType
		public RuleCall getTypeEsterel_ValueTypeEnumRuleCall_2_1_0_1_0() { return cTypeEsterel_ValueTypeEnumRuleCall_2_1_0_1_0; }

		//typeID=ID
		public Assignment getTypeIDAssignment_2_1_1() { return cTypeIDAssignment_2_1_1; }

		//ID
		public RuleCall getTypeIDIDTerminalRuleCall_2_1_1_0() { return cTypeIDIDTerminalRuleCall_2_1_1_0; }

		//("combine" (type=Esterel_ValueType | typeID=ID) "with" (func=[Function] | operator=Esterel_CombineOperator)) ")"
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }

		//("combine" (type=Esterel_ValueType | typeID=ID) "with" (func=[Function] | operator=Esterel_CombineOperator))
		public Group getGroup_2_1_2_0() { return cGroup_2_1_2_0; }

		//"combine"
		public Keyword getCombineKeyword_2_1_2_0_0() { return cCombineKeyword_2_1_2_0_0; }

		//(type=Esterel_ValueType | typeID=ID)
		public Alternatives getAlternatives_2_1_2_0_1() { return cAlternatives_2_1_2_0_1; }

		//type=Esterel_ValueType
		public Assignment getTypeAssignment_2_1_2_0_1_0() { return cTypeAssignment_2_1_2_0_1_0; }

		//Esterel_ValueType
		public RuleCall getTypeEsterel_ValueTypeEnumRuleCall_2_1_2_0_1_0_0() { return cTypeEsterel_ValueTypeEnumRuleCall_2_1_2_0_1_0_0; }

		//typeID=ID
		public Assignment getTypeIDAssignment_2_1_2_0_1_1() { return cTypeIDAssignment_2_1_2_0_1_1; }

		//ID
		public RuleCall getTypeIDIDTerminalRuleCall_2_1_2_0_1_1_0() { return cTypeIDIDTerminalRuleCall_2_1_2_0_1_1_0; }

		//"with"
		public Keyword getWithKeyword_2_1_2_0_2() { return cWithKeyword_2_1_2_0_2; }

		//(func=[Function] | operator=Esterel_CombineOperator)
		public Alternatives getAlternatives_2_1_2_0_3() { return cAlternatives_2_1_2_0_3; }

		//func=[Function]
		public Assignment getFuncAssignment_2_1_2_0_3_0() { return cFuncAssignment_2_1_2_0_3_0; }

		//[Function]
		public CrossReference getFuncFunctionCrossReference_2_1_2_0_3_0_0() { return cFuncFunctionCrossReference_2_1_2_0_3_0_0; }

		//ID
		public RuleCall getFuncFunctionIDTerminalRuleCall_2_1_2_0_3_0_0_1() { return cFuncFunctionIDTerminalRuleCall_2_1_2_0_3_0_0_1; }

		//operator=Esterel_CombineOperator
		public Assignment getOperatorAssignment_2_1_2_0_3_1() { return cOperatorAssignment_2_1_2_0_3_1; }

		//Esterel_CombineOperator
		public RuleCall getOperatorEsterel_CombineOperatorEnumRuleCall_2_1_2_0_3_1_0() { return cOperatorEsterel_CombineOperatorEnumRuleCall_2_1_2_0_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_1_2_1() { return cRightParenthesisKeyword_2_1_2_1; }

		//(":=" expression=Expression ":" type=Esterel_ValueType | typeID=ID | "combine" (type=Esterel_ValueType | typeID=ID)
		//"with" (func=[Function] | operator=Esterel_CombineOperator))
		public Alternatives getAlternatives_2_2() { return cAlternatives_2_2; }

		//":=" expression=Expression ":" type=Esterel_ValueType
		public Group getGroup_2_2_0() { return cGroup_2_2_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_2_2_0_0() { return cColonEqualsSignKeyword_2_2_0_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_2_2_0_1() { return cExpressionAssignment_2_2_0_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_2_0_1_0() { return cExpressionExpressionParserRuleCall_2_2_0_1_0; }

		//":"
		public Keyword getColonKeyword_2_2_0_2() { return cColonKeyword_2_2_0_2; }

		//type=Esterel_ValueType
		public Assignment getTypeAssignment_2_2_0_3() { return cTypeAssignment_2_2_0_3; }

		//Esterel_ValueType
		public RuleCall getTypeEsterel_ValueTypeEnumRuleCall_2_2_0_3_0() { return cTypeEsterel_ValueTypeEnumRuleCall_2_2_0_3_0; }

		//typeID=ID
		public Assignment getTypeIDAssignment_2_2_1() { return cTypeIDAssignment_2_2_1; }

		//ID
		public RuleCall getTypeIDIDTerminalRuleCall_2_2_1_0() { return cTypeIDIDTerminalRuleCall_2_2_1_0; }

		//"combine" (type=Esterel_ValueType | typeID=ID) "with" (func=[Function] | operator=Esterel_CombineOperator)
		public Group getGroup_2_2_2() { return cGroup_2_2_2; }

		//"combine"
		public Keyword getCombineKeyword_2_2_2_0() { return cCombineKeyword_2_2_2_0; }

		//(type=Esterel_ValueType | typeID=ID)
		public Alternatives getAlternatives_2_2_2_1() { return cAlternatives_2_2_2_1; }

		//type=Esterel_ValueType
		public Assignment getTypeAssignment_2_2_2_1_0() { return cTypeAssignment_2_2_2_1_0; }

		//Esterel_ValueType
		public RuleCall getTypeEsterel_ValueTypeEnumRuleCall_2_2_2_1_0_0() { return cTypeEsterel_ValueTypeEnumRuleCall_2_2_2_1_0_0; }

		//typeID=ID
		public Assignment getTypeIDAssignment_2_2_2_1_1() { return cTypeIDAssignment_2_2_2_1_1; }

		//ID
		public RuleCall getTypeIDIDTerminalRuleCall_2_2_2_1_1_0() { return cTypeIDIDTerminalRuleCall_2_2_2_1_1_0; }

		//"with"
		public Keyword getWithKeyword_2_2_2_2() { return cWithKeyword_2_2_2_2; }

		//(func=[Function] | operator=Esterel_CombineOperator)
		public Alternatives getAlternatives_2_2_2_3() { return cAlternatives_2_2_2_3; }

		//func=[Function]
		public Assignment getFuncAssignment_2_2_2_3_0() { return cFuncAssignment_2_2_2_3_0; }

		//[Function]
		public CrossReference getFuncFunctionCrossReference_2_2_2_3_0_0() { return cFuncFunctionCrossReference_2_2_2_3_0_0; }

		//ID
		public RuleCall getFuncFunctionIDTerminalRuleCall_2_2_2_3_0_0_1() { return cFuncFunctionIDTerminalRuleCall_2_2_2_3_0_0_1; }

		//operator=Esterel_CombineOperator
		public Assignment getOperatorAssignment_2_2_2_3_1() { return cOperatorAssignment_2_2_2_3_1; }

		//Esterel_CombineOperator
		public RuleCall getOperatorEsterel_CombineOperatorEnumRuleCall_2_2_2_3_1_0() { return cOperatorEsterel_CombineOperatorEnumRuleCall_2_2_2_3_1_0; }
	}

	public class TickElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Tick");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNameTickKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		//Tick ValuedObject:
		//	name="tick"
		@Override public ParserRule getRule() { return rule; }

		//name="tick"
		public Assignment getNameAssignment() { return cNameAssignment; }

		//"tick"
		public Keyword getNameTickKeyword_0() { return cNameTickKeyword_0; }
	}

	public class SensorDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.SensorDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cSensorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSensorsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSensorsSensorWithTypeParserRuleCall_2_0 = (RuleCall)cSensorsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSensorsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSensorsSensorWithTypeParserRuleCall_3_1_0 = (RuleCall)cSensorsAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// ==> 7.3.7 Sensor Declaration
		//// -------------------------------------
		//SensorDecl:
		//	annotations+=Annotation*
		//	"sensor"
		//	sensors+=SensorWithType ("," sensors+=SensorWithType)*
		//	";";
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* "sensor" sensors+=SensorWithType ("," sensors+=SensorWithType)* ";"
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//"sensor"
		public Keyword getSensorKeyword_1() { return cSensorKeyword_1; }

		//sensors+=SensorWithType
		public Assignment getSensorsAssignment_2() { return cSensorsAssignment_2; }

		//SensorWithType
		public RuleCall getSensorsSensorWithTypeParserRuleCall_2_0() { return cSensorsSensorWithTypeParserRuleCall_2_0; }

		//("," sensors+=SensorWithType)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//sensors+=SensorWithType
		public Assignment getSensorsAssignment_3_1() { return cSensorsAssignment_3_1; }

		//SensorWithType
		public RuleCall getSensorsSensorWithTypeParserRuleCall_3_1_0() { return cSensorsSensorWithTypeParserRuleCall_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class SensorWithTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.SensorWithType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSensorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSensorSensorParserRuleCall_0_0 = (RuleCall)cSensorAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cColonKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cTypeAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cTypeTypeIdentifierParserRuleCall_1_0_1_0 = (RuleCall)cTypeAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cTypeTypeIdentifierParserRuleCall_1_1_1_0 = (RuleCall)cTypeAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		//SensorWithType:
		//	sensor=Sensor (":" type=TypeIdentifier | "(" type=TypeIdentifier ")");
		@Override public ParserRule getRule() { return rule; }

		//sensor=Sensor (":" type=TypeIdentifier | "(" type=TypeIdentifier ")")
		public Group getGroup() { return cGroup; }

		//sensor=Sensor
		public Assignment getSensorAssignment_0() { return cSensorAssignment_0; }

		//Sensor
		public RuleCall getSensorSensorParserRuleCall_0_0() { return cSensorSensorParserRuleCall_0_0; }

		//(":" type=TypeIdentifier | "(" type=TypeIdentifier ")")
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//":" type=TypeIdentifier
		public Group getGroup_1_0() { return cGroup_1_0; }

		//":"
		public Keyword getColonKeyword_1_0_0() { return cColonKeyword_1_0_0; }

		//type=TypeIdentifier
		public Assignment getTypeAssignment_1_0_1() { return cTypeAssignment_1_0_1; }

		//TypeIdentifier
		public RuleCall getTypeTypeIdentifierParserRuleCall_1_0_1_0() { return cTypeTypeIdentifierParserRuleCall_1_0_1_0; }

		//"(" type=TypeIdentifier ")"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1_0() { return cLeftParenthesisKeyword_1_1_0; }

		//type=TypeIdentifier
		public Assignment getTypeAssignment_1_1_1() { return cTypeAssignment_1_1_1; }

		//TypeIdentifier
		public RuleCall getTypeTypeIdentifierParserRuleCall_1_1_1_0() { return cTypeTypeIdentifierParserRuleCall_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_1_2() { return cRightParenthesisKeyword_1_1_2; }
	}

	public class SensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Sensor");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Sensor ISignal:
		//	name=ID
		@Override public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class RelationDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.RelationDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRelationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Keyword cRelationKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRelationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRelationsRelationTypeParserRuleCall_3_0 = (RuleCall)cRelationsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cRelationsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cRelationsRelationTypeParserRuleCall_4_1_0 = (RuleCall)cRelationsAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// ==> 7.3.8 Input Relation Declaration
		//// -------------------------------------
		//RelationDecl:
		//	{Relation} annotations+=Annotation*
		//	"relation"
		//	relations+=RelationType ("," relations+=RelationType)*
		//	";";
		@Override public ParserRule getRule() { return rule; }

		//{Relation} annotations+=Annotation* "relation" relations+=RelationType ("," relations+=RelationType)* ";"
		public Group getGroup() { return cGroup; }

		//{Relation}
		public Action getRelationAction_0() { return cRelationAction_0; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() { return cAnnotationsAnnotationParserRuleCall_1_0; }

		//"relation"
		public Keyword getRelationKeyword_2() { return cRelationKeyword_2; }

		//relations+=RelationType
		public Assignment getRelationsAssignment_3() { return cRelationsAssignment_3; }

		//RelationType
		public RuleCall getRelationsRelationTypeParserRuleCall_3_0() { return cRelationsRelationTypeParserRuleCall_3_0; }

		//("," relations+=RelationType)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//relations+=RelationType
		public Assignment getRelationsAssignment_4_1() { return cRelationsAssignment_4_1; }

		//RelationType
		public RuleCall getRelationsRelationTypeParserRuleCall_4_1_0() { return cRelationsRelationTypeParserRuleCall_4_1_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class RelationTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.RelationType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRelationImplicationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRelationIncompatibilityParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//RelationType:
		//	RelationImplication | RelationIncompatibility;
		@Override public ParserRule getRule() { return rule; }

		//RelationImplication | RelationIncompatibility
		public Alternatives getAlternatives() { return cAlternatives; }

		//RelationImplication
		public RuleCall getRelationImplicationParserRuleCall_0() { return cRelationImplicationParserRuleCall_0; }

		//RelationIncompatibility
		public RuleCall getRelationIncompatibilityParserRuleCall_1() { return cRelationIncompatibilityParserRuleCall_1; }
	}

	public class RelationImplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.RelationImplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFirstAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFirstISignalCrossReference_0_0 = (CrossReference)cFirstAssignment_0.eContents().get(0);
		private final RuleCall cFirstISignalIDTerminalRuleCall_0_0_1 = (RuleCall)cFirstISignalCrossReference_0_0.eContents().get(1);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cTypeEqualsSignGreaterThanSignKeyword_1_0 = (Keyword)cTypeAssignment_1.eContents().get(0);
		private final Assignment cSecondAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSecondISignalCrossReference_2_0 = (CrossReference)cSecondAssignment_2.eContents().get(0);
		private final RuleCall cSecondISignalIDTerminalRuleCall_2_0_1 = (RuleCall)cSecondISignalCrossReference_2_0.eContents().get(1);
		
		//RelationImplication:
		//	first=[ISignal] type="=>" second=[ISignal];
		@Override public ParserRule getRule() { return rule; }

		//first=[ISignal] type="=>" second=[ISignal]
		public Group getGroup() { return cGroup; }

		//first=[ISignal]
		public Assignment getFirstAssignment_0() { return cFirstAssignment_0; }

		//[ISignal]
		public CrossReference getFirstISignalCrossReference_0_0() { return cFirstISignalCrossReference_0_0; }

		//ID
		public RuleCall getFirstISignalIDTerminalRuleCall_0_0_1() { return cFirstISignalIDTerminalRuleCall_0_0_1; }

		//type="=>"
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//"=>"
		public Keyword getTypeEqualsSignGreaterThanSignKeyword_1_0() { return cTypeEqualsSignGreaterThanSignKeyword_1_0; }

		//second=[ISignal]
		public Assignment getSecondAssignment_2() { return cSecondAssignment_2; }

		//[ISignal]
		public CrossReference getSecondISignalCrossReference_2_0() { return cSecondISignalCrossReference_2_0; }

		//ID
		public RuleCall getSecondISignalIDTerminalRuleCall_2_0_1() { return cSecondISignalIDTerminalRuleCall_2_0_1; }
	}

	public class RelationIncompatibilityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.RelationIncompatibility");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIncompAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cIncompISignalCrossReference_0_0 = (CrossReference)cIncompAssignment_0.eContents().get(0);
		private final RuleCall cIncompISignalIDTerminalRuleCall_0_0_1 = (RuleCall)cIncompISignalCrossReference_0_0.eContents().get(1);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cTypeNumberSignKeyword_1_0 = (Keyword)cTypeAssignment_1.eContents().get(0);
		private final Assignment cIncompAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cIncompISignalCrossReference_2_0 = (CrossReference)cIncompAssignment_2.eContents().get(0);
		private final RuleCall cIncompISignalIDTerminalRuleCall_2_0_1 = (RuleCall)cIncompISignalCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cNumberSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cIncompAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cIncompISignalCrossReference_3_1_0 = (CrossReference)cIncompAssignment_3_1.eContents().get(0);
		private final RuleCall cIncompISignalIDTerminalRuleCall_3_1_0_1 = (RuleCall)cIncompISignalCrossReference_3_1_0.eContents().get(1);
		
		//RelationIncompatibility:
		//	incomp+=[ISignal] type="#" incomp+=[ISignal] ("#" incomp+=[ISignal])*;
		@Override public ParserRule getRule() { return rule; }

		//incomp+=[ISignal] type="#" incomp+=[ISignal] ("#" incomp+=[ISignal])*
		public Group getGroup() { return cGroup; }

		//incomp+=[ISignal]
		public Assignment getIncompAssignment_0() { return cIncompAssignment_0; }

		//[ISignal]
		public CrossReference getIncompISignalCrossReference_0_0() { return cIncompISignalCrossReference_0_0; }

		//ID
		public RuleCall getIncompISignalIDTerminalRuleCall_0_0_1() { return cIncompISignalIDTerminalRuleCall_0_0_1; }

		//type="#"
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//"#"
		public Keyword getTypeNumberSignKeyword_1_0() { return cTypeNumberSignKeyword_1_0; }

		//incomp+=[ISignal]
		public Assignment getIncompAssignment_2() { return cIncompAssignment_2; }

		//[ISignal]
		public CrossReference getIncompISignalCrossReference_2_0() { return cIncompISignalCrossReference_2_0; }

		//ID
		public RuleCall getIncompISignalIDTerminalRuleCall_2_0_1() { return cIncompISignalIDTerminalRuleCall_2_0_1; }

		//("#" incomp+=[ISignal])*
		public Group getGroup_3() { return cGroup_3; }

		//"#"
		public Keyword getNumberSignKeyword_3_0() { return cNumberSignKeyword_3_0; }

		//incomp+=[ISignal]
		public Assignment getIncompAssignment_3_1() { return cIncompAssignment_3_1; }

		//[ISignal]
		public CrossReference getIncompISignalCrossReference_3_1_0() { return cIncompISignalCrossReference_3_1_0; }

		//ID
		public RuleCall getIncompISignalIDTerminalRuleCall_3_1_0_1() { return cIncompISignalIDTerminalRuleCall_3_1_0_1; }
	}

	public class StatementContainerInterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.StatementContainerInterface");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAbortParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAwaitParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBlockParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCaseParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDoParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cEveryDoParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cExecParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cExecCaseParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cLocalSignalDeclParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cLocalVariableParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cLoopParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cPresentCaseParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cRepeatParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cSuspendParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cEsterelThreadParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cTrapParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cTrapHandlerParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cModuleParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		
		/// * ###################################################
		// * ###               7.5 Statements                ###
		// * ###################################################
		// * / StatementContainerInterface scl::StatementContainer:
		//	Abort | Await | Block | Case | Do | EveryDo | Exec | ExecCase | LocalSignalDecl | LocalVariable | Loop | PresentCase |
		//	Repeat | Suspend | EsterelThread | Trap | TrapHandler | Module
		@Override public ParserRule getRule() { return rule; }

		//Abort | Await | Block | Case | Do | EveryDo | Exec | ExecCase | LocalSignalDecl | LocalVariable | Loop | PresentCase |
		//Repeat | Suspend | EsterelThread | Trap | TrapHandler | Module
		public Alternatives getAlternatives() { return cAlternatives; }

		//Abort
		public RuleCall getAbortParserRuleCall_0() { return cAbortParserRuleCall_0; }

		//Await
		public RuleCall getAwaitParserRuleCall_1() { return cAwaitParserRuleCall_1; }

		//Block
		public RuleCall getBlockParserRuleCall_2() { return cBlockParserRuleCall_2; }

		//Case
		public RuleCall getCaseParserRuleCall_3() { return cCaseParserRuleCall_3; }

		//Do
		public RuleCall getDoParserRuleCall_4() { return cDoParserRuleCall_4; }

		//EveryDo
		public RuleCall getEveryDoParserRuleCall_5() { return cEveryDoParserRuleCall_5; }

		//Exec
		public RuleCall getExecParserRuleCall_6() { return cExecParserRuleCall_6; }

		//ExecCase
		public RuleCall getExecCaseParserRuleCall_7() { return cExecCaseParserRuleCall_7; }

		//LocalSignalDecl
		public RuleCall getLocalSignalDeclParserRuleCall_8() { return cLocalSignalDeclParserRuleCall_8; }

		//LocalVariable
		public RuleCall getLocalVariableParserRuleCall_9() { return cLocalVariableParserRuleCall_9; }

		//Loop
		public RuleCall getLoopParserRuleCall_10() { return cLoopParserRuleCall_10; }

		//PresentCase
		public RuleCall getPresentCaseParserRuleCall_11() { return cPresentCaseParserRuleCall_11; }

		//Repeat
		public RuleCall getRepeatParserRuleCall_12() { return cRepeatParserRuleCall_12; }

		//Suspend
		public RuleCall getSuspendParserRuleCall_13() { return cSuspendParserRuleCall_13; }

		//EsterelThread
		public RuleCall getEsterelThreadParserRuleCall_14() { return cEsterelThreadParserRuleCall_14; }

		//Trap
		public RuleCall getTrapParserRuleCall_15() { return cTrapParserRuleCall_15; }

		//TrapHandler
		public RuleCall getTrapHandlerParserRuleCall_16() { return cTrapHandlerParserRuleCall_16; }

		//Module
		public RuleCall getModuleParserRuleCall_17() { return cModuleParserRuleCall_17; }
	}

	public class EsterelStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.EsterelStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEsterelParallelParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAtomicStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// ==> Statement
		//// -------------------------------------
		//EsterelStatement scl::Statement:
		//	EsterelParallel | AtomicStatement
		@Override public ParserRule getRule() { return rule; }

		//EsterelParallel | AtomicStatement
		public Alternatives getAlternatives() { return cAlternatives; }

		//EsterelParallel
		public RuleCall getEsterelParallelParserRuleCall_0() { return cEsterelParallelParserRuleCall_0; }

		//AtomicStatement
		public RuleCall getAtomicStatementParserRuleCall_1() { return cAtomicStatementParserRuleCall_1; }
	}

	public class AtomicStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.AtomicStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAbortParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEsterelAssignmentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAwaitParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBlockParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cProcCallParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDoParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cEmitParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cEveryDoParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cExitParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cExecParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cHaltParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cIfTestParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cLocalSignalDeclParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cLoopParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cNothingParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cPauseParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cPresentParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cRepeatParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final RuleCall cRunParserRuleCall_18 = (RuleCall)cAlternatives.eContents().get(18);
		private final RuleCall cSuspendParserRuleCall_19 = (RuleCall)cAlternatives.eContents().get(19);
		private final RuleCall cSustainParserRuleCall_20 = (RuleCall)cAlternatives.eContents().get(20);
		private final RuleCall cTrapParserRuleCall_21 = (RuleCall)cAlternatives.eContents().get(21);
		private final RuleCall cLocalVariableParserRuleCall_22 = (RuleCall)cAlternatives.eContents().get(22);
		
		//// ==> Atomic Statements
		//// -------------------------------------
		//AtomicStatement scl::Statement:
		//	Abort | EsterelAssignment | Await | Block | ProcCall | Do | Emit | EveryDo | Exit | Exec | Halt | IfTest |
		//	LocalSignalDecl | Loop | Nothing | Pause | Present | Repeat | Run | Suspend | Sustain | Trap | LocalVariable
		@Override public ParserRule getRule() { return rule; }

		//Abort | EsterelAssignment | Await | Block | ProcCall | Do | Emit | EveryDo | Exit | Exec | Halt | IfTest |
		//LocalSignalDecl | Loop | Nothing | Pause | Present | Repeat | Run | Suspend | Sustain | Trap | LocalVariable
		public Alternatives getAlternatives() { return cAlternatives; }

		//Abort
		public RuleCall getAbortParserRuleCall_0() { return cAbortParserRuleCall_0; }

		//EsterelAssignment
		public RuleCall getEsterelAssignmentParserRuleCall_1() { return cEsterelAssignmentParserRuleCall_1; }

		//Await
		public RuleCall getAwaitParserRuleCall_2() { return cAwaitParserRuleCall_2; }

		//Block
		public RuleCall getBlockParserRuleCall_3() { return cBlockParserRuleCall_3; }

		//ProcCall
		public RuleCall getProcCallParserRuleCall_4() { return cProcCallParserRuleCall_4; }

		//Do
		public RuleCall getDoParserRuleCall_5() { return cDoParserRuleCall_5; }

		//Emit
		public RuleCall getEmitParserRuleCall_6() { return cEmitParserRuleCall_6; }

		//EveryDo
		public RuleCall getEveryDoParserRuleCall_7() { return cEveryDoParserRuleCall_7; }

		//Exit
		public RuleCall getExitParserRuleCall_8() { return cExitParserRuleCall_8; }

		//Exec
		public RuleCall getExecParserRuleCall_9() { return cExecParserRuleCall_9; }

		//Halt
		public RuleCall getHaltParserRuleCall_10() { return cHaltParserRuleCall_10; }

		//IfTest
		public RuleCall getIfTestParserRuleCall_11() { return cIfTestParserRuleCall_11; }

		//LocalSignalDecl
		public RuleCall getLocalSignalDeclParserRuleCall_12() { return cLocalSignalDeclParserRuleCall_12; }

		//Loop
		public RuleCall getLoopParserRuleCall_13() { return cLoopParserRuleCall_13; }

		//Nothing
		public RuleCall getNothingParserRuleCall_14() { return cNothingParserRuleCall_14; }

		//Pause
		public RuleCall getPauseParserRuleCall_15() { return cPauseParserRuleCall_15; }

		//Present
		public RuleCall getPresentParserRuleCall_16() { return cPresentParserRuleCall_16; }

		//Repeat
		public RuleCall getRepeatParserRuleCall_17() { return cRepeatParserRuleCall_17; }

		//Run
		public RuleCall getRunParserRuleCall_18() { return cRunParserRuleCall_18; }

		//Suspend
		public RuleCall getSuspendParserRuleCall_19() { return cSuspendParserRuleCall_19; }

		//Sustain
		public RuleCall getSustainParserRuleCall_20() { return cSustainParserRuleCall_20; }

		//Trap
		public RuleCall getTrapParserRuleCall_21() { return cTrapParserRuleCall_21; }

		//LocalVariable
		public RuleCall getLocalVariableParserRuleCall_22() { return cLocalVariableParserRuleCall_22; }
	}

	public class EsterelParallelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.EsterelParallel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cThreadsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cThreadsEsterelThreadParserRuleCall_0_0 = (RuleCall)cThreadsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cThreadsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cThreadsEsterelThreadParserRuleCall_1_1_0 = (RuleCall)cThreadsAssignment_1_1.eContents().get(0);
		
		//// ==> Parallel: at least two threads
		//// -------------------------------------
		//EsterelParallel:
		//	threads+=EsterelThread ("||" threads+=EsterelThread)+;
		@Override public ParserRule getRule() { return rule; }

		//threads+=EsterelThread ("||" threads+=EsterelThread)+
		public Group getGroup() { return cGroup; }

		//threads+=EsterelThread
		public Assignment getThreadsAssignment_0() { return cThreadsAssignment_0; }

		//EsterelThread
		public RuleCall getThreadsEsterelThreadParserRuleCall_0_0() { return cThreadsEsterelThreadParserRuleCall_0_0; }

		//("||" threads+=EsterelThread)+
		public Group getGroup_1() { return cGroup_1; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_0() { return cVerticalLineVerticalLineKeyword_1_0; }

		//threads+=EsterelThread
		public Assignment getThreadsAssignment_1_1() { return cThreadsAssignment_1_1; }

		//EsterelThread
		public RuleCall getThreadsEsterelThreadParserRuleCall_1_1_0() { return cThreadsEsterelThreadParserRuleCall_1_1_0; }
	}

	public class EsterelThreadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.EsterelThread");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEsterelThreadAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cStatementsAtomicStatementParserRuleCall_1_0_0 = (RuleCall)cStatementsAssignment_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsAtomicStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		
		//// ==> Thread
		//// One AtomicStatement or multiple AtomicStatements
		//// It doesn't include 'Parallel' statements because they would be parallel to 
		//// the existing thread and therefore included in the previous thread list (Parallel.threads).
		//// -------------------------------------
		//EsterelThread:
		//	{EsterelThread} (statements+=AtomicStatement ";")* statements+=AtomicStatement?;
		@Override public ParserRule getRule() { return rule; }

		//{EsterelThread} (statements+=AtomicStatement ";")* statements+=AtomicStatement?
		public Group getGroup() { return cGroup; }

		//{EsterelThread}
		public Action getEsterelThreadAction_0() { return cEsterelThreadAction_0; }

		//(statements+=AtomicStatement ";")*
		public Group getGroup_1() { return cGroup_1; }

		//statements+=AtomicStatement
		public Assignment getStatementsAssignment_1_0() { return cStatementsAssignment_1_0; }

		//AtomicStatement
		public RuleCall getStatementsAtomicStatementParserRuleCall_1_0_0() { return cStatementsAtomicStatementParserRuleCall_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }

		//statements+=AtomicStatement?
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//AtomicStatement
		public RuleCall getStatementsAtomicStatementParserRuleCall_2_0() { return cStatementsAtomicStatementParserRuleCall_2_0; }
	}

	public class NothingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Nothing");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNothingAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Keyword cNothingKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//// ==> Nothing
		//// -------------------------------------
		//Nothing:
		//	{Nothing} annotations+=Annotation*
		//	"nothing";
		@Override public ParserRule getRule() { return rule; }

		//{Nothing} annotations+=Annotation* "nothing"
		public Group getGroup() { return cGroup; }

		//{Nothing}
		public Action getNothingAction_0() { return cNothingAction_0; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() { return cAnnotationsAnnotationParserRuleCall_1_0; }

		//"nothing"
		public Keyword getNothingKeyword_2() { return cNothingKeyword_2; }
	}

	public class HaltElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Halt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cHaltAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Keyword cHaltKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//// ==> Halt
		//// -------------------------------------
		//Halt:
		//	{Halt} annotations+=Annotation*
		//	"halt";
		@Override public ParserRule getRule() { return rule; }

		//{Halt} annotations+=Annotation* "halt"
		public Group getGroup() { return cGroup; }

		//{Halt}
		public Action getHaltAction_0() { return cHaltAction_0; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() { return cAnnotationsAnnotationParserRuleCall_1_0; }

		//"halt"
		public Keyword getHaltKeyword_2() { return cHaltKeyword_2; }
	}

	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cGroup_3.eContents().get(0);
		private final Assignment cStatementsAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final RuleCall cStatementsEsterelStatementParserRuleCall_3_0_0_0 = (RuleCall)cStatementsAssignment_3_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_0_1 = (Keyword)cGroup_3_0.eContents().get(1);
		private final Assignment cStatementsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cStatementsEsterelStatementParserRuleCall_3_1_0 = (RuleCall)cStatementsAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// ==> Block
		//// -------------------------------------    
		//Block:
		//	{Block} annotations+=Annotation*
		//	"[" ((statements+=EsterelStatement ";")* statements+=EsterelStatement?) "]";
		@Override public ParserRule getRule() { return rule; }

		//{Block} annotations+=Annotation* "[" ((statements+=EsterelStatement ";")* statements+=EsterelStatement?) "]"
		public Group getGroup() { return cGroup; }

		//{Block}
		public Action getBlockAction_0() { return cBlockAction_0; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() { return cAnnotationsAnnotationParserRuleCall_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//((statements+=EsterelStatement ";")* statements+=EsterelStatement?)
		public Group getGroup_3() { return cGroup_3; }

		//(statements+=EsterelStatement ";")*
		public Group getGroup_3_0() { return cGroup_3_0; }

		//statements+=EsterelStatement
		public Assignment getStatementsAssignment_3_0_0() { return cStatementsAssignment_3_0_0; }

		//EsterelStatement
		public RuleCall getStatementsEsterelStatementParserRuleCall_3_0_0_0() { return cStatementsEsterelStatementParserRuleCall_3_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_3_0_1() { return cSemicolonKeyword_3_0_1; }

		//statements+=EsterelStatement?
		public Assignment getStatementsAssignment_3_1() { return cStatementsAssignment_3_1; }

		//EsterelStatement
		public RuleCall getStatementsEsterelStatementParserRuleCall_3_1_0() { return cStatementsEsterelStatementParserRuleCall_3_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class EmitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Emit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cEmitKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cSignalAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final CrossReference cSignalISignalCrossReference_2_0_0 = (CrossReference)cSignalAssignment_2_0.eContents().get(0);
		private final RuleCall cSignalISignalIDTerminalRuleCall_2_0_0_1 = (RuleCall)cSignalISignalCrossReference_2_0_0.eContents().get(1);
		private final Assignment cTickAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cTickTickParserRuleCall_2_1_0 = (RuleCall)cTickAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExprAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_3_1_0 = (RuleCall)cExprAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//// ==> 7.5.1 Signal Emission
		//// -------------------------------------
		//Emit:
		//	annotations+=Annotation*
		//	"emit" (signal=[ISignal] | tick=Tick) ("(" expr=Expression ")")?;
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* "emit" (signal=[ISignal] | tick=Tick) ("(" expr=Expression ")")?
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//"emit"
		public Keyword getEmitKeyword_1() { return cEmitKeyword_1; }

		//(signal=[ISignal] | tick=Tick)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//signal=[ISignal]
		public Assignment getSignalAssignment_2_0() { return cSignalAssignment_2_0; }

		//[ISignal]
		public CrossReference getSignalISignalCrossReference_2_0_0() { return cSignalISignalCrossReference_2_0_0; }

		//ID
		public RuleCall getSignalISignalIDTerminalRuleCall_2_0_0_1() { return cSignalISignalIDTerminalRuleCall_2_0_0_1; }

		//tick=Tick
		public Assignment getTickAssignment_2_1() { return cTickAssignment_2_1; }

		//Tick
		public RuleCall getTickTickParserRuleCall_2_1_0() { return cTickTickParserRuleCall_2_1_0; }

		//("(" expr=Expression ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//expr=Expression
		public Assignment getExprAssignment_3_1() { return cExprAssignment_3_1; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_3_1_0() { return cExprExpressionParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}

	public class SustainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Sustain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cSustainKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cSignalAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final CrossReference cSignalISignalCrossReference_2_0_0 = (CrossReference)cSignalAssignment_2_0.eContents().get(0);
		private final RuleCall cSignalISignalIDTerminalRuleCall_2_0_0_1 = (RuleCall)cSignalISignalCrossReference_2_0_0.eContents().get(1);
		private final Assignment cTickAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cTickTickParserRuleCall_2_1_0 = (RuleCall)cTickAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExpressionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_3_1_0 = (RuleCall)cExpressionAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//// emit a signal indefinitely
		//Sustain:
		//	annotations+=Annotation*
		//	"sustain" (signal=[ISignal] | tick=Tick) ("(" expression=Expression ")")?;
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* "sustain" (signal=[ISignal] | tick=Tick) ("(" expression=Expression ")")?
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//"sustain"
		public Keyword getSustainKeyword_1() { return cSustainKeyword_1; }

		//(signal=[ISignal] | tick=Tick)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//signal=[ISignal]
		public Assignment getSignalAssignment_2_0() { return cSignalAssignment_2_0; }

		//[ISignal]
		public CrossReference getSignalISignalCrossReference_2_0_0() { return cSignalISignalCrossReference_2_0_0; }

		//ID
		public RuleCall getSignalISignalIDTerminalRuleCall_2_0_0_1() { return cSignalISignalIDTerminalRuleCall_2_0_0_1; }

		//tick=Tick
		public Assignment getTickAssignment_2_1() { return cTickAssignment_2_1; }

		//Tick
		public RuleCall getTickTickParserRuleCall_2_1_0() { return cTickTickParserRuleCall_2_1_0; }

		//("(" expression=Expression ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_3_1() { return cExpressionAssignment_3_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_1_0() { return cExpressionExpressionParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}

	public class EsterelAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.EsterelAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cVarIVariableCrossReference_0_0 = (CrossReference)cVarAssignment_0.eContents().get(0);
		private final RuleCall cVarIVariableIDTerminalRuleCall_0_0_1 = (RuleCall)cVarIVariableCrossReference_0_0.eContents().get(1);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		
		//// ==> 7.5.2 Assignment and Procedure Call
		//// -------------------------------------
		//EsterelAssignment:
		//	var=[IVariable] ":=" expr=Expression;
		@Override public ParserRule getRule() { return rule; }

		//var=[IVariable] ":=" expr=Expression
		public Group getGroup() { return cGroup; }

		//var=[IVariable]
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }

		//[IVariable]
		public CrossReference getVarIVariableCrossReference_0_0() { return cVarIVariableCrossReference_0_0; }

		//ID
		public RuleCall getVarIVariableIDTerminalRuleCall_0_0_1() { return cVarIVariableIDTerminalRuleCall_0_0_1; }

		//":="
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }

		//expr=Expression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_2_0() { return cExprExpressionParserRuleCall_2_0; }
	}

	public class ProcCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.ProcCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cCallKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cProcAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cProcProcedureCrossReference_2_0 = (CrossReference)cProcAssignment_2.eContents().get(0);
		private final RuleCall cProcProcedureIDTerminalRuleCall_2_0_1 = (RuleCall)cProcProcedureCrossReference_2_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cVarListAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final CrossReference cVarListIVariableCrossReference_4_0_0 = (CrossReference)cVarListAssignment_4_0.eContents().get(0);
		private final RuleCall cVarListIVariableIDTerminalRuleCall_4_0_0_1 = (RuleCall)cVarListIVariableCrossReference_4_0_0.eContents().get(1);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cVarListAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final CrossReference cVarListIVariableCrossReference_4_1_1_0 = (CrossReference)cVarListAssignment_4_1_1.eContents().get(0);
		private final RuleCall cVarListIVariableIDTerminalRuleCall_4_1_1_0_1 = (RuleCall)cVarListIVariableCrossReference_4_1_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cKexpressionsAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cKexpressionsExpressionParserRuleCall_7_0_0 = (RuleCall)cKexpressionsAssignment_7_0.eContents().get(0);
		private final Group cGroup_7_1 = (Group)cGroup_7.eContents().get(1);
		private final Keyword cCommaKeyword_7_1_0 = (Keyword)cGroup_7_1.eContents().get(0);
		private final Assignment cKexpressionsAssignment_7_1_1 = (Assignment)cGroup_7_1.eContents().get(1);
		private final RuleCall cKexpressionsExpressionParserRuleCall_7_1_1_0 = (RuleCall)cKexpressionsAssignment_7_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//ProcCall:
		//	annotations+=Annotation*
		//	"call"
		//	proc=[Procedure]
		//	"(" (varList+=[IVariable] ("," varList+=[IVariable])*)?
		//	")"
		//	"(" (kexpressions+=Expression ("," kexpressions+=Expression)*)?
		//	")";
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* "call" proc=[Procedure] "(" (varList+=[IVariable] ("," varList+=[IVariable])*)? ")" "("
		//(kexpressions+=Expression ("," kexpressions+=Expression)*)? ")"
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//"call"
		public Keyword getCallKeyword_1() { return cCallKeyword_1; }

		//proc=[Procedure]
		public Assignment getProcAssignment_2() { return cProcAssignment_2; }

		//[Procedure]
		public CrossReference getProcProcedureCrossReference_2_0() { return cProcProcedureCrossReference_2_0; }

		//ID
		public RuleCall getProcProcedureIDTerminalRuleCall_2_0_1() { return cProcProcedureIDTerminalRuleCall_2_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//(varList+=[IVariable] ("," varList+=[IVariable])*)?
		public Group getGroup_4() { return cGroup_4; }

		//varList+=[IVariable]
		public Assignment getVarListAssignment_4_0() { return cVarListAssignment_4_0; }

		//[IVariable]
		public CrossReference getVarListIVariableCrossReference_4_0_0() { return cVarListIVariableCrossReference_4_0_0; }

		//ID
		public RuleCall getVarListIVariableIDTerminalRuleCall_4_0_0_1() { return cVarListIVariableIDTerminalRuleCall_4_0_0_1; }

		//("," varList+=[IVariable])*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//varList+=[IVariable]
		public Assignment getVarListAssignment_4_1_1() { return cVarListAssignment_4_1_1; }

		//[IVariable]
		public CrossReference getVarListIVariableCrossReference_4_1_1_0() { return cVarListIVariableCrossReference_4_1_1_0; }

		//ID
		public RuleCall getVarListIVariableIDTerminalRuleCall_4_1_1_0_1() { return cVarListIVariableIDTerminalRuleCall_4_1_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//"("
		public Keyword getLeftParenthesisKeyword_6() { return cLeftParenthesisKeyword_6; }

		//(kexpressions+=Expression ("," kexpressions+=Expression)*)?
		public Group getGroup_7() { return cGroup_7; }

		//kexpressions+=Expression
		public Assignment getKexpressionsAssignment_7_0() { return cKexpressionsAssignment_7_0; }

		//Expression
		public RuleCall getKexpressionsExpressionParserRuleCall_7_0_0() { return cKexpressionsExpressionParserRuleCall_7_0_0; }

		//("," kexpressions+=Expression)*
		public Group getGroup_7_1() { return cGroup_7_1; }

		//","
		public Keyword getCommaKeyword_7_1_0() { return cCommaKeyword_7_1_0; }

		//kexpressions+=Expression
		public Assignment getKexpressionsAssignment_7_1_1() { return cKexpressionsAssignment_7_1_1; }

		//Expression
		public RuleCall getKexpressionsExpressionParserRuleCall_7_1_1_0() { return cKexpressionsExpressionParserRuleCall_7_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}

	public class PresentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Present");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cPresentKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Alternatives cAlternatives_2_0_0 = (Alternatives)cGroup_2_0.eContents().get(0);
		private final Assignment cExpressionAssignment_2_0_0_0 = (Assignment)cAlternatives_2_0_0.eContents().get(0);
		private final RuleCall cExpressionSignalExpressionParserRuleCall_2_0_0_0_0 = (RuleCall)cExpressionAssignment_2_0_0_0.eContents().get(0);
		private final Group cGroup_2_0_0_1 = (Group)cAlternatives_2_0_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2_0_0_1_0 = (Keyword)cGroup_2_0_0_1.eContents().get(0);
		private final Assignment cExpressionAssignment_2_0_0_1_1 = (Assignment)cGroup_2_0_0_1.eContents().get(1);
		private final RuleCall cExpressionSignalExpressionParserRuleCall_2_0_0_1_1_0 = (RuleCall)cExpressionAssignment_2_0_0_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_0_0_1_2 = (Keyword)cGroup_2_0_0_1.eContents().get(2);
		private final Assignment cTickAssignment_2_0_0_2 = (Assignment)cAlternatives_2_0_0.eContents().get(2);
		private final RuleCall cTickTickParserRuleCall_2_0_0_2_0 = (RuleCall)cTickAssignment_2_0_0_2.eContents().get(0);
		private final Group cGroup_2_0_1 = (Group)cGroup_2_0.eContents().get(1);
		private final Assignment cThenAnnotationsAssignment_2_0_1_0 = (Assignment)cGroup_2_0_1.eContents().get(0);
		private final RuleCall cThenAnnotationsAnnotationParserRuleCall_2_0_1_0_0 = (RuleCall)cThenAnnotationsAssignment_2_0_1_0.eContents().get(0);
		private final Keyword cThenKeyword_2_0_1_1 = (Keyword)cGroup_2_0_1.eContents().get(1);
		private final Group cGroup_2_0_1_2 = (Group)cGroup_2_0_1.eContents().get(2);
		private final Group cGroup_2_0_1_2_0 = (Group)cGroup_2_0_1_2.eContents().get(0);
		private final Assignment cThenStatementsAssignment_2_0_1_2_0_0 = (Assignment)cGroup_2_0_1_2_0.eContents().get(0);
		private final RuleCall cThenStatementsEsterelStatementParserRuleCall_2_0_1_2_0_0_0 = (RuleCall)cThenStatementsAssignment_2_0_1_2_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_0_1_2_0_1 = (Keyword)cGroup_2_0_1_2_0.eContents().get(1);
		private final Assignment cThenStatementsAssignment_2_0_1_2_1 = (Assignment)cGroup_2_0_1_2.eContents().get(1);
		private final RuleCall cThenStatementsEsterelStatementParserRuleCall_2_0_1_2_1_0 = (RuleCall)cThenStatementsAssignment_2_0_1_2_1.eContents().get(0);
		private final Assignment cCasesAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cCasesPresentCaseParserRuleCall_2_1_0 = (RuleCall)cCasesAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cElseAnnotationsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cElseAnnotationsAnnotationParserRuleCall_3_0_0 = (RuleCall)cElseAnnotationsAssignment_3_0.eContents().get(0);
		private final Keyword cElseKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Group cGroup_3_2_0 = (Group)cGroup_3_2.eContents().get(0);
		private final Assignment cElseStatementsAssignment_3_2_0_0 = (Assignment)cGroup_3_2_0.eContents().get(0);
		private final RuleCall cElseStatementsEsterelStatementParserRuleCall_3_2_0_0_0 = (RuleCall)cElseStatementsAssignment_3_2_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_2_0_1 = (Keyword)cGroup_3_2_0.eContents().get(1);
		private final Assignment cElseStatementsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cElseStatementsEsterelStatementParserRuleCall_3_2_1_0 = (RuleCall)cElseStatementsAssignment_3_2_1.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cPresentKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// ==> 7.5.3 The present Signal Test
		//// -------------------------------------
		//Present:
		//	annotations+=Annotation*
		//	"present" ((expression=SignalExpression
		//	| "[" expression=SignalExpression "]"
		//	| tick=Tick) (thenAnnotations+=Annotation*
		//	"then" ((thenStatements+=EsterelStatement ";")* thenStatements+=EsterelStatement?))?
		//	| cases+=PresentCase+) (elseAnnotations+=Annotation*
		//	"else" ((elseStatements+=EsterelStatement ";")* elseStatements+=EsterelStatement?))?
		//	"end" "present"?;
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* "present" ((expression=SignalExpression | "[" expression=SignalExpression "]" | tick=Tick)
		//(thenAnnotations+=Annotation* "then" ((thenStatements+=EsterelStatement ";")* thenStatements+=EsterelStatement?))? |
		//cases+=PresentCase+) (elseAnnotations+=Annotation* "else" ((elseStatements+=EsterelStatement ";")*
		//elseStatements+=EsterelStatement?))? "end" "present"?
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//"present"
		public Keyword getPresentKeyword_1() { return cPresentKeyword_1; }

		//((expression=SignalExpression | "[" expression=SignalExpression "]" | tick=Tick) (thenAnnotations+=Annotation* "then"
		//((thenStatements+=EsterelStatement ";")* thenStatements+=EsterelStatement?))? | cases+=PresentCase+)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//(expression=SignalExpression | "[" expression=SignalExpression "]" | tick=Tick) (thenAnnotations+=Annotation* "then"
		//((thenStatements+=EsterelStatement ";")* thenStatements+=EsterelStatement?))?
		public Group getGroup_2_0() { return cGroup_2_0; }

		//(expression=SignalExpression | "[" expression=SignalExpression "]" | tick=Tick)
		public Alternatives getAlternatives_2_0_0() { return cAlternatives_2_0_0; }

		//expression=SignalExpression
		public Assignment getExpressionAssignment_2_0_0_0() { return cExpressionAssignment_2_0_0_0; }

		//SignalExpression
		public RuleCall getExpressionSignalExpressionParserRuleCall_2_0_0_0_0() { return cExpressionSignalExpressionParserRuleCall_2_0_0_0_0; }

		//"[" expression=SignalExpression "]"
		public Group getGroup_2_0_0_1() { return cGroup_2_0_0_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_0_0_1_0() { return cLeftSquareBracketKeyword_2_0_0_1_0; }

		//expression=SignalExpression
		public Assignment getExpressionAssignment_2_0_0_1_1() { return cExpressionAssignment_2_0_0_1_1; }

		//SignalExpression
		public RuleCall getExpressionSignalExpressionParserRuleCall_2_0_0_1_1_0() { return cExpressionSignalExpressionParserRuleCall_2_0_0_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_0_0_1_2() { return cRightSquareBracketKeyword_2_0_0_1_2; }

		//tick=Tick
		public Assignment getTickAssignment_2_0_0_2() { return cTickAssignment_2_0_0_2; }

		//Tick
		public RuleCall getTickTickParserRuleCall_2_0_0_2_0() { return cTickTickParserRuleCall_2_0_0_2_0; }

		//(thenAnnotations+=Annotation* "then" ((thenStatements+=EsterelStatement ";")* thenStatements+=EsterelStatement?))?
		public Group getGroup_2_0_1() { return cGroup_2_0_1; }

		//thenAnnotations+=Annotation*
		public Assignment getThenAnnotationsAssignment_2_0_1_0() { return cThenAnnotationsAssignment_2_0_1_0; }

		//Annotation
		public RuleCall getThenAnnotationsAnnotationParserRuleCall_2_0_1_0_0() { return cThenAnnotationsAnnotationParserRuleCall_2_0_1_0_0; }

		//"then"
		public Keyword getThenKeyword_2_0_1_1() { return cThenKeyword_2_0_1_1; }

		//((thenStatements+=EsterelStatement ";")* thenStatements+=EsterelStatement?)
		public Group getGroup_2_0_1_2() { return cGroup_2_0_1_2; }

		//(thenStatements+=EsterelStatement ";")*
		public Group getGroup_2_0_1_2_0() { return cGroup_2_0_1_2_0; }

		//thenStatements+=EsterelStatement
		public Assignment getThenStatementsAssignment_2_0_1_2_0_0() { return cThenStatementsAssignment_2_0_1_2_0_0; }

		//EsterelStatement
		public RuleCall getThenStatementsEsterelStatementParserRuleCall_2_0_1_2_0_0_0() { return cThenStatementsEsterelStatementParserRuleCall_2_0_1_2_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_2_0_1_2_0_1() { return cSemicolonKeyword_2_0_1_2_0_1; }

		//thenStatements+=EsterelStatement?
		public Assignment getThenStatementsAssignment_2_0_1_2_1() { return cThenStatementsAssignment_2_0_1_2_1; }

		//EsterelStatement
		public RuleCall getThenStatementsEsterelStatementParserRuleCall_2_0_1_2_1_0() { return cThenStatementsEsterelStatementParserRuleCall_2_0_1_2_1_0; }

		//cases+=PresentCase+
		public Assignment getCasesAssignment_2_1() { return cCasesAssignment_2_1; }

		//PresentCase
		public RuleCall getCasesPresentCaseParserRuleCall_2_1_0() { return cCasesPresentCaseParserRuleCall_2_1_0; }

		//(elseAnnotations+=Annotation* "else" ((elseStatements+=EsterelStatement ";")* elseStatements+=EsterelStatement?))?
		public Group getGroup_3() { return cGroup_3; }

		//elseAnnotations+=Annotation*
		public Assignment getElseAnnotationsAssignment_3_0() { return cElseAnnotationsAssignment_3_0; }

		//Annotation
		public RuleCall getElseAnnotationsAnnotationParserRuleCall_3_0_0() { return cElseAnnotationsAnnotationParserRuleCall_3_0_0; }

		//"else"
		public Keyword getElseKeyword_3_1() { return cElseKeyword_3_1; }

		//((elseStatements+=EsterelStatement ";")* elseStatements+=EsterelStatement?)
		public Group getGroup_3_2() { return cGroup_3_2; }

		//(elseStatements+=EsterelStatement ";")*
		public Group getGroup_3_2_0() { return cGroup_3_2_0; }

		//elseStatements+=EsterelStatement
		public Assignment getElseStatementsAssignment_3_2_0_0() { return cElseStatementsAssignment_3_2_0_0; }

		//EsterelStatement
		public RuleCall getElseStatementsEsterelStatementParserRuleCall_3_2_0_0_0() { return cElseStatementsEsterelStatementParserRuleCall_3_2_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_3_2_0_1() { return cSemicolonKeyword_3_2_0_1; }

		//elseStatements+=EsterelStatement?
		public Assignment getElseStatementsAssignment_3_2_1() { return cElseStatementsAssignment_3_2_1; }

		//EsterelStatement
		public RuleCall getElseStatementsEsterelStatementParserRuleCall_3_2_1_0() { return cElseStatementsEsterelStatementParserRuleCall_3_2_1_0; }

		//"end"
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }

		//"present"?
		public Keyword getPresentKeyword_5() { return cPresentKeyword_5; }
	}

	public class PresentCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.PresentCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cCaseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cExpressionSignalExpressionParserRuleCall_2_0_0 = (RuleCall)cExpressionAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cExpressionAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cExpressionSignalExpressionParserRuleCall_2_1_1_0 = (RuleCall)cExpressionAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		private final Assignment cTickAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final RuleCall cTickTickParserRuleCall_2_2_0 = (RuleCall)cTickAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cDoKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Group cGroup_3_1_0 = (Group)cGroup_3_1.eContents().get(0);
		private final Assignment cStatementsAssignment_3_1_0_0 = (Assignment)cGroup_3_1_0.eContents().get(0);
		private final RuleCall cStatementsEsterelStatementParserRuleCall_3_1_0_0_0 = (RuleCall)cStatementsAssignment_3_1_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1_0_1 = (Keyword)cGroup_3_1_0.eContents().get(1);
		private final Assignment cStatementsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cStatementsEsterelStatementParserRuleCall_3_1_1_0 = (RuleCall)cStatementsAssignment_3_1_1.eContents().get(0);
		
		//PresentCase:
		//	annotations+=Annotation*
		//	"case" (expression=SignalExpression
		//	| "[" expression=SignalExpression "]"
		//	| tick=Tick) ("do" ((statements+=EsterelStatement ";")* statements+=EsterelStatement?))?;
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* "case" (expression=SignalExpression | "[" expression=SignalExpression "]" | tick=Tick) ("do"
		//((statements+=EsterelStatement ";")* statements+=EsterelStatement?))?
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//"case"
		public Keyword getCaseKeyword_1() { return cCaseKeyword_1; }

		//(expression=SignalExpression | "[" expression=SignalExpression "]" | tick=Tick)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//expression=SignalExpression
		public Assignment getExpressionAssignment_2_0() { return cExpressionAssignment_2_0; }

		//SignalExpression
		public RuleCall getExpressionSignalExpressionParserRuleCall_2_0_0() { return cExpressionSignalExpressionParserRuleCall_2_0_0; }

		//"[" expression=SignalExpression "]"
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_1_0() { return cLeftSquareBracketKeyword_2_1_0; }

		//expression=SignalExpression
		public Assignment getExpressionAssignment_2_1_1() { return cExpressionAssignment_2_1_1; }

		//SignalExpression
		public RuleCall getExpressionSignalExpressionParserRuleCall_2_1_1_0() { return cExpressionSignalExpressionParserRuleCall_2_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_1_2() { return cRightSquareBracketKeyword_2_1_2; }

		//tick=Tick
		public Assignment getTickAssignment_2_2() { return cTickAssignment_2_2; }

		//Tick
		public RuleCall getTickTickParserRuleCall_2_2_0() { return cTickTickParserRuleCall_2_2_0; }

		//("do" ((statements+=EsterelStatement ";")* statements+=EsterelStatement?))?
		public Group getGroup_3() { return cGroup_3; }

		//"do"
		public Keyword getDoKeyword_3_0() { return cDoKeyword_3_0; }

		//((statements+=EsterelStatement ";")* statements+=EsterelStatement?)
		public Group getGroup_3_1() { return cGroup_3_1; }

		//(statements+=EsterelStatement ";")*
		public Group getGroup_3_1_0() { return cGroup_3_1_0; }

		//statements+=EsterelStatement
		public Assignment getStatementsAssignment_3_1_0_0() { return cStatementsAssignment_3_1_0_0; }

		//EsterelStatement
		public RuleCall getStatementsEsterelStatementParserRuleCall_3_1_0_0_0() { return cStatementsEsterelStatementParserRuleCall_3_1_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_3_1_0_1() { return cSemicolonKeyword_3_1_0_1; }

		//statements+=EsterelStatement?
		public Assignment getStatementsAssignment_3_1_1() { return cStatementsAssignment_3_1_1; }

		//EsterelStatement
		public RuleCall getStatementsEsterelStatementParserRuleCall_3_1_1_0() { return cStatementsEsterelStatementParserRuleCall_3_1_1_0; }
	}

	public class IfTestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.IfTest");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cThenAnnotationsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cThenAnnotationsAnnotationParserRuleCall_3_0_0 = (RuleCall)cThenAnnotationsAssignment_3_0.eContents().get(0);
		private final Keyword cThenKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Group cGroup_3_2_0 = (Group)cGroup_3_2.eContents().get(0);
		private final Assignment cThenStatementsAssignment_3_2_0_0 = (Assignment)cGroup_3_2_0.eContents().get(0);
		private final RuleCall cThenStatementsEsterelStatementParserRuleCall_3_2_0_0_0 = (RuleCall)cThenStatementsAssignment_3_2_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_2_0_1 = (Keyword)cGroup_3_2_0.eContents().get(1);
		private final Assignment cThenStatementsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cThenStatementsEsterelStatementParserRuleCall_3_2_1_0 = (RuleCall)cThenStatementsAssignment_3_2_1.eContents().get(0);
		private final Assignment cElseifAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElseifElsIfParserRuleCall_4_0 = (RuleCall)cElseifAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cElseAnnotationsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cElseAnnotationsAnnotationParserRuleCall_5_0_0 = (RuleCall)cElseAnnotationsAssignment_5_0.eContents().get(0);
		private final Keyword cElseKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Group cGroup_5_2_0 = (Group)cGroup_5_2.eContents().get(0);
		private final Assignment cElseStatementsAssignment_5_2_0_0 = (Assignment)cGroup_5_2_0.eContents().get(0);
		private final RuleCall cElseStatementsEsterelStatementParserRuleCall_5_2_0_0_0 = (RuleCall)cElseStatementsAssignment_5_2_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_2_0_1 = (Keyword)cGroup_5_2_0.eContents().get(1);
		private final Assignment cElseStatementsAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cElseStatementsEsterelStatementParserRuleCall_5_2_1_0 = (RuleCall)cElseStatementsAssignment_5_2_1.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cIfKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//// ==> 7.5.4 The if Data Test
		//// -------------------------------------
		//IfTest:
		//	annotations+=Annotation*
		//	"if"
		//	expr=Expression (thenAnnotations+=Annotation*
		//	"then" ((thenStatements+=EsterelStatement ";")* thenStatements+=EsterelStatement?))?
		//	elseif+=ElsIf* (elseAnnotations+=Annotation*
		//	"else" ((elseStatements+=EsterelStatement ";")* elseStatements+=EsterelStatement?))?
		//	"end" "if"?;
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* "if" expr=Expression (thenAnnotations+=Annotation* "then" ((thenStatements+=EsterelStatement
		//";")* thenStatements+=EsterelStatement?))? elseif+=ElsIf* (elseAnnotations+=Annotation* "else"
		//((elseStatements+=EsterelStatement ";")* elseStatements+=EsterelStatement?))? "end" "if"?
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//"if"
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }

		//expr=Expression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_2_0() { return cExprExpressionParserRuleCall_2_0; }

		//(thenAnnotations+=Annotation* "then" ((thenStatements+=EsterelStatement ";")* thenStatements+=EsterelStatement?))?
		public Group getGroup_3() { return cGroup_3; }

		//thenAnnotations+=Annotation*
		public Assignment getThenAnnotationsAssignment_3_0() { return cThenAnnotationsAssignment_3_0; }

		//Annotation
		public RuleCall getThenAnnotationsAnnotationParserRuleCall_3_0_0() { return cThenAnnotationsAnnotationParserRuleCall_3_0_0; }

		//"then"
		public Keyword getThenKeyword_3_1() { return cThenKeyword_3_1; }

		//((thenStatements+=EsterelStatement ";")* thenStatements+=EsterelStatement?)
		public Group getGroup_3_2() { return cGroup_3_2; }

		//(thenStatements+=EsterelStatement ";")*
		public Group getGroup_3_2_0() { return cGroup_3_2_0; }

		//thenStatements+=EsterelStatement
		public Assignment getThenStatementsAssignment_3_2_0_0() { return cThenStatementsAssignment_3_2_0_0; }

		//EsterelStatement
		public RuleCall getThenStatementsEsterelStatementParserRuleCall_3_2_0_0_0() { return cThenStatementsEsterelStatementParserRuleCall_3_2_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_3_2_0_1() { return cSemicolonKeyword_3_2_0_1; }

		//thenStatements+=EsterelStatement?
		public Assignment getThenStatementsAssignment_3_2_1() { return cThenStatementsAssignment_3_2_1; }

		//EsterelStatement
		public RuleCall getThenStatementsEsterelStatementParserRuleCall_3_2_1_0() { return cThenStatementsEsterelStatementParserRuleCall_3_2_1_0; }

		//elseif+=ElsIf*
		public Assignment getElseifAssignment_4() { return cElseifAssignment_4; }

		//ElsIf
		public RuleCall getElseifElsIfParserRuleCall_4_0() { return cElseifElsIfParserRuleCall_4_0; }

		//(elseAnnotations+=Annotation* "else" ((elseStatements+=EsterelStatement ";")* elseStatements+=EsterelStatement?))?
		public Group getGroup_5() { return cGroup_5; }

		//elseAnnotations+=Annotation*
		public Assignment getElseAnnotationsAssignment_5_0() { return cElseAnnotationsAssignment_5_0; }

		//Annotation
		public RuleCall getElseAnnotationsAnnotationParserRuleCall_5_0_0() { return cElseAnnotationsAnnotationParserRuleCall_5_0_0; }

		//"else"
		public Keyword getElseKeyword_5_1() { return cElseKeyword_5_1; }

		//((elseStatements+=EsterelStatement ";")* elseStatements+=EsterelStatement?)
		public Group getGroup_5_2() { return cGroup_5_2; }

		//(elseStatements+=EsterelStatement ";")*
		public Group getGroup_5_2_0() { return cGroup_5_2_0; }

		//elseStatements+=EsterelStatement
		public Assignment getElseStatementsAssignment_5_2_0_0() { return cElseStatementsAssignment_5_2_0_0; }

		//EsterelStatement
		public RuleCall getElseStatementsEsterelStatementParserRuleCall_5_2_0_0_0() { return cElseStatementsEsterelStatementParserRuleCall_5_2_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_5_2_0_1() { return cSemicolonKeyword_5_2_0_1; }

		//elseStatements+=EsterelStatement?
		public Assignment getElseStatementsAssignment_5_2_1() { return cElseStatementsAssignment_5_2_1; }

		//EsterelStatement
		public RuleCall getElseStatementsEsterelStatementParserRuleCall_5_2_1_0() { return cElseStatementsEsterelStatementParserRuleCall_5_2_1_0; }

		//"end"
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }

		//"if"?
		public Keyword getIfKeyword_7() { return cIfKeyword_7; }
	}

	public class ElsIfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.ElsIf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cElsifKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cThenAnnotationsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cThenAnnotationsAnnotationParserRuleCall_3_0_0 = (RuleCall)cThenAnnotationsAssignment_3_0.eContents().get(0);
		private final Keyword cThenKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Group cGroup_3_2_0 = (Group)cGroup_3_2.eContents().get(0);
		private final Assignment cThenStatementsAssignment_3_2_0_0 = (Assignment)cGroup_3_2_0.eContents().get(0);
		private final RuleCall cThenStatementsEsterelStatementParserRuleCall_3_2_0_0_0 = (RuleCall)cThenStatementsAssignment_3_2_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_2_0_1 = (Keyword)cGroup_3_2_0.eContents().get(1);
		private final Assignment cThenStatementsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cThenStatementsEsterelStatementParserRuleCall_3_2_1_0 = (RuleCall)cThenStatementsAssignment_3_2_1.eContents().get(0);
		
		//ElsIf:
		//	annotations+=Annotation*
		//	"elsif"
		//	expr=Expression (thenAnnotations+=Annotation*
		//	"then" ((thenStatements+=EsterelStatement ";")* thenStatements+=EsterelStatement?))?;
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* "elsif" expr=Expression (thenAnnotations+=Annotation* "then" ((thenStatements+=EsterelStatement
		//";")* thenStatements+=EsterelStatement?))?
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//"elsif"
		public Keyword getElsifKeyword_1() { return cElsifKeyword_1; }

		//expr=Expression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_2_0() { return cExprExpressionParserRuleCall_2_0; }

		//(thenAnnotations+=Annotation* "then" ((thenStatements+=EsterelStatement ";")* thenStatements+=EsterelStatement?))?
		public Group getGroup_3() { return cGroup_3; }

		//thenAnnotations+=Annotation*
		public Assignment getThenAnnotationsAssignment_3_0() { return cThenAnnotationsAssignment_3_0; }

		//Annotation
		public RuleCall getThenAnnotationsAnnotationParserRuleCall_3_0_0() { return cThenAnnotationsAnnotationParserRuleCall_3_0_0; }

		//"then"
		public Keyword getThenKeyword_3_1() { return cThenKeyword_3_1; }

		//((thenStatements+=EsterelStatement ";")* thenStatements+=EsterelStatement?)
		public Group getGroup_3_2() { return cGroup_3_2; }

		//(thenStatements+=EsterelStatement ";")*
		public Group getGroup_3_2_0() { return cGroup_3_2_0; }

		//thenStatements+=EsterelStatement
		public Assignment getThenStatementsAssignment_3_2_0_0() { return cThenStatementsAssignment_3_2_0_0; }

		//EsterelStatement
		public RuleCall getThenStatementsEsterelStatementParserRuleCall_3_2_0_0_0() { return cThenStatementsEsterelStatementParserRuleCall_3_2_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_3_2_0_1() { return cSemicolonKeyword_3_2_0_1; }

		//thenStatements+=EsterelStatement?
		public Assignment getThenStatementsAssignment_3_2_1() { return cThenStatementsAssignment_3_2_1; }

		//EsterelStatement
		public RuleCall getThenStatementsEsterelStatementParserRuleCall_3_2_1_0() { return cThenStatementsEsterelStatementParserRuleCall_3_2_1_0; }
	}

	public class LoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Loop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLoopAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Keyword cLoopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cGroup_3.eContents().get(0);
		private final Assignment cStatementsAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final RuleCall cStatementsEsterelStatementParserRuleCall_3_0_0_0 = (RuleCall)cStatementsAssignment_3_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_0_1 = (Keyword)cGroup_3_0.eContents().get(1);
		private final Assignment cStatementsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cStatementsEsterelStatementParserRuleCall_3_1_0 = (RuleCall)cStatementsAssignment_3_1.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Keyword cEndKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Keyword cLoopKeyword_4_0_1 = (Keyword)cGroup_4_0.eContents().get(1);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Keyword cEachKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cDelayAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cDelayDelayExprParserRuleCall_4_1_1_0 = (RuleCall)cDelayAssignment_4_1_1.eContents().get(0);
		
		//// ==> 7.5.5 Looping & 7.5.9 Temporal Loops
		//// -------------------------------------
		//Loop:
		//	{Loop} annotations+=Annotation*
		//	"loop" ((statements+=EsterelStatement ";")* statements+=EsterelStatement?) ("end" "loop"? | "each" delay=DelayExpr);
		@Override public ParserRule getRule() { return rule; }

		//{Loop} annotations+=Annotation* "loop" ((statements+=EsterelStatement ";")* statements+=EsterelStatement?) ("end"
		//"loop"? | "each" delay=DelayExpr)
		public Group getGroup() { return cGroup; }

		//{Loop}
		public Action getLoopAction_0() { return cLoopAction_0; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() { return cAnnotationsAnnotationParserRuleCall_1_0; }

		//"loop"
		public Keyword getLoopKeyword_2() { return cLoopKeyword_2; }

		//((statements+=EsterelStatement ";")* statements+=EsterelStatement?)
		public Group getGroup_3() { return cGroup_3; }

		//(statements+=EsterelStatement ";")*
		public Group getGroup_3_0() { return cGroup_3_0; }

		//statements+=EsterelStatement
		public Assignment getStatementsAssignment_3_0_0() { return cStatementsAssignment_3_0_0; }

		//EsterelStatement
		public RuleCall getStatementsEsterelStatementParserRuleCall_3_0_0_0() { return cStatementsEsterelStatementParserRuleCall_3_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_3_0_1() { return cSemicolonKeyword_3_0_1; }

		//statements+=EsterelStatement?
		public Assignment getStatementsAssignment_3_1() { return cStatementsAssignment_3_1; }

		//EsterelStatement
		public RuleCall getStatementsEsterelStatementParserRuleCall_3_1_0() { return cStatementsEsterelStatementParserRuleCall_3_1_0; }

		//("end" "loop"? | "each" delay=DelayExpr)
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//"end" "loop"?
		public Group getGroup_4_0() { return cGroup_4_0; }

		//"end"
		public Keyword getEndKeyword_4_0_0() { return cEndKeyword_4_0_0; }

		//"loop"?
		public Keyword getLoopKeyword_4_0_1() { return cLoopKeyword_4_0_1; }

		//"each" delay=DelayExpr
		public Group getGroup_4_1() { return cGroup_4_1; }

		//"each"
		public Keyword getEachKeyword_4_1_0() { return cEachKeyword_4_1_0; }

		//delay=DelayExpr
		public Assignment getDelayAssignment_4_1_1() { return cDelayAssignment_4_1_1; }

		//DelayExpr
		public RuleCall getDelayDelayExprParserRuleCall_4_1_1_0() { return cDelayDelayExprParserRuleCall_4_1_1_0; }
	}

	public class RepeatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Repeat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cPositiveAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cPositivePositiveKeyword_1_0 = (Keyword)cPositiveAssignment_1.eContents().get(0);
		private final Keyword cRepeatKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Keyword cTimesKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cGroup_5.eContents().get(0);
		private final Assignment cStatementsAssignment_5_0_0 = (Assignment)cGroup_5_0.eContents().get(0);
		private final RuleCall cStatementsEsterelStatementParserRuleCall_5_0_0_0 = (RuleCall)cStatementsAssignment_5_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_0_1 = (Keyword)cGroup_5_0.eContents().get(1);
		private final Assignment cStatementsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cStatementsEsterelStatementParserRuleCall_5_1_0 = (RuleCall)cStatementsAssignment_5_1.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRepeatKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//// ==> 7.5.6 Repeat Looping
		//// -------------------------------------
		//Repeat:
		//	annotations+=Annotation*
		//	positive?="positive"?
		//	"repeat"
		//	expression=Expression
		//	"times" ((statements+=EsterelStatement ";")* statements+=EsterelStatement?)
		//	"end" "repeat"?;
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* positive?="positive"? "repeat" expression=Expression "times" ((statements+=EsterelStatement
		//";")* statements+=EsterelStatement?) "end" "repeat"?
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//positive?="positive"?
		public Assignment getPositiveAssignment_1() { return cPositiveAssignment_1; }

		//"positive"
		public Keyword getPositivePositiveKeyword_1_0() { return cPositivePositiveKeyword_1_0; }

		//"repeat"
		public Keyword getRepeatKeyword_2() { return cRepeatKeyword_2; }

		//expression=Expression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_0() { return cExpressionExpressionParserRuleCall_3_0; }

		//"times"
		public Keyword getTimesKeyword_4() { return cTimesKeyword_4; }

		//((statements+=EsterelStatement ";")* statements+=EsterelStatement?)
		public Group getGroup_5() { return cGroup_5; }

		//(statements+=EsterelStatement ";")*
		public Group getGroup_5_0() { return cGroup_5_0; }

		//statements+=EsterelStatement
		public Assignment getStatementsAssignment_5_0_0() { return cStatementsAssignment_5_0_0; }

		//EsterelStatement
		public RuleCall getStatementsEsterelStatementParserRuleCall_5_0_0_0() { return cStatementsEsterelStatementParserRuleCall_5_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_5_0_1() { return cSemicolonKeyword_5_0_1; }

		//statements+=EsterelStatement?
		public Assignment getStatementsAssignment_5_1() { return cStatementsAssignment_5_1; }

		//EsterelStatement
		public RuleCall getStatementsEsterelStatementParserRuleCall_5_1_0() { return cStatementsEsterelStatementParserRuleCall_5_1_0; }

		//"end"
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }

		//"repeat"?
		public Keyword getRepeatKeyword_7() { return cRepeatKeyword_7; }
	}

	public class AbortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Abort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cWeakAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cWeakWeakKeyword_1_0_0 = (Keyword)cWeakAssignment_1_0.eContents().get(0);
		private final Keyword cAbortKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cGroup_2.eContents().get(0);
		private final Assignment cStatementsAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cStatementsEsterelStatementParserRuleCall_2_0_0_0 = (RuleCall)cStatementsAssignment_2_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_0_1 = (Keyword)cGroup_2_0.eContents().get(1);
		private final Assignment cStatementsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cStatementsEsterelStatementParserRuleCall_2_1_0 = (RuleCall)cStatementsAssignment_2_1.eContents().get(0);
		private final Keyword cWhenKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Assignment cDelayAssignment_4_0_0 = (Assignment)cGroup_4_0.eContents().get(0);
		private final RuleCall cDelayDelayExprParserRuleCall_4_0_0_0 = (RuleCall)cDelayAssignment_4_0_0.eContents().get(0);
		private final Group cGroup_4_0_1 = (Group)cGroup_4_0.eContents().get(1);
		private final Keyword cDoKeyword_4_0_1_0 = (Keyword)cGroup_4_0_1.eContents().get(0);
		private final Group cGroup_4_0_1_1 = (Group)cGroup_4_0_1.eContents().get(1);
		private final Group cGroup_4_0_1_1_0 = (Group)cGroup_4_0_1_1.eContents().get(0);
		private final Assignment cDoStatementsAssignment_4_0_1_1_0_0 = (Assignment)cGroup_4_0_1_1_0.eContents().get(0);
		private final RuleCall cDoStatementsEsterelStatementParserRuleCall_4_0_1_1_0_0_0 = (RuleCall)cDoStatementsAssignment_4_0_1_1_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_0_1_1_0_1 = (Keyword)cGroup_4_0_1_1_0.eContents().get(1);
		private final Assignment cDoStatementsAssignment_4_0_1_1_1 = (Assignment)cGroup_4_0_1_1.eContents().get(1);
		private final RuleCall cDoStatementsEsterelStatementParserRuleCall_4_0_1_1_1_0 = (RuleCall)cDoStatementsAssignment_4_0_1_1_1.eContents().get(0);
		private final Keyword cEndKeyword_4_0_2 = (Keyword)cGroup_4_0.eContents().get(2);
		private final Alternatives cAlternatives_4_0_3 = (Alternatives)cGroup_4_0.eContents().get(3);
		private final Group cGroup_4_0_3_0 = (Group)cAlternatives_4_0_3.eContents().get(0);
		private final Keyword cWeakKeyword_4_0_3_0_0 = (Keyword)cGroup_4_0_3_0.eContents().get(0);
		private final Keyword cAbortKeyword_4_0_3_0_1 = (Keyword)cGroup_4_0_3_0.eContents().get(1);
		private final Keyword cAbortKeyword_4_0_3_1 = (Keyword)cAlternatives_4_0_3.eContents().get(1);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Assignment cDelayAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final RuleCall cDelayDelayExprParserRuleCall_4_1_0_0 = (RuleCall)cDelayAssignment_4_1_0.eContents().get(0);
		private final Alternatives cAlternatives_4_1_1 = (Alternatives)cGroup_4_1.eContents().get(1);
		private final Keyword cEndKeyword_4_1_1_0 = (Keyword)cAlternatives_4_1_1.eContents().get(0);
		private final Group cGroup_4_1_1_1 = (Group)cAlternatives_4_1_1.eContents().get(1);
		private final Keyword cEndKeyword_4_1_1_1_0 = (Keyword)cGroup_4_1_1_1.eContents().get(0);
		private final Keyword cWeakKeyword_4_1_1_1_1 = (Keyword)cGroup_4_1_1_1.eContents().get(1);
		private final Keyword cAbortKeyword_4_1_1_1_2 = (Keyword)cGroup_4_1_1_1.eContents().get(2);
		private final Group cGroup_4_2 = (Group)cAlternatives_4.eContents().get(2);
		private final Assignment cCasesAssignment_4_2_0 = (Assignment)cGroup_4_2.eContents().get(0);
		private final RuleCall cCasesCaseParserRuleCall_4_2_0_0 = (RuleCall)cCasesAssignment_4_2_0.eContents().get(0);
		private final Keyword cEndKeyword_4_2_1 = (Keyword)cGroup_4_2.eContents().get(1);
		private final Alternatives cAlternatives_4_2_2 = (Alternatives)cGroup_4_2.eContents().get(2);
		private final Group cGroup_4_2_2_0 = (Group)cAlternatives_4_2_2.eContents().get(0);
		private final Keyword cWeakKeyword_4_2_2_0_0 = (Keyword)cGroup_4_2_2_0.eContents().get(0);
		private final Keyword cAbortKeyword_4_2_2_0_1 = (Keyword)cGroup_4_2_2_0.eContents().get(1);
		private final Keyword cAbortKeyword_4_2_2_1 = (Keyword)cAlternatives_4_2_2.eContents().get(1);
		
		//// ==> 7.5.7 The abort Statements
		//// -------------------------------------
		//Abort:
		//	annotations+=Annotation* (weak?="weak"? "abort") ((statements+=EsterelStatement ";")* statements+=EsterelStatement?)
		//	"when" (delay=DelayExpr ("do" ((doStatements+=EsterelStatement ";")* doStatements+=EsterelStatement?))?
		//	"end" ("weak" "abort" | "abort")?
		//	| delay=DelayExpr ("end" | "end" "weak"? "abort")?
		//	| cases+=Case+
		//	"end" ("weak" "abort" | "abort")?);
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* (weak?="weak"? "abort") ((statements+=EsterelStatement ";")* statements+=EsterelStatement?)
		//"when" (delay=DelayExpr ("do" ((doStatements+=EsterelStatement ";")* doStatements+=EsterelStatement?))? "end" ("weak"
		//"abort" | "abort")? | delay=DelayExpr ("end" | "end" "weak"? "abort")? | cases+=Case+ "end" ("weak" "abort" |
		//"abort")?)
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//(weak?="weak"? "abort")
		public Group getGroup_1() { return cGroup_1; }

		//weak?="weak"?
		public Assignment getWeakAssignment_1_0() { return cWeakAssignment_1_0; }

		//"weak"
		public Keyword getWeakWeakKeyword_1_0_0() { return cWeakWeakKeyword_1_0_0; }

		//"abort"
		public Keyword getAbortKeyword_1_1() { return cAbortKeyword_1_1; }

		//((statements+=EsterelStatement ";")* statements+=EsterelStatement?)
		public Group getGroup_2() { return cGroup_2; }

		//(statements+=EsterelStatement ";")*
		public Group getGroup_2_0() { return cGroup_2_0; }

		//statements+=EsterelStatement
		public Assignment getStatementsAssignment_2_0_0() { return cStatementsAssignment_2_0_0; }

		//EsterelStatement
		public RuleCall getStatementsEsterelStatementParserRuleCall_2_0_0_0() { return cStatementsEsterelStatementParserRuleCall_2_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_2_0_1() { return cSemicolonKeyword_2_0_1; }

		//statements+=EsterelStatement?
		public Assignment getStatementsAssignment_2_1() { return cStatementsAssignment_2_1; }

		//EsterelStatement
		public RuleCall getStatementsEsterelStatementParserRuleCall_2_1_0() { return cStatementsEsterelStatementParserRuleCall_2_1_0; }

		//"when"
		public Keyword getWhenKeyword_3() { return cWhenKeyword_3; }

		//(delay=DelayExpr ("do" ((doStatements+=EsterelStatement ";")* doStatements+=EsterelStatement?))? "end" ("weak" "abort" |
		//"abort")? | delay=DelayExpr ("end" | "end" "weak"? "abort")? | cases+=Case+ "end" ("weak" "abort" | "abort")?)
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//delay=DelayExpr ("do" ((doStatements+=EsterelStatement ";")* doStatements+=EsterelStatement?))? "end" ("weak" "abort" |
		//"abort")?
		public Group getGroup_4_0() { return cGroup_4_0; }

		//delay=DelayExpr
		public Assignment getDelayAssignment_4_0_0() { return cDelayAssignment_4_0_0; }

		//DelayExpr
		public RuleCall getDelayDelayExprParserRuleCall_4_0_0_0() { return cDelayDelayExprParserRuleCall_4_0_0_0; }

		//("do" ((doStatements+=EsterelStatement ";")* doStatements+=EsterelStatement?))?
		public Group getGroup_4_0_1() { return cGroup_4_0_1; }

		//"do"
		public Keyword getDoKeyword_4_0_1_0() { return cDoKeyword_4_0_1_0; }

		//((doStatements+=EsterelStatement ";")* doStatements+=EsterelStatement?)
		public Group getGroup_4_0_1_1() { return cGroup_4_0_1_1; }

		//(doStatements+=EsterelStatement ";")*
		public Group getGroup_4_0_1_1_0() { return cGroup_4_0_1_1_0; }

		//doStatements+=EsterelStatement
		public Assignment getDoStatementsAssignment_4_0_1_1_0_0() { return cDoStatementsAssignment_4_0_1_1_0_0; }

		//EsterelStatement
		public RuleCall getDoStatementsEsterelStatementParserRuleCall_4_0_1_1_0_0_0() { return cDoStatementsEsterelStatementParserRuleCall_4_0_1_1_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_4_0_1_1_0_1() { return cSemicolonKeyword_4_0_1_1_0_1; }

		//doStatements+=EsterelStatement?
		public Assignment getDoStatementsAssignment_4_0_1_1_1() { return cDoStatementsAssignment_4_0_1_1_1; }

		//EsterelStatement
		public RuleCall getDoStatementsEsterelStatementParserRuleCall_4_0_1_1_1_0() { return cDoStatementsEsterelStatementParserRuleCall_4_0_1_1_1_0; }

		//"end"
		public Keyword getEndKeyword_4_0_2() { return cEndKeyword_4_0_2; }

		//("weak" "abort" | "abort")?
		public Alternatives getAlternatives_4_0_3() { return cAlternatives_4_0_3; }

		//"weak" "abort"
		public Group getGroup_4_0_3_0() { return cGroup_4_0_3_0; }

		//"weak"
		public Keyword getWeakKeyword_4_0_3_0_0() { return cWeakKeyword_4_0_3_0_0; }

		//"abort"
		public Keyword getAbortKeyword_4_0_3_0_1() { return cAbortKeyword_4_0_3_0_1; }

		//"abort"
		public Keyword getAbortKeyword_4_0_3_1() { return cAbortKeyword_4_0_3_1; }

		//delay=DelayExpr ("end" | "end" "weak"? "abort")?
		public Group getGroup_4_1() { return cGroup_4_1; }

		//delay=DelayExpr
		public Assignment getDelayAssignment_4_1_0() { return cDelayAssignment_4_1_0; }

		//DelayExpr
		public RuleCall getDelayDelayExprParserRuleCall_4_1_0_0() { return cDelayDelayExprParserRuleCall_4_1_0_0; }

		//("end" | "end" "weak"? "abort")?
		public Alternatives getAlternatives_4_1_1() { return cAlternatives_4_1_1; }

		//"end"
		public Keyword getEndKeyword_4_1_1_0() { return cEndKeyword_4_1_1_0; }

		//"end" "weak"? "abort"
		public Group getGroup_4_1_1_1() { return cGroup_4_1_1_1; }

		//"end"
		public Keyword getEndKeyword_4_1_1_1_0() { return cEndKeyword_4_1_1_1_0; }

		//"weak"?
		public Keyword getWeakKeyword_4_1_1_1_1() { return cWeakKeyword_4_1_1_1_1; }

		//"abort"
		public Keyword getAbortKeyword_4_1_1_1_2() { return cAbortKeyword_4_1_1_1_2; }

		//cases+=Case+ "end" ("weak" "abort" | "abort")?
		public Group getGroup_4_2() { return cGroup_4_2; }

		//cases+=Case+
		public Assignment getCasesAssignment_4_2_0() { return cCasesAssignment_4_2_0; }

		//Case
		public RuleCall getCasesCaseParserRuleCall_4_2_0_0() { return cCasesCaseParserRuleCall_4_2_0_0; }

		//"end"
		public Keyword getEndKeyword_4_2_1() { return cEndKeyword_4_2_1; }

		//("weak" "abort" | "abort")?
		public Alternatives getAlternatives_4_2_2() { return cAlternatives_4_2_2; }

		//"weak" "abort"
		public Group getGroup_4_2_2_0() { return cGroup_4_2_2_0; }

		//"weak"
		public Keyword getWeakKeyword_4_2_2_0_0() { return cWeakKeyword_4_2_2_0_0; }

		//"abort"
		public Keyword getAbortKeyword_4_2_2_0_1() { return cAbortKeyword_4_2_2_0_1; }

		//"abort"
		public Keyword getAbortKeyword_4_2_2_1() { return cAbortKeyword_4_2_2_1; }
	}

	public class CaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Case");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cCaseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDelayAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDelayDelayExprParserRuleCall_2_0 = (RuleCall)cDelayAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cDoKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Group cGroup_3_1_0 = (Group)cGroup_3_1.eContents().get(0);
		private final Assignment cStatementsAssignment_3_1_0_0 = (Assignment)cGroup_3_1_0.eContents().get(0);
		private final RuleCall cStatementsEsterelStatementParserRuleCall_3_1_0_0_0 = (RuleCall)cStatementsAssignment_3_1_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1_0_1 = (Keyword)cGroup_3_1_0.eContents().get(1);
		private final Assignment cStatementsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cStatementsEsterelStatementParserRuleCall_3_1_1_0 = (RuleCall)cStatementsAssignment_3_1_1.eContents().get(0);
		
		//Case:
		//	annotations+=Annotation*
		//	"case"
		//	delay=DelayExpr ("do" ((statements+=EsterelStatement ";")* statements+=EsterelStatement?))?;
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* "case" delay=DelayExpr ("do" ((statements+=EsterelStatement ";")*
		//statements+=EsterelStatement?))?
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//"case"
		public Keyword getCaseKeyword_1() { return cCaseKeyword_1; }

		//delay=DelayExpr
		public Assignment getDelayAssignment_2() { return cDelayAssignment_2; }

		//DelayExpr
		public RuleCall getDelayDelayExprParserRuleCall_2_0() { return cDelayDelayExprParserRuleCall_2_0; }

		//("do" ((statements+=EsterelStatement ";")* statements+=EsterelStatement?))?
		public Group getGroup_3() { return cGroup_3; }

		//"do"
		public Keyword getDoKeyword_3_0() { return cDoKeyword_3_0; }

		//((statements+=EsterelStatement ";")* statements+=EsterelStatement?)
		public Group getGroup_3_1() { return cGroup_3_1; }

		//(statements+=EsterelStatement ";")*
		public Group getGroup_3_1_0() { return cGroup_3_1_0; }

		//statements+=EsterelStatement
		public Assignment getStatementsAssignment_3_1_0_0() { return cStatementsAssignment_3_1_0_0; }

		//EsterelStatement
		public RuleCall getStatementsEsterelStatementParserRuleCall_3_1_0_0_0() { return cStatementsEsterelStatementParserRuleCall_3_1_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_3_1_0_1() { return cSemicolonKeyword_3_1_0_1; }

		//statements+=EsterelStatement?
		public Assignment getStatementsAssignment_3_1_1() { return cStatementsAssignment_3_1_1; }

		//EsterelStatement
		public RuleCall getStatementsEsterelStatementParserRuleCall_3_1_1_0() { return cStatementsEsterelStatementParserRuleCall_3_1_1_0; }
	}

	public class AwaitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Await");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cAwaitKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cDelayAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cDelayDelayExprParserRuleCall_2_0_0_0 = (RuleCall)cDelayAssignment_2_0_0.eContents().get(0);
		private final Group cGroup_2_0_1 = (Group)cGroup_2_0.eContents().get(1);
		private final Keyword cDoKeyword_2_0_1_0 = (Keyword)cGroup_2_0_1.eContents().get(0);
		private final Group cGroup_2_0_1_1 = (Group)cGroup_2_0_1.eContents().get(1);
		private final Group cGroup_2_0_1_1_0 = (Group)cGroup_2_0_1_1.eContents().get(0);
		private final Assignment cStatementsAssignment_2_0_1_1_0_0 = (Assignment)cGroup_2_0_1_1_0.eContents().get(0);
		private final RuleCall cStatementsEsterelStatementParserRuleCall_2_0_1_1_0_0_0 = (RuleCall)cStatementsAssignment_2_0_1_1_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_0_1_1_0_1 = (Keyword)cGroup_2_0_1_1_0.eContents().get(1);
		private final Assignment cStatementsAssignment_2_0_1_1_1 = (Assignment)cGroup_2_0_1_1.eContents().get(1);
		private final RuleCall cStatementsEsterelStatementParserRuleCall_2_0_1_1_1_0 = (RuleCall)cStatementsAssignment_2_0_1_1_1.eContents().get(0);
		private final Keyword cEndKeyword_2_0_1_2 = (Keyword)cGroup_2_0_1.eContents().get(2);
		private final Keyword cAwaitKeyword_2_0_1_3 = (Keyword)cGroup_2_0_1.eContents().get(3);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cCasesAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cCasesCaseParserRuleCall_2_1_0_0 = (RuleCall)cCasesAssignment_2_1_0.eContents().get(0);
		private final Keyword cEndKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Keyword cAwaitKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//// ==> 7.5.8 The await Statement
		//// -------------------------------------
		//Await:
		//	annotations+=Annotation*
		//	"await" (delay=DelayExpr ("do" ((statements+=EsterelStatement ";")* statements+=EsterelStatement?)
		//	"end" "await"?)?
		//	| cases+=Case+
		//	"end" "await"?);
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* "await" (delay=DelayExpr ("do" ((statements+=EsterelStatement ";")*
		//statements+=EsterelStatement?) "end" "await"?)? | cases+=Case+ "end" "await"?)
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//"await"
		public Keyword getAwaitKeyword_1() { return cAwaitKeyword_1; }

		//(delay=DelayExpr ("do" ((statements+=EsterelStatement ";")* statements+=EsterelStatement?) "end" "await"?)? |
		//cases+=Case+ "end" "await"?)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//delay=DelayExpr ("do" ((statements+=EsterelStatement ";")* statements+=EsterelStatement?) "end" "await"?)?
		public Group getGroup_2_0() { return cGroup_2_0; }

		//delay=DelayExpr
		public Assignment getDelayAssignment_2_0_0() { return cDelayAssignment_2_0_0; }

		//DelayExpr
		public RuleCall getDelayDelayExprParserRuleCall_2_0_0_0() { return cDelayDelayExprParserRuleCall_2_0_0_0; }

		//("do" ((statements+=EsterelStatement ";")* statements+=EsterelStatement?) "end" "await"?)?
		public Group getGroup_2_0_1() { return cGroup_2_0_1; }

		//"do"
		public Keyword getDoKeyword_2_0_1_0() { return cDoKeyword_2_0_1_0; }

		//((statements+=EsterelStatement ";")* statements+=EsterelStatement?)
		public Group getGroup_2_0_1_1() { return cGroup_2_0_1_1; }

		//(statements+=EsterelStatement ";")*
		public Group getGroup_2_0_1_1_0() { return cGroup_2_0_1_1_0; }

		//statements+=EsterelStatement
		public Assignment getStatementsAssignment_2_0_1_1_0_0() { return cStatementsAssignment_2_0_1_1_0_0; }

		//EsterelStatement
		public RuleCall getStatementsEsterelStatementParserRuleCall_2_0_1_1_0_0_0() { return cStatementsEsterelStatementParserRuleCall_2_0_1_1_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_2_0_1_1_0_1() { return cSemicolonKeyword_2_0_1_1_0_1; }

		//statements+=EsterelStatement?
		public Assignment getStatementsAssignment_2_0_1_1_1() { return cStatementsAssignment_2_0_1_1_1; }

		//EsterelStatement
		public RuleCall getStatementsEsterelStatementParserRuleCall_2_0_1_1_1_0() { return cStatementsEsterelStatementParserRuleCall_2_0_1_1_1_0; }

		//"end"
		public Keyword getEndKeyword_2_0_1_2() { return cEndKeyword_2_0_1_2; }

		//"await"?
		public Keyword getAwaitKeyword_2_0_1_3() { return cAwaitKeyword_2_0_1_3; }

		//cases+=Case+ "end" "await"?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//cases+=Case+
		public Assignment getCasesAssignment_2_1_0() { return cCasesAssignment_2_1_0; }

		//Case
		public RuleCall getCasesCaseParserRuleCall_2_1_0_0() { return cCasesCaseParserRuleCall_2_1_0_0; }

		//"end"
		public Keyword getEndKeyword_2_1_1() { return cEndKeyword_2_1_1; }

		//"await"?
		public Keyword getAwaitKeyword_2_1_2() { return cAwaitKeyword_2_1_2; }
	}

	public class EveryDoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.EveryDo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cEveryKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDelayAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDelayDelayExprParserRuleCall_2_0 = (RuleCall)cDelayAssignment_2.eContents().get(0);
		private final Keyword cDoKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cGroup_4.eContents().get(0);
		private final Assignment cStatementsAssignment_4_0_0 = (Assignment)cGroup_4_0.eContents().get(0);
		private final RuleCall cStatementsEsterelStatementParserRuleCall_4_0_0_0 = (RuleCall)cStatementsAssignment_4_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_0_1 = (Keyword)cGroup_4_0.eContents().get(1);
		private final Assignment cStatementsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cStatementsEsterelStatementParserRuleCall_4_1_0 = (RuleCall)cStatementsAssignment_4_1.eContents().get(0);
		private final Keyword cEndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEveryKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//// ==> 7.5.9 Temporal Loops
		//// -------------------------------------
		//// for 'LoopEach' look at 7.5.5
		//EveryDo:
		//	annotations+=Annotation*
		//	"every"
		//	delay=DelayExpr
		//	"do" ((statements+=EsterelStatement ";")* statements+=EsterelStatement?)
		//	"end" "every"?;
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* "every" delay=DelayExpr "do" ((statements+=EsterelStatement ";")*
		//statements+=EsterelStatement?) "end" "every"?
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//"every"
		public Keyword getEveryKeyword_1() { return cEveryKeyword_1; }

		//delay=DelayExpr
		public Assignment getDelayAssignment_2() { return cDelayAssignment_2; }

		//DelayExpr
		public RuleCall getDelayDelayExprParserRuleCall_2_0() { return cDelayDelayExprParserRuleCall_2_0; }

		//"do"
		public Keyword getDoKeyword_3() { return cDoKeyword_3; }

		//((statements+=EsterelStatement ";")* statements+=EsterelStatement?)
		public Group getGroup_4() { return cGroup_4; }

		//(statements+=EsterelStatement ";")*
		public Group getGroup_4_0() { return cGroup_4_0; }

		//statements+=EsterelStatement
		public Assignment getStatementsAssignment_4_0_0() { return cStatementsAssignment_4_0_0; }

		//EsterelStatement
		public RuleCall getStatementsEsterelStatementParserRuleCall_4_0_0_0() { return cStatementsEsterelStatementParserRuleCall_4_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_4_0_1() { return cSemicolonKeyword_4_0_1; }

		//statements+=EsterelStatement?
		public Assignment getStatementsAssignment_4_1() { return cStatementsAssignment_4_1; }

		//EsterelStatement
		public RuleCall getStatementsEsterelStatementParserRuleCall_4_1_0() { return cStatementsEsterelStatementParserRuleCall_4_1_0; }

		//"end"
		public Keyword getEndKeyword_5() { return cEndKeyword_5; }

		//"every"?
		public Keyword getEveryKeyword_6() { return cEveryKeyword_6; }
	}

	public class SuspendElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Suspend");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cWeakAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cWeakWeakKeyword_1_0_0 = (Keyword)cWeakAssignment_1_0.eContents().get(0);
		private final Keyword cSuspendKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cGroup_2.eContents().get(0);
		private final Assignment cStatementsAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cStatementsEsterelStatementParserRuleCall_2_0_0_0 = (RuleCall)cStatementsAssignment_2_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_0_1 = (Keyword)cGroup_2_0.eContents().get(1);
		private final Assignment cStatementsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cStatementsEsterelStatementParserRuleCall_2_1_0 = (RuleCall)cStatementsAssignment_2_1.eContents().get(0);
		private final Keyword cWhenKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDelayAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDelayDelayExprParserRuleCall_4_0 = (RuleCall)cDelayAssignment_4.eContents().get(0);
		
		//// ==> 7.5.10 The suspend Statement
		//// -------------------------------------
		//Suspend:
		//	annotations+=Annotation* (weak?="weak"? "suspend") ((statements+=EsterelStatement ";")* statements+=EsterelStatement?)
		//	"when"
		//	delay=DelayExpr;
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* (weak?="weak"? "suspend") ((statements+=EsterelStatement ";")* statements+=EsterelStatement?)
		//"when" delay=DelayExpr
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//(weak?="weak"? "suspend")
		public Group getGroup_1() { return cGroup_1; }

		//weak?="weak"?
		public Assignment getWeakAssignment_1_0() { return cWeakAssignment_1_0; }

		//"weak"
		public Keyword getWeakWeakKeyword_1_0_0() { return cWeakWeakKeyword_1_0_0; }

		//"suspend"
		public Keyword getSuspendKeyword_1_1() { return cSuspendKeyword_1_1; }

		//((statements+=EsterelStatement ";")* statements+=EsterelStatement?)
		public Group getGroup_2() { return cGroup_2; }

		//(statements+=EsterelStatement ";")*
		public Group getGroup_2_0() { return cGroup_2_0; }

		//statements+=EsterelStatement
		public Assignment getStatementsAssignment_2_0_0() { return cStatementsAssignment_2_0_0; }

		//EsterelStatement
		public RuleCall getStatementsEsterelStatementParserRuleCall_2_0_0_0() { return cStatementsEsterelStatementParserRuleCall_2_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_2_0_1() { return cSemicolonKeyword_2_0_1; }

		//statements+=EsterelStatement?
		public Assignment getStatementsAssignment_2_1() { return cStatementsAssignment_2_1; }

		//EsterelStatement
		public RuleCall getStatementsEsterelStatementParserRuleCall_2_1_0() { return cStatementsEsterelStatementParserRuleCall_2_1_0; }

		//"when"
		public Keyword getWhenKeyword_3() { return cWhenKeyword_3; }

		//delay=DelayExpr
		public Assignment getDelayAssignment_4() { return cDelayAssignment_4; }

		//DelayExpr
		public RuleCall getDelayDelayExprParserRuleCall_4_0() { return cDelayDelayExprParserRuleCall_4_0; }
	}

	public class TrapElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Trap");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cTrapKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTrapSignalsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTrapSignalsTrapSignalParserRuleCall_2_0 = (RuleCall)cTrapSignalsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTrapSignalsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTrapSignalsTrapSignalParserRuleCall_3_1_0 = (RuleCall)cTrapSignalsAssignment_3_1.eContents().get(0);
		private final Keyword cInKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cGroup_5.eContents().get(0);
		private final Assignment cStatementsAssignment_5_0_0 = (Assignment)cGroup_5_0.eContents().get(0);
		private final RuleCall cStatementsEsterelStatementParserRuleCall_5_0_0_0 = (RuleCall)cStatementsAssignment_5_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_0_1 = (Keyword)cGroup_5_0.eContents().get(1);
		private final Assignment cStatementsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cStatementsEsterelStatementParserRuleCall_5_1_0 = (RuleCall)cStatementsAssignment_5_1.eContents().get(0);
		private final Assignment cTrapHandlerAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTrapHandlerTrapHandlerParserRuleCall_6_0 = (RuleCall)cTrapHandlerAssignment_6.eContents().get(0);
		private final Keyword cEndKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cTrapKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//// ==> 7.5.11 Traps
		//// -------------------------------------
		//Trap:
		//	annotations+=Annotation*
		//	"trap"
		//	trapSignals+=TrapSignal ("," trapSignals+=TrapSignal)*
		//	"in" ((statements+=EsterelStatement ";")* statements+=EsterelStatement?) trapHandler+=TrapHandler*
		//	"end" "trap"?;
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* "trap" trapSignals+=TrapSignal ("," trapSignals+=TrapSignal)* "in"
		//((statements+=EsterelStatement ";")* statements+=EsterelStatement?) trapHandler+=TrapHandler* "end" "trap"?
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//"trap"
		public Keyword getTrapKeyword_1() { return cTrapKeyword_1; }

		//trapSignals+=TrapSignal
		public Assignment getTrapSignalsAssignment_2() { return cTrapSignalsAssignment_2; }

		//TrapSignal
		public RuleCall getTrapSignalsTrapSignalParserRuleCall_2_0() { return cTrapSignalsTrapSignalParserRuleCall_2_0; }

		//("," trapSignals+=TrapSignal)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//trapSignals+=TrapSignal
		public Assignment getTrapSignalsAssignment_3_1() { return cTrapSignalsAssignment_3_1; }

		//TrapSignal
		public RuleCall getTrapSignalsTrapSignalParserRuleCall_3_1_0() { return cTrapSignalsTrapSignalParserRuleCall_3_1_0; }

		//"in"
		public Keyword getInKeyword_4() { return cInKeyword_4; }

		//((statements+=EsterelStatement ";")* statements+=EsterelStatement?)
		public Group getGroup_5() { return cGroup_5; }

		//(statements+=EsterelStatement ";")*
		public Group getGroup_5_0() { return cGroup_5_0; }

		//statements+=EsterelStatement
		public Assignment getStatementsAssignment_5_0_0() { return cStatementsAssignment_5_0_0; }

		//EsterelStatement
		public RuleCall getStatementsEsterelStatementParserRuleCall_5_0_0_0() { return cStatementsEsterelStatementParserRuleCall_5_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_5_0_1() { return cSemicolonKeyword_5_0_1; }

		//statements+=EsterelStatement?
		public Assignment getStatementsAssignment_5_1() { return cStatementsAssignment_5_1; }

		//EsterelStatement
		public RuleCall getStatementsEsterelStatementParserRuleCall_5_1_0() { return cStatementsEsterelStatementParserRuleCall_5_1_0; }

		//trapHandler+=TrapHandler*
		public Assignment getTrapHandlerAssignment_6() { return cTrapHandlerAssignment_6; }

		//TrapHandler
		public RuleCall getTrapHandlerTrapHandlerParserRuleCall_6_0() { return cTrapHandlerTrapHandlerParserRuleCall_6_0; }

		//"end"
		public Keyword getEndKeyword_7() { return cEndKeyword_7; }

		//"trap"?
		public Keyword getTrapKeyword_8() { return cTrapKeyword_8; }
	}

	public class TrapSignalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.TrapSignal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTrapSignalAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_0_0 = (Group)cAlternatives_2_0.eContents().get(0);
		private final Keyword cColonKeyword_2_0_0_0 = (Keyword)cGroup_2_0_0.eContents().get(0);
		private final Assignment cTypeAssignment_2_0_0_1 = (Assignment)cGroup_2_0_0.eContents().get(1);
		private final RuleCall cTypeEsterel_ValueTypeEnumRuleCall_2_0_0_1_0 = (RuleCall)cTypeAssignment_2_0_0_1.eContents().get(0);
		private final Assignment cTypeIDAssignment_2_0_1 = (Assignment)cAlternatives_2_0.eContents().get(1);
		private final RuleCall cTypeIDIDTerminalRuleCall_2_0_1_0 = (RuleCall)cTypeIDAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_0_2 = (Group)cAlternatives_2_0.eContents().get(2);
		private final Keyword cCombineKeyword_2_0_2_0 = (Keyword)cGroup_2_0_2.eContents().get(0);
		private final Alternatives cAlternatives_2_0_2_1 = (Alternatives)cGroup_2_0_2.eContents().get(1);
		private final Assignment cTypeAssignment_2_0_2_1_0 = (Assignment)cAlternatives_2_0_2_1.eContents().get(0);
		private final RuleCall cTypeEsterel_ValueTypeEnumRuleCall_2_0_2_1_0_0 = (RuleCall)cTypeAssignment_2_0_2_1_0.eContents().get(0);
		private final Assignment cTypeIDAssignment_2_0_2_1_1 = (Assignment)cAlternatives_2_0_2_1.eContents().get(1);
		private final RuleCall cTypeIDIDTerminalRuleCall_2_0_2_1_1_0 = (RuleCall)cTypeIDAssignment_2_0_2_1_1.eContents().get(0);
		private final Keyword cWithKeyword_2_0_2_2 = (Keyword)cGroup_2_0_2.eContents().get(2);
		private final Alternatives cAlternatives_2_0_2_3 = (Alternatives)cGroup_2_0_2.eContents().get(3);
		private final Assignment cFuncAssignment_2_0_2_3_0 = (Assignment)cAlternatives_2_0_2_3.eContents().get(0);
		private final CrossReference cFuncFunctionCrossReference_2_0_2_3_0_0 = (CrossReference)cFuncAssignment_2_0_2_3_0.eContents().get(0);
		private final RuleCall cFuncFunctionIDTerminalRuleCall_2_0_2_3_0_0_1 = (RuleCall)cFuncFunctionCrossReference_2_0_2_3_0_0.eContents().get(1);
		private final Assignment cOperatorAssignment_2_0_2_3_1 = (Assignment)cAlternatives_2_0_2_3.eContents().get(1);
		private final RuleCall cOperatorEsterel_CombineOperatorEnumRuleCall_2_0_2_3_1_0 = (RuleCall)cOperatorAssignment_2_0_2_3_1.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cAlternatives_2.eContents().get(1);
		private final Group cGroup_2_1_0 = (Group)cAlternatives_2_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1_0_0 = (Keyword)cGroup_2_1_0.eContents().get(0);
		private final Assignment cTypeAssignment_2_1_0_1 = (Assignment)cGroup_2_1_0.eContents().get(1);
		private final RuleCall cTypeEsterel_ValueTypeEnumRuleCall_2_1_0_1_0 = (RuleCall)cTypeAssignment_2_1_0_1.eContents().get(0);
		private final Assignment cTypeIDAssignment_2_1_1 = (Assignment)cAlternatives_2_1.eContents().get(1);
		private final RuleCall cTypeIDIDTerminalRuleCall_2_1_1_0 = (RuleCall)cTypeIDAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_1_2 = (Group)cAlternatives_2_1.eContents().get(2);
		private final Group cGroup_2_1_2_0 = (Group)cGroup_2_1_2.eContents().get(0);
		private final Keyword cCombineKeyword_2_1_2_0_0 = (Keyword)cGroup_2_1_2_0.eContents().get(0);
		private final Alternatives cAlternatives_2_1_2_0_1 = (Alternatives)cGroup_2_1_2_0.eContents().get(1);
		private final Assignment cTypeAssignment_2_1_2_0_1_0 = (Assignment)cAlternatives_2_1_2_0_1.eContents().get(0);
		private final RuleCall cTypeEsterel_ValueTypeEnumRuleCall_2_1_2_0_1_0_0 = (RuleCall)cTypeAssignment_2_1_2_0_1_0.eContents().get(0);
		private final Assignment cTypeIDAssignment_2_1_2_0_1_1 = (Assignment)cAlternatives_2_1_2_0_1.eContents().get(1);
		private final RuleCall cTypeIDIDTerminalRuleCall_2_1_2_0_1_1_0 = (RuleCall)cTypeIDAssignment_2_1_2_0_1_1.eContents().get(0);
		private final Keyword cWithKeyword_2_1_2_0_2 = (Keyword)cGroup_2_1_2_0.eContents().get(2);
		private final Alternatives cAlternatives_2_1_2_0_3 = (Alternatives)cGroup_2_1_2_0.eContents().get(3);
		private final Assignment cFuncAssignment_2_1_2_0_3_0 = (Assignment)cAlternatives_2_1_2_0_3.eContents().get(0);
		private final CrossReference cFuncFunctionCrossReference_2_1_2_0_3_0_0 = (CrossReference)cFuncAssignment_2_1_2_0_3_0.eContents().get(0);
		private final RuleCall cFuncFunctionIDTerminalRuleCall_2_1_2_0_3_0_0_1 = (RuleCall)cFuncFunctionCrossReference_2_1_2_0_3_0_0.eContents().get(1);
		private final Assignment cOperatorAssignment_2_1_2_0_3_1 = (Assignment)cAlternatives_2_1_2_0_3.eContents().get(1);
		private final RuleCall cOperatorEsterel_CombineOperatorEnumRuleCall_2_1_2_0_3_1_0 = (RuleCall)cOperatorAssignment_2_1_2_0_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_1_2_1 = (Keyword)cGroup_2_1_2.eContents().get(1);
		private final Alternatives cAlternatives_2_2 = (Alternatives)cAlternatives_2.eContents().get(2);
		private final Group cGroup_2_2_0 = (Group)cAlternatives_2_2.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_2_2_0_0 = (Keyword)cGroup_2_2_0.eContents().get(0);
		private final Assignment cExpressionAssignment_2_2_0_1 = (Assignment)cGroup_2_2_0.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_2_2_0_1_0 = (RuleCall)cExpressionAssignment_2_2_0_1.eContents().get(0);
		private final Keyword cColonKeyword_2_2_0_2 = (Keyword)cGroup_2_2_0.eContents().get(2);
		private final Assignment cTypeAssignment_2_2_0_3 = (Assignment)cGroup_2_2_0.eContents().get(3);
		private final RuleCall cTypeEsterel_ValueTypeEnumRuleCall_2_2_0_3_0 = (RuleCall)cTypeAssignment_2_2_0_3.eContents().get(0);
		private final Assignment cTypeIDAssignment_2_2_1 = (Assignment)cAlternatives_2_2.eContents().get(1);
		private final RuleCall cTypeIDIDTerminalRuleCall_2_2_1_0 = (RuleCall)cTypeIDAssignment_2_2_1.eContents().get(0);
		private final Group cGroup_2_2_2 = (Group)cAlternatives_2_2.eContents().get(2);
		private final Keyword cCombineKeyword_2_2_2_0 = (Keyword)cGroup_2_2_2.eContents().get(0);
		private final Alternatives cAlternatives_2_2_2_1 = (Alternatives)cGroup_2_2_2.eContents().get(1);
		private final Assignment cTypeAssignment_2_2_2_1_0 = (Assignment)cAlternatives_2_2_2_1.eContents().get(0);
		private final RuleCall cTypeEsterel_ValueTypeEnumRuleCall_2_2_2_1_0_0 = (RuleCall)cTypeAssignment_2_2_2_1_0.eContents().get(0);
		private final Assignment cTypeIDAssignment_2_2_2_1_1 = (Assignment)cAlternatives_2_2_2_1.eContents().get(1);
		private final RuleCall cTypeIDIDTerminalRuleCall_2_2_2_1_1_0 = (RuleCall)cTypeIDAssignment_2_2_2_1_1.eContents().get(0);
		private final Keyword cWithKeyword_2_2_2_2 = (Keyword)cGroup_2_2_2.eContents().get(2);
		private final Alternatives cAlternatives_2_2_2_3 = (Alternatives)cGroup_2_2_2.eContents().get(3);
		private final Assignment cFuncAssignment_2_2_2_3_0 = (Assignment)cAlternatives_2_2_2_3.eContents().get(0);
		private final CrossReference cFuncFunctionCrossReference_2_2_2_3_0_0 = (CrossReference)cFuncAssignment_2_2_2_3_0.eContents().get(0);
		private final RuleCall cFuncFunctionIDTerminalRuleCall_2_2_2_3_0_0_1 = (RuleCall)cFuncFunctionCrossReference_2_2_2_3_0_0.eContents().get(1);
		private final Assignment cOperatorAssignment_2_2_2_3_1 = (Assignment)cAlternatives_2_2_2_3.eContents().get(1);
		private final RuleCall cOperatorEsterel_CombineOperatorEnumRuleCall_2_2_2_3_1_0 = (RuleCall)cOperatorAssignment_2_2_2_3_1.eContents().get(0);
		
		//TrapSignal ISignal:
		//	{TrapSignal} name=ID ((":" type=Esterel_ValueType
		//	| typeID=ID
		//	| "combine" (type=Esterel_ValueType | typeID=ID) "with" (func=[Function] | operator=Esterel_CombineOperator)) | ("("
		//	type=Esterel_ValueType
		//	| typeID=ID
		//	| ("combine" (type=Esterel_ValueType | typeID=ID) "with" (func=[Function] | operator=Esterel_CombineOperator))
		//	")") | (":=" expression=Expression ":"
		//	type=Esterel_ValueType
		//	| typeID=ID
		//	| "combine" (type=Esterel_ValueType | typeID=ID) "with" (func=[Function] | operator=Esterel_CombineOperator)))?
		@Override public ParserRule getRule() { return rule; }

		//{TrapSignal} name=ID ((":" type=Esterel_ValueType | typeID=ID | "combine" (type=Esterel_ValueType | typeID=ID) "with"
		//(func=[Function] | operator=Esterel_CombineOperator)) | ("(" type=Esterel_ValueType | typeID=ID | ("combine"
		//(type=Esterel_ValueType | typeID=ID) "with" (func=[Function] | operator=Esterel_CombineOperator)) ")") | (":="
		//expression=Expression ":" type=Esterel_ValueType | typeID=ID | "combine" (type=Esterel_ValueType | typeID=ID) "with"
		//(func=[Function] | operator=Esterel_CombineOperator)))?
		public Group getGroup() { return cGroup; }

		//{TrapSignal}
		public Action getTrapSignalAction_0() { return cTrapSignalAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//((":" type=Esterel_ValueType | typeID=ID | "combine" (type=Esterel_ValueType | typeID=ID) "with" (func=[Function] |
		//operator=Esterel_CombineOperator)) | ("(" type=Esterel_ValueType | typeID=ID | ("combine" (type=Esterel_ValueType |
		//typeID=ID) "with" (func=[Function] | operator=Esterel_CombineOperator)) ")") | (":=" expression=Expression ":"
		//type=Esterel_ValueType | typeID=ID | "combine" (type=Esterel_ValueType | typeID=ID) "with" (func=[Function] |
		//operator=Esterel_CombineOperator)))?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//(":" type=Esterel_ValueType | typeID=ID | "combine" (type=Esterel_ValueType | typeID=ID) "with" (func=[Function] |
		//operator=Esterel_CombineOperator))
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }

		//":" type=Esterel_ValueType
		public Group getGroup_2_0_0() { return cGroup_2_0_0; }

		//":"
		public Keyword getColonKeyword_2_0_0_0() { return cColonKeyword_2_0_0_0; }

		//type=Esterel_ValueType
		public Assignment getTypeAssignment_2_0_0_1() { return cTypeAssignment_2_0_0_1; }

		//Esterel_ValueType
		public RuleCall getTypeEsterel_ValueTypeEnumRuleCall_2_0_0_1_0() { return cTypeEsterel_ValueTypeEnumRuleCall_2_0_0_1_0; }

		//typeID=ID
		public Assignment getTypeIDAssignment_2_0_1() { return cTypeIDAssignment_2_0_1; }

		//ID
		public RuleCall getTypeIDIDTerminalRuleCall_2_0_1_0() { return cTypeIDIDTerminalRuleCall_2_0_1_0; }

		//"combine" (type=Esterel_ValueType | typeID=ID) "with" (func=[Function] | operator=Esterel_CombineOperator)
		public Group getGroup_2_0_2() { return cGroup_2_0_2; }

		//"combine"
		public Keyword getCombineKeyword_2_0_2_0() { return cCombineKeyword_2_0_2_0; }

		//(type=Esterel_ValueType | typeID=ID)
		public Alternatives getAlternatives_2_0_2_1() { return cAlternatives_2_0_2_1; }

		//type=Esterel_ValueType
		public Assignment getTypeAssignment_2_0_2_1_0() { return cTypeAssignment_2_0_2_1_0; }

		//Esterel_ValueType
		public RuleCall getTypeEsterel_ValueTypeEnumRuleCall_2_0_2_1_0_0() { return cTypeEsterel_ValueTypeEnumRuleCall_2_0_2_1_0_0; }

		//typeID=ID
		public Assignment getTypeIDAssignment_2_0_2_1_1() { return cTypeIDAssignment_2_0_2_1_1; }

		//ID
		public RuleCall getTypeIDIDTerminalRuleCall_2_0_2_1_1_0() { return cTypeIDIDTerminalRuleCall_2_0_2_1_1_0; }

		//"with"
		public Keyword getWithKeyword_2_0_2_2() { return cWithKeyword_2_0_2_2; }

		//(func=[Function] | operator=Esterel_CombineOperator)
		public Alternatives getAlternatives_2_0_2_3() { return cAlternatives_2_0_2_3; }

		//func=[Function]
		public Assignment getFuncAssignment_2_0_2_3_0() { return cFuncAssignment_2_0_2_3_0; }

		//[Function]
		public CrossReference getFuncFunctionCrossReference_2_0_2_3_0_0() { return cFuncFunctionCrossReference_2_0_2_3_0_0; }

		//ID
		public RuleCall getFuncFunctionIDTerminalRuleCall_2_0_2_3_0_0_1() { return cFuncFunctionIDTerminalRuleCall_2_0_2_3_0_0_1; }

		//operator=Esterel_CombineOperator
		public Assignment getOperatorAssignment_2_0_2_3_1() { return cOperatorAssignment_2_0_2_3_1; }

		//Esterel_CombineOperator
		public RuleCall getOperatorEsterel_CombineOperatorEnumRuleCall_2_0_2_3_1_0() { return cOperatorEsterel_CombineOperatorEnumRuleCall_2_0_2_3_1_0; }

		//("(" type=Esterel_ValueType | typeID=ID | ("combine" (type=Esterel_ValueType | typeID=ID) "with" (func=[Function] |
		//operator=Esterel_CombineOperator)) ")")
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }

		//"(" type=Esterel_ValueType
		public Group getGroup_2_1_0() { return cGroup_2_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_1_0_0() { return cLeftParenthesisKeyword_2_1_0_0; }

		//type=Esterel_ValueType
		public Assignment getTypeAssignment_2_1_0_1() { return cTypeAssignment_2_1_0_1; }

		//Esterel_ValueType
		public RuleCall getTypeEsterel_ValueTypeEnumRuleCall_2_1_0_1_0() { return cTypeEsterel_ValueTypeEnumRuleCall_2_1_0_1_0; }

		//typeID=ID
		public Assignment getTypeIDAssignment_2_1_1() { return cTypeIDAssignment_2_1_1; }

		//ID
		public RuleCall getTypeIDIDTerminalRuleCall_2_1_1_0() { return cTypeIDIDTerminalRuleCall_2_1_1_0; }

		//("combine" (type=Esterel_ValueType | typeID=ID) "with" (func=[Function] | operator=Esterel_CombineOperator)) ")"
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }

		//("combine" (type=Esterel_ValueType | typeID=ID) "with" (func=[Function] | operator=Esterel_CombineOperator))
		public Group getGroup_2_1_2_0() { return cGroup_2_1_2_0; }

		//"combine"
		public Keyword getCombineKeyword_2_1_2_0_0() { return cCombineKeyword_2_1_2_0_0; }

		//(type=Esterel_ValueType | typeID=ID)
		public Alternatives getAlternatives_2_1_2_0_1() { return cAlternatives_2_1_2_0_1; }

		//type=Esterel_ValueType
		public Assignment getTypeAssignment_2_1_2_0_1_0() { return cTypeAssignment_2_1_2_0_1_0; }

		//Esterel_ValueType
		public RuleCall getTypeEsterel_ValueTypeEnumRuleCall_2_1_2_0_1_0_0() { return cTypeEsterel_ValueTypeEnumRuleCall_2_1_2_0_1_0_0; }

		//typeID=ID
		public Assignment getTypeIDAssignment_2_1_2_0_1_1() { return cTypeIDAssignment_2_1_2_0_1_1; }

		//ID
		public RuleCall getTypeIDIDTerminalRuleCall_2_1_2_0_1_1_0() { return cTypeIDIDTerminalRuleCall_2_1_2_0_1_1_0; }

		//"with"
		public Keyword getWithKeyword_2_1_2_0_2() { return cWithKeyword_2_1_2_0_2; }

		//(func=[Function] | operator=Esterel_CombineOperator)
		public Alternatives getAlternatives_2_1_2_0_3() { return cAlternatives_2_1_2_0_3; }

		//func=[Function]
		public Assignment getFuncAssignment_2_1_2_0_3_0() { return cFuncAssignment_2_1_2_0_3_0; }

		//[Function]
		public CrossReference getFuncFunctionCrossReference_2_1_2_0_3_0_0() { return cFuncFunctionCrossReference_2_1_2_0_3_0_0; }

		//ID
		public RuleCall getFuncFunctionIDTerminalRuleCall_2_1_2_0_3_0_0_1() { return cFuncFunctionIDTerminalRuleCall_2_1_2_0_3_0_0_1; }

		//operator=Esterel_CombineOperator
		public Assignment getOperatorAssignment_2_1_2_0_3_1() { return cOperatorAssignment_2_1_2_0_3_1; }

		//Esterel_CombineOperator
		public RuleCall getOperatorEsterel_CombineOperatorEnumRuleCall_2_1_2_0_3_1_0() { return cOperatorEsterel_CombineOperatorEnumRuleCall_2_1_2_0_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_1_2_1() { return cRightParenthesisKeyword_2_1_2_1; }

		//(":=" expression=Expression ":" type=Esterel_ValueType | typeID=ID | "combine" (type=Esterel_ValueType | typeID=ID)
		//"with" (func=[Function] | operator=Esterel_CombineOperator))
		public Alternatives getAlternatives_2_2() { return cAlternatives_2_2; }

		//":=" expression=Expression ":" type=Esterel_ValueType
		public Group getGroup_2_2_0() { return cGroup_2_2_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_2_2_0_0() { return cColonEqualsSignKeyword_2_2_0_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_2_2_0_1() { return cExpressionAssignment_2_2_0_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_2_0_1_0() { return cExpressionExpressionParserRuleCall_2_2_0_1_0; }

		//":"
		public Keyword getColonKeyword_2_2_0_2() { return cColonKeyword_2_2_0_2; }

		//type=Esterel_ValueType
		public Assignment getTypeAssignment_2_2_0_3() { return cTypeAssignment_2_2_0_3; }

		//Esterel_ValueType
		public RuleCall getTypeEsterel_ValueTypeEnumRuleCall_2_2_0_3_0() { return cTypeEsterel_ValueTypeEnumRuleCall_2_2_0_3_0; }

		//typeID=ID
		public Assignment getTypeIDAssignment_2_2_1() { return cTypeIDAssignment_2_2_1; }

		//ID
		public RuleCall getTypeIDIDTerminalRuleCall_2_2_1_0() { return cTypeIDIDTerminalRuleCall_2_2_1_0; }

		//"combine" (type=Esterel_ValueType | typeID=ID) "with" (func=[Function] | operator=Esterel_CombineOperator)
		public Group getGroup_2_2_2() { return cGroup_2_2_2; }

		//"combine"
		public Keyword getCombineKeyword_2_2_2_0() { return cCombineKeyword_2_2_2_0; }

		//(type=Esterel_ValueType | typeID=ID)
		public Alternatives getAlternatives_2_2_2_1() { return cAlternatives_2_2_2_1; }

		//type=Esterel_ValueType
		public Assignment getTypeAssignment_2_2_2_1_0() { return cTypeAssignment_2_2_2_1_0; }

		//Esterel_ValueType
		public RuleCall getTypeEsterel_ValueTypeEnumRuleCall_2_2_2_1_0_0() { return cTypeEsterel_ValueTypeEnumRuleCall_2_2_2_1_0_0; }

		//typeID=ID
		public Assignment getTypeIDAssignment_2_2_2_1_1() { return cTypeIDAssignment_2_2_2_1_1; }

		//ID
		public RuleCall getTypeIDIDTerminalRuleCall_2_2_2_1_1_0() { return cTypeIDIDTerminalRuleCall_2_2_2_1_1_0; }

		//"with"
		public Keyword getWithKeyword_2_2_2_2() { return cWithKeyword_2_2_2_2; }

		//(func=[Function] | operator=Esterel_CombineOperator)
		public Alternatives getAlternatives_2_2_2_3() { return cAlternatives_2_2_2_3; }

		//func=[Function]
		public Assignment getFuncAssignment_2_2_2_3_0() { return cFuncAssignment_2_2_2_3_0; }

		//[Function]
		public CrossReference getFuncFunctionCrossReference_2_2_2_3_0_0() { return cFuncFunctionCrossReference_2_2_2_3_0_0; }

		//ID
		public RuleCall getFuncFunctionIDTerminalRuleCall_2_2_2_3_0_0_1() { return cFuncFunctionIDTerminalRuleCall_2_2_2_3_0_0_1; }

		//operator=Esterel_CombineOperator
		public Assignment getOperatorAssignment_2_2_2_3_1() { return cOperatorAssignment_2_2_2_3_1; }

		//Esterel_CombineOperator
		public RuleCall getOperatorEsterel_CombineOperatorEnumRuleCall_2_2_2_3_1_0() { return cOperatorEsterel_CombineOperatorEnumRuleCall_2_2_2_3_1_0; }
	}

	public class TrapHandlerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.TrapHandler");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cHandleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTrapExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTrapExprTrapExprParserRuleCall_2_0 = (RuleCall)cTrapExprAssignment_2.eContents().get(0);
		private final Keyword cDoKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cGroup_4.eContents().get(0);
		private final Assignment cStatementsAssignment_4_0_0 = (Assignment)cGroup_4_0.eContents().get(0);
		private final RuleCall cStatementsEsterelStatementParserRuleCall_4_0_0_0 = (RuleCall)cStatementsAssignment_4_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_0_1 = (Keyword)cGroup_4_0.eContents().get(1);
		private final Assignment cStatementsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cStatementsEsterelStatementParserRuleCall_4_1_0 = (RuleCall)cStatementsAssignment_4_1.eContents().get(0);
		
		//TrapHandler:
		//	annotations+=Annotation*
		//	"handle"
		//	trapExpr=TrapExpr
		//	"do" ((statements+=EsterelStatement ";")* statements+=EsterelStatement?);
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* "handle" trapExpr=TrapExpr "do" ((statements+=EsterelStatement ";")*
		//statements+=EsterelStatement?)
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//"handle"
		public Keyword getHandleKeyword_1() { return cHandleKeyword_1; }

		//trapExpr=TrapExpr
		public Assignment getTrapExprAssignment_2() { return cTrapExprAssignment_2; }

		//TrapExpr
		public RuleCall getTrapExprTrapExprParserRuleCall_2_0() { return cTrapExprTrapExprParserRuleCall_2_0; }

		//"do"
		public Keyword getDoKeyword_3() { return cDoKeyword_3; }

		//((statements+=EsterelStatement ";")* statements+=EsterelStatement?)
		public Group getGroup_4() { return cGroup_4; }

		//(statements+=EsterelStatement ";")*
		public Group getGroup_4_0() { return cGroup_4_0; }

		//statements+=EsterelStatement
		public Assignment getStatementsAssignment_4_0_0() { return cStatementsAssignment_4_0_0; }

		//EsterelStatement
		public RuleCall getStatementsEsterelStatementParserRuleCall_4_0_0_0() { return cStatementsEsterelStatementParserRuleCall_4_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_4_0_1() { return cSemicolonKeyword_4_0_1; }

		//statements+=EsterelStatement?
		public Assignment getStatementsAssignment_4_1() { return cStatementsAssignment_4_1; }

		//EsterelStatement
		public RuleCall getStatementsEsterelStatementParserRuleCall_4_1_0() { return cStatementsEsterelStatementParserRuleCall_4_1_0; }
	}

	public class ExitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Exit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cExitKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTrapAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTrapTrapSignalCrossReference_2_0 = (CrossReference)cTrapAssignment_2.eContents().get(0);
		private final RuleCall cTrapTrapSignalIDTerminalRuleCall_2_0_1 = (RuleCall)cTrapTrapSignalCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExpressionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_3_1_0 = (RuleCall)cExpressionAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//Exit:
		//	annotations+=Annotation*
		//	"exit"
		//	trap=[TrapSignal] ("(" expression=Expression ")")?;
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* "exit" trap=[TrapSignal] ("(" expression=Expression ")")?
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//"exit"
		public Keyword getExitKeyword_1() { return cExitKeyword_1; }

		//trap=[TrapSignal]
		public Assignment getTrapAssignment_2() { return cTrapAssignment_2; }

		//[TrapSignal]
		public CrossReference getTrapTrapSignalCrossReference_2_0() { return cTrapTrapSignalCrossReference_2_0; }

		//ID
		public RuleCall getTrapTrapSignalIDTerminalRuleCall_2_0_1() { return cTrapTrapSignalIDTerminalRuleCall_2_0_1; }

		//("(" expression=Expression ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_3_1() { return cExpressionAssignment_3_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_1_0() { return cExpressionExpressionParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}

	public class ExecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Exec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cExecKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cTaskAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final CrossReference cTaskTaskCrossReference_1_0_1_0 = (CrossReference)cTaskAssignment_1_0_1.eContents().get(0);
		private final RuleCall cTaskTaskIDTerminalRuleCall_1_0_1_0_1 = (RuleCall)cTaskTaskCrossReference_1_0_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Group cGroup_1_0_3 = (Group)cGroup_1_0.eContents().get(3);
		private final Assignment cVarsAssignment_1_0_3_0 = (Assignment)cGroup_1_0_3.eContents().get(0);
		private final CrossReference cVarsIVariableCrossReference_1_0_3_0_0 = (CrossReference)cVarsAssignment_1_0_3_0.eContents().get(0);
		private final RuleCall cVarsIVariableIDTerminalRuleCall_1_0_3_0_0_1 = (RuleCall)cVarsIVariableCrossReference_1_0_3_0_0.eContents().get(1);
		private final Group cGroup_1_0_3_1 = (Group)cGroup_1_0_3.eContents().get(1);
		private final Keyword cCommaKeyword_1_0_3_1_0 = (Keyword)cGroup_1_0_3_1.eContents().get(0);
		private final Assignment cVarsAssignment_1_0_3_1_1 = (Assignment)cGroup_1_0_3_1.eContents().get(1);
		private final CrossReference cVarsIVariableCrossReference_1_0_3_1_1_0 = (CrossReference)cVarsAssignment_1_0_3_1_1.eContents().get(0);
		private final RuleCall cVarsIVariableIDTerminalRuleCall_1_0_3_1_1_0_1 = (RuleCall)cVarsIVariableCrossReference_1_0_3_1_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_0_4 = (Keyword)cGroup_1_0.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_1_0_5 = (Keyword)cGroup_1_0.eContents().get(5);
		private final Group cGroup_1_0_6 = (Group)cGroup_1_0.eContents().get(6);
		private final Assignment cKexpressionsAssignment_1_0_6_0 = (Assignment)cGroup_1_0_6.eContents().get(0);
		private final RuleCall cKexpressionsExpressionParserRuleCall_1_0_6_0_0 = (RuleCall)cKexpressionsAssignment_1_0_6_0.eContents().get(0);
		private final Group cGroup_1_0_6_1 = (Group)cGroup_1_0_6.eContents().get(1);
		private final Keyword cCommaKeyword_1_0_6_1_0 = (Keyword)cGroup_1_0_6_1.eContents().get(0);
		private final Assignment cKexpressionsAssignment_1_0_6_1_1 = (Assignment)cGroup_1_0_6_1.eContents().get(1);
		private final RuleCall cKexpressionsExpressionParserRuleCall_1_0_6_1_1_0 = (RuleCall)cKexpressionsAssignment_1_0_6_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_7 = (Keyword)cGroup_1_0.eContents().get(7);
		private final Keyword cReturnKeyword_1_0_8 = (Keyword)cGroup_1_0.eContents().get(8);
		private final Assignment cRetSignalAssignment_1_0_9 = (Assignment)cGroup_1_0.eContents().get(9);
		private final CrossReference cRetSignalISignalCrossReference_1_0_9_0 = (CrossReference)cRetSignalAssignment_1_0_9.eContents().get(0);
		private final RuleCall cRetSignalISignalIDTerminalRuleCall_1_0_9_0_1 = (RuleCall)cRetSignalISignalCrossReference_1_0_9_0.eContents().get(1);
		private final Group cGroup_1_0_10 = (Group)cGroup_1_0.eContents().get(10);
		private final Keyword cDoKeyword_1_0_10_0 = (Keyword)cGroup_1_0_10.eContents().get(0);
		private final Group cGroup_1_0_10_1 = (Group)cGroup_1_0_10.eContents().get(1);
		private final Group cGroup_1_0_10_1_0 = (Group)cGroup_1_0_10_1.eContents().get(0);
		private final Assignment cStatementsAssignment_1_0_10_1_0_0 = (Assignment)cGroup_1_0_10_1_0.eContents().get(0);
		private final RuleCall cStatementsEsterelStatementParserRuleCall_1_0_10_1_0_0_0 = (RuleCall)cStatementsAssignment_1_0_10_1_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_0_10_1_0_1 = (Keyword)cGroup_1_0_10_1_0.eContents().get(1);
		private final Assignment cStatementsAssignment_1_0_10_1_1 = (Assignment)cGroup_1_0_10_1.eContents().get(1);
		private final RuleCall cStatementsEsterelStatementParserRuleCall_1_0_10_1_1_0 = (RuleCall)cStatementsAssignment_1_0_10_1_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cExecKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cExecCaseListAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cExecCaseListExecCaseParserRuleCall_1_1_1_0 = (RuleCall)cExecCaseListAssignment_1_1_1.eContents().get(0);
		private final Keyword cEndKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cExecKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// ==> 7.5.12 The exec Task Execution Statement
		//// -------------------------------------
		//Exec:
		//	annotations+=Annotation* ("exec" task=[Task]
		//	"(" (vars+=[IVariable] ("," vars+=[IVariable])*)? ")"
		//	"(" (kexpressions+=Expression ("," kexpressions+=Expression)*)? ")"
		//	"return"
		//	retSignal=[ISignal] ("do" ((statements+=EsterelStatement ";")* statements+=EsterelStatement?))?
		//	|
		//	"exec" execCaseList+=ExecCase+)
		//	"end" "exec"?;
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* ("exec" task=[Task] "(" (vars+=[IVariable] ("," vars+=[IVariable])*)? ")" "("
		//(kexpressions+=Expression ("," kexpressions+=Expression)*)? ")" "return" retSignal=[ISignal] ("do"
		//((statements+=EsterelStatement ";")* statements+=EsterelStatement?))? | "exec" execCaseList+=ExecCase+) "end" "exec"?
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//("exec" task=[Task] "(" (vars+=[IVariable] ("," vars+=[IVariable])*)? ")" "(" (kexpressions+=Expression (","
		//kexpressions+=Expression)*)? ")" "return" retSignal=[ISignal] ("do" ((statements+=EsterelStatement ";")*
		//statements+=EsterelStatement?))? | "exec" execCaseList+=ExecCase+)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"exec" task=[Task] "(" (vars+=[IVariable] ("," vars+=[IVariable])*)? ")" "(" (kexpressions+=Expression (","
		//kexpressions+=Expression)*)? ")" "return" retSignal=[ISignal] ("do" ((statements+=EsterelStatement ";")*
		//statements+=EsterelStatement?))?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"exec"
		public Keyword getExecKeyword_1_0_0() { return cExecKeyword_1_0_0; }

		//task=[Task]
		public Assignment getTaskAssignment_1_0_1() { return cTaskAssignment_1_0_1; }

		//[Task]
		public CrossReference getTaskTaskCrossReference_1_0_1_0() { return cTaskTaskCrossReference_1_0_1_0; }

		//ID
		public RuleCall getTaskTaskIDTerminalRuleCall_1_0_1_0_1() { return cTaskTaskIDTerminalRuleCall_1_0_1_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0_2() { return cLeftParenthesisKeyword_1_0_2; }

		//(vars+=[IVariable] ("," vars+=[IVariable])*)?
		public Group getGroup_1_0_3() { return cGroup_1_0_3; }

		//vars+=[IVariable]
		public Assignment getVarsAssignment_1_0_3_0() { return cVarsAssignment_1_0_3_0; }

		//[IVariable]
		public CrossReference getVarsIVariableCrossReference_1_0_3_0_0() { return cVarsIVariableCrossReference_1_0_3_0_0; }

		//ID
		public RuleCall getVarsIVariableIDTerminalRuleCall_1_0_3_0_0_1() { return cVarsIVariableIDTerminalRuleCall_1_0_3_0_0_1; }

		//("," vars+=[IVariable])*
		public Group getGroup_1_0_3_1() { return cGroup_1_0_3_1; }

		//","
		public Keyword getCommaKeyword_1_0_3_1_0() { return cCommaKeyword_1_0_3_1_0; }

		//vars+=[IVariable]
		public Assignment getVarsAssignment_1_0_3_1_1() { return cVarsAssignment_1_0_3_1_1; }

		//[IVariable]
		public CrossReference getVarsIVariableCrossReference_1_0_3_1_1_0() { return cVarsIVariableCrossReference_1_0_3_1_1_0; }

		//ID
		public RuleCall getVarsIVariableIDTerminalRuleCall_1_0_3_1_1_0_1() { return cVarsIVariableIDTerminalRuleCall_1_0_3_1_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_0_4() { return cRightParenthesisKeyword_1_0_4; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0_5() { return cLeftParenthesisKeyword_1_0_5; }

		//(kexpressions+=Expression ("," kexpressions+=Expression)*)?
		public Group getGroup_1_0_6() { return cGroup_1_0_6; }

		//kexpressions+=Expression
		public Assignment getKexpressionsAssignment_1_0_6_0() { return cKexpressionsAssignment_1_0_6_0; }

		//Expression
		public RuleCall getKexpressionsExpressionParserRuleCall_1_0_6_0_0() { return cKexpressionsExpressionParserRuleCall_1_0_6_0_0; }

		//("," kexpressions+=Expression)*
		public Group getGroup_1_0_6_1() { return cGroup_1_0_6_1; }

		//","
		public Keyword getCommaKeyword_1_0_6_1_0() { return cCommaKeyword_1_0_6_1_0; }

		//kexpressions+=Expression
		public Assignment getKexpressionsAssignment_1_0_6_1_1() { return cKexpressionsAssignment_1_0_6_1_1; }

		//Expression
		public RuleCall getKexpressionsExpressionParserRuleCall_1_0_6_1_1_0() { return cKexpressionsExpressionParserRuleCall_1_0_6_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_0_7() { return cRightParenthesisKeyword_1_0_7; }

		//"return"
		public Keyword getReturnKeyword_1_0_8() { return cReturnKeyword_1_0_8; }

		//retSignal=[ISignal]
		public Assignment getRetSignalAssignment_1_0_9() { return cRetSignalAssignment_1_0_9; }

		//[ISignal]
		public CrossReference getRetSignalISignalCrossReference_1_0_9_0() { return cRetSignalISignalCrossReference_1_0_9_0; }

		//ID
		public RuleCall getRetSignalISignalIDTerminalRuleCall_1_0_9_0_1() { return cRetSignalISignalIDTerminalRuleCall_1_0_9_0_1; }

		//("do" ((statements+=EsterelStatement ";")* statements+=EsterelStatement?))?
		public Group getGroup_1_0_10() { return cGroup_1_0_10; }

		//"do"
		public Keyword getDoKeyword_1_0_10_0() { return cDoKeyword_1_0_10_0; }

		//((statements+=EsterelStatement ";")* statements+=EsterelStatement?)
		public Group getGroup_1_0_10_1() { return cGroup_1_0_10_1; }

		//(statements+=EsterelStatement ";")*
		public Group getGroup_1_0_10_1_0() { return cGroup_1_0_10_1_0; }

		//statements+=EsterelStatement
		public Assignment getStatementsAssignment_1_0_10_1_0_0() { return cStatementsAssignment_1_0_10_1_0_0; }

		//EsterelStatement
		public RuleCall getStatementsEsterelStatementParserRuleCall_1_0_10_1_0_0_0() { return cStatementsEsterelStatementParserRuleCall_1_0_10_1_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1_0_10_1_0_1() { return cSemicolonKeyword_1_0_10_1_0_1; }

		//statements+=EsterelStatement?
		public Assignment getStatementsAssignment_1_0_10_1_1() { return cStatementsAssignment_1_0_10_1_1; }

		//EsterelStatement
		public RuleCall getStatementsEsterelStatementParserRuleCall_1_0_10_1_1_0() { return cStatementsEsterelStatementParserRuleCall_1_0_10_1_1_0; }

		//"exec" execCaseList+=ExecCase+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"exec"
		public Keyword getExecKeyword_1_1_0() { return cExecKeyword_1_1_0; }

		//execCaseList+=ExecCase+
		public Assignment getExecCaseListAssignment_1_1_1() { return cExecCaseListAssignment_1_1_1; }

		//ExecCase
		public RuleCall getExecCaseListExecCaseParserRuleCall_1_1_1_0() { return cExecCaseListExecCaseParserRuleCall_1_1_1_0; }

		//"end"
		public Keyword getEndKeyword_2() { return cEndKeyword_2; }

		//"exec"?
		public Keyword getExecKeyword_3() { return cExecKeyword_3; }
	}

	public class ExecCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.ExecCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cCaseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTaskAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTaskTaskCrossReference_2_0 = (CrossReference)cTaskAssignment_2.eContents().get(0);
		private final RuleCall cTaskTaskIDTerminalRuleCall_2_0_1 = (RuleCall)cTaskTaskCrossReference_2_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cVarsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final CrossReference cVarsIVariableCrossReference_4_0_0 = (CrossReference)cVarsAssignment_4_0.eContents().get(0);
		private final RuleCall cVarsIVariableIDTerminalRuleCall_4_0_0_1 = (RuleCall)cVarsIVariableCrossReference_4_0_0.eContents().get(1);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cVarsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final CrossReference cVarsIVariableCrossReference_4_1_1_0 = (CrossReference)cVarsAssignment_4_1_1.eContents().get(0);
		private final RuleCall cVarsIVariableIDTerminalRuleCall_4_1_1_0_1 = (RuleCall)cVarsIVariableCrossReference_4_1_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cKexpressionsAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cKexpressionsExpressionParserRuleCall_7_0_0 = (RuleCall)cKexpressionsAssignment_7_0.eContents().get(0);
		private final Group cGroup_7_1 = (Group)cGroup_7.eContents().get(1);
		private final Keyword cCommaKeyword_7_1_0 = (Keyword)cGroup_7_1.eContents().get(0);
		private final Assignment cKexpressionsAssignment_7_1_1 = (Assignment)cGroup_7_1.eContents().get(1);
		private final RuleCall cKexpressionsExpressionParserRuleCall_7_1_1_0 = (RuleCall)cKexpressionsAssignment_7_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cReturnKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cRetSignalAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final CrossReference cRetSignalISignalCrossReference_10_0 = (CrossReference)cRetSignalAssignment_10.eContents().get(0);
		private final RuleCall cRetSignalISignalIDTerminalRuleCall_10_0_1 = (RuleCall)cRetSignalISignalCrossReference_10_0.eContents().get(1);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cDoKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Group cGroup_11_1 = (Group)cGroup_11.eContents().get(1);
		private final Group cGroup_11_1_0 = (Group)cGroup_11_1.eContents().get(0);
		private final Assignment cStatementsAssignment_11_1_0_0 = (Assignment)cGroup_11_1_0.eContents().get(0);
		private final RuleCall cStatementsEsterelStatementParserRuleCall_11_1_0_0_0 = (RuleCall)cStatementsAssignment_11_1_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_11_1_0_1 = (Keyword)cGroup_11_1_0.eContents().get(1);
		private final Assignment cStatementsAssignment_11_1_1 = (Assignment)cGroup_11_1.eContents().get(1);
		private final RuleCall cStatementsEsterelStatementParserRuleCall_11_1_1_0 = (RuleCall)cStatementsAssignment_11_1_1.eContents().get(0);
		
		//ExecCase:
		//	annotations+=Annotation*
		//	"case" task=[Task]
		//	"(" (vars+=[IVariable] ("," vars+=[IVariable])*)? ")"
		//	"(" (kexpressions+=Expression ("," kexpressions+=Expression)*)? ")"
		//	"return"
		//	retSignal=[ISignal] ("do" ((statements+=EsterelStatement ";")* statements+=EsterelStatement?))?;
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* "case" task=[Task] "(" (vars+=[IVariable] ("," vars+=[IVariable])*)? ")" "("
		//(kexpressions+=Expression ("," kexpressions+=Expression)*)? ")" "return" retSignal=[ISignal] ("do"
		//((statements+=EsterelStatement ";")* statements+=EsterelStatement?))?
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//"case"
		public Keyword getCaseKeyword_1() { return cCaseKeyword_1; }

		//task=[Task]
		public Assignment getTaskAssignment_2() { return cTaskAssignment_2; }

		//[Task]
		public CrossReference getTaskTaskCrossReference_2_0() { return cTaskTaskCrossReference_2_0; }

		//ID
		public RuleCall getTaskTaskIDTerminalRuleCall_2_0_1() { return cTaskTaskIDTerminalRuleCall_2_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//(vars+=[IVariable] ("," vars+=[IVariable])*)?
		public Group getGroup_4() { return cGroup_4; }

		//vars+=[IVariable]
		public Assignment getVarsAssignment_4_0() { return cVarsAssignment_4_0; }

		//[IVariable]
		public CrossReference getVarsIVariableCrossReference_4_0_0() { return cVarsIVariableCrossReference_4_0_0; }

		//ID
		public RuleCall getVarsIVariableIDTerminalRuleCall_4_0_0_1() { return cVarsIVariableIDTerminalRuleCall_4_0_0_1; }

		//("," vars+=[IVariable])*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//vars+=[IVariable]
		public Assignment getVarsAssignment_4_1_1() { return cVarsAssignment_4_1_1; }

		//[IVariable]
		public CrossReference getVarsIVariableCrossReference_4_1_1_0() { return cVarsIVariableCrossReference_4_1_1_0; }

		//ID
		public RuleCall getVarsIVariableIDTerminalRuleCall_4_1_1_0_1() { return cVarsIVariableIDTerminalRuleCall_4_1_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//"("
		public Keyword getLeftParenthesisKeyword_6() { return cLeftParenthesisKeyword_6; }

		//(kexpressions+=Expression ("," kexpressions+=Expression)*)?
		public Group getGroup_7() { return cGroup_7; }

		//kexpressions+=Expression
		public Assignment getKexpressionsAssignment_7_0() { return cKexpressionsAssignment_7_0; }

		//Expression
		public RuleCall getKexpressionsExpressionParserRuleCall_7_0_0() { return cKexpressionsExpressionParserRuleCall_7_0_0; }

		//("," kexpressions+=Expression)*
		public Group getGroup_7_1() { return cGroup_7_1; }

		//","
		public Keyword getCommaKeyword_7_1_0() { return cCommaKeyword_7_1_0; }

		//kexpressions+=Expression
		public Assignment getKexpressionsAssignment_7_1_1() { return cKexpressionsAssignment_7_1_1; }

		//Expression
		public RuleCall getKexpressionsExpressionParserRuleCall_7_1_1_0() { return cKexpressionsExpressionParserRuleCall_7_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }

		//"return"
		public Keyword getReturnKeyword_9() { return cReturnKeyword_9; }

		//retSignal=[ISignal]
		public Assignment getRetSignalAssignment_10() { return cRetSignalAssignment_10; }

		//[ISignal]
		public CrossReference getRetSignalISignalCrossReference_10_0() { return cRetSignalISignalCrossReference_10_0; }

		//ID
		public RuleCall getRetSignalISignalIDTerminalRuleCall_10_0_1() { return cRetSignalISignalIDTerminalRuleCall_10_0_1; }

		//("do" ((statements+=EsterelStatement ";")* statements+=EsterelStatement?))?
		public Group getGroup_11() { return cGroup_11; }

		//"do"
		public Keyword getDoKeyword_11_0() { return cDoKeyword_11_0; }

		//((statements+=EsterelStatement ";")* statements+=EsterelStatement?)
		public Group getGroup_11_1() { return cGroup_11_1; }

		//(statements+=EsterelStatement ";")*
		public Group getGroup_11_1_0() { return cGroup_11_1_0; }

		//statements+=EsterelStatement
		public Assignment getStatementsAssignment_11_1_0_0() { return cStatementsAssignment_11_1_0_0; }

		//EsterelStatement
		public RuleCall getStatementsEsterelStatementParserRuleCall_11_1_0_0_0() { return cStatementsEsterelStatementParserRuleCall_11_1_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_11_1_0_1() { return cSemicolonKeyword_11_1_0_1; }

		//statements+=EsterelStatement?
		public Assignment getStatementsAssignment_11_1_1() { return cStatementsAssignment_11_1_1; }

		//EsterelStatement
		public RuleCall getStatementsEsterelStatementParserRuleCall_11_1_1_0() { return cStatementsEsterelStatementParserRuleCall_11_1_1_0; }
	}

	public class LocalSignalDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.LocalSignalDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cSignalKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSignalsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSignalsISignalParserRuleCall_2_0 = (RuleCall)cSignalsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSignalsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSignalsISignalParserRuleCall_3_1_0 = (RuleCall)cSignalsAssignment_3_1.eContents().get(0);
		private final Keyword cInKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cGroup_5.eContents().get(0);
		private final Assignment cStatementsAssignment_5_0_0 = (Assignment)cGroup_5_0.eContents().get(0);
		private final RuleCall cStatementsEsterelStatementParserRuleCall_5_0_0_0 = (RuleCall)cStatementsAssignment_5_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_0_1 = (Keyword)cGroup_5_0.eContents().get(1);
		private final Assignment cStatementsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cStatementsEsterelStatementParserRuleCall_5_1_0 = (RuleCall)cStatementsAssignment_5_1.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cSignalKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//// ==> 7.5.13 Local Signal Declaration    
		//// -------------------------------------
		//LocalSignalDecl:
		//	annotations+=Annotation*
		//	"signal" signals+=ISignal ("," signals+=ISignal)*
		//	"in" ((statements+=EsterelStatement ";")* statements+=EsterelStatement?)
		//	"end" "signal"?;
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* "signal" signals+=ISignal ("," signals+=ISignal)* "in" ((statements+=EsterelStatement ";")*
		//statements+=EsterelStatement?) "end" "signal"?
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//"signal"
		public Keyword getSignalKeyword_1() { return cSignalKeyword_1; }

		//signals+=ISignal
		public Assignment getSignalsAssignment_2() { return cSignalsAssignment_2; }

		//ISignal
		public RuleCall getSignalsISignalParserRuleCall_2_0() { return cSignalsISignalParserRuleCall_2_0; }

		//("," signals+=ISignal)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//signals+=ISignal
		public Assignment getSignalsAssignment_3_1() { return cSignalsAssignment_3_1; }

		//ISignal
		public RuleCall getSignalsISignalParserRuleCall_3_1_0() { return cSignalsISignalParserRuleCall_3_1_0; }

		//"in"
		public Keyword getInKeyword_4() { return cInKeyword_4; }

		//((statements+=EsterelStatement ";")* statements+=EsterelStatement?)
		public Group getGroup_5() { return cGroup_5; }

		//(statements+=EsterelStatement ";")*
		public Group getGroup_5_0() { return cGroup_5_0; }

		//statements+=EsterelStatement
		public Assignment getStatementsAssignment_5_0_0() { return cStatementsAssignment_5_0_0; }

		//EsterelStatement
		public RuleCall getStatementsEsterelStatementParserRuleCall_5_0_0_0() { return cStatementsEsterelStatementParserRuleCall_5_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_5_0_1() { return cSemicolonKeyword_5_0_1; }

		//statements+=EsterelStatement?
		public Assignment getStatementsAssignment_5_1() { return cStatementsAssignment_5_1; }

		//EsterelStatement
		public RuleCall getStatementsEsterelStatementParserRuleCall_5_1_0() { return cStatementsEsterelStatementParserRuleCall_5_1_0; }

		//"end"
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }

		//"signal"?
		public Keyword getSignalKeyword_7() { return cSignalKeyword_7; }
	}

	public class LocalVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.LocalVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cVarKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVarDeclsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarDeclsVariableDeclParserRuleCall_2_0 = (RuleCall)cVarDeclsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cVarDeclsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cVarDeclsVariableDeclParserRuleCall_3_1_0 = (RuleCall)cVarDeclsAssignment_3_1.eContents().get(0);
		private final Keyword cInKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cGroup_5.eContents().get(0);
		private final Assignment cStatementsAssignment_5_0_0 = (Assignment)cGroup_5_0.eContents().get(0);
		private final RuleCall cStatementsEsterelStatementParserRuleCall_5_0_0_0 = (RuleCall)cStatementsAssignment_5_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_0_1 = (Keyword)cGroup_5_0.eContents().get(1);
		private final Assignment cStatementsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cStatementsEsterelStatementParserRuleCall_5_1_0 = (RuleCall)cStatementsAssignment_5_1.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cVarKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//// ==> 7.5.14 Local Variable Declaration
		//// ------------------------------------- 
		//LocalVariable:
		//	annotations+=Annotation*
		//	"var"
		//	varDecls+=VariableDecl ("," varDecls+=VariableDecl)*
		//	"in" ((statements+=EsterelStatement ";")* statements+=EsterelStatement?)
		//	"end" "var"?;
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* "var" varDecls+=VariableDecl ("," varDecls+=VariableDecl)* "in" ((statements+=EsterelStatement
		//";")* statements+=EsterelStatement?) "end" "var"?
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//"var"
		public Keyword getVarKeyword_1() { return cVarKeyword_1; }

		//varDecls+=VariableDecl
		public Assignment getVarDeclsAssignment_2() { return cVarDeclsAssignment_2; }

		//VariableDecl
		public RuleCall getVarDeclsVariableDeclParserRuleCall_2_0() { return cVarDeclsVariableDeclParserRuleCall_2_0; }

		//("," varDecls+=VariableDecl)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//varDecls+=VariableDecl
		public Assignment getVarDeclsAssignment_3_1() { return cVarDeclsAssignment_3_1; }

		//VariableDecl
		public RuleCall getVarDeclsVariableDeclParserRuleCall_3_1_0() { return cVarDeclsVariableDeclParserRuleCall_3_1_0; }

		//"in"
		public Keyword getInKeyword_4() { return cInKeyword_4; }

		//((statements+=EsterelStatement ";")* statements+=EsterelStatement?)
		public Group getGroup_5() { return cGroup_5; }

		//(statements+=EsterelStatement ";")*
		public Group getGroup_5_0() { return cGroup_5_0; }

		//statements+=EsterelStatement
		public Assignment getStatementsAssignment_5_0_0() { return cStatementsAssignment_5_0_0; }

		//EsterelStatement
		public RuleCall getStatementsEsterelStatementParserRuleCall_5_0_0_0() { return cStatementsEsterelStatementParserRuleCall_5_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_5_0_1() { return cSemicolonKeyword_5_0_1; }

		//statements+=EsterelStatement?
		public Assignment getStatementsAssignment_5_1() { return cStatementsAssignment_5_1; }

		//EsterelStatement
		public RuleCall getStatementsEsterelStatementParserRuleCall_5_1_0() { return cStatementsEsterelStatementParserRuleCall_5_1_0; }

		//"end"
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }

		//"var"?
		public Keyword getVarKeyword_7() { return cVarKeyword_7; }
	}

	public class VariableDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.VariableDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariablesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariablesIVariableParserRuleCall_0_0 = (RuleCall)cVariablesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVariablesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVariablesIVariableParserRuleCall_1_1_0 = (RuleCall)cVariablesAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeIdentifierParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//VariableDecl:
		//	variables+=IVariable ("," variables+=IVariable)* ":" type=TypeIdentifier;
		@Override public ParserRule getRule() { return rule; }

		//variables+=IVariable ("," variables+=IVariable)* ":" type=TypeIdentifier
		public Group getGroup() { return cGroup; }

		//variables+=IVariable
		public Assignment getVariablesAssignment_0() { return cVariablesAssignment_0; }

		//IVariable
		public RuleCall getVariablesIVariableParserRuleCall_0_0() { return cVariablesIVariableParserRuleCall_0_0; }

		//("," variables+=IVariable)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//variables+=IVariable
		public Assignment getVariablesAssignment_1_1() { return cVariablesAssignment_1_1; }

		//IVariable
		public RuleCall getVariablesIVariableParserRuleCall_1_1_0() { return cVariablesIVariableParserRuleCall_1_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=TypeIdentifier
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//TypeIdentifier
		public RuleCall getTypeTypeIdentifierParserRuleCall_3_0() { return cTypeTypeIdentifierParserRuleCall_3_0; }
	}

	public class IVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.IVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionAssignment_1_1.eContents().get(0);
		
		//IVariable:
		//	name=ID (":=" expression=Expression)?;
		@Override public ParserRule getRule() { return rule; }

		//name=ID (":=" expression=Expression)?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//(":=" expression=Expression)?
		public Group getGroup_1() { return cGroup_1; }

		//":="
		public Keyword getColonEqualsSignKeyword_1_0() { return cColonEqualsSignKeyword_1_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1_1() { return cExpressionAssignment_1_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_1_0() { return cExpressionExpressionParserRuleCall_1_1_0; }
	}

	public class RunElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Run");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cRunKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cModuleAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cModuleModuleRenamingParserRuleCall_1_0_1_0 = (RuleCall)cModuleAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_0_2 = (Group)cGroup_1_0.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_1_0_2_0 = (Keyword)cGroup_1_0_2.eContents().get(0);
		private final Assignment cListAssignment_1_0_2_1 = (Assignment)cGroup_1_0_2.eContents().get(1);
		private final RuleCall cListRenamingParserRuleCall_1_0_2_1_0 = (RuleCall)cListAssignment_1_0_2_1.eContents().get(0);
		private final Group cGroup_1_0_2_2 = (Group)cGroup_1_0_2.eContents().get(2);
		private final Keyword cSemicolonKeyword_1_0_2_2_0 = (Keyword)cGroup_1_0_2_2.eContents().get(0);
		private final Assignment cListAssignment_1_0_2_2_1 = (Assignment)cGroup_1_0_2_2.eContents().get(1);
		private final RuleCall cListRenamingParserRuleCall_1_0_2_2_1_0 = (RuleCall)cListAssignment_1_0_2_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_0_2_3 = (Keyword)cGroup_1_0_2.eContents().get(3);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cCopymoduleKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cModuleAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cModuleModuleRenamingParserRuleCall_1_1_1_0 = (RuleCall)cModuleAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_1_2 = (Group)cGroup_1_1.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_1_1_2_0 = (Keyword)cGroup_1_1_2.eContents().get(0);
		private final Assignment cListAssignment_1_1_2_1 = (Assignment)cGroup_1_1_2.eContents().get(1);
		private final RuleCall cListRenamingParserRuleCall_1_1_2_1_0 = (RuleCall)cListAssignment_1_1_2_1.eContents().get(0);
		private final Group cGroup_1_1_2_2 = (Group)cGroup_1_1_2.eContents().get(2);
		private final Keyword cSemicolonKeyword_1_1_2_2_0 = (Keyword)cGroup_1_1_2_2.eContents().get(0);
		private final Assignment cListAssignment_1_1_2_2_1 = (Assignment)cGroup_1_1_2_2.eContents().get(1);
		private final RuleCall cListRenamingParserRuleCall_1_1_2_2_1_0 = (RuleCall)cListAssignment_1_1_2_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1_2_3 = (Keyword)cGroup_1_1_2.eContents().get(3);
		
		//// ==> 7.5.15 The run Module Instantiation Statement
		//// -------------------------------------
		//Run:
		//	annotations+=Annotation* ("run"
		//	module=ModuleRenaming ("[" list+=Renaming (";" list+=Renaming)* "]")?
		//	| "copymodule"
		//	module=ModuleRenaming ("[" list+=Renaming (";" list+=Renaming)* "]")?);
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* ("run" module=ModuleRenaming ("[" list+=Renaming (";" list+=Renaming)* "]")? | "copymodule"
		//module=ModuleRenaming ("[" list+=Renaming (";" list+=Renaming)* "]")?)
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//("run" module=ModuleRenaming ("[" list+=Renaming (";" list+=Renaming)* "]")? | "copymodule" module=ModuleRenaming ("["
		//list+=Renaming (";" list+=Renaming)* "]")?)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"run" module=ModuleRenaming ("[" list+=Renaming (";" list+=Renaming)* "]")?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"run"
		public Keyword getRunKeyword_1_0_0() { return cRunKeyword_1_0_0; }

		//module=ModuleRenaming
		public Assignment getModuleAssignment_1_0_1() { return cModuleAssignment_1_0_1; }

		//ModuleRenaming
		public RuleCall getModuleModuleRenamingParserRuleCall_1_0_1_0() { return cModuleModuleRenamingParserRuleCall_1_0_1_0; }

		//("[" list+=Renaming (";" list+=Renaming)* "]")?
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0_2_0() { return cLeftSquareBracketKeyword_1_0_2_0; }

		//list+=Renaming
		public Assignment getListAssignment_1_0_2_1() { return cListAssignment_1_0_2_1; }

		//Renaming
		public RuleCall getListRenamingParserRuleCall_1_0_2_1_0() { return cListRenamingParserRuleCall_1_0_2_1_0; }

		//(";" list+=Renaming)*
		public Group getGroup_1_0_2_2() { return cGroup_1_0_2_2; }

		//";"
		public Keyword getSemicolonKeyword_1_0_2_2_0() { return cSemicolonKeyword_1_0_2_2_0; }

		//list+=Renaming
		public Assignment getListAssignment_1_0_2_2_1() { return cListAssignment_1_0_2_2_1; }

		//Renaming
		public RuleCall getListRenamingParserRuleCall_1_0_2_2_1_0() { return cListRenamingParserRuleCall_1_0_2_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_0_2_3() { return cRightSquareBracketKeyword_1_0_2_3; }

		//"copymodule" module=ModuleRenaming ("[" list+=Renaming (";" list+=Renaming)* "]")?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"copymodule"
		public Keyword getCopymoduleKeyword_1_1_0() { return cCopymoduleKeyword_1_1_0; }

		//module=ModuleRenaming
		public Assignment getModuleAssignment_1_1_1() { return cModuleAssignment_1_1_1; }

		//ModuleRenaming
		public RuleCall getModuleModuleRenamingParserRuleCall_1_1_1_0() { return cModuleModuleRenamingParserRuleCall_1_1_1_0; }

		//("[" list+=Renaming (";" list+=Renaming)* "]")?
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_1_2_0() { return cLeftSquareBracketKeyword_1_1_2_0; }

		//list+=Renaming
		public Assignment getListAssignment_1_1_2_1() { return cListAssignment_1_1_2_1; }

		//Renaming
		public RuleCall getListRenamingParserRuleCall_1_1_2_1_0() { return cListRenamingParserRuleCall_1_1_2_1_0; }

		//(";" list+=Renaming)*
		public Group getGroup_1_1_2_2() { return cGroup_1_1_2_2; }

		//";"
		public Keyword getSemicolonKeyword_1_1_2_2_0() { return cSemicolonKeyword_1_1_2_2_0; }

		//list+=Renaming
		public Assignment getListAssignment_1_1_2_2_1() { return cListAssignment_1_1_2_2_1; }

		//Renaming
		public RuleCall getListRenamingParserRuleCall_1_1_2_2_1_0() { return cListRenamingParserRuleCall_1_1_2_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_1_2_3() { return cRightSquareBracketKeyword_1_1_2_3; }
	}

	public class ModuleRenamingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.ModuleRenaming");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cModuleAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cModuleModuleCrossReference_0_0 = (CrossReference)cModuleAssignment_0.eContents().get(0);
		private final RuleCall cModuleModuleIDTerminalRuleCall_0_0_1 = (RuleCall)cModuleModuleCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNewNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNewNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNewNameAssignment_1_0.eContents().get(0);
		private final Keyword cSolidusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cModuleAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final CrossReference cModuleModuleCrossReference_1_2_0 = (CrossReference)cModuleAssignment_1_2.eContents().get(0);
		private final RuleCall cModuleModuleIDTerminalRuleCall_1_2_0_1 = (RuleCall)cModuleModuleCrossReference_1_2_0.eContents().get(1);
		
		////deprecated
		//ModuleRenaming:
		//	module=[Module] | newName=ID "/" module=[Module];
		@Override public ParserRule getRule() { return rule; }

		//module=[Module] | newName=ID "/" module=[Module]
		public Alternatives getAlternatives() { return cAlternatives; }

		//module=[Module]
		public Assignment getModuleAssignment_0() { return cModuleAssignment_0; }

		//[Module]
		public CrossReference getModuleModuleCrossReference_0_0() { return cModuleModuleCrossReference_0_0; }

		//ID
		public RuleCall getModuleModuleIDTerminalRuleCall_0_0_1() { return cModuleModuleIDTerminalRuleCall_0_0_1; }

		//newName=ID "/" module=[Module]
		public Group getGroup_1() { return cGroup_1; }

		//newName=ID
		public Assignment getNewNameAssignment_1_0() { return cNewNameAssignment_1_0; }

		//ID
		public RuleCall getNewNameIDTerminalRuleCall_1_0_0() { return cNewNameIDTerminalRuleCall_1_0_0; }

		//"/"
		public Keyword getSolidusKeyword_1_1() { return cSolidusKeyword_1_1; }

		//module=[Module]
		public Assignment getModuleAssignment_1_2() { return cModuleAssignment_1_2; }

		//[Module]
		public CrossReference getModuleModuleCrossReference_1_2_0() { return cModuleModuleCrossReference_1_2_0; }

		//ID
		public RuleCall getModuleModuleIDTerminalRuleCall_1_2_0_1() { return cModuleModuleIDTerminalRuleCall_1_2_0_1; }
	}

	public class RenamingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Renaming");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cTypeKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cRenamingsAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cRenamingsTypeRenamingParserRuleCall_1_0_1_0 = (RuleCall)cRenamingsAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_0_2 = (Group)cGroup_1_0.eContents().get(2);
		private final Keyword cCommaKeyword_1_0_2_0 = (Keyword)cGroup_1_0_2.eContents().get(0);
		private final Assignment cRenamingsAssignment_1_0_2_1 = (Assignment)cGroup_1_0_2.eContents().get(1);
		private final RuleCall cRenamingsTypeRenamingParserRuleCall_1_0_2_1_0 = (RuleCall)cRenamingsAssignment_1_0_2_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cConstantKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cRenamingsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cRenamingsConstantRenamingParserRuleCall_1_1_1_0 = (RuleCall)cRenamingsAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_1_2 = (Group)cGroup_1_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_1_2_0 = (Keyword)cGroup_1_1_2.eContents().get(0);
		private final Assignment cRenamingsAssignment_1_1_2_1 = (Assignment)cGroup_1_1_2.eContents().get(1);
		private final RuleCall cRenamingsConstantRenamingParserRuleCall_1_1_2_1_0 = (RuleCall)cRenamingsAssignment_1_1_2_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cFunctionKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cRenamingsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cRenamingsFunctionRenamingParserRuleCall_1_2_1_0 = (RuleCall)cRenamingsAssignment_1_2_1.eContents().get(0);
		private final Group cGroup_1_2_2 = (Group)cGroup_1_2.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_2_0 = (Keyword)cGroup_1_2_2.eContents().get(0);
		private final Assignment cRenamingsAssignment_1_2_2_1 = (Assignment)cGroup_1_2_2.eContents().get(1);
		private final RuleCall cRenamingsFunctionRenamingParserRuleCall_1_2_2_1_0 = (RuleCall)cRenamingsAssignment_1_2_2_1.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Keyword cProcedureKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cRenamingsAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cRenamingsProcedureRenamingParserRuleCall_1_3_1_0 = (RuleCall)cRenamingsAssignment_1_3_1.eContents().get(0);
		private final Group cGroup_1_3_2 = (Group)cGroup_1_3.eContents().get(2);
		private final Keyword cCommaKeyword_1_3_2_0 = (Keyword)cGroup_1_3_2.eContents().get(0);
		private final Assignment cRenamingsAssignment_1_3_2_1 = (Assignment)cGroup_1_3_2.eContents().get(1);
		private final RuleCall cRenamingsProcedureRenamingParserRuleCall_1_3_2_1_0 = (RuleCall)cRenamingsAssignment_1_3_2_1.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cAlternatives_1.eContents().get(4);
		private final Keyword cTaskKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Assignment cRenamingsAssignment_1_4_1 = (Assignment)cGroup_1_4.eContents().get(1);
		private final RuleCall cRenamingsTaskRenamingParserRuleCall_1_4_1_0 = (RuleCall)cRenamingsAssignment_1_4_1.eContents().get(0);
		private final Group cGroup_1_4_2 = (Group)cGroup_1_4.eContents().get(2);
		private final Keyword cCommaKeyword_1_4_2_0 = (Keyword)cGroup_1_4_2.eContents().get(0);
		private final Assignment cRenamingsAssignment_1_4_2_1 = (Assignment)cGroup_1_4_2.eContents().get(1);
		private final RuleCall cRenamingsTaskRenamingParserRuleCall_1_4_2_1_0 = (RuleCall)cRenamingsAssignment_1_4_2_1.eContents().get(0);
		private final Group cGroup_1_5 = (Group)cAlternatives_1.eContents().get(5);
		private final Keyword cSignalKeyword_1_5_0 = (Keyword)cGroup_1_5.eContents().get(0);
		private final Assignment cRenamingsAssignment_1_5_1 = (Assignment)cGroup_1_5.eContents().get(1);
		private final RuleCall cRenamingsSignalRenamingParserRuleCall_1_5_1_0 = (RuleCall)cRenamingsAssignment_1_5_1.eContents().get(0);
		private final Group cGroup_1_5_2 = (Group)cGroup_1_5.eContents().get(2);
		private final Keyword cCommaKeyword_1_5_2_0 = (Keyword)cGroup_1_5_2.eContents().get(0);
		private final Assignment cRenamingsAssignment_1_5_2_1 = (Assignment)cGroup_1_5_2.eContents().get(1);
		private final RuleCall cRenamingsSignalRenamingParserRuleCall_1_5_2_1_0 = (RuleCall)cRenamingsAssignment_1_5_2_1.eContents().get(0);
		
		//Renaming:
		//	annotations+=Annotation* ("type" renamings+=TypeRenaming ("," renamings+=TypeRenaming)*
		//	| "constant" renamings+=ConstantRenaming ("," renamings+=ConstantRenaming)*
		//	| "function" renamings+=FunctionRenaming ("," renamings+=FunctionRenaming)*
		//	| "procedure" renamings+=ProcedureRenaming ("," renamings+=ProcedureRenaming)*
		//	| "task" renamings+=TaskRenaming ("," renamings+=TaskRenaming)*
		//	| "signal" renamings+=SignalRenaming ("," renamings+=SignalRenaming)*);
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* ("type" renamings+=TypeRenaming ("," renamings+=TypeRenaming)* | "constant"
		//renamings+=ConstantRenaming ("," renamings+=ConstantRenaming)* | "function" renamings+=FunctionRenaming (","
		//renamings+=FunctionRenaming)* | "procedure" renamings+=ProcedureRenaming ("," renamings+=ProcedureRenaming)* | "task"
		//renamings+=TaskRenaming ("," renamings+=TaskRenaming)* | "signal" renamings+=SignalRenaming (","
		//renamings+=SignalRenaming)*)
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//("type" renamings+=TypeRenaming ("," renamings+=TypeRenaming)* | "constant" renamings+=ConstantRenaming (","
		//renamings+=ConstantRenaming)* | "function" renamings+=FunctionRenaming ("," renamings+=FunctionRenaming)* | "procedure"
		//renamings+=ProcedureRenaming ("," renamings+=ProcedureRenaming)* | "task" renamings+=TaskRenaming (","
		//renamings+=TaskRenaming)* | "signal" renamings+=SignalRenaming ("," renamings+=SignalRenaming)*)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"type" renamings+=TypeRenaming ("," renamings+=TypeRenaming)*
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"type"
		public Keyword getTypeKeyword_1_0_0() { return cTypeKeyword_1_0_0; }

		//renamings+=TypeRenaming
		public Assignment getRenamingsAssignment_1_0_1() { return cRenamingsAssignment_1_0_1; }

		//TypeRenaming
		public RuleCall getRenamingsTypeRenamingParserRuleCall_1_0_1_0() { return cRenamingsTypeRenamingParserRuleCall_1_0_1_0; }

		//("," renamings+=TypeRenaming)*
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }

		//","
		public Keyword getCommaKeyword_1_0_2_0() { return cCommaKeyword_1_0_2_0; }

		//renamings+=TypeRenaming
		public Assignment getRenamingsAssignment_1_0_2_1() { return cRenamingsAssignment_1_0_2_1; }

		//TypeRenaming
		public RuleCall getRenamingsTypeRenamingParserRuleCall_1_0_2_1_0() { return cRenamingsTypeRenamingParserRuleCall_1_0_2_1_0; }

		//"constant" renamings+=ConstantRenaming ("," renamings+=ConstantRenaming)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"constant"
		public Keyword getConstantKeyword_1_1_0() { return cConstantKeyword_1_1_0; }

		//renamings+=ConstantRenaming
		public Assignment getRenamingsAssignment_1_1_1() { return cRenamingsAssignment_1_1_1; }

		//ConstantRenaming
		public RuleCall getRenamingsConstantRenamingParserRuleCall_1_1_1_0() { return cRenamingsConstantRenamingParserRuleCall_1_1_1_0; }

		//("," renamings+=ConstantRenaming)*
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }

		//","
		public Keyword getCommaKeyword_1_1_2_0() { return cCommaKeyword_1_1_2_0; }

		//renamings+=ConstantRenaming
		public Assignment getRenamingsAssignment_1_1_2_1() { return cRenamingsAssignment_1_1_2_1; }

		//ConstantRenaming
		public RuleCall getRenamingsConstantRenamingParserRuleCall_1_1_2_1_0() { return cRenamingsConstantRenamingParserRuleCall_1_1_2_1_0; }

		//"function" renamings+=FunctionRenaming ("," renamings+=FunctionRenaming)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"function"
		public Keyword getFunctionKeyword_1_2_0() { return cFunctionKeyword_1_2_0; }

		//renamings+=FunctionRenaming
		public Assignment getRenamingsAssignment_1_2_1() { return cRenamingsAssignment_1_2_1; }

		//FunctionRenaming
		public RuleCall getRenamingsFunctionRenamingParserRuleCall_1_2_1_0() { return cRenamingsFunctionRenamingParserRuleCall_1_2_1_0; }

		//("," renamings+=FunctionRenaming)*
		public Group getGroup_1_2_2() { return cGroup_1_2_2; }

		//","
		public Keyword getCommaKeyword_1_2_2_0() { return cCommaKeyword_1_2_2_0; }

		//renamings+=FunctionRenaming
		public Assignment getRenamingsAssignment_1_2_2_1() { return cRenamingsAssignment_1_2_2_1; }

		//FunctionRenaming
		public RuleCall getRenamingsFunctionRenamingParserRuleCall_1_2_2_1_0() { return cRenamingsFunctionRenamingParserRuleCall_1_2_2_1_0; }

		//"procedure" renamings+=ProcedureRenaming ("," renamings+=ProcedureRenaming)*
		public Group getGroup_1_3() { return cGroup_1_3; }

		//"procedure"
		public Keyword getProcedureKeyword_1_3_0() { return cProcedureKeyword_1_3_0; }

		//renamings+=ProcedureRenaming
		public Assignment getRenamingsAssignment_1_3_1() { return cRenamingsAssignment_1_3_1; }

		//ProcedureRenaming
		public RuleCall getRenamingsProcedureRenamingParserRuleCall_1_3_1_0() { return cRenamingsProcedureRenamingParserRuleCall_1_3_1_0; }

		//("," renamings+=ProcedureRenaming)*
		public Group getGroup_1_3_2() { return cGroup_1_3_2; }

		//","
		public Keyword getCommaKeyword_1_3_2_0() { return cCommaKeyword_1_3_2_0; }

		//renamings+=ProcedureRenaming
		public Assignment getRenamingsAssignment_1_3_2_1() { return cRenamingsAssignment_1_3_2_1; }

		//ProcedureRenaming
		public RuleCall getRenamingsProcedureRenamingParserRuleCall_1_3_2_1_0() { return cRenamingsProcedureRenamingParserRuleCall_1_3_2_1_0; }

		//"task" renamings+=TaskRenaming ("," renamings+=TaskRenaming)*
		public Group getGroup_1_4() { return cGroup_1_4; }

		//"task"
		public Keyword getTaskKeyword_1_4_0() { return cTaskKeyword_1_4_0; }

		//renamings+=TaskRenaming
		public Assignment getRenamingsAssignment_1_4_1() { return cRenamingsAssignment_1_4_1; }

		//TaskRenaming
		public RuleCall getRenamingsTaskRenamingParserRuleCall_1_4_1_0() { return cRenamingsTaskRenamingParserRuleCall_1_4_1_0; }

		//("," renamings+=TaskRenaming)*
		public Group getGroup_1_4_2() { return cGroup_1_4_2; }

		//","
		public Keyword getCommaKeyword_1_4_2_0() { return cCommaKeyword_1_4_2_0; }

		//renamings+=TaskRenaming
		public Assignment getRenamingsAssignment_1_4_2_1() { return cRenamingsAssignment_1_4_2_1; }

		//TaskRenaming
		public RuleCall getRenamingsTaskRenamingParserRuleCall_1_4_2_1_0() { return cRenamingsTaskRenamingParserRuleCall_1_4_2_1_0; }

		//"signal" renamings+=SignalRenaming ("," renamings+=SignalRenaming)*
		public Group getGroup_1_5() { return cGroup_1_5; }

		//"signal"
		public Keyword getSignalKeyword_1_5_0() { return cSignalKeyword_1_5_0; }

		//renamings+=SignalRenaming
		public Assignment getRenamingsAssignment_1_5_1() { return cRenamingsAssignment_1_5_1; }

		//SignalRenaming
		public RuleCall getRenamingsSignalRenamingParserRuleCall_1_5_1_0() { return cRenamingsSignalRenamingParserRuleCall_1_5_1_0; }

		//("," renamings+=SignalRenaming)*
		public Group getGroup_1_5_2() { return cGroup_1_5_2; }

		//","
		public Keyword getCommaKeyword_1_5_2_0() { return cCommaKeyword_1_5_2_0; }

		//renamings+=SignalRenaming
		public Assignment getRenamingsAssignment_1_5_2_1() { return cRenamingsAssignment_1_5_2_1; }

		//SignalRenaming
		public RuleCall getRenamingsSignalRenamingParserRuleCall_1_5_2_1_0() { return cRenamingsSignalRenamingParserRuleCall_1_5_2_1_0; }
	}

	public class TypeRenamingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.TypeRenaming");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cNewNameAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final CrossReference cNewNameTypeCrossReference_0_0_0 = (CrossReference)cNewNameAssignment_0_0.eContents().get(0);
		private final RuleCall cNewNameTypeIDTerminalRuleCall_0_0_0_1 = (RuleCall)cNewNameTypeCrossReference_0_0_0.eContents().get(1);
		private final Assignment cNewTypeAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cNewTypeEsterel_ValueTypeEnumRuleCall_0_1_0 = (RuleCall)cNewTypeAssignment_0_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOldNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cOldNameTypeCrossReference_2_0 = (CrossReference)cOldNameAssignment_2.eContents().get(0);
		private final RuleCall cOldNameTypeIDTerminalRuleCall_2_0_1 = (RuleCall)cOldNameTypeCrossReference_2_0.eContents().get(1);
		
		//TypeRenaming:
		//	(newName=[Type] | newType=Esterel_ValueType) "/" oldName=[Type];
		@Override public ParserRule getRule() { return rule; }

		//(newName=[Type] | newType=Esterel_ValueType) "/" oldName=[Type]
		public Group getGroup() { return cGroup; }

		//(newName=[Type] | newType=Esterel_ValueType)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//newName=[Type]
		public Assignment getNewNameAssignment_0_0() { return cNewNameAssignment_0_0; }

		//[Type]
		public CrossReference getNewNameTypeCrossReference_0_0_0() { return cNewNameTypeCrossReference_0_0_0; }

		//ID
		public RuleCall getNewNameTypeIDTerminalRuleCall_0_0_0_1() { return cNewNameTypeIDTerminalRuleCall_0_0_0_1; }

		//newType=Esterel_ValueType
		public Assignment getNewTypeAssignment_0_1() { return cNewTypeAssignment_0_1; }

		//Esterel_ValueType
		public RuleCall getNewTypeEsterel_ValueTypeEnumRuleCall_0_1_0() { return cNewTypeEsterel_ValueTypeEnumRuleCall_0_1_0; }

		//"/"
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }

		//oldName=[Type]
		public Assignment getOldNameAssignment_2() { return cOldNameAssignment_2; }

		//[Type]
		public CrossReference getOldNameTypeCrossReference_2_0() { return cOldNameTypeCrossReference_2_0; }

		//ID
		public RuleCall getOldNameTypeIDTerminalRuleCall_2_0_1() { return cOldNameTypeIDTerminalRuleCall_2_0_1; }
	}

	public class ConstantRenamingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.ConstantRenaming");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cNewNameAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final CrossReference cNewNameValuedObjectCrossReference_0_0_0 = (CrossReference)cNewNameAssignment_0_0.eContents().get(0);
		private final RuleCall cNewNameValuedObjectIDTerminalRuleCall_0_0_0_1 = (RuleCall)cNewNameValuedObjectCrossReference_0_0_0.eContents().get(1);
		private final Assignment cNewValueAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cNewValueConstantValueParserRuleCall_0_1_0 = (RuleCall)cNewValueAssignment_0_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOldNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cOldNameValuedObjectCrossReference_2_0 = (CrossReference)cOldNameAssignment_2.eContents().get(0);
		private final RuleCall cOldNameValuedObjectIDTerminalRuleCall_2_0_1 = (RuleCall)cOldNameValuedObjectCrossReference_2_0.eContents().get(1);
		
		//ConstantRenaming:
		//	(newName=[ValuedObject] | newValue=ConstantValue) "/" oldName=[ValuedObject];
		@Override public ParserRule getRule() { return rule; }

		//(newName=[ValuedObject] | newValue=ConstantValue) "/" oldName=[ValuedObject]
		public Group getGroup() { return cGroup; }

		//(newName=[ValuedObject] | newValue=ConstantValue)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//newName=[ValuedObject]
		public Assignment getNewNameAssignment_0_0() { return cNewNameAssignment_0_0; }

		//[ValuedObject]
		public CrossReference getNewNameValuedObjectCrossReference_0_0_0() { return cNewNameValuedObjectCrossReference_0_0_0; }

		//ID
		public RuleCall getNewNameValuedObjectIDTerminalRuleCall_0_0_0_1() { return cNewNameValuedObjectIDTerminalRuleCall_0_0_0_1; }

		//newValue=ConstantValue
		public Assignment getNewValueAssignment_0_1() { return cNewValueAssignment_0_1; }

		//ConstantValue
		public RuleCall getNewValueConstantValueParserRuleCall_0_1_0() { return cNewValueConstantValueParserRuleCall_0_1_0; }

		//"/"
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }

		//oldName=[ValuedObject]
		public Assignment getOldNameAssignment_2() { return cOldNameAssignment_2; }

		//[ValuedObject]
		public CrossReference getOldNameValuedObjectCrossReference_2_0() { return cOldNameValuedObjectCrossReference_2_0; }

		//ID
		public RuleCall getOldNameValuedObjectIDTerminalRuleCall_2_0_1() { return cOldNameValuedObjectIDTerminalRuleCall_2_0_1; }
	}

	public class FunctionRenamingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.FunctionRenaming");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cNewNameAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final CrossReference cNewNameFunctionCrossReference_0_0_0 = (CrossReference)cNewNameAssignment_0_0.eContents().get(0);
		private final RuleCall cNewNameFunctionIDTerminalRuleCall_0_0_0_1 = (RuleCall)cNewNameFunctionCrossReference_0_0_0.eContents().get(1);
		private final Assignment cNewFuncAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cNewFuncBuildInFunctionParserRuleCall_0_1_0 = (RuleCall)cNewFuncAssignment_0_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOldNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cOldNameFunctionCrossReference_2_0 = (CrossReference)cOldNameAssignment_2.eContents().get(0);
		private final RuleCall cOldNameFunctionIDTerminalRuleCall_2_0_1 = (RuleCall)cOldNameFunctionCrossReference_2_0.eContents().get(1);
		
		//FunctionRenaming:
		//	(newName=[Function] | newFunc=BuildInFunction) "/" oldName=[Function];
		@Override public ParserRule getRule() { return rule; }

		//(newName=[Function] | newFunc=BuildInFunction) "/" oldName=[Function]
		public Group getGroup() { return cGroup; }

		//(newName=[Function] | newFunc=BuildInFunction)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//newName=[Function]
		public Assignment getNewNameAssignment_0_0() { return cNewNameAssignment_0_0; }

		//[Function]
		public CrossReference getNewNameFunctionCrossReference_0_0_0() { return cNewNameFunctionCrossReference_0_0_0; }

		//ID
		public RuleCall getNewNameFunctionIDTerminalRuleCall_0_0_0_1() { return cNewNameFunctionIDTerminalRuleCall_0_0_0_1; }

		//newFunc=BuildInFunction
		public Assignment getNewFuncAssignment_0_1() { return cNewFuncAssignment_0_1; }

		//BuildInFunction
		public RuleCall getNewFuncBuildInFunctionParserRuleCall_0_1_0() { return cNewFuncBuildInFunctionParserRuleCall_0_1_0; }

		//"/"
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }

		//oldName=[Function]
		public Assignment getOldNameAssignment_2() { return cOldNameAssignment_2; }

		//[Function]
		public CrossReference getOldNameFunctionCrossReference_2_0() { return cOldNameFunctionCrossReference_2_0; }

		//ID
		public RuleCall getOldNameFunctionIDTerminalRuleCall_2_0_1() { return cOldNameFunctionIDTerminalRuleCall_2_0_1; }
	}

	public class ProcedureRenamingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.ProcedureRenaming");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNewNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNewNameProcedureCrossReference_0_0 = (CrossReference)cNewNameAssignment_0.eContents().get(0);
		private final RuleCall cNewNameProcedureIDTerminalRuleCall_0_0_1 = (RuleCall)cNewNameProcedureCrossReference_0_0.eContents().get(1);
		private final Keyword cSolidusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOldNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cOldNameProcedureCrossReference_2_0 = (CrossReference)cOldNameAssignment_2.eContents().get(0);
		private final RuleCall cOldNameProcedureIDTerminalRuleCall_2_0_1 = (RuleCall)cOldNameProcedureCrossReference_2_0.eContents().get(1);
		
		//ProcedureRenaming:
		//	newName=[Procedure] "/" oldName=[Procedure];
		@Override public ParserRule getRule() { return rule; }

		//newName=[Procedure] "/" oldName=[Procedure]
		public Group getGroup() { return cGroup; }

		//newName=[Procedure]
		public Assignment getNewNameAssignment_0() { return cNewNameAssignment_0; }

		//[Procedure]
		public CrossReference getNewNameProcedureCrossReference_0_0() { return cNewNameProcedureCrossReference_0_0; }

		//ID
		public RuleCall getNewNameProcedureIDTerminalRuleCall_0_0_1() { return cNewNameProcedureIDTerminalRuleCall_0_0_1; }

		//"/"
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }

		//oldName=[Procedure]
		public Assignment getOldNameAssignment_2() { return cOldNameAssignment_2; }

		//[Procedure]
		public CrossReference getOldNameProcedureCrossReference_2_0() { return cOldNameProcedureCrossReference_2_0; }

		//ID
		public RuleCall getOldNameProcedureIDTerminalRuleCall_2_0_1() { return cOldNameProcedureIDTerminalRuleCall_2_0_1; }
	}

	public class TaskRenamingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.TaskRenaming");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNewNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNewNameTaskCrossReference_0_0 = (CrossReference)cNewNameAssignment_0.eContents().get(0);
		private final RuleCall cNewNameTaskIDTerminalRuleCall_0_0_1 = (RuleCall)cNewNameTaskCrossReference_0_0.eContents().get(1);
		private final Keyword cSolidusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOldNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cOldNameTaskCrossReference_2_0 = (CrossReference)cOldNameAssignment_2.eContents().get(0);
		private final RuleCall cOldNameTaskIDTerminalRuleCall_2_0_1 = (RuleCall)cOldNameTaskCrossReference_2_0.eContents().get(1);
		
		//TaskRenaming:
		//	newName=[Task] "/" oldName=[Task];
		@Override public ParserRule getRule() { return rule; }

		//newName=[Task] "/" oldName=[Task]
		public Group getGroup() { return cGroup; }

		//newName=[Task]
		public Assignment getNewNameAssignment_0() { return cNewNameAssignment_0; }

		//[Task]
		public CrossReference getNewNameTaskCrossReference_0_0() { return cNewNameTaskCrossReference_0_0; }

		//ID
		public RuleCall getNewNameTaskIDTerminalRuleCall_0_0_1() { return cNewNameTaskIDTerminalRuleCall_0_0_1; }

		//"/"
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }

		//oldName=[Task]
		public Assignment getOldNameAssignment_2() { return cOldNameAssignment_2; }

		//[Task]
		public CrossReference getOldNameTaskCrossReference_2_0() { return cOldNameTaskCrossReference_2_0; }

		//ID
		public RuleCall getOldNameTaskIDTerminalRuleCall_2_0_1() { return cOldNameTaskIDTerminalRuleCall_2_0_1; }
	}

	public class SignalRenamingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.SignalRenaming");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cNewNameAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final CrossReference cNewNameISignalCrossReference_0_0_0 = (CrossReference)cNewNameAssignment_0_0.eContents().get(0);
		private final RuleCall cNewNameISignalIDTerminalRuleCall_0_0_0_1 = (RuleCall)cNewNameISignalCrossReference_0_0_0.eContents().get(1);
		private final Keyword cTickKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cSolidusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOldNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cOldNameISignalCrossReference_2_0 = (CrossReference)cOldNameAssignment_2.eContents().get(0);
		private final RuleCall cOldNameISignalIDTerminalRuleCall_2_0_1 = (RuleCall)cOldNameISignalCrossReference_2_0.eContents().get(1);
		
		//SignalRenaming:
		//	(newName=[ISignal] | "tick") "/" oldName=[ISignal];
		@Override public ParserRule getRule() { return rule; }

		//(newName=[ISignal] | "tick") "/" oldName=[ISignal]
		public Group getGroup() { return cGroup; }

		//(newName=[ISignal] | "tick")
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//newName=[ISignal]
		public Assignment getNewNameAssignment_0_0() { return cNewNameAssignment_0_0; }

		//[ISignal]
		public CrossReference getNewNameISignalCrossReference_0_0_0() { return cNewNameISignalCrossReference_0_0_0; }

		//ID
		public RuleCall getNewNameISignalIDTerminalRuleCall_0_0_0_1() { return cNewNameISignalIDTerminalRuleCall_0_0_0_1; }

		//"tick"
		public Keyword getTickKeyword_0_1() { return cTickKeyword_0_1; }

		//"/"
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }

		//oldName=[ISignal]
		public Assignment getOldNameAssignment_2() { return cOldNameAssignment_2; }

		//[ISignal]
		public CrossReference getOldNameISignalCrossReference_2_0() { return cOldNameISignalCrossReference_2_0; }

		//ID
		public RuleCall getOldNameISignalIDTerminalRuleCall_2_0_1() { return cOldNameISignalIDTerminalRuleCall_2_0_1; }
	}

	public class BuildInFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.BuildInFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPlusSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cHyphenMinusKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cModKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cLessThanSignGreaterThanSignKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cGreaterThanSignKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cLessThanSignKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cLessThanSignEqualsSignKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cGreaterThanSignEqualsSignKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cNotKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cAndKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cOrKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		
		//// renaming can also rename build in types and functions
		//BuildInFunction:
		//	"*" | "/" | "+" | "-" | "mod" | "=" | "<>" | ">" | "<" | "<=" | ">=" | "not" | "and" | "or";
		@Override public ParserRule getRule() { return rule; }

		//"*" | "/" | "+" | "-" | "mod" | "=" | "<>" | ">" | "<" | "<=" | ">=" | "not" | "and" | "or"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"*"
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }

		//"/"
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }

		//"+"
		public Keyword getPlusSignKeyword_2() { return cPlusSignKeyword_2; }

		//"-"
		public Keyword getHyphenMinusKeyword_3() { return cHyphenMinusKeyword_3; }

		//"mod"
		public Keyword getModKeyword_4() { return cModKeyword_4; }

		//"="
		public Keyword getEqualsSignKeyword_5() { return cEqualsSignKeyword_5; }

		//"<>"
		public Keyword getLessThanSignGreaterThanSignKeyword_6() { return cLessThanSignGreaterThanSignKeyword_6; }

		//">"
		public Keyword getGreaterThanSignKeyword_7() { return cGreaterThanSignKeyword_7; }

		//"<"
		public Keyword getLessThanSignKeyword_8() { return cLessThanSignKeyword_8; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_9() { return cLessThanSignEqualsSignKeyword_9; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_10() { return cGreaterThanSignEqualsSignKeyword_10; }

		//"not"
		public Keyword getNotKeyword_11() { return cNotKeyword_11; }

		//"and"
		public Keyword getAndKeyword_12() { return cAndKeyword_12; }

		//"or"
		public Keyword getOrKeyword_13() { return cOrKeyword_13; }
	}

	public class DoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Do");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cDoKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cGroup_2.eContents().get(0);
		private final Assignment cStatementsAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cStatementsEsterelStatementParserRuleCall_2_0_0_0 = (RuleCall)cStatementsAssignment_2_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_0_1 = (Keyword)cGroup_2_0.eContents().get(1);
		private final Assignment cStatementsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cStatementsEsterelStatementParserRuleCall_2_1_0 = (RuleCall)cStatementsAssignment_2_1.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Assignment cEndingAnnotationsAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final RuleCall cEndingAnnotationsAnnotationParserRuleCall_3_0_0_0 = (RuleCall)cEndingAnnotationsAssignment_3_0_0.eContents().get(0);
		private final Keyword cUptoKeyword_3_0_1 = (Keyword)cGroup_3_0.eContents().get(1);
		private final Assignment cExprAssignment_3_0_2 = (Assignment)cGroup_3_0.eContents().get(2);
		private final RuleCall cExprDelayExprParserRuleCall_3_0_2_0 = (RuleCall)cExprAssignment_3_0_2.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Assignment cEndingAnnotationsAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cEndingAnnotationsAnnotationParserRuleCall_3_1_0_0 = (RuleCall)cEndingAnnotationsAssignment_3_1_0.eContents().get(0);
		private final Keyword cWatchingKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Assignment cDelayAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final RuleCall cDelayDelayExprParserRuleCall_3_1_2_0 = (RuleCall)cDelayAssignment_3_1_2.eContents().get(0);
		private final Group cGroup_3_1_3 = (Group)cGroup_3_1.eContents().get(3);
		private final Keyword cTimeoutKeyword_3_1_3_0 = (Keyword)cGroup_3_1_3.eContents().get(0);
		private final Group cGroup_3_1_3_1 = (Group)cGroup_3_1_3.eContents().get(1);
		private final Group cGroup_3_1_3_1_0 = (Group)cGroup_3_1_3_1.eContents().get(0);
		private final Assignment cWatchingStatementsAssignment_3_1_3_1_0_0 = (Assignment)cGroup_3_1_3_1_0.eContents().get(0);
		private final RuleCall cWatchingStatementsEsterelStatementParserRuleCall_3_1_3_1_0_0_0 = (RuleCall)cWatchingStatementsAssignment_3_1_3_1_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1_3_1_0_1 = (Keyword)cGroup_3_1_3_1_0.eContents().get(1);
		private final Assignment cWatchingStatementsAssignment_3_1_3_1_1 = (Assignment)cGroup_3_1_3_1.eContents().get(1);
		private final RuleCall cWatchingStatementsEsterelStatementParserRuleCall_3_1_3_1_1_0 = (RuleCall)cWatchingStatementsAssignment_3_1_3_1_1.eContents().get(0);
		private final Keyword cEndKeyword_3_1_3_2 = (Keyword)cGroup_3_1_3.eContents().get(2);
		private final Keyword cTimeoutKeyword_3_1_3_3 = (Keyword)cGroup_3_1_3.eContents().get(3);
		
		/// * ###################################################
		// * ###               7.6 Old Syntax                ###
		// * ###################################################
		// * / Do:
		//	annotations+=Annotation*
		//	"do" ((statements+=EsterelStatement ";")* statements+=EsterelStatement?) (endingAnnotations+=Annotation*
		//	"upto"
		//	expr=DelayExpr
		//	| endingAnnotations+=Annotation*
		//	"watching"
		//	delay=DelayExpr ("timeout" ((watchingStatements+=EsterelStatement ";")* watchingStatements+=EsterelStatement?)
		//	"end" "timeout"?)?);
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* "do" ((statements+=EsterelStatement ";")* statements+=EsterelStatement?)
		//(endingAnnotations+=Annotation* "upto" expr=DelayExpr | endingAnnotations+=Annotation* "watching" delay=DelayExpr
		//("timeout" ((watchingStatements+=EsterelStatement ";")* watchingStatements+=EsterelStatement?) "end" "timeout"?)?)
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//"do"
		public Keyword getDoKeyword_1() { return cDoKeyword_1; }

		//((statements+=EsterelStatement ";")* statements+=EsterelStatement?)
		public Group getGroup_2() { return cGroup_2; }

		//(statements+=EsterelStatement ";")*
		public Group getGroup_2_0() { return cGroup_2_0; }

		//statements+=EsterelStatement
		public Assignment getStatementsAssignment_2_0_0() { return cStatementsAssignment_2_0_0; }

		//EsterelStatement
		public RuleCall getStatementsEsterelStatementParserRuleCall_2_0_0_0() { return cStatementsEsterelStatementParserRuleCall_2_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_2_0_1() { return cSemicolonKeyword_2_0_1; }

		//statements+=EsterelStatement?
		public Assignment getStatementsAssignment_2_1() { return cStatementsAssignment_2_1; }

		//EsterelStatement
		public RuleCall getStatementsEsterelStatementParserRuleCall_2_1_0() { return cStatementsEsterelStatementParserRuleCall_2_1_0; }

		//(endingAnnotations+=Annotation* "upto" expr=DelayExpr | endingAnnotations+=Annotation* "watching" delay=DelayExpr
		//("timeout" ((watchingStatements+=EsterelStatement ";")* watchingStatements+=EsterelStatement?) "end" "timeout"?)?)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//endingAnnotations+=Annotation* "upto" expr=DelayExpr
		public Group getGroup_3_0() { return cGroup_3_0; }

		//endingAnnotations+=Annotation*
		public Assignment getEndingAnnotationsAssignment_3_0_0() { return cEndingAnnotationsAssignment_3_0_0; }

		//Annotation
		public RuleCall getEndingAnnotationsAnnotationParserRuleCall_3_0_0_0() { return cEndingAnnotationsAnnotationParserRuleCall_3_0_0_0; }

		//"upto"
		public Keyword getUptoKeyword_3_0_1() { return cUptoKeyword_3_0_1; }

		//expr=DelayExpr
		public Assignment getExprAssignment_3_0_2() { return cExprAssignment_3_0_2; }

		//DelayExpr
		public RuleCall getExprDelayExprParserRuleCall_3_0_2_0() { return cExprDelayExprParserRuleCall_3_0_2_0; }

		//endingAnnotations+=Annotation* "watching" delay=DelayExpr ("timeout" ((watchingStatements+=EsterelStatement ";")*
		//watchingStatements+=EsterelStatement?) "end" "timeout"?)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//endingAnnotations+=Annotation*
		public Assignment getEndingAnnotationsAssignment_3_1_0() { return cEndingAnnotationsAssignment_3_1_0; }

		//Annotation
		public RuleCall getEndingAnnotationsAnnotationParserRuleCall_3_1_0_0() { return cEndingAnnotationsAnnotationParserRuleCall_3_1_0_0; }

		//"watching"
		public Keyword getWatchingKeyword_3_1_1() { return cWatchingKeyword_3_1_1; }

		//delay=DelayExpr
		public Assignment getDelayAssignment_3_1_2() { return cDelayAssignment_3_1_2; }

		//DelayExpr
		public RuleCall getDelayDelayExprParserRuleCall_3_1_2_0() { return cDelayDelayExprParserRuleCall_3_1_2_0; }

		//("timeout" ((watchingStatements+=EsterelStatement ";")* watchingStatements+=EsterelStatement?) "end" "timeout"?)?
		public Group getGroup_3_1_3() { return cGroup_3_1_3; }

		//"timeout"
		public Keyword getTimeoutKeyword_3_1_3_0() { return cTimeoutKeyword_3_1_3_0; }

		//((watchingStatements+=EsterelStatement ";")* watchingStatements+=EsterelStatement?)
		public Group getGroup_3_1_3_1() { return cGroup_3_1_3_1; }

		//(watchingStatements+=EsterelStatement ";")*
		public Group getGroup_3_1_3_1_0() { return cGroup_3_1_3_1_0; }

		//watchingStatements+=EsterelStatement
		public Assignment getWatchingStatementsAssignment_3_1_3_1_0_0() { return cWatchingStatementsAssignment_3_1_3_1_0_0; }

		//EsterelStatement
		public RuleCall getWatchingStatementsEsterelStatementParserRuleCall_3_1_3_1_0_0_0() { return cWatchingStatementsEsterelStatementParserRuleCall_3_1_3_1_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_3_1_3_1_0_1() { return cSemicolonKeyword_3_1_3_1_0_1; }

		//watchingStatements+=EsterelStatement?
		public Assignment getWatchingStatementsAssignment_3_1_3_1_1() { return cWatchingStatementsAssignment_3_1_3_1_1; }

		//EsterelStatement
		public RuleCall getWatchingStatementsEsterelStatementParserRuleCall_3_1_3_1_1_0() { return cWatchingStatementsEsterelStatementParserRuleCall_3_1_3_1_1_0; }

		//"end"
		public Keyword getEndKeyword_3_1_3_2() { return cEndKeyword_3_1_3_2; }

		//"timeout"?
		public Keyword getTimeoutKeyword_3_1_3_3() { return cTimeoutKeyword_3_1_3_3; }
	}

	public class AtomicExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.AtomicExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFunctionExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTrapExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cValuedObjectTestExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTextExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final RuleCall cBooleanExpressionParserRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final RuleCall cConstantExpressionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		/// * ###################################################
		// * ###               Expressions                   ###
		// * ###################################################
		// * / // Esterel is a bit richer than what is provided by kexpressions. 
		//// These rules are introduced here.
		//// Care about order of the rules! 
		//AtomicExpression Expression:
		//	FunctionExpression
		//	| TrapExpression
		//	| BooleanValue
		//	| ValuedObjectTestExpression
		//	| TextExpression
		//	| '(' BooleanExpression ')'
		//	| ConstantExpression
		@Override public ParserRule getRule() { return rule; }

		//FunctionExpression | TrapExpression | BooleanValue | ValuedObjectTestExpression | TextExpression | '(' BooleanExpression
		//')' | ConstantExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//FunctionExpression
		public RuleCall getFunctionExpressionParserRuleCall_0() { return cFunctionExpressionParserRuleCall_0; }

		//TrapExpression
		public RuleCall getTrapExpressionParserRuleCall_1() { return cTrapExpressionParserRuleCall_1; }

		//BooleanValue
		public RuleCall getBooleanValueParserRuleCall_2() { return cBooleanValueParserRuleCall_2; }

		//ValuedObjectTestExpression
		public RuleCall getValuedObjectTestExpressionParserRuleCall_3() { return cValuedObjectTestExpressionParserRuleCall_3; }

		//TextExpression
		public RuleCall getTextExpressionParserRuleCall_4() { return cTextExpressionParserRuleCall_4; }

		//'(' BooleanExpression ')'
		public Group getGroup_5() { return cGroup_5; }

		//'('
		public Keyword getLeftParenthesisKeyword_5_0() { return cLeftParenthesisKeyword_5_0; }

		//BooleanExpression
		public RuleCall getBooleanExpressionParserRuleCall_5_1() { return cBooleanExpressionParserRuleCall_5_1; }

		//')'
		public Keyword getRightParenthesisKeyword_5_2() { return cRightParenthesisKeyword_5_2; }

		//ConstantExpression
		public RuleCall getConstantExpressionParserRuleCall_6() { return cConstantExpressionParserRuleCall_6; }
	}

	public class TrapExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.TrapExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTrapExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cQuestionMarkQuestionMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTrapAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTrapISignalCrossReference_2_0 = (CrossReference)cTrapAssignment_2.eContents().get(0);
		private final RuleCall cTrapISignalIDTerminalRuleCall_2_0_1 = (RuleCall)cTrapISignalCrossReference_2_0.eContents().get(1);
		
		//TrapExpression Expression:
		//	{TrapExpression} "??" trap=[ISignal]
		@Override public ParserRule getRule() { return rule; }

		//{TrapExpression} "??" trap=[ISignal]
		public Group getGroup() { return cGroup; }

		//{TrapExpression}
		public Action getTrapExpressionAction_0() { return cTrapExpressionAction_0; }

		//"??"
		public Keyword getQuestionMarkQuestionMarkKeyword_1() { return cQuestionMarkQuestionMarkKeyword_1; }

		//trap=[ISignal]
		public Assignment getTrapAssignment_2() { return cTrapAssignment_2; }

		//[ISignal]
		public CrossReference getTrapISignalCrossReference_2_0() { return cTrapISignalCrossReference_2_0; }

		//ID
		public RuleCall getTrapISignalIDTerminalRuleCall_2_0_1() { return cTrapISignalIDTerminalRuleCall_2_0_1; }
	}

	public class FunctionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.FunctionExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFunctionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFunctionFunctionCrossReference_1_0 = (CrossReference)cFunctionAssignment_1.eContents().get(0);
		private final RuleCall cFunctionFunctionIDTerminalRuleCall_1_0_1 = (RuleCall)cFunctionFunctionCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cKexpressionsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cKexpressionsExpressionParserRuleCall_3_0_0 = (RuleCall)cKexpressionsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cKexpressionsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cKexpressionsExpressionParserRuleCall_3_1_1_0 = (RuleCall)cKexpressionsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//FunctionExpression Expression:
		//	{FunctionExpression} function=[Function]
		//	"(" (kexpressions+=Expression ("," kexpressions+=Expression)*)? ")"
		@Override public ParserRule getRule() { return rule; }

		//{FunctionExpression} function=[Function] "(" (kexpressions+=Expression ("," kexpressions+=Expression)*)? ")"
		public Group getGroup() { return cGroup; }

		//{FunctionExpression}
		public Action getFunctionExpressionAction_0() { return cFunctionExpressionAction_0; }

		//function=[Function]
		public Assignment getFunctionAssignment_1() { return cFunctionAssignment_1; }

		//[Function]
		public CrossReference getFunctionFunctionCrossReference_1_0() { return cFunctionFunctionCrossReference_1_0; }

		//ID
		public RuleCall getFunctionFunctionIDTerminalRuleCall_1_0_1() { return cFunctionFunctionIDTerminalRuleCall_1_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(kexpressions+=Expression ("," kexpressions+=Expression)*)?
		public Group getGroup_3() { return cGroup_3; }

		//kexpressions+=Expression
		public Assignment getKexpressionsAssignment_3_0() { return cKexpressionsAssignment_3_0; }

		//Expression
		public RuleCall getKexpressionsExpressionParserRuleCall_3_0_0() { return cKexpressionsExpressionParserRuleCall_3_0_0; }

		//("," kexpressions+=Expression)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//kexpressions+=Expression
		public Assignment getKexpressionsAssignment_3_1_1() { return cKexpressionsAssignment_3_1_1; }

		//Expression
		public RuleCall getKexpressionsExpressionParserRuleCall_3_1_1_0() { return cKexpressionsExpressionParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class ConstantExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.ConstantExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstantExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cConstantAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final CrossReference cConstantConstantCrossReference_1_0_0 = (CrossReference)cConstantAssignment_1_0.eContents().get(0);
		private final RuleCall cConstantConstantIDTerminalRuleCall_1_0_0_1 = (RuleCall)cConstantConstantCrossReference_1_0_0.eContents().get(1);
		private final Assignment cValueAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cValueConstantValueParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		
		//ConstantExpression Expression:
		//	{ConstantExpression} (constant=[Constant] | value=ConstantValue)
		@Override public ParserRule getRule() { return rule; }

		//{ConstantExpression} (constant=[Constant] | value=ConstantValue)
		public Group getGroup() { return cGroup; }

		//{ConstantExpression}
		public Action getConstantExpressionAction_0() { return cConstantExpressionAction_0; }

		//(constant=[Constant] | value=ConstantValue)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//constant=[Constant]
		public Assignment getConstantAssignment_1_0() { return cConstantAssignment_1_0; }

		//[Constant]
		public CrossReference getConstantConstantCrossReference_1_0_0() { return cConstantConstantCrossReference_1_0_0; }

		//ID
		public RuleCall getConstantConstantIDTerminalRuleCall_1_0_0_1() { return cConstantConstantIDTerminalRuleCall_1_0_0_1; }

		//value=ConstantValue
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//ConstantValue
		public RuleCall getValueConstantValueParserRuleCall_1_1_0() { return cValueConstantValueParserRuleCall_1_1_0; }
	}

	public class TrapExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.TrapExpr");
		private final RuleCall cSignalExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// --> B.3.5 Trap Expressions <--
		//// -------------------------------------
		//TrapExpr Expression:
		//	SignalExpression
		@Override public ParserRule getRule() { return rule; }

		//SignalExpression
		public RuleCall getSignalExpressionParserRuleCall() { return cSignalExpressionParserRuleCall; }
	}

	public class SignalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.SignalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSignalAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionSubExpressionsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorEsterel_OrOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSubExpressionsSignalAndExpressionParserRuleCall_1_2_0 = (RuleCall)cSubExpressionsAssignment_1_2.eContents().get(0);
		
		//// --> B.3.3 Signal Expressions <--
		//// -------------------------------------
		//SignalExpression Expression:
		//	SignalAndExpression ({OperatorExpression.subExpressions+=current} operator=Esterel_OrOperator
		//	subExpressions+=SignalAndExpression)*
		@Override public ParserRule getRule() { return rule; }

		//SignalAndExpression ({OperatorExpression.subExpressions+=current} operator=Esterel_OrOperator
		//subExpressions+=SignalAndExpression)*
		public Group getGroup() { return cGroup; }

		//SignalAndExpression
		public RuleCall getSignalAndExpressionParserRuleCall_0() { return cSignalAndExpressionParserRuleCall_0; }

		//({OperatorExpression.subExpressions+=current} operator=Esterel_OrOperator subExpressions+=SignalAndExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{OperatorExpression.subExpressions+=current}
		public Action getOperatorExpressionSubExpressionsAction_1_0() { return cOperatorExpressionSubExpressionsAction_1_0; }

		//operator=Esterel_OrOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//Esterel_OrOperator
		public RuleCall getOperatorEsterel_OrOperatorEnumRuleCall_1_1_0() { return cOperatorEsterel_OrOperatorEnumRuleCall_1_1_0; }

		//subExpressions+=SignalAndExpression
		public Assignment getSubExpressionsAssignment_1_2() { return cSubExpressionsAssignment_1_2; }

		//SignalAndExpression
		public RuleCall getSubExpressionsSignalAndExpressionParserRuleCall_1_2_0() { return cSubExpressionsSignalAndExpressionParserRuleCall_1_2_0; }
	}

	public class SignalAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.SignalAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSignalNotExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionSubExpressionsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorEsterel_AndOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSubExpressionsSignalNotExpressionParserRuleCall_1_2_0 = (RuleCall)cSubExpressionsAssignment_1_2.eContents().get(0);
		
		//SignalAndExpression Expression:
		//	SignalNotExpression ({OperatorExpression.subExpressions+=current} operator=Esterel_AndOperator
		//	subExpressions+=SignalNotExpression)*
		@Override public ParserRule getRule() { return rule; }

		//SignalNotExpression ({OperatorExpression.subExpressions+=current} operator=Esterel_AndOperator
		//subExpressions+=SignalNotExpression)*
		public Group getGroup() { return cGroup; }

		//SignalNotExpression
		public RuleCall getSignalNotExpressionParserRuleCall_0() { return cSignalNotExpressionParserRuleCall_0; }

		//({OperatorExpression.subExpressions+=current} operator=Esterel_AndOperator subExpressions+=SignalNotExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{OperatorExpression.subExpressions+=current}
		public Action getOperatorExpressionSubExpressionsAction_1_0() { return cOperatorExpressionSubExpressionsAction_1_0; }

		//operator=Esterel_AndOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//Esterel_AndOperator
		public RuleCall getOperatorEsterel_AndOperatorEnumRuleCall_1_1_0() { return cOperatorEsterel_AndOperatorEnumRuleCall_1_1_0; }

		//subExpressions+=SignalNotExpression
		public Assignment getSubExpressionsAssignment_1_2() { return cSubExpressionsAssignment_1_2; }

		//SignalNotExpression
		public RuleCall getSubExpressionsSignalNotExpressionParserRuleCall_1_2_0() { return cSubExpressionsSignalNotExpressionParserRuleCall_1_2_0; }
	}

	public class SignalNotExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.SignalNotExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cOperatorExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOperatorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOperatorEsterel_NotOperatorEnumRuleCall_0_1_0 = (RuleCall)cOperatorAssignment_0_1.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cSubExpressionsSignalNotExpressionParserRuleCall_0_2_0 = (RuleCall)cSubExpressionsAssignment_0_2.eContents().get(0);
		private final RuleCall cSignalAtomicExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SignalNotExpression Expression:
		//	{OperatorExpression} operator=Esterel_NotOperator
		//	subExpressions+=SignalNotExpression | SignalAtomicExpression
		@Override public ParserRule getRule() { return rule; }

		//{OperatorExpression} operator=Esterel_NotOperator subExpressions+=SignalNotExpression | SignalAtomicExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//{OperatorExpression} operator=Esterel_NotOperator subExpressions+=SignalNotExpression
		public Group getGroup_0() { return cGroup_0; }

		//{OperatorExpression}
		public Action getOperatorExpressionAction_0_0() { return cOperatorExpressionAction_0_0; }

		//operator=Esterel_NotOperator
		public Assignment getOperatorAssignment_0_1() { return cOperatorAssignment_0_1; }

		//Esterel_NotOperator
		public RuleCall getOperatorEsterel_NotOperatorEnumRuleCall_0_1_0() { return cOperatorEsterel_NotOperatorEnumRuleCall_0_1_0; }

		//subExpressions+=SignalNotExpression
		public Assignment getSubExpressionsAssignment_0_2() { return cSubExpressionsAssignment_0_2; }

		//SignalNotExpression
		public RuleCall getSubExpressionsSignalNotExpressionParserRuleCall_0_2_0() { return cSubExpressionsSignalNotExpressionParserRuleCall_0_2_0; }

		//SignalAtomicExpression
		public RuleCall getSignalAtomicExpressionParserRuleCall_1() { return cSignalAtomicExpressionParserRuleCall_1; }
	}

	public class SignalAtomicExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.SignalAtomicExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSignalReferenceExprParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cSignalExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final RuleCall cSignalPreExprParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTrapReferenceExprParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//SignalAtomicExpression Expression:
		//	SignalReferenceExpr
		//	| "(" SignalExpression ")"
		//	| SignalPreExpr
		//	| TrapReferenceExpr
		@Override public ParserRule getRule() { return rule; }

		//SignalReferenceExpr | "(" SignalExpression ")" | SignalPreExpr | TrapReferenceExpr
		public Alternatives getAlternatives() { return cAlternatives; }

		//SignalReferenceExpr
		public RuleCall getSignalReferenceExprParserRuleCall_0() { return cSignalReferenceExprParserRuleCall_0; }

		//"(" SignalExpression ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//SignalExpression
		public RuleCall getSignalExpressionParserRuleCall_1_1() { return cSignalExpressionParserRuleCall_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }

		//SignalPreExpr
		public RuleCall getSignalPreExprParserRuleCall_2() { return cSignalPreExprParserRuleCall_2; }

		//TrapReferenceExpr
		public RuleCall getTrapReferenceExprParserRuleCall_3() { return cTrapReferenceExprParserRuleCall_3; }
	}

	public class SignalReferenceExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.SignalReferenceExpr");
		private final Assignment cValuedObjectAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cValuedObjectISignalCrossReference_0 = (CrossReference)cValuedObjectAssignment.eContents().get(0);
		private final RuleCall cValuedObjectISignalIDTerminalRuleCall_0_1 = (RuleCall)cValuedObjectISignalCrossReference_0.eContents().get(1);
		
		//SignalReferenceExpr ValuedObjectReference:
		//	valuedObject=[ISignal]
		@Override public ParserRule getRule() { return rule; }

		//valuedObject=[ISignal]
		public Assignment getValuedObjectAssignment() { return cValuedObjectAssignment; }

		//[ISignal]
		public CrossReference getValuedObjectISignalCrossReference_0() { return cValuedObjectISignalCrossReference_0; }

		//ID
		public RuleCall getValuedObjectISignalIDTerminalRuleCall_0_1() { return cValuedObjectISignalIDTerminalRuleCall_0_1; }
	}

	public class SignalPreExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.SignalPreExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOperatorExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorEsterel_PreOperatorEnumRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSubExpressionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSubExpressionsSignalReferenceExprParserRuleCall_3_0 = (RuleCall)cSubExpressionsAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SignalPreExpr Expression:
		//	{OperatorExpression} operator=Esterel_PreOperator
		//	'(' subExpressions+=SignalReferenceExpr ')'
		@Override public ParserRule getRule() { return rule; }

		//{OperatorExpression} operator=Esterel_PreOperator '(' subExpressions+=SignalReferenceExpr ')'
		public Group getGroup() { return cGroup; }

		//{OperatorExpression}
		public Action getOperatorExpressionAction_0() { return cOperatorExpressionAction_0; }

		//operator=Esterel_PreOperator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }

		//Esterel_PreOperator
		public RuleCall getOperatorEsterel_PreOperatorEnumRuleCall_1_0() { return cOperatorEsterel_PreOperatorEnumRuleCall_1_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//subExpressions+=SignalReferenceExpr
		public Assignment getSubExpressionsAssignment_3() { return cSubExpressionsAssignment_3; }

		//SignalReferenceExpr
		public RuleCall getSubExpressionsSignalReferenceExprParserRuleCall_3_0() { return cSubExpressionsSignalReferenceExprParserRuleCall_3_0; }

		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class TrapReferenceExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.TrapReferenceExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTrapReferenceExprAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValuedObjectAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cValuedObjectTrapSignalCrossReference_1_0 = (CrossReference)cValuedObjectAssignment_1.eContents().get(0);
		private final RuleCall cValuedObjectTrapSignalIDTerminalRuleCall_1_0_1 = (RuleCall)cValuedObjectTrapSignalCrossReference_1_0.eContents().get(1);
		
		//TrapReferenceExpr ValuedObjectReference:
		//	{TrapReferenceExpr} valuedObject=[TrapSignal]
		@Override public ParserRule getRule() { return rule; }

		//{TrapReferenceExpr} valuedObject=[TrapSignal]
		public Group getGroup() { return cGroup; }

		//{TrapReferenceExpr}
		public Action getTrapReferenceExprAction_0() { return cTrapReferenceExprAction_0; }

		//valuedObject=[TrapSignal]
		public Assignment getValuedObjectAssignment_1() { return cValuedObjectAssignment_1; }

		//[TrapSignal]
		public CrossReference getValuedObjectTrapSignalCrossReference_1_0() { return cValuedObjectTrapSignalCrossReference_1_0; }

		//ID
		public RuleCall getValuedObjectTrapSignalIDTerminalRuleCall_1_0_1() { return cValuedObjectTrapSignalIDTerminalRuleCall_1_0_1; }
	}

	public class DelayExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.DelayExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cExprAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cExprExpressionParserRuleCall_0_0_0 = (RuleCall)cExprAssignment_0_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Assignment cTickAssignment_0_1_0 = (Assignment)cAlternatives_0_1.eContents().get(0);
		private final RuleCall cTickTickParserRuleCall_0_1_0_0 = (RuleCall)cTickAssignment_0_1_0.eContents().get(0);
		private final Assignment cSignalExprAssignment_0_1_1 = (Assignment)cAlternatives_0_1.eContents().get(1);
		private final RuleCall cSignalExprSignalReferenceExprParserRuleCall_0_1_1_0 = (RuleCall)cSignalExprAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_0_1_2 = (Group)cAlternatives_0_1.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_0_1_2_0 = (Keyword)cGroup_0_1_2.eContents().get(0);
		private final Assignment cSignalExprAssignment_0_1_2_1 = (Assignment)cGroup_0_1_2.eContents().get(1);
		private final RuleCall cSignalExprSignalExpressionParserRuleCall_0_1_2_1_0 = (RuleCall)cSignalExprAssignment_0_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_1_2_2 = (Keyword)cGroup_0_1_2.eContents().get(2);
		private final Alternatives cAlternatives_1 = (Alternatives)cAlternatives.eContents().get(1);
		private final Assignment cTickAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cTickTickParserRuleCall_1_0_0 = (RuleCall)cTickAssignment_1_0.eContents().get(0);
		private final Assignment cSignalExprAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cSignalExprSignalReferenceExprParserRuleCall_1_1_0 = (RuleCall)cSignalExprAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cSignalExprAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cSignalExprSignalExpressionParserRuleCall_1_2_1_0 = (RuleCall)cSignalExprAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2_2 = (Keyword)cGroup_1_2.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cIsImmediateAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cIsImmediateImmediateKeyword_2_0_0 = (Keyword)cIsImmediateAssignment_2_0.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Assignment cTickAssignment_2_1_0 = (Assignment)cAlternatives_2_1.eContents().get(0);
		private final RuleCall cTickTickParserRuleCall_2_1_0_0 = (RuleCall)cTickAssignment_2_1_0.eContents().get(0);
		private final Assignment cSignalExprAssignment_2_1_1 = (Assignment)cAlternatives_2_1.eContents().get(1);
		private final RuleCall cSignalExprSignalReferenceExprParserRuleCall_2_1_1_0 = (RuleCall)cSignalExprAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_1_2 = (Group)cAlternatives_2_1.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_1_2_0 = (Keyword)cGroup_2_1_2.eContents().get(0);
		private final Assignment cSignalExprAssignment_2_1_2_1 = (Assignment)cGroup_2_1_2.eContents().get(1);
		private final RuleCall cSignalExprSignalExpressionParserRuleCall_2_1_2_1_0 = (RuleCall)cSignalExprAssignment_2_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_1_2_2 = (Keyword)cGroup_2_1_2.eContents().get(2);
		
		//// --> B.3.4 Delay Expressions <--
		//// -------------------------------------
		//DelayExpr:
		//	expr=Expression (tick=Tick
		//	| signalExpr=SignalReferenceExpr
		//	| "[" signalExpr=SignalExpression "]") | (tick=Tick
		//	| signalExpr=SignalReferenceExpr
		//	| "[" signalExpr=SignalExpression "]") | isImmediate?="immediate" (tick=Tick
		//	| signalExpr=SignalReferenceExpr
		//	| "[" signalExpr=SignalExpression "]");
		@Override public ParserRule getRule() { return rule; }

		//expr=Expression (tick=Tick | signalExpr=SignalReferenceExpr | "[" signalExpr=SignalExpression "]") | (tick=Tick |
		//signalExpr=SignalReferenceExpr | "[" signalExpr=SignalExpression "]") | isImmediate?="immediate" (tick=Tick |
		//signalExpr=SignalReferenceExpr | "[" signalExpr=SignalExpression "]")
		public Alternatives getAlternatives() { return cAlternatives; }

		//expr=Expression (tick=Tick | signalExpr=SignalReferenceExpr | "[" signalExpr=SignalExpression "]")
		public Group getGroup_0() { return cGroup_0; }

		//expr=Expression
		public Assignment getExprAssignment_0_0() { return cExprAssignment_0_0; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_0_0_0() { return cExprExpressionParserRuleCall_0_0_0; }

		//(tick=Tick | signalExpr=SignalReferenceExpr | "[" signalExpr=SignalExpression "]")
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }

		//tick=Tick
		public Assignment getTickAssignment_0_1_0() { return cTickAssignment_0_1_0; }

		//Tick
		public RuleCall getTickTickParserRuleCall_0_1_0_0() { return cTickTickParserRuleCall_0_1_0_0; }

		//signalExpr=SignalReferenceExpr
		public Assignment getSignalExprAssignment_0_1_1() { return cSignalExprAssignment_0_1_1; }

		//SignalReferenceExpr
		public RuleCall getSignalExprSignalReferenceExprParserRuleCall_0_1_1_0() { return cSignalExprSignalReferenceExprParserRuleCall_0_1_1_0; }

		//"[" signalExpr=SignalExpression "]"
		public Group getGroup_0_1_2() { return cGroup_0_1_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0_1_2_0() { return cLeftSquareBracketKeyword_0_1_2_0; }

		//signalExpr=SignalExpression
		public Assignment getSignalExprAssignment_0_1_2_1() { return cSignalExprAssignment_0_1_2_1; }

		//SignalExpression
		public RuleCall getSignalExprSignalExpressionParserRuleCall_0_1_2_1_0() { return cSignalExprSignalExpressionParserRuleCall_0_1_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_0_1_2_2() { return cRightSquareBracketKeyword_0_1_2_2; }

		//(tick=Tick | signalExpr=SignalReferenceExpr | "[" signalExpr=SignalExpression "]")
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//tick=Tick
		public Assignment getTickAssignment_1_0() { return cTickAssignment_1_0; }

		//Tick
		public RuleCall getTickTickParserRuleCall_1_0_0() { return cTickTickParserRuleCall_1_0_0; }

		//signalExpr=SignalReferenceExpr
		public Assignment getSignalExprAssignment_1_1() { return cSignalExprAssignment_1_1; }

		//SignalReferenceExpr
		public RuleCall getSignalExprSignalReferenceExprParserRuleCall_1_1_0() { return cSignalExprSignalReferenceExprParserRuleCall_1_1_0; }

		//"[" signalExpr=SignalExpression "]"
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_2_0() { return cLeftSquareBracketKeyword_1_2_0; }

		//signalExpr=SignalExpression
		public Assignment getSignalExprAssignment_1_2_1() { return cSignalExprAssignment_1_2_1; }

		//SignalExpression
		public RuleCall getSignalExprSignalExpressionParserRuleCall_1_2_1_0() { return cSignalExprSignalExpressionParserRuleCall_1_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2_2() { return cRightSquareBracketKeyword_1_2_2; }

		//isImmediate?="immediate" (tick=Tick | signalExpr=SignalReferenceExpr | "[" signalExpr=SignalExpression "]")
		public Group getGroup_2() { return cGroup_2; }

		//isImmediate?="immediate"
		public Assignment getIsImmediateAssignment_2_0() { return cIsImmediateAssignment_2_0; }

		//"immediate"
		public Keyword getIsImmediateImmediateKeyword_2_0_0() { return cIsImmediateImmediateKeyword_2_0_0; }

		//(tick=Tick | signalExpr=SignalReferenceExpr | "[" signalExpr=SignalExpression "]")
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }

		//tick=Tick
		public Assignment getTickAssignment_2_1_0() { return cTickAssignment_2_1_0; }

		//Tick
		public RuleCall getTickTickParserRuleCall_2_1_0_0() { return cTickTickParserRuleCall_2_1_0_0; }

		//signalExpr=SignalReferenceExpr
		public Assignment getSignalExprAssignment_2_1_1() { return cSignalExprAssignment_2_1_1; }

		//SignalReferenceExpr
		public RuleCall getSignalExprSignalReferenceExprParserRuleCall_2_1_1_0() { return cSignalExprSignalReferenceExprParserRuleCall_2_1_1_0; }

		//"[" signalExpr=SignalExpression "]"
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_1_2_0() { return cLeftSquareBracketKeyword_2_1_2_0; }

		//signalExpr=SignalExpression
		public Assignment getSignalExprAssignment_2_1_2_1() { return cSignalExprAssignment_2_1_2_1; }

		//SignalExpression
		public RuleCall getSignalExprSignalExpressionParserRuleCall_2_1_2_1_0() { return cSignalExprSignalExpressionParserRuleCall_2_1_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_1_2_2() { return cRightSquareBracketKeyword_2_1_2_2; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBooleanExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cValuedExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// * #########################################################################
		// * 
		// * 
		// * Before the following was an extra plugin named
		// * "KExpressions":  de.cau.cs.kieler.esterel.kexpressions
		// * 
		// * 
		// * #########################################################################
		// * / Expression:
		//	=> BooleanExpression
		//	| ValuedExpression;
		@Override public ParserRule getRule() { return rule; }

		//=> BooleanExpression | ValuedExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//=> BooleanExpression
		public RuleCall getBooleanExpressionParserRuleCall_0() { return cBooleanExpressionParserRuleCall_0; }

		//ValuedExpression
		public RuleCall getValuedExpressionParserRuleCall_1() { return cValuedExpressionParserRuleCall_1; }
	}

	public class BooleanExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.BooleanExpression");
		private final RuleCall cOrExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// Example: not D and C or ?E = 42 or not (A and (B or C))
		//BooleanExpression Expression:
		//	OrExpression
		@Override public ParserRule getRule() { return rule; }

		//OrExpression
		public RuleCall getOrExpressionParserRuleCall() { return cOrExpressionParserRuleCall; }
	}

	public class OrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.OrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionSubExpressionsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorEsterel_OrOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSubExpressionsAndExpressionParserRuleCall_1_2_0 = (RuleCall)cSubExpressionsAssignment_1_2.eContents().get(0);
		
		//// Example: A or B, A and B and C, C and B or D and not E, A and B and C
		//OrExpression Expression:
		//	AndExpression ({OperatorExpression.subExpressions+=current} operator=Esterel_OrOperator
		//	subExpressions+=AndExpression)*
		@Override public ParserRule getRule() { return rule; }

		//AndExpression ({OperatorExpression.subExpressions+=current} operator=Esterel_OrOperator subExpressions+=AndExpression)*
		public Group getGroup() { return cGroup; }

		//AndExpression
		public RuleCall getAndExpressionParserRuleCall_0() { return cAndExpressionParserRuleCall_0; }

		//({OperatorExpression.subExpressions+=current} operator=Esterel_OrOperator subExpressions+=AndExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{OperatorExpression.subExpressions+=current}
		public Action getOperatorExpressionSubExpressionsAction_1_0() { return cOperatorExpressionSubExpressionsAction_1_0; }

		//operator=Esterel_OrOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//Esterel_OrOperator
		public RuleCall getOperatorEsterel_OrOperatorEnumRuleCall_1_1_0() { return cOperatorEsterel_OrOperatorEnumRuleCall_1_1_0; }

		//subExpressions+=AndExpression
		public Assignment getSubExpressionsAssignment_1_2() { return cSubExpressionsAssignment_1_2; }

		//AndExpression
		public RuleCall getSubExpressionsAndExpressionParserRuleCall_1_2_0() { return cSubExpressionsAndExpressionParserRuleCall_1_2_0; }
	}

	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCompareOperationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionSubExpressionsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorEsterel_AndOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSubExpressionsCompareOperationParserRuleCall_1_2_0 = (RuleCall)cSubExpressionsAssignment_1_2.eContents().get(0);
		
		//// Example: A and B, not C and 42 <= ?D
		//AndExpression Expression:
		//	CompareOperation ({OperatorExpression.subExpressions+=current} operator=Esterel_AndOperator
		//	subExpressions+=CompareOperation)*
		@Override public ParserRule getRule() { return rule; }

		//CompareOperation ({OperatorExpression.subExpressions+=current} operator=Esterel_AndOperator
		//subExpressions+=CompareOperation)*
		public Group getGroup() { return cGroup; }

		//CompareOperation
		public RuleCall getCompareOperationParserRuleCall_0() { return cCompareOperationParserRuleCall_0; }

		//({OperatorExpression.subExpressions+=current} operator=Esterel_AndOperator subExpressions+=CompareOperation)*
		public Group getGroup_1() { return cGroup_1; }

		//{OperatorExpression.subExpressions+=current}
		public Action getOperatorExpressionSubExpressionsAction_1_0() { return cOperatorExpressionSubExpressionsAction_1_0; }

		//operator=Esterel_AndOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//Esterel_AndOperator
		public RuleCall getOperatorEsterel_AndOperatorEnumRuleCall_1_1_0() { return cOperatorEsterel_AndOperatorEnumRuleCall_1_1_0; }

		//subExpressions+=CompareOperation
		public Assignment getSubExpressionsAssignment_1_2() { return cSubExpressionsAssignment_1_2; }

		//CompareOperation
		public RuleCall getSubExpressionsCompareOperationParserRuleCall_1_2_0() { return cSubExpressionsCompareOperationParserRuleCall_1_2_0; }
	}

	public class CompareOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.CompareOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cNotOrValuedExpressionParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Action cOperatorExpressionSubExpressionsAction_0_1_0 = (Action)cGroup_0_1.eContents().get(0);
		private final Assignment cOperatorAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cOperatorEsterel_CompareOperatorEnumRuleCall_0_1_1_0 = (RuleCall)cOperatorAssignment_0_1_1.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final RuleCall cSubExpressionsNotOrValuedExpressionParserRuleCall_0_1_2_0 = (RuleCall)cSubExpressionsAssignment_0_1_2.eContents().get(0);
		private final RuleCall cNotExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Example: 42 <= ?A
		//CompareOperation Expression:
		//	=> NotOrValuedExpression ({OperatorExpression.subExpressions+=current} operator=Esterel_CompareOperator
		//	subExpressions+=NotOrValuedExpression) | NotExpression
		@Override public ParserRule getRule() { return rule; }

		//=> NotOrValuedExpression ({OperatorExpression.subExpressions+=current} operator=Esterel_CompareOperator
		//subExpressions+=NotOrValuedExpression) | NotExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//=> NotOrValuedExpression ({OperatorExpression.subExpressions+=current} operator=Esterel_CompareOperator
		//subExpressions+=NotOrValuedExpression)
		public Group getGroup_0() { return cGroup_0; }

		//=> NotOrValuedExpression
		public RuleCall getNotOrValuedExpressionParserRuleCall_0_0() { return cNotOrValuedExpressionParserRuleCall_0_0; }

		//({OperatorExpression.subExpressions+=current} operator=Esterel_CompareOperator subExpressions+=NotOrValuedExpression)
		public Group getGroup_0_1() { return cGroup_0_1; }

		//{OperatorExpression.subExpressions+=current}
		public Action getOperatorExpressionSubExpressionsAction_0_1_0() { return cOperatorExpressionSubExpressionsAction_0_1_0; }

		//operator=Esterel_CompareOperator
		public Assignment getOperatorAssignment_0_1_1() { return cOperatorAssignment_0_1_1; }

		//Esterel_CompareOperator
		public RuleCall getOperatorEsterel_CompareOperatorEnumRuleCall_0_1_1_0() { return cOperatorEsterel_CompareOperatorEnumRuleCall_0_1_1_0; }

		//subExpressions+=NotOrValuedExpression
		public Assignment getSubExpressionsAssignment_0_1_2() { return cSubExpressionsAssignment_0_1_2; }

		//NotOrValuedExpression
		public RuleCall getSubExpressionsNotOrValuedExpressionParserRuleCall_0_1_2_0() { return cSubExpressionsNotOrValuedExpressionParserRuleCall_0_1_2_0; }

		//NotExpression
		public RuleCall getNotExpressionParserRuleCall_1() { return cNotExpressionParserRuleCall_1; }
	}

	public class NotOrValuedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.NotOrValuedExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValuedExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNotExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// order IS IMPORTANT
		//NotOrValuedExpression Expression:
		//	=> ValuedExpression
		//	| NotExpression
		@Override public ParserRule getRule() { return rule; }

		//=> ValuedExpression | NotExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//=> ValuedExpression
		public RuleCall getValuedExpressionParserRuleCall_0() { return cValuedExpressionParserRuleCall_0; }

		//NotExpression
		public RuleCall getNotExpressionParserRuleCall_1() { return cNotExpressionParserRuleCall_1; }
	}

	public class NotExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.NotExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cOperatorExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOperatorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOperatorEsterel_NotOperatorEnumRuleCall_0_1_0 = (RuleCall)cOperatorAssignment_0_1.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cSubExpressionsNotExpressionParserRuleCall_0_2_0 = (RuleCall)cSubExpressionsAssignment_0_2.eContents().get(0);
		private final RuleCall cAtomicExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Example: not A, not false, not (A or B)
		//// at the latter we need the parans to indicate the right binding
		//NotExpression Expression:
		//	{OperatorExpression} operator=Esterel_NotOperator
		//	subExpressions+=NotExpression | AtomicExpression
		@Override public ParserRule getRule() { return rule; }

		//{OperatorExpression} operator=Esterel_NotOperator subExpressions+=NotExpression | AtomicExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//{OperatorExpression} operator=Esterel_NotOperator subExpressions+=NotExpression
		public Group getGroup_0() { return cGroup_0; }

		//{OperatorExpression}
		public Action getOperatorExpressionAction_0_0() { return cOperatorExpressionAction_0_0; }

		//operator=Esterel_NotOperator
		public Assignment getOperatorAssignment_0_1() { return cOperatorAssignment_0_1; }

		//Esterel_NotOperator
		public RuleCall getOperatorEsterel_NotOperatorEnumRuleCall_0_1_0() { return cOperatorEsterel_NotOperatorEnumRuleCall_0_1_0; }

		//subExpressions+=NotExpression
		public Assignment getSubExpressionsAssignment_0_2() { return cSubExpressionsAssignment_0_2; }

		//NotExpression
		public RuleCall getSubExpressionsNotExpressionParserRuleCall_0_2_0() { return cSubExpressionsNotExpressionParserRuleCall_0_2_0; }

		//AtomicExpression
		public RuleCall getAtomicExpressionParserRuleCall_1() { return cAtomicExpressionParserRuleCall_1; }
	}

	public class ValuedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.ValuedExpression");
		private final RuleCall cAddExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// everything that evaluates to a primitive number value
		//ValuedExpression Expression:
		//	AddExpression
		@Override public ParserRule getRule() { return rule; }

		//AddExpression
		public RuleCall getAddExpressionParserRuleCall() { return cAddExpressionParserRuleCall; }
	}

	public class AddExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.AddExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSubExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionSubExpressionsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorEsterel_AddOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSubExpressionsSubExpressionParserRuleCall_1_2_0 = (RuleCall)cSubExpressionsAssignment_1_2.eContents().get(0);
		
		//// Example: 1 + 2
		//AddExpression Expression:
		//	SubExpression ({OperatorExpression.subExpressions+=current} operator=Esterel_AddOperator
		//	subExpressions+=SubExpression)*
		@Override public ParserRule getRule() { return rule; }

		//SubExpression ({OperatorExpression.subExpressions+=current} operator=Esterel_AddOperator subExpressions+=SubExpression)*
		public Group getGroup() { return cGroup; }

		//SubExpression
		public RuleCall getSubExpressionParserRuleCall_0() { return cSubExpressionParserRuleCall_0; }

		//({OperatorExpression.subExpressions+=current} operator=Esterel_AddOperator subExpressions+=SubExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{OperatorExpression.subExpressions+=current}
		public Action getOperatorExpressionSubExpressionsAction_1_0() { return cOperatorExpressionSubExpressionsAction_1_0; }

		//operator=Esterel_AddOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//Esterel_AddOperator
		public RuleCall getOperatorEsterel_AddOperatorEnumRuleCall_1_1_0() { return cOperatorEsterel_AddOperatorEnumRuleCall_1_1_0; }

		//subExpressions+=SubExpression
		public Assignment getSubExpressionsAssignment_1_2() { return cSubExpressionsAssignment_1_2; }

		//SubExpression
		public RuleCall getSubExpressionsSubExpressionParserRuleCall_1_2_0() { return cSubExpressionsSubExpressionParserRuleCall_1_2_0; }
	}

	public class SubExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.SubExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionSubExpressionsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorEsterel_SubOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSubExpressionsMultExpressionParserRuleCall_1_2_0 = (RuleCall)cSubExpressionsAssignment_1_2.eContents().get(0);
		
		//// Example: varA - ?B
		//SubExpression Expression:
		//	MultExpression ({OperatorExpression.subExpressions+=current} operator=Esterel_SubOperator
		//	subExpressions+=MultExpression)*
		@Override public ParserRule getRule() { return rule; }

		//MultExpression ({OperatorExpression.subExpressions+=current} operator=Esterel_SubOperator
		//subExpressions+=MultExpression)*
		public Group getGroup() { return cGroup; }

		//MultExpression
		public RuleCall getMultExpressionParserRuleCall_0() { return cMultExpressionParserRuleCall_0; }

		//({OperatorExpression.subExpressions+=current} operator=Esterel_SubOperator subExpressions+=MultExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{OperatorExpression.subExpressions+=current}
		public Action getOperatorExpressionSubExpressionsAction_1_0() { return cOperatorExpressionSubExpressionsAction_1_0; }

		//operator=Esterel_SubOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//Esterel_SubOperator
		public RuleCall getOperatorEsterel_SubOperatorEnumRuleCall_1_1_0() { return cOperatorEsterel_SubOperatorEnumRuleCall_1_1_0; }

		//subExpressions+=MultExpression
		public Assignment getSubExpressionsAssignment_1_2() { return cSubExpressionsAssignment_1_2; }

		//MultExpression
		public RuleCall getSubExpressionsMultExpressionParserRuleCall_1_2_0() { return cSubExpressionsMultExpressionParserRuleCall_1_2_0; }
	}

	public class MultExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.MultExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDivExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionSubExpressionsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorEsterel_MultOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSubExpressionsDivExpressionParserRuleCall_1_2_0 = (RuleCall)cSubExpressionsAssignment_1_2.eContents().get(0);
		
		//// Example: 2 * 4
		//MultExpression Expression:
		//	DivExpression ({OperatorExpression.subExpressions+=current} operator=Esterel_MultOperator
		//	subExpressions+=DivExpression)*
		@Override public ParserRule getRule() { return rule; }

		//DivExpression ({OperatorExpression.subExpressions+=current} operator=Esterel_MultOperator
		//subExpressions+=DivExpression)*
		public Group getGroup() { return cGroup; }

		//DivExpression
		public RuleCall getDivExpressionParserRuleCall_0() { return cDivExpressionParserRuleCall_0; }

		//({OperatorExpression.subExpressions+=current} operator=Esterel_MultOperator subExpressions+=DivExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{OperatorExpression.subExpressions+=current}
		public Action getOperatorExpressionSubExpressionsAction_1_0() { return cOperatorExpressionSubExpressionsAction_1_0; }

		//operator=Esterel_MultOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//Esterel_MultOperator
		public RuleCall getOperatorEsterel_MultOperatorEnumRuleCall_1_1_0() { return cOperatorEsterel_MultOperatorEnumRuleCall_1_1_0; }

		//subExpressions+=DivExpression
		public Assignment getSubExpressionsAssignment_1_2() { return cSubExpressionsAssignment_1_2; }

		//DivExpression
		public RuleCall getSubExpressionsDivExpressionParserRuleCall_1_2_0() { return cSubExpressionsDivExpressionParserRuleCall_1_2_0; }
	}

	public class DivExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.DivExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cModExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionSubExpressionsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorEsterel_DivOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSubExpressionsModExpressionParserRuleCall_1_2_0 = (RuleCall)cSubExpressionsAssignment_1_2.eContents().get(0);
		
		//// Example: (2 / 4)
		//// note: division always has to have parantheses because the '/' sign is also used for trigger/effect delimiter
		//DivExpression Expression:
		//	ModExpression ({OperatorExpression.subExpressions+=current} operator=Esterel_DivOperator
		//	subExpressions+=ModExpression)?
		@Override public ParserRule getRule() { return rule; }

		//ModExpression ({OperatorExpression.subExpressions+=current} operator=Esterel_DivOperator subExpressions+=ModExpression)?
		public Group getGroup() { return cGroup; }

		//ModExpression
		public RuleCall getModExpressionParserRuleCall_0() { return cModExpressionParserRuleCall_0; }

		//({OperatorExpression.subExpressions+=current} operator=Esterel_DivOperator subExpressions+=ModExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//{OperatorExpression.subExpressions+=current}
		public Action getOperatorExpressionSubExpressionsAction_1_0() { return cOperatorExpressionSubExpressionsAction_1_0; }

		//operator=Esterel_DivOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//Esterel_DivOperator
		public RuleCall getOperatorEsterel_DivOperatorEnumRuleCall_1_1_0() { return cOperatorEsterel_DivOperatorEnumRuleCall_1_1_0; }

		//subExpressions+=ModExpression
		public Assignment getSubExpressionsAssignment_1_2() { return cSubExpressionsAssignment_1_2; }

		//ModExpression
		public RuleCall getSubExpressionsModExpressionParserRuleCall_1_2_0() { return cSubExpressionsModExpressionParserRuleCall_1_2_0; }
	}

	public class ModExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.ModExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNegExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperatorExpressionSubExpressionsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorEsterel_ModOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSubExpressionsAtomicValuedExpressionParserRuleCall_1_2_0 = (RuleCall)cSubExpressionsAssignment_1_2.eContents().get(0);
		
		//// Example: varA mod ?B
		//ModExpression Expression:
		//	NegExpression ({OperatorExpression.subExpressions+=current} operator=Esterel_ModOperator
		//	subExpressions+=AtomicValuedExpression)?
		@Override public ParserRule getRule() { return rule; }

		//NegExpression ({OperatorExpression.subExpressions+=current} operator=Esterel_ModOperator
		//subExpressions+=AtomicValuedExpression)?
		public Group getGroup() { return cGroup; }

		//NegExpression
		public RuleCall getNegExpressionParserRuleCall_0() { return cNegExpressionParserRuleCall_0; }

		//({OperatorExpression.subExpressions+=current} operator=Esterel_ModOperator subExpressions+=AtomicValuedExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//{OperatorExpression.subExpressions+=current}
		public Action getOperatorExpressionSubExpressionsAction_1_0() { return cOperatorExpressionSubExpressionsAction_1_0; }

		//operator=Esterel_ModOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//Esterel_ModOperator
		public RuleCall getOperatorEsterel_ModOperatorEnumRuleCall_1_1_0() { return cOperatorEsterel_ModOperatorEnumRuleCall_1_1_0; }

		//subExpressions+=AtomicValuedExpression
		public Assignment getSubExpressionsAssignment_1_2() { return cSubExpressionsAssignment_1_2; }

		//AtomicValuedExpression
		public RuleCall getSubExpressionsAtomicValuedExpressionParserRuleCall_1_2_0() { return cSubExpressionsAtomicValuedExpressionParserRuleCall_1_2_0; }
	}

	public class NegExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.NegExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cOperatorExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOperatorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOperatorEsterel_SubOperatorEnumRuleCall_0_1_0 = (RuleCall)cOperatorAssignment_0_1.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cSubExpressionsNegExpressionParserRuleCall_0_2_0 = (RuleCall)cSubExpressionsAssignment_0_2.eContents().get(0);
		private final RuleCall cAtomicValuedExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Example: not A, not false, not (A or B)
		//// at the latter we need the parans to indicate the right binding
		//NegExpression Expression:
		//	{OperatorExpression} operator=Esterel_SubOperator
		//	subExpressions+=NegExpression | AtomicValuedExpression
		@Override public ParserRule getRule() { return rule; }

		//{OperatorExpression} operator=Esterel_SubOperator subExpressions+=NegExpression | AtomicValuedExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//{OperatorExpression} operator=Esterel_SubOperator subExpressions+=NegExpression
		public Group getGroup_0() { return cGroup_0; }

		//{OperatorExpression}
		public Action getOperatorExpressionAction_0_0() { return cOperatorExpressionAction_0_0; }

		//operator=Esterel_SubOperator
		public Assignment getOperatorAssignment_0_1() { return cOperatorAssignment_0_1; }

		//Esterel_SubOperator
		public RuleCall getOperatorEsterel_SubOperatorEnumRuleCall_0_1_0() { return cOperatorEsterel_SubOperatorEnumRuleCall_0_1_0; }

		//subExpressions+=NegExpression
		public Assignment getSubExpressionsAssignment_0_2() { return cSubExpressionsAssignment_0_2; }

		//NegExpression
		public RuleCall getSubExpressionsNegExpressionParserRuleCall_0_2_0() { return cSubExpressionsNegExpressionParserRuleCall_0_2_0; }

		//AtomicValuedExpression
		public RuleCall getAtomicValuedExpressionParserRuleCall_1() { return cAtomicValuedExpressionParserRuleCall_1; }
	}

	public class AtomicValuedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.AtomicValuedExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEsterel_IntValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFloatValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cValuedExpressionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final RuleCall cAtomicExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//AtomicValuedExpression Expression:
		//	Esterel_IntValue
		//	| FloatValue
		//	//    | '(' DivExpression ')'
		//	| => '(' ValuedExpression ')'
		//	| AtomicExpression
		@Override public ParserRule getRule() { return rule; }

		//Esterel_IntValue | FloatValue //    | '(' DivExpression ')'
		//| => '(' ValuedExpression ')' | AtomicExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//Esterel_IntValue
		public RuleCall getEsterel_IntValueParserRuleCall_0() { return cEsterel_IntValueParserRuleCall_0; }

		//FloatValue
		public RuleCall getFloatValueParserRuleCall_1() { return cFloatValueParserRuleCall_1; }

		//=> '(' ValuedExpression ')'
		public Group getGroup_2() { return cGroup_2; }

		//=> '('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//ValuedExpression
		public RuleCall getValuedExpressionParserRuleCall_2_1() { return cValuedExpressionParserRuleCall_2_1; }

		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }

		//AtomicExpression
		public RuleCall getAtomicExpressionParserRuleCall_3() { return cAtomicExpressionParserRuleCall_3; }
	}

	public class ValuedObjectTestExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.ValuedObjectTestExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cOperatorExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOperatorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOperatorEsterel_PreOperatorEnumRuleCall_0_1_0 = (RuleCall)cOperatorAssignment_0_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cSubExpressionsAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cSubExpressionsValuedObjectTestExpressionParserRuleCall_0_3_0 = (RuleCall)cSubExpressionsAssignment_0_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cOperatorExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorEsterel_ValueTestOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSubExpressionsEsterel_ValuedObjectReferenceParserRuleCall_1_2_0 = (RuleCall)cSubExpressionsAssignment_1_2.eContents().get(0);
		private final RuleCall cEsterel_ValuedObjectReferenceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//// Example: pre(pre(?A)), pre(pre(A)), ?A, A varX
		//ValuedObjectTestExpression Expression:
		//	{OperatorExpression} operator=Esterel_PreOperator '(' subExpressions+=ValuedObjectTestExpression ')'
		//	| {OperatorExpression} operator=Esterel_ValueTestOperator subExpressions+=Esterel_ValuedObjectReference
		//	| Esterel_ValuedObjectReference
		@Override public ParserRule getRule() { return rule; }

		//{OperatorExpression} operator=Esterel_PreOperator '(' subExpressions+=ValuedObjectTestExpression ')' |
		//{OperatorExpression} operator=Esterel_ValueTestOperator subExpressions+=Esterel_ValuedObjectReference |
		//Esterel_ValuedObjectReference
		public Alternatives getAlternatives() { return cAlternatives; }

		//{OperatorExpression} operator=Esterel_PreOperator '(' subExpressions+=ValuedObjectTestExpression ')'
		public Group getGroup_0() { return cGroup_0; }

		//{OperatorExpression}
		public Action getOperatorExpressionAction_0_0() { return cOperatorExpressionAction_0_0; }

		//operator=Esterel_PreOperator
		public Assignment getOperatorAssignment_0_1() { return cOperatorAssignment_0_1; }

		//Esterel_PreOperator
		public RuleCall getOperatorEsterel_PreOperatorEnumRuleCall_0_1_0() { return cOperatorEsterel_PreOperatorEnumRuleCall_0_1_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_0_2() { return cLeftParenthesisKeyword_0_2; }

		//subExpressions+=ValuedObjectTestExpression
		public Assignment getSubExpressionsAssignment_0_3() { return cSubExpressionsAssignment_0_3; }

		//ValuedObjectTestExpression
		public RuleCall getSubExpressionsValuedObjectTestExpressionParserRuleCall_0_3_0() { return cSubExpressionsValuedObjectTestExpressionParserRuleCall_0_3_0; }

		//')'
		public Keyword getRightParenthesisKeyword_0_4() { return cRightParenthesisKeyword_0_4; }

		//{OperatorExpression} operator=Esterel_ValueTestOperator subExpressions+=Esterel_ValuedObjectReference
		public Group getGroup_1() { return cGroup_1; }

		//{OperatorExpression}
		public Action getOperatorExpressionAction_1_0() { return cOperatorExpressionAction_1_0; }

		//operator=Esterel_ValueTestOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//Esterel_ValueTestOperator
		public RuleCall getOperatorEsterel_ValueTestOperatorEnumRuleCall_1_1_0() { return cOperatorEsterel_ValueTestOperatorEnumRuleCall_1_1_0; }

		//subExpressions+=Esterel_ValuedObjectReference
		public Assignment getSubExpressionsAssignment_1_2() { return cSubExpressionsAssignment_1_2; }

		//Esterel_ValuedObjectReference
		public RuleCall getSubExpressionsEsterel_ValuedObjectReferenceParserRuleCall_1_2_0() { return cSubExpressionsEsterel_ValuedObjectReferenceParserRuleCall_1_2_0; }

		//Esterel_ValuedObjectReference
		public RuleCall getEsterel_ValuedObjectReferenceParserRuleCall_2() { return cEsterel_ValuedObjectReferenceParserRuleCall_2; }
	}

	public class Esterel_ValuedObjectReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Esterel_ValuedObjectReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEsterel_ValuedObjectReferenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValuedObjectAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cValuedObjectValuedObjectCrossReference_1_0 = (CrossReference)cValuedObjectAssignment_1.eContents().get(0);
		private final RuleCall cValuedObjectValuedObjectIDTerminalRuleCall_1_0_1 = (RuleCall)cValuedObjectValuedObjectCrossReference_1_0.eContents().get(1);
		
		//// Example: A, varB
		//Esterel_ValuedObjectReference ValuedObjectReference:
		//	{Esterel_ValuedObjectReference} valuedObject=[ValuedObject]
		@Override public ParserRule getRule() { return rule; }

		//{Esterel_ValuedObjectReference} valuedObject=[ValuedObject]
		public Group getGroup() { return cGroup; }

		//{Esterel_ValuedObjectReference}
		public Action getEsterel_ValuedObjectReferenceAction_0() { return cEsterel_ValuedObjectReferenceAction_0; }

		//valuedObject=[ValuedObject]
		public Assignment getValuedObjectAssignment_1() { return cValuedObjectAssignment_1; }

		//[ValuedObject]
		public CrossReference getValuedObjectValuedObjectCrossReference_1_0() { return cValuedObjectValuedObjectCrossReference_1_0; }

		//ID
		public RuleCall getValuedObjectValuedObjectIDTerminalRuleCall_1_0_1() { return cValuedObjectValuedObjectIDTerminalRuleCall_1_0_1; }
	}

	public class TextExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.TextExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCodeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCodeHOSTCODETerminalRuleCall_0_0 = (RuleCall)cCodeAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeIDTerminalRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//// Example: 'printf(...)'(C)
		//TextExpression:
		//	code=HOSTCODE ("(" type=ID ")")?;
		@Override public ParserRule getRule() { return rule; }

		//code=HOSTCODE ("(" type=ID ")")?
		public Group getGroup() { return cGroup; }

		//code=HOSTCODE
		public Assignment getCodeAssignment_0() { return cCodeAssignment_0; }

		//HOSTCODE
		public RuleCall getCodeHOSTCODETerminalRuleCall_0_0() { return cCodeHOSTCODETerminalRuleCall_0_0; }

		//("(" type=ID ")")?
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//type=ID
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_1_1_0() { return cTypeIDTerminalRuleCall_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class Esterel_IntValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Esterel_IntValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//Esterel_IntValue IntValue:
		//	value=INT
		@Override public ParserRule getRule() { return rule; }

		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}

	public class FloatValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.FloatValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueFLOATTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//FloatValue:
		//	value=FLOAT;
		@Override public ParserRule getRule() { return rule; }

		//value=FLOAT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//FLOAT
		public RuleCall getValueFLOATTerminalRuleCall_0() { return cValueFLOATTerminalRuleCall_0; }
	}

	public class BooleanValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.BooleanValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueBOOLEANTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//BooleanValue:
		//	value=BOOLEAN;
		@Override public ParserRule getRule() { return rule; }

		//value=BOOLEAN
		public Assignment getValueAssignment() { return cValueAssignment; }

		//BOOLEAN
		public RuleCall getValueBOOLEANTerminalRuleCall_0() { return cValueBOOLEANTerminalRuleCall_0; }
	}

	public class AnyTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.AnyType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBOOLEANTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFLOATTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIDTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSTRINGTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//// data type rule allowing any kind of value to be accepted,
		//// e.g. as initialValues of valuedObjects
		//// used in Kits.xtext 
		//AnyType:
		//	BOOLEAN | INT | FLOAT | ID | STRING;
		@Override public ParserRule getRule() { return rule; }

		//BOOLEAN | INT | FLOAT | ID | STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//BOOLEAN
		public RuleCall getBOOLEANTerminalRuleCall_0() { return cBOOLEANTerminalRuleCall_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//FLOAT
		public RuleCall getFLOATTerminalRuleCall_2() { return cFLOATTerminalRuleCall_2; }

		//ID
		public RuleCall getIDTerminalRuleCall_3() { return cIDTerminalRuleCall_3; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_4() { return cSTRINGTerminalRuleCall_4; }
	}
	
	
	public class Esterel_CompareOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Esterel_CompareOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEQEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEQEqualsSignKeyword_0_0 = (Keyword)cEQEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLTLessThanSignKeyword_1_0 = (Keyword)cLTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLEQEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLEQLessThanSignEqualsSignKeyword_2_0 = (Keyword)cLEQEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGTGreaterThanSignKeyword_3_0 = (Keyword)cGTEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cGEQEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cGEQGreaterThanSignEqualsSignKeyword_4_0 = (Keyword)cGEQEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cNEEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cNELessThanSignGreaterThanSignKeyword_5_0 = (Keyword)cNEEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum Esterel_CompareOperator returns OperatorType:
		//	EQ="=" | LT="<" | LEQ="<=" | GT=">" | GEQ=">=" | NE="<>";
		public EnumRule getRule() { return rule; }

		//EQ="=" | LT="<" | LEQ="<=" | GT=">" | GEQ=">=" | NE="<>"
		public Alternatives getAlternatives() { return cAlternatives; }

		//EQ="="
		public EnumLiteralDeclaration getEQEnumLiteralDeclaration_0() { return cEQEnumLiteralDeclaration_0; }

		//"="
		public Keyword getEQEqualsSignKeyword_0_0() { return cEQEqualsSignKeyword_0_0; }

		//LT="<"
		public EnumLiteralDeclaration getLTEnumLiteralDeclaration_1() { return cLTEnumLiteralDeclaration_1; }

		//"<"
		public Keyword getLTLessThanSignKeyword_1_0() { return cLTLessThanSignKeyword_1_0; }

		//LEQ="<="
		public EnumLiteralDeclaration getLEQEnumLiteralDeclaration_2() { return cLEQEnumLiteralDeclaration_2; }

		//"<="
		public Keyword getLEQLessThanSignEqualsSignKeyword_2_0() { return cLEQLessThanSignEqualsSignKeyword_2_0; }

		//GT=">"
		public EnumLiteralDeclaration getGTEnumLiteralDeclaration_3() { return cGTEnumLiteralDeclaration_3; }

		//">"
		public Keyword getGTGreaterThanSignKeyword_3_0() { return cGTGreaterThanSignKeyword_3_0; }

		//GEQ=">="
		public EnumLiteralDeclaration getGEQEnumLiteralDeclaration_4() { return cGEQEnumLiteralDeclaration_4; }

		//">="
		public Keyword getGEQGreaterThanSignEqualsSignKeyword_4_0() { return cGEQGreaterThanSignEqualsSignKeyword_4_0; }

		//NE="<>"
		public EnumLiteralDeclaration getNEEnumLiteralDeclaration_5() { return cNEEnumLiteralDeclaration_5; }

		//"<>"
		public Keyword getNELessThanSignGreaterThanSignKeyword_5_0() { return cNELessThanSignGreaterThanSignKeyword_5_0; }
	}

	public class Esterel_PreOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Esterel_PreOperator");
		private final EnumLiteralDeclaration cPREEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cPREPreKeyword_0 = (Keyword)cPREEnumLiteralDeclaration.eContents().get(0);
		
		//enum Esterel_PreOperator returns OperatorType:
		//	PRE="pre";
		public EnumRule getRule() { return rule; }

		//PRE="pre"
		public EnumLiteralDeclaration getPREEnumLiteralDeclaration() { return cPREEnumLiteralDeclaration; }

		//"pre"
		public Keyword getPREPreKeyword_0() { return cPREPreKeyword_0; }
	}

	public class Esterel_OrOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Esterel_OrOperator");
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cOROrKeyword_0 = (Keyword)cOREnumLiteralDeclaration.eContents().get(0);
		
		//enum Esterel_OrOperator returns OperatorType:
		//	OR="or";
		public EnumRule getRule() { return rule; }

		//OR="or"
		public EnumLiteralDeclaration getOREnumLiteralDeclaration() { return cOREnumLiteralDeclaration; }

		//"or"
		public Keyword getOROrKeyword_0() { return cOROrKeyword_0; }
	}

	public class Esterel_AndOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Esterel_AndOperator");
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cANDAndKeyword_0 = (Keyword)cANDEnumLiteralDeclaration.eContents().get(0);
		
		//enum Esterel_AndOperator returns OperatorType:
		//	AND="and";
		public EnumRule getRule() { return rule; }

		//AND="and"
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration() { return cANDEnumLiteralDeclaration; }

		//"and"
		public Keyword getANDAndKeyword_0() { return cANDAndKeyword_0; }
	}

	public class Esterel_NotOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Esterel_NotOperator");
		private final EnumLiteralDeclaration cNOTEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cNOTNotKeyword_0 = (Keyword)cNOTEnumLiteralDeclaration.eContents().get(0);
		
		//enum Esterel_NotOperator returns OperatorType:
		//	NOT="not";
		public EnumRule getRule() { return rule; }

		//NOT="not"
		public EnumLiteralDeclaration getNOTEnumLiteralDeclaration() { return cNOTEnumLiteralDeclaration; }

		//"not"
		public Keyword getNOTNotKeyword_0() { return cNOTNotKeyword_0; }
	}

	public class Esterel_AddOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Esterel_AddOperator");
		private final EnumLiteralDeclaration cADDEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cADDPlusSignKeyword_0 = (Keyword)cADDEnumLiteralDeclaration.eContents().get(0);
		
		//enum Esterel_AddOperator returns OperatorType:
		//	ADD="+";
		public EnumRule getRule() { return rule; }

		//ADD="+"
		public EnumLiteralDeclaration getADDEnumLiteralDeclaration() { return cADDEnumLiteralDeclaration; }

		//"+"
		public Keyword getADDPlusSignKeyword_0() { return cADDPlusSignKeyword_0; }
	}

	public class Esterel_SubOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Esterel_SubOperator");
		private final EnumLiteralDeclaration cSUBEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cSUBHyphenMinusKeyword_0 = (Keyword)cSUBEnumLiteralDeclaration.eContents().get(0);
		
		//enum Esterel_SubOperator returns OperatorType:
		//	SUB="-";
		public EnumRule getRule() { return rule; }

		//SUB="-"
		public EnumLiteralDeclaration getSUBEnumLiteralDeclaration() { return cSUBEnumLiteralDeclaration; }

		//"-"
		public Keyword getSUBHyphenMinusKeyword_0() { return cSUBHyphenMinusKeyword_0; }
	}

	public class Esterel_MultOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Esterel_MultOperator");
		private final EnumLiteralDeclaration cMULTEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cMULTAsteriskKeyword_0 = (Keyword)cMULTEnumLiteralDeclaration.eContents().get(0);
		
		//enum Esterel_MultOperator returns OperatorType:
		//	MULT="*";
		public EnumRule getRule() { return rule; }

		//MULT="*"
		public EnumLiteralDeclaration getMULTEnumLiteralDeclaration() { return cMULTEnumLiteralDeclaration; }

		//"*"
		public Keyword getMULTAsteriskKeyword_0() { return cMULTAsteriskKeyword_0; }
	}

	public class Esterel_ModOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Esterel_ModOperator");
		private final EnumLiteralDeclaration cMODEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cMODModKeyword_0 = (Keyword)cMODEnumLiteralDeclaration.eContents().get(0);
		
		//enum Esterel_ModOperator returns OperatorType:
		//	MOD="mod";
		public EnumRule getRule() { return rule; }

		//MOD="mod"
		public EnumLiteralDeclaration getMODEnumLiteralDeclaration() { return cMODEnumLiteralDeclaration; }

		//"mod"
		public Keyword getMODModKeyword_0() { return cMODModKeyword_0; }
	}

	public class Esterel_DivOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Esterel_DivOperator");
		private final EnumLiteralDeclaration cDIVEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cDIVSolidusKeyword_0 = (Keyword)cDIVEnumLiteralDeclaration.eContents().get(0);
		
		//enum Esterel_DivOperator returns OperatorType:
		//	DIV="/";
		public EnumRule getRule() { return rule; }

		//DIV="/"
		public EnumLiteralDeclaration getDIVEnumLiteralDeclaration() { return cDIVEnumLiteralDeclaration; }

		//"/"
		public Keyword getDIVSolidusKeyword_0() { return cDIVSolidusKeyword_0; }
	}

	public class Esterel_ValueTestOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Esterel_ValueTestOperator");
		private final EnumLiteralDeclaration cVALEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cVALQuestionMarkKeyword_0 = (Keyword)cVALEnumLiteralDeclaration.eContents().get(0);
		
		//enum Esterel_ValueTestOperator returns OperatorType:
		//	VAL="?";
		public EnumRule getRule() { return rule; }

		//VAL="?"
		public EnumLiteralDeclaration getVALEnumLiteralDeclaration() { return cVALEnumLiteralDeclaration; }

		//"?"
		public Keyword getVALQuestionMarkKeyword_0() { return cVALQuestionMarkKeyword_0; }
	}

	public class Esterel_ValueTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Esterel_ValueType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPUREEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPUREPureKeyword_0_0 = (Keyword)cPUREEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBOOLEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBOOLBooleanKeyword_1_0 = (Keyword)cBOOLEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cUNSIGNEDEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cUNSIGNEDUnsignedKeyword_2_0 = (Keyword)cUNSIGNEDEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cINTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cINTIntegerKeyword_3_0 = (Keyword)cINTEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cFLOATEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cFLOATFloatKeyword_4_0 = (Keyword)cFLOATEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cDOUBLEEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cDOUBLEDoubleKeyword_5_0 = (Keyword)cDOUBLEEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cSTRINGEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cSTRINGStringKeyword_6_0 = (Keyword)cSTRINGEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cHOSTEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cHOSTHostKeyword_7_0 = (Keyword)cHOSTEnumLiteralDeclaration_7.eContents().get(0);
		
		//enum Esterel_ValueType returns ValueType:
		//	PURE="pure" | BOOL="boolean" | UNSIGNED="unsigned" |
		//	INT="integer" | FLOAT="float" | DOUBLE="double" |
		//	STRING="string" | HOST="host";
		public EnumRule getRule() { return rule; }

		//PURE="pure" | BOOL="boolean" | UNSIGNED="unsigned" | INT="integer" | FLOAT="float" | DOUBLE="double" | STRING="string" |
		//HOST="host"
		public Alternatives getAlternatives() { return cAlternatives; }

		//PURE="pure"
		public EnumLiteralDeclaration getPUREEnumLiteralDeclaration_0() { return cPUREEnumLiteralDeclaration_0; }

		//"pure"
		public Keyword getPUREPureKeyword_0_0() { return cPUREPureKeyword_0_0; }

		//BOOL="boolean"
		public EnumLiteralDeclaration getBOOLEnumLiteralDeclaration_1() { return cBOOLEnumLiteralDeclaration_1; }

		//"boolean"
		public Keyword getBOOLBooleanKeyword_1_0() { return cBOOLBooleanKeyword_1_0; }

		//UNSIGNED="unsigned"
		public EnumLiteralDeclaration getUNSIGNEDEnumLiteralDeclaration_2() { return cUNSIGNEDEnumLiteralDeclaration_2; }

		//"unsigned"
		public Keyword getUNSIGNEDUnsignedKeyword_2_0() { return cUNSIGNEDUnsignedKeyword_2_0; }

		//INT="integer"
		public EnumLiteralDeclaration getINTEnumLiteralDeclaration_3() { return cINTEnumLiteralDeclaration_3; }

		//"integer"
		public Keyword getINTIntegerKeyword_3_0() { return cINTIntegerKeyword_3_0; }

		//FLOAT="float"
		public EnumLiteralDeclaration getFLOATEnumLiteralDeclaration_4() { return cFLOATEnumLiteralDeclaration_4; }

		//"float"
		public Keyword getFLOATFloatKeyword_4_0() { return cFLOATFloatKeyword_4_0; }

		//DOUBLE="double"
		public EnumLiteralDeclaration getDOUBLEEnumLiteralDeclaration_5() { return cDOUBLEEnumLiteralDeclaration_5; }

		//"double"
		public Keyword getDOUBLEDoubleKeyword_5_0() { return cDOUBLEDoubleKeyword_5_0; }

		//STRING="string"
		public EnumLiteralDeclaration getSTRINGEnumLiteralDeclaration_6() { return cSTRINGEnumLiteralDeclaration_6; }

		//"string"
		public Keyword getSTRINGStringKeyword_6_0() { return cSTRINGStringKeyword_6_0; }

		//HOST="host"
		public EnumLiteralDeclaration getHOSTEnumLiteralDeclaration_7() { return cHOSTEnumLiteralDeclaration_7; }

		//"host"
		public Keyword getHOSTHostKeyword_7_0() { return cHOSTHostKeyword_7_0; }
	}

	public class Esterel_CombineOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.Esterel_CombineOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNONEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNONENoneKeyword_0_0 = (Keyword)cNONEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cADDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cADDPlusSignKeyword_1_0 = (Keyword)cADDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMULTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMULTAsteriskKeyword_2_0 = (Keyword)cMULTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cMAXEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cMAXMaxKeyword_3_0 = (Keyword)cMAXEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cMINEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cMINMinKeyword_4_0 = (Keyword)cMINEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cOROrKeyword_5_0 = (Keyword)cOREnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cANDAndKeyword_6_0 = (Keyword)cANDEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cHOSTEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cHOSTHostKeyword_7_0 = (Keyword)cHOSTEnumLiteralDeclaration_7.eContents().get(0);
		
		//enum Esterel_CombineOperator returns CombineOperator:
		//	NONE="none" | ADD="+" | MULT="*" | MAX="max" |
		//	MIN="min" | OR="or" | AND="and" | HOST="host";
		public EnumRule getRule() { return rule; }

		//NONE="none" | ADD="+" | MULT="*" | MAX="max" | MIN="min" | OR="or" | AND="and" | HOST="host"
		public Alternatives getAlternatives() { return cAlternatives; }

		//NONE="none"
		public EnumLiteralDeclaration getNONEEnumLiteralDeclaration_0() { return cNONEEnumLiteralDeclaration_0; }

		//"none"
		public Keyword getNONENoneKeyword_0_0() { return cNONENoneKeyword_0_0; }

		//ADD="+"
		public EnumLiteralDeclaration getADDEnumLiteralDeclaration_1() { return cADDEnumLiteralDeclaration_1; }

		//"+"
		public Keyword getADDPlusSignKeyword_1_0() { return cADDPlusSignKeyword_1_0; }

		//MULT="*"
		public EnumLiteralDeclaration getMULTEnumLiteralDeclaration_2() { return cMULTEnumLiteralDeclaration_2; }

		//"*"
		public Keyword getMULTAsteriskKeyword_2_0() { return cMULTAsteriskKeyword_2_0; }

		//MAX="max"
		public EnumLiteralDeclaration getMAXEnumLiteralDeclaration_3() { return cMAXEnumLiteralDeclaration_3; }

		//"max"
		public Keyword getMAXMaxKeyword_3_0() { return cMAXMaxKeyword_3_0; }

		//MIN="min"
		public EnumLiteralDeclaration getMINEnumLiteralDeclaration_4() { return cMINEnumLiteralDeclaration_4; }

		//"min"
		public Keyword getMINMinKeyword_4_0() { return cMINMinKeyword_4_0; }

		//OR="or"
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_5() { return cOREnumLiteralDeclaration_5; }

		//"or"
		public Keyword getOROrKeyword_5_0() { return cOROrKeyword_5_0; }

		//AND="and"
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_6() { return cANDEnumLiteralDeclaration_6; }

		//"and"
		public Keyword getANDAndKeyword_6_0() { return cANDAndKeyword_6_0; }

		//HOST="host"
		public EnumLiteralDeclaration getHOSTEnumLiteralDeclaration_7() { return cHOSTEnumLiteralDeclaration_7; }

		//"host"
		public Keyword getHOSTHostKeyword_7_0() { return cHOSTHostKeyword_7_0; }
	}
	
	private final ProgramElements pProgram;
	private final ModuleElements pModule;
	private final TypeIdentifierElements pTypeIdentifier;
	private final TypeDeclElements pTypeDecl;
	private final TypeElements pType;
	private final ConstantDeclsElements pConstantDecls;
	private final OneTypeConstantDeclsElements pOneTypeConstantDecls;
	private final ConstantElements pConstant;
	private final ConstantValueElements pConstantValue;
	private final FunctionDeclElements pFunctionDecl;
	private final FunctionElements pFunction;
	private final ProcedureDeclElements pProcedureDecl;
	private final ProcedureElements pProcedure;
	private final TaskDeclElements pTaskDecl;
	private final TaskElements pTask;
	private final InterfaceSignalDeclElements pInterfaceSignalDecl;
	private final ISignalElements pISignal;
	private final TickElements pTick;
	private final SensorDeclElements pSensorDecl;
	private final SensorWithTypeElements pSensorWithType;
	private final SensorElements pSensor;
	private final RelationDeclElements pRelationDecl;
	private final RelationTypeElements pRelationType;
	private final RelationImplicationElements pRelationImplication;
	private final RelationIncompatibilityElements pRelationIncompatibility;
	private final StatementContainerInterfaceElements pStatementContainerInterface;
	private final EsterelStatementElements pEsterelStatement;
	private final AtomicStatementElements pAtomicStatement;
	private final EsterelParallelElements pEsterelParallel;
	private final EsterelThreadElements pEsterelThread;
	private final NothingElements pNothing;
	private final HaltElements pHalt;
	private final BlockElements pBlock;
	private final EmitElements pEmit;
	private final SustainElements pSustain;
	private final EsterelAssignmentElements pEsterelAssignment;
	private final ProcCallElements pProcCall;
	private final PresentElements pPresent;
	private final PresentCaseElements pPresentCase;
	private final IfTestElements pIfTest;
	private final ElsIfElements pElsIf;
	private final LoopElements pLoop;
	private final RepeatElements pRepeat;
	private final AbortElements pAbort;
	private final CaseElements pCase;
	private final AwaitElements pAwait;
	private final EveryDoElements pEveryDo;
	private final SuspendElements pSuspend;
	private final TrapElements pTrap;
	private final TrapSignalElements pTrapSignal;
	private final TrapHandlerElements pTrapHandler;
	private final ExitElements pExit;
	private final ExecElements pExec;
	private final ExecCaseElements pExecCase;
	private final LocalSignalDeclElements pLocalSignalDecl;
	private final LocalVariableElements pLocalVariable;
	private final VariableDeclElements pVariableDecl;
	private final IVariableElements pIVariable;
	private final RunElements pRun;
	private final ModuleRenamingElements pModuleRenaming;
	private final RenamingElements pRenaming;
	private final TypeRenamingElements pTypeRenaming;
	private final ConstantRenamingElements pConstantRenaming;
	private final FunctionRenamingElements pFunctionRenaming;
	private final ProcedureRenamingElements pProcedureRenaming;
	private final TaskRenamingElements pTaskRenaming;
	private final SignalRenamingElements pSignalRenaming;
	private final BuildInFunctionElements pBuildInFunction;
	private final DoElements pDo;
	private final Esterel_CompareOperatorElements eEsterel_CompareOperator;
	private final Esterel_PreOperatorElements eEsterel_PreOperator;
	private final Esterel_OrOperatorElements eEsterel_OrOperator;
	private final Esterel_AndOperatorElements eEsterel_AndOperator;
	private final Esterel_NotOperatorElements eEsterel_NotOperator;
	private final Esterel_AddOperatorElements eEsterel_AddOperator;
	private final Esterel_SubOperatorElements eEsterel_SubOperator;
	private final Esterel_MultOperatorElements eEsterel_MultOperator;
	private final Esterel_ModOperatorElements eEsterel_ModOperator;
	private final Esterel_DivOperatorElements eEsterel_DivOperator;
	private final Esterel_ValueTestOperatorElements eEsterel_ValueTestOperator;
	private final Esterel_ValueTypeElements eEsterel_ValueType;
	private final Esterel_CombineOperatorElements eEsterel_CombineOperator;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSTRING;
	private final TerminalRule tHOSTCODE;
	private final AtomicExpressionElements pAtomicExpression;
	private final TrapExpressionElements pTrapExpression;
	private final FunctionExpressionElements pFunctionExpression;
	private final ConstantExpressionElements pConstantExpression;
	private final TrapExprElements pTrapExpr;
	private final SignalExpressionElements pSignalExpression;
	private final SignalAndExpressionElements pSignalAndExpression;
	private final SignalNotExpressionElements pSignalNotExpression;
	private final SignalAtomicExpressionElements pSignalAtomicExpression;
	private final SignalReferenceExprElements pSignalReferenceExpr;
	private final SignalPreExprElements pSignalPreExpr;
	private final TrapReferenceExprElements pTrapReferenceExpr;
	private final DelayExprElements pDelayExpr;
	private final ExpressionElements pExpression;
	private final BooleanExpressionElements pBooleanExpression;
	private final OrExpressionElements pOrExpression;
	private final AndExpressionElements pAndExpression;
	private final CompareOperationElements pCompareOperation;
	private final NotOrValuedExpressionElements pNotOrValuedExpression;
	private final NotExpressionElements pNotExpression;
	private final ValuedExpressionElements pValuedExpression;
	private final AddExpressionElements pAddExpression;
	private final SubExpressionElements pSubExpression;
	private final MultExpressionElements pMultExpression;
	private final DivExpressionElements pDivExpression;
	private final ModExpressionElements pModExpression;
	private final NegExpressionElements pNegExpression;
	private final AtomicValuedExpressionElements pAtomicValuedExpression;
	private final ValuedObjectTestExpressionElements pValuedObjectTestExpression;
	private final Esterel_ValuedObjectReferenceElements pEsterel_ValuedObjectReference;
	private final TextExpressionElements pTextExpression;
	private final Esterel_IntValueElements pEsterel_IntValue;
	private final FloatValueElements pFloatValue;
	private final BooleanValueElements pBooleanValue;
	private final AnyTypeElements pAnyType;
	
	private final Grammar grammar;

	private final SCLGrammarAccess gaSCL;

	private final KExtGrammarAccess gaKExt;

	private final KEffectsGrammarAccess gaKEffects;

	private final KExpressionsGrammarAccess gaKExpressions;

	private final AnnotationsGrammarAccess gaAnnotations;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public EsterelGrammarAccess(GrammarProvider grammarProvider,
		SCLGrammarAccess gaSCL,
		KExtGrammarAccess gaKExt,
		KEffectsGrammarAccess gaKEffects,
		KExpressionsGrammarAccess gaKExpressions,
		AnnotationsGrammarAccess gaAnnotations,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaSCL = gaSCL;
		this.gaKExt = gaKExt;
		this.gaKEffects = gaKEffects;
		this.gaKExpressions = gaKExpressions;
		this.gaAnnotations = gaAnnotations;
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pModule = new ModuleElements();
		this.pTypeIdentifier = new TypeIdentifierElements();
		this.pTypeDecl = new TypeDeclElements();
		this.pType = new TypeElements();
		this.pConstantDecls = new ConstantDeclsElements();
		this.pOneTypeConstantDecls = new OneTypeConstantDeclsElements();
		this.pConstant = new ConstantElements();
		this.pConstantValue = new ConstantValueElements();
		this.pFunctionDecl = new FunctionDeclElements();
		this.pFunction = new FunctionElements();
		this.pProcedureDecl = new ProcedureDeclElements();
		this.pProcedure = new ProcedureElements();
		this.pTaskDecl = new TaskDeclElements();
		this.pTask = new TaskElements();
		this.pInterfaceSignalDecl = new InterfaceSignalDeclElements();
		this.pISignal = new ISignalElements();
		this.pTick = new TickElements();
		this.pSensorDecl = new SensorDeclElements();
		this.pSensorWithType = new SensorWithTypeElements();
		this.pSensor = new SensorElements();
		this.pRelationDecl = new RelationDeclElements();
		this.pRelationType = new RelationTypeElements();
		this.pRelationImplication = new RelationImplicationElements();
		this.pRelationIncompatibility = new RelationIncompatibilityElements();
		this.pStatementContainerInterface = new StatementContainerInterfaceElements();
		this.pEsterelStatement = new EsterelStatementElements();
		this.pAtomicStatement = new AtomicStatementElements();
		this.pEsterelParallel = new EsterelParallelElements();
		this.pEsterelThread = new EsterelThreadElements();
		this.pNothing = new NothingElements();
		this.pHalt = new HaltElements();
		this.pBlock = new BlockElements();
		this.pEmit = new EmitElements();
		this.pSustain = new SustainElements();
		this.pEsterelAssignment = new EsterelAssignmentElements();
		this.pProcCall = new ProcCallElements();
		this.pPresent = new PresentElements();
		this.pPresentCase = new PresentCaseElements();
		this.pIfTest = new IfTestElements();
		this.pElsIf = new ElsIfElements();
		this.pLoop = new LoopElements();
		this.pRepeat = new RepeatElements();
		this.pAbort = new AbortElements();
		this.pCase = new CaseElements();
		this.pAwait = new AwaitElements();
		this.pEveryDo = new EveryDoElements();
		this.pSuspend = new SuspendElements();
		this.pTrap = new TrapElements();
		this.pTrapSignal = new TrapSignalElements();
		this.pTrapHandler = new TrapHandlerElements();
		this.pExit = new ExitElements();
		this.pExec = new ExecElements();
		this.pExecCase = new ExecCaseElements();
		this.pLocalSignalDecl = new LocalSignalDeclElements();
		this.pLocalVariable = new LocalVariableElements();
		this.pVariableDecl = new VariableDeclElements();
		this.pIVariable = new IVariableElements();
		this.pRun = new RunElements();
		this.pModuleRenaming = new ModuleRenamingElements();
		this.pRenaming = new RenamingElements();
		this.pTypeRenaming = new TypeRenamingElements();
		this.pConstantRenaming = new ConstantRenamingElements();
		this.pFunctionRenaming = new FunctionRenamingElements();
		this.pProcedureRenaming = new ProcedureRenamingElements();
		this.pTaskRenaming = new TaskRenamingElements();
		this.pSignalRenaming = new SignalRenamingElements();
		this.pBuildInFunction = new BuildInFunctionElements();
		this.pDo = new DoElements();
		this.eEsterel_CompareOperator = new Esterel_CompareOperatorElements();
		this.eEsterel_PreOperator = new Esterel_PreOperatorElements();
		this.eEsterel_OrOperator = new Esterel_OrOperatorElements();
		this.eEsterel_AndOperator = new Esterel_AndOperatorElements();
		this.eEsterel_NotOperator = new Esterel_NotOperatorElements();
		this.eEsterel_AddOperator = new Esterel_AddOperatorElements();
		this.eEsterel_SubOperator = new Esterel_SubOperatorElements();
		this.eEsterel_MultOperator = new Esterel_MultOperatorElements();
		this.eEsterel_ModOperator = new Esterel_ModOperatorElements();
		this.eEsterel_DivOperator = new Esterel_DivOperatorElements();
		this.eEsterel_ValueTestOperator = new Esterel_ValueTestOperatorElements();
		this.eEsterel_ValueType = new Esterel_ValueTypeElements();
		this.eEsterel_CombineOperator = new Esterel_CombineOperatorElements();
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.SL_COMMENT");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.ML_COMMENT");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.STRING");
		this.tHOSTCODE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.esterel.Esterel.HOSTCODE");
		this.pAtomicExpression = new AtomicExpressionElements();
		this.pTrapExpression = new TrapExpressionElements();
		this.pFunctionExpression = new FunctionExpressionElements();
		this.pConstantExpression = new ConstantExpressionElements();
		this.pTrapExpr = new TrapExprElements();
		this.pSignalExpression = new SignalExpressionElements();
		this.pSignalAndExpression = new SignalAndExpressionElements();
		this.pSignalNotExpression = new SignalNotExpressionElements();
		this.pSignalAtomicExpression = new SignalAtomicExpressionElements();
		this.pSignalReferenceExpr = new SignalReferenceExprElements();
		this.pSignalPreExpr = new SignalPreExprElements();
		this.pTrapReferenceExpr = new TrapReferenceExprElements();
		this.pDelayExpr = new DelayExprElements();
		this.pExpression = new ExpressionElements();
		this.pBooleanExpression = new BooleanExpressionElements();
		this.pOrExpression = new OrExpressionElements();
		this.pAndExpression = new AndExpressionElements();
		this.pCompareOperation = new CompareOperationElements();
		this.pNotOrValuedExpression = new NotOrValuedExpressionElements();
		this.pNotExpression = new NotExpressionElements();
		this.pValuedExpression = new ValuedExpressionElements();
		this.pAddExpression = new AddExpressionElements();
		this.pSubExpression = new SubExpressionElements();
		this.pMultExpression = new MultExpressionElements();
		this.pDivExpression = new DivExpressionElements();
		this.pModExpression = new ModExpressionElements();
		this.pNegExpression = new NegExpressionElements();
		this.pAtomicValuedExpression = new AtomicValuedExpressionElements();
		this.pValuedObjectTestExpression = new ValuedObjectTestExpressionElements();
		this.pEsterel_ValuedObjectReference = new Esterel_ValuedObjectReferenceElements();
		this.pTextExpression = new TextExpressionElements();
		this.pEsterel_IntValue = new Esterel_IntValueElements();
		this.pFloatValue = new FloatValueElements();
		this.pBooleanValue = new BooleanValueElements();
		this.pAnyType = new AnyTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.cau.cs.kieler.esterel.Esterel".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public SCLGrammarAccess getSCLGrammarAccess() {
		return gaSCL;
	}

	public KExtGrammarAccess getKExtGrammarAccess() {
		return gaKExt;
	}

	public KEffectsGrammarAccess getKEffectsGrammarAccess() {
		return gaKEffects;
	}

	public KExpressionsGrammarAccess getKExpressionsGrammarAccess() {
		return gaKExpressions;
	}

	public AnnotationsGrammarAccess getAnnotationsGrammarAccess() {
		return gaAnnotations;
	}

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////  root rule. an esterel file can contain multiple modules
	//Program hidden(SL_COMMENT, ML_COMMENT, WS):
	//	modules+=Module*;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}

	/// * ###################################################
	// * ###                 7.2 Modules                 ###
	// * ###################################################
	// * / // ==> module: a module consists of an interface and a body
	//// -------------------------------------
	//Module:
	//	annotations+=Annotation*
	//	"module" name=ID ":" (intSignalDecls+=InterfaceSignalDecl
	//	| intTypeDecls+=TypeDecl
	//	| intSensorDecls+=SensorDecl
	//	| intConstantDecls+=ConstantDecls
	//	| intRelationDecls+=RelationDecl
	//	| intTaskDecls+=TaskDecl
	//	| intFunctionDecls+=FunctionDecl
	//	| intProcedureDecls+=ProcedureDecl)* ((statements+=EsterelStatement ";")* statements+=EsterelStatement?) ("end"
	//	"module" | ".");
	public ModuleElements getModuleAccess() {
		return pModule;
	}
	
	public ParserRule getModuleRule() {
		return getModuleAccess().getRule();
	}

	/// * ###################################################
	// * ###        7.3 Interface Declaration            ###
	// * ###################################################
	// * / // ==> Interface Declaration
	//// ----------------------------------------------
	//// overwrite to allow type definitions in a specific module
	//TypeIdentifier:
	//	type=Esterel_ValueType
	//	| typeID=ID
	//	| "combine" (type=Esterel_ValueType | typeID=ID) "with" operator=Esterel_CombineOperator | {EsterelType}
	//	estType=[Type];
	public TypeIdentifierElements getTypeIdentifierAccess() {
		return pTypeIdentifier;
	}
	
	public ParserRule getTypeIdentifierRule() {
		return getTypeIdentifierAccess().getRule();
	}

	//// ==> 7.3.1 Type Declarations
	//// -------------------------------------
	//TypeDecl:
	//	annotations+=Annotation*
	//	"type"
	//	types+=Type ("," types+=Type)*
	//	";";
	public TypeDeclElements getTypeDeclAccess() {
		return pTypeDecl;
	}
	
	public ParserRule getTypeDeclRule() {
		return getTypeDeclAccess().getRule();
	}

	//Type:
	//	name=ID;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//// ==> 7.3.2 Constant Declarations
	//// -------------------------------------
	//ConstantDecls:
	//	annotations+=Annotation*
	//	"constant"
	//	constants+=OneTypeConstantDecls ("," constants+=OneTypeConstantDecls)*
	//	";";
	public ConstantDeclsElements getConstantDeclsAccess() {
		return pConstantDecls;
	}
	
	public ParserRule getConstantDeclsRule() {
		return getConstantDeclsAccess().getRule();
	}

	//OneTypeConstantDecls:
	//	constants+=Constant ("," constants+=Constant)* ":" type=TypeIdentifier;
	public OneTypeConstantDeclsElements getOneTypeConstantDeclsAccess() {
		return pOneTypeConstantDecls;
	}
	
	public ParserRule getOneTypeConstantDeclsRule() {
		return getOneTypeConstantDeclsAccess().getRule();
	}

	//Constant ValuedObject:
	//	{Constant} name=ID ("=" value=ConstantValue)?
	public ConstantElements getConstantAccess() {
		return pConstant;
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}

	//ConstantValue:
	//	INT | FLOAT | BOOLEAN | ID | STRING;
	public ConstantValueElements getConstantValueAccess() {
		return pConstantValue;
	}
	
	public ParserRule getConstantValueRule() {
		return getConstantValueAccess().getRule();
	}

	//// ==> 7.3.3 Function Declaration
	//// -------------------------------------
	//FunctionDecl:
	//	annotations+=Annotation*
	//	"function"
	//	functions+=Function ("," functions+=Function)*
	//	";";
	public FunctionDeclElements getFunctionDeclAccess() {
		return pFunctionDecl;
	}
	
	public ParserRule getFunctionDeclRule() {
		return getFunctionDeclAccess().getRule();
	}

	//Function:
	//	name=ID
	//	"(" (idList+=TypeIdentifier ("," idList+=TypeIdentifier)*)? ")"
	//	":" type=TypeIdentifier;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}

	//// ==> 7.3.4 Procedure Declaration
	//// -------------------------------------
	//ProcedureDecl:
	//	annotations+=Annotation*
	//	"procedure" procedures+=Procedure ("," procedures+=Procedure)*
	//	";";
	public ProcedureDeclElements getProcedureDeclAccess() {
		return pProcedureDecl;
	}
	
	public ParserRule getProcedureDeclRule() {
		return getProcedureDeclAccess().getRule();
	}

	//Procedure:
	//	name=ID
	//	"(" (variables+=TypeIdentifier ("," variables+=TypeIdentifier)*)? ")"
	//	"(" (expressions+=TypeIdentifier ("," expressions+=TypeIdentifier)*)? ")";
	public ProcedureElements getProcedureAccess() {
		return pProcedure;
	}
	
	public ParserRule getProcedureRule() {
		return getProcedureAccess().getRule();
	}

	//// ==> 7.3.5 Task Declaration
	//// -------------------------------------
	//TaskDecl:
	//	annotations+=Annotation*
	//	"task" tasks+=Task ("," tasks+=Task)*
	//	";";
	public TaskDeclElements getTaskDeclAccess() {
		return pTaskDecl;
	}
	
	public ParserRule getTaskDeclRule() {
		return getTaskDeclAccess().getRule();
	}

	//Task:
	//	name=ID
	//	"(" (variables+=TypeIdentifier ("," variables+=TypeIdentifier)*)? ")"
	//	"(" (expressions+=TypeIdentifier ("," expressions+=TypeIdentifier)*)? ")";
	public TaskElements getTaskAccess() {
		return pTask;
	}
	
	public ParserRule getTaskRule() {
		return getTaskAccess().getRule();
	}

	//// ==> 7.3.6 Signal Declaration
	//// -------------------------------------
	//InterfaceSignalDecl:
	//	{Input} annotations+=Annotation* "input" signals+=ISignal ("," signals+=ISignal)* ";"
	//	| {Output} annotations+=Annotation* "output" signals+=ISignal ("," signals+=ISignal)* ";"
	//	| {InputOutput} annotations+=Annotation* "inputoutput" signals+=ISignal ("," signals+=ISignal)* ";"
	//	| {Return} annotations+=Annotation* "return" signals+=ISignal ("," signals+=ISignal)* ";";
	public InterfaceSignalDeclElements getInterfaceSignalDeclAccess() {
		return pInterfaceSignalDecl;
	}
	
	public ParserRule getInterfaceSignalDeclRule() {
		return getInterfaceSignalDeclAccess().getRule();
	}

	//// example 1:   A : combine boolean with or
	//// example 2:   A (combine boolean with or)
	//// example 3:   A := 0 : combine integer with '+'
	//ISignal:
	//	{ISignal} name=ID ((":" type=Esterel_ValueType
	//	| typeID=ID
	//	| "combine" (type=Esterel_ValueType | typeID=ID) "with" (func=[Function] | operator=Esterel_CombineOperator)) | ("("
	//	type=Esterel_ValueType
	//	| typeID=ID
	//	| ("combine" (type=Esterel_ValueType | typeID=ID) "with" (func=[Function] | operator=Esterel_CombineOperator))
	//	")") | (":=" expression=Expression ":"
	//	type=Esterel_ValueType
	//	| typeID=ID
	//	| "combine" (type=Esterel_ValueType | typeID=ID) "with" (func=[Function] | operator=Esterel_CombineOperator)))?;
	public ISignalElements getISignalAccess() {
		return pISignal;
	}
	
	public ParserRule getISignalRule() {
		return getISignalAccess().getRule();
	}

	//Tick ValuedObject:
	//	name="tick"
	public TickElements getTickAccess() {
		return pTick;
	}
	
	public ParserRule getTickRule() {
		return getTickAccess().getRule();
	}

	//// ==> 7.3.7 Sensor Declaration
	//// -------------------------------------
	//SensorDecl:
	//	annotations+=Annotation*
	//	"sensor"
	//	sensors+=SensorWithType ("," sensors+=SensorWithType)*
	//	";";
	public SensorDeclElements getSensorDeclAccess() {
		return pSensorDecl;
	}
	
	public ParserRule getSensorDeclRule() {
		return getSensorDeclAccess().getRule();
	}

	//SensorWithType:
	//	sensor=Sensor (":" type=TypeIdentifier | "(" type=TypeIdentifier ")");
	public SensorWithTypeElements getSensorWithTypeAccess() {
		return pSensorWithType;
	}
	
	public ParserRule getSensorWithTypeRule() {
		return getSensorWithTypeAccess().getRule();
	}

	//Sensor ISignal:
	//	name=ID
	public SensorElements getSensorAccess() {
		return pSensor;
	}
	
	public ParserRule getSensorRule() {
		return getSensorAccess().getRule();
	}

	//// ==> 7.3.8 Input Relation Declaration
	//// -------------------------------------
	//RelationDecl:
	//	{Relation} annotations+=Annotation*
	//	"relation"
	//	relations+=RelationType ("," relations+=RelationType)*
	//	";";
	public RelationDeclElements getRelationDeclAccess() {
		return pRelationDecl;
	}
	
	public ParserRule getRelationDeclRule() {
		return getRelationDeclAccess().getRule();
	}

	//RelationType:
	//	RelationImplication | RelationIncompatibility;
	public RelationTypeElements getRelationTypeAccess() {
		return pRelationType;
	}
	
	public ParserRule getRelationTypeRule() {
		return getRelationTypeAccess().getRule();
	}

	//RelationImplication:
	//	first=[ISignal] type="=>" second=[ISignal];
	public RelationImplicationElements getRelationImplicationAccess() {
		return pRelationImplication;
	}
	
	public ParserRule getRelationImplicationRule() {
		return getRelationImplicationAccess().getRule();
	}

	//RelationIncompatibility:
	//	incomp+=[ISignal] type="#" incomp+=[ISignal] ("#" incomp+=[ISignal])*;
	public RelationIncompatibilityElements getRelationIncompatibilityAccess() {
		return pRelationIncompatibility;
	}
	
	public ParserRule getRelationIncompatibilityRule() {
		return getRelationIncompatibilityAccess().getRule();
	}

	/// * ###################################################
	// * ###               7.5 Statements                ###
	// * ###################################################
	// * / StatementContainerInterface scl::StatementContainer:
	//	Abort | Await | Block | Case | Do | EveryDo | Exec | ExecCase | LocalSignalDecl | LocalVariable | Loop | PresentCase |
	//	Repeat | Suspend | EsterelThread | Trap | TrapHandler | Module
	public StatementContainerInterfaceElements getStatementContainerInterfaceAccess() {
		return pStatementContainerInterface;
	}
	
	public ParserRule getStatementContainerInterfaceRule() {
		return getStatementContainerInterfaceAccess().getRule();
	}

	//// ==> Statement
	//// -------------------------------------
	//EsterelStatement scl::Statement:
	//	EsterelParallel | AtomicStatement
	public EsterelStatementElements getEsterelStatementAccess() {
		return pEsterelStatement;
	}
	
	public ParserRule getEsterelStatementRule() {
		return getEsterelStatementAccess().getRule();
	}

	//// ==> Atomic Statements
	//// -------------------------------------
	//AtomicStatement scl::Statement:
	//	Abort | EsterelAssignment | Await | Block | ProcCall | Do | Emit | EveryDo | Exit | Exec | Halt | IfTest |
	//	LocalSignalDecl | Loop | Nothing | Pause | Present | Repeat | Run | Suspend | Sustain | Trap | LocalVariable
	public AtomicStatementElements getAtomicStatementAccess() {
		return pAtomicStatement;
	}
	
	public ParserRule getAtomicStatementRule() {
		return getAtomicStatementAccess().getRule();
	}

	//// ==> Parallel: at least two threads
	//// -------------------------------------
	//EsterelParallel:
	//	threads+=EsterelThread ("||" threads+=EsterelThread)+;
	public EsterelParallelElements getEsterelParallelAccess() {
		return pEsterelParallel;
	}
	
	public ParserRule getEsterelParallelRule() {
		return getEsterelParallelAccess().getRule();
	}

	//// ==> Thread
	//// One AtomicStatement or multiple AtomicStatements
	//// It doesn't include 'Parallel' statements because they would be parallel to 
	//// the existing thread and therefore included in the previous thread list (Parallel.threads).
	//// -------------------------------------
	//EsterelThread:
	//	{EsterelThread} (statements+=AtomicStatement ";")* statements+=AtomicStatement?;
	public EsterelThreadElements getEsterelThreadAccess() {
		return pEsterelThread;
	}
	
	public ParserRule getEsterelThreadRule() {
		return getEsterelThreadAccess().getRule();
	}

	//// ==> Nothing
	//// -------------------------------------
	//Nothing:
	//	{Nothing} annotations+=Annotation*
	//	"nothing";
	public NothingElements getNothingAccess() {
		return pNothing;
	}
	
	public ParserRule getNothingRule() {
		return getNothingAccess().getRule();
	}

	//// ==> Halt
	//// -------------------------------------
	//Halt:
	//	{Halt} annotations+=Annotation*
	//	"halt";
	public HaltElements getHaltAccess() {
		return pHalt;
	}
	
	public ParserRule getHaltRule() {
		return getHaltAccess().getRule();
	}

	//// ==> Block
	//// -------------------------------------    
	//Block:
	//	{Block} annotations+=Annotation*
	//	"[" ((statements+=EsterelStatement ";")* statements+=EsterelStatement?) "]";
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}

	//// ==> 7.5.1 Signal Emission
	//// -------------------------------------
	//Emit:
	//	annotations+=Annotation*
	//	"emit" (signal=[ISignal] | tick=Tick) ("(" expr=Expression ")")?;
	public EmitElements getEmitAccess() {
		return pEmit;
	}
	
	public ParserRule getEmitRule() {
		return getEmitAccess().getRule();
	}

	//// emit a signal indefinitely
	//Sustain:
	//	annotations+=Annotation*
	//	"sustain" (signal=[ISignal] | tick=Tick) ("(" expression=Expression ")")?;
	public SustainElements getSustainAccess() {
		return pSustain;
	}
	
	public ParserRule getSustainRule() {
		return getSustainAccess().getRule();
	}

	//// ==> 7.5.2 Assignment and Procedure Call
	//// -------------------------------------
	//EsterelAssignment:
	//	var=[IVariable] ":=" expr=Expression;
	public EsterelAssignmentElements getEsterelAssignmentAccess() {
		return pEsterelAssignment;
	}
	
	public ParserRule getEsterelAssignmentRule() {
		return getEsterelAssignmentAccess().getRule();
	}

	//ProcCall:
	//	annotations+=Annotation*
	//	"call"
	//	proc=[Procedure]
	//	"(" (varList+=[IVariable] ("," varList+=[IVariable])*)?
	//	")"
	//	"(" (kexpressions+=Expression ("," kexpressions+=Expression)*)?
	//	")";
	public ProcCallElements getProcCallAccess() {
		return pProcCall;
	}
	
	public ParserRule getProcCallRule() {
		return getProcCallAccess().getRule();
	}

	//// ==> 7.5.3 The present Signal Test
	//// -------------------------------------
	//Present:
	//	annotations+=Annotation*
	//	"present" ((expression=SignalExpression
	//	| "[" expression=SignalExpression "]"
	//	| tick=Tick) (thenAnnotations+=Annotation*
	//	"then" ((thenStatements+=EsterelStatement ";")* thenStatements+=EsterelStatement?))?
	//	| cases+=PresentCase+) (elseAnnotations+=Annotation*
	//	"else" ((elseStatements+=EsterelStatement ";")* elseStatements+=EsterelStatement?))?
	//	"end" "present"?;
	public PresentElements getPresentAccess() {
		return pPresent;
	}
	
	public ParserRule getPresentRule() {
		return getPresentAccess().getRule();
	}

	//PresentCase:
	//	annotations+=Annotation*
	//	"case" (expression=SignalExpression
	//	| "[" expression=SignalExpression "]"
	//	| tick=Tick) ("do" ((statements+=EsterelStatement ";")* statements+=EsterelStatement?))?;
	public PresentCaseElements getPresentCaseAccess() {
		return pPresentCase;
	}
	
	public ParserRule getPresentCaseRule() {
		return getPresentCaseAccess().getRule();
	}

	//// ==> 7.5.4 The if Data Test
	//// -------------------------------------
	//IfTest:
	//	annotations+=Annotation*
	//	"if"
	//	expr=Expression (thenAnnotations+=Annotation*
	//	"then" ((thenStatements+=EsterelStatement ";")* thenStatements+=EsterelStatement?))?
	//	elseif+=ElsIf* (elseAnnotations+=Annotation*
	//	"else" ((elseStatements+=EsterelStatement ";")* elseStatements+=EsterelStatement?))?
	//	"end" "if"?;
	public IfTestElements getIfTestAccess() {
		return pIfTest;
	}
	
	public ParserRule getIfTestRule() {
		return getIfTestAccess().getRule();
	}

	//ElsIf:
	//	annotations+=Annotation*
	//	"elsif"
	//	expr=Expression (thenAnnotations+=Annotation*
	//	"then" ((thenStatements+=EsterelStatement ";")* thenStatements+=EsterelStatement?))?;
	public ElsIfElements getElsIfAccess() {
		return pElsIf;
	}
	
	public ParserRule getElsIfRule() {
		return getElsIfAccess().getRule();
	}

	//// ==> 7.5.5 Looping & 7.5.9 Temporal Loops
	//// -------------------------------------
	//Loop:
	//	{Loop} annotations+=Annotation*
	//	"loop" ((statements+=EsterelStatement ";")* statements+=EsterelStatement?) ("end" "loop"? | "each" delay=DelayExpr);
	public LoopElements getLoopAccess() {
		return pLoop;
	}
	
	public ParserRule getLoopRule() {
		return getLoopAccess().getRule();
	}

	//// ==> 7.5.6 Repeat Looping
	//// -------------------------------------
	//Repeat:
	//	annotations+=Annotation*
	//	positive?="positive"?
	//	"repeat"
	//	expression=Expression
	//	"times" ((statements+=EsterelStatement ";")* statements+=EsterelStatement?)
	//	"end" "repeat"?;
	public RepeatElements getRepeatAccess() {
		return pRepeat;
	}
	
	public ParserRule getRepeatRule() {
		return getRepeatAccess().getRule();
	}

	//// ==> 7.5.7 The abort Statements
	//// -------------------------------------
	//Abort:
	//	annotations+=Annotation* (weak?="weak"? "abort") ((statements+=EsterelStatement ";")* statements+=EsterelStatement?)
	//	"when" (delay=DelayExpr ("do" ((doStatements+=EsterelStatement ";")* doStatements+=EsterelStatement?))?
	//	"end" ("weak" "abort" | "abort")?
	//	| delay=DelayExpr ("end" | "end" "weak"? "abort")?
	//	| cases+=Case+
	//	"end" ("weak" "abort" | "abort")?);
	public AbortElements getAbortAccess() {
		return pAbort;
	}
	
	public ParserRule getAbortRule() {
		return getAbortAccess().getRule();
	}

	//Case:
	//	annotations+=Annotation*
	//	"case"
	//	delay=DelayExpr ("do" ((statements+=EsterelStatement ";")* statements+=EsterelStatement?))?;
	public CaseElements getCaseAccess() {
		return pCase;
	}
	
	public ParserRule getCaseRule() {
		return getCaseAccess().getRule();
	}

	//// ==> 7.5.8 The await Statement
	//// -------------------------------------
	//Await:
	//	annotations+=Annotation*
	//	"await" (delay=DelayExpr ("do" ((statements+=EsterelStatement ";")* statements+=EsterelStatement?)
	//	"end" "await"?)?
	//	| cases+=Case+
	//	"end" "await"?);
	public AwaitElements getAwaitAccess() {
		return pAwait;
	}
	
	public ParserRule getAwaitRule() {
		return getAwaitAccess().getRule();
	}

	//// ==> 7.5.9 Temporal Loops
	//// -------------------------------------
	//// for 'LoopEach' look at 7.5.5
	//EveryDo:
	//	annotations+=Annotation*
	//	"every"
	//	delay=DelayExpr
	//	"do" ((statements+=EsterelStatement ";")* statements+=EsterelStatement?)
	//	"end" "every"?;
	public EveryDoElements getEveryDoAccess() {
		return pEveryDo;
	}
	
	public ParserRule getEveryDoRule() {
		return getEveryDoAccess().getRule();
	}

	//// ==> 7.5.10 The suspend Statement
	//// -------------------------------------
	//Suspend:
	//	annotations+=Annotation* (weak?="weak"? "suspend") ((statements+=EsterelStatement ";")* statements+=EsterelStatement?)
	//	"when"
	//	delay=DelayExpr;
	public SuspendElements getSuspendAccess() {
		return pSuspend;
	}
	
	public ParserRule getSuspendRule() {
		return getSuspendAccess().getRule();
	}

	//// ==> 7.5.11 Traps
	//// -------------------------------------
	//Trap:
	//	annotations+=Annotation*
	//	"trap"
	//	trapSignals+=TrapSignal ("," trapSignals+=TrapSignal)*
	//	"in" ((statements+=EsterelStatement ";")* statements+=EsterelStatement?) trapHandler+=TrapHandler*
	//	"end" "trap"?;
	public TrapElements getTrapAccess() {
		return pTrap;
	}
	
	public ParserRule getTrapRule() {
		return getTrapAccess().getRule();
	}

	//TrapSignal ISignal:
	//	{TrapSignal} name=ID ((":" type=Esterel_ValueType
	//	| typeID=ID
	//	| "combine" (type=Esterel_ValueType | typeID=ID) "with" (func=[Function] | operator=Esterel_CombineOperator)) | ("("
	//	type=Esterel_ValueType
	//	| typeID=ID
	//	| ("combine" (type=Esterel_ValueType | typeID=ID) "with" (func=[Function] | operator=Esterel_CombineOperator))
	//	")") | (":=" expression=Expression ":"
	//	type=Esterel_ValueType
	//	| typeID=ID
	//	| "combine" (type=Esterel_ValueType | typeID=ID) "with" (func=[Function] | operator=Esterel_CombineOperator)))?
	public TrapSignalElements getTrapSignalAccess() {
		return pTrapSignal;
	}
	
	public ParserRule getTrapSignalRule() {
		return getTrapSignalAccess().getRule();
	}

	//TrapHandler:
	//	annotations+=Annotation*
	//	"handle"
	//	trapExpr=TrapExpr
	//	"do" ((statements+=EsterelStatement ";")* statements+=EsterelStatement?);
	public TrapHandlerElements getTrapHandlerAccess() {
		return pTrapHandler;
	}
	
	public ParserRule getTrapHandlerRule() {
		return getTrapHandlerAccess().getRule();
	}

	//Exit:
	//	annotations+=Annotation*
	//	"exit"
	//	trap=[TrapSignal] ("(" expression=Expression ")")?;
	public ExitElements getExitAccess() {
		return pExit;
	}
	
	public ParserRule getExitRule() {
		return getExitAccess().getRule();
	}

	//// ==> 7.5.12 The exec Task Execution Statement
	//// -------------------------------------
	//Exec:
	//	annotations+=Annotation* ("exec" task=[Task]
	//	"(" (vars+=[IVariable] ("," vars+=[IVariable])*)? ")"
	//	"(" (kexpressions+=Expression ("," kexpressions+=Expression)*)? ")"
	//	"return"
	//	retSignal=[ISignal] ("do" ((statements+=EsterelStatement ";")* statements+=EsterelStatement?))?
	//	|
	//	"exec" execCaseList+=ExecCase+)
	//	"end" "exec"?;
	public ExecElements getExecAccess() {
		return pExec;
	}
	
	public ParserRule getExecRule() {
		return getExecAccess().getRule();
	}

	//ExecCase:
	//	annotations+=Annotation*
	//	"case" task=[Task]
	//	"(" (vars+=[IVariable] ("," vars+=[IVariable])*)? ")"
	//	"(" (kexpressions+=Expression ("," kexpressions+=Expression)*)? ")"
	//	"return"
	//	retSignal=[ISignal] ("do" ((statements+=EsterelStatement ";")* statements+=EsterelStatement?))?;
	public ExecCaseElements getExecCaseAccess() {
		return pExecCase;
	}
	
	public ParserRule getExecCaseRule() {
		return getExecCaseAccess().getRule();
	}

	//// ==> 7.5.13 Local Signal Declaration    
	//// -------------------------------------
	//LocalSignalDecl:
	//	annotations+=Annotation*
	//	"signal" signals+=ISignal ("," signals+=ISignal)*
	//	"in" ((statements+=EsterelStatement ";")* statements+=EsterelStatement?)
	//	"end" "signal"?;
	public LocalSignalDeclElements getLocalSignalDeclAccess() {
		return pLocalSignalDecl;
	}
	
	public ParserRule getLocalSignalDeclRule() {
		return getLocalSignalDeclAccess().getRule();
	}

	//// ==> 7.5.14 Local Variable Declaration
	//// ------------------------------------- 
	//LocalVariable:
	//	annotations+=Annotation*
	//	"var"
	//	varDecls+=VariableDecl ("," varDecls+=VariableDecl)*
	//	"in" ((statements+=EsterelStatement ";")* statements+=EsterelStatement?)
	//	"end" "var"?;
	public LocalVariableElements getLocalVariableAccess() {
		return pLocalVariable;
	}
	
	public ParserRule getLocalVariableRule() {
		return getLocalVariableAccess().getRule();
	}

	//VariableDecl:
	//	variables+=IVariable ("," variables+=IVariable)* ":" type=TypeIdentifier;
	public VariableDeclElements getVariableDeclAccess() {
		return pVariableDecl;
	}
	
	public ParserRule getVariableDeclRule() {
		return getVariableDeclAccess().getRule();
	}

	//IVariable:
	//	name=ID (":=" expression=Expression)?;
	public IVariableElements getIVariableAccess() {
		return pIVariable;
	}
	
	public ParserRule getIVariableRule() {
		return getIVariableAccess().getRule();
	}

	//// ==> 7.5.15 The run Module Instantiation Statement
	//// -------------------------------------
	//Run:
	//	annotations+=Annotation* ("run"
	//	module=ModuleRenaming ("[" list+=Renaming (";" list+=Renaming)* "]")?
	//	| "copymodule"
	//	module=ModuleRenaming ("[" list+=Renaming (";" list+=Renaming)* "]")?);
	public RunElements getRunAccess() {
		return pRun;
	}
	
	public ParserRule getRunRule() {
		return getRunAccess().getRule();
	}

	////deprecated
	//ModuleRenaming:
	//	module=[Module] | newName=ID "/" module=[Module];
	public ModuleRenamingElements getModuleRenamingAccess() {
		return pModuleRenaming;
	}
	
	public ParserRule getModuleRenamingRule() {
		return getModuleRenamingAccess().getRule();
	}

	//Renaming:
	//	annotations+=Annotation* ("type" renamings+=TypeRenaming ("," renamings+=TypeRenaming)*
	//	| "constant" renamings+=ConstantRenaming ("," renamings+=ConstantRenaming)*
	//	| "function" renamings+=FunctionRenaming ("," renamings+=FunctionRenaming)*
	//	| "procedure" renamings+=ProcedureRenaming ("," renamings+=ProcedureRenaming)*
	//	| "task" renamings+=TaskRenaming ("," renamings+=TaskRenaming)*
	//	| "signal" renamings+=SignalRenaming ("," renamings+=SignalRenaming)*);
	public RenamingElements getRenamingAccess() {
		return pRenaming;
	}
	
	public ParserRule getRenamingRule() {
		return getRenamingAccess().getRule();
	}

	//TypeRenaming:
	//	(newName=[Type] | newType=Esterel_ValueType) "/" oldName=[Type];
	public TypeRenamingElements getTypeRenamingAccess() {
		return pTypeRenaming;
	}
	
	public ParserRule getTypeRenamingRule() {
		return getTypeRenamingAccess().getRule();
	}

	//ConstantRenaming:
	//	(newName=[ValuedObject] | newValue=ConstantValue) "/" oldName=[ValuedObject];
	public ConstantRenamingElements getConstantRenamingAccess() {
		return pConstantRenaming;
	}
	
	public ParserRule getConstantRenamingRule() {
		return getConstantRenamingAccess().getRule();
	}

	//FunctionRenaming:
	//	(newName=[Function] | newFunc=BuildInFunction) "/" oldName=[Function];
	public FunctionRenamingElements getFunctionRenamingAccess() {
		return pFunctionRenaming;
	}
	
	public ParserRule getFunctionRenamingRule() {
		return getFunctionRenamingAccess().getRule();
	}

	//ProcedureRenaming:
	//	newName=[Procedure] "/" oldName=[Procedure];
	public ProcedureRenamingElements getProcedureRenamingAccess() {
		return pProcedureRenaming;
	}
	
	public ParserRule getProcedureRenamingRule() {
		return getProcedureRenamingAccess().getRule();
	}

	//TaskRenaming:
	//	newName=[Task] "/" oldName=[Task];
	public TaskRenamingElements getTaskRenamingAccess() {
		return pTaskRenaming;
	}
	
	public ParserRule getTaskRenamingRule() {
		return getTaskRenamingAccess().getRule();
	}

	//SignalRenaming:
	//	(newName=[ISignal] | "tick") "/" oldName=[ISignal];
	public SignalRenamingElements getSignalRenamingAccess() {
		return pSignalRenaming;
	}
	
	public ParserRule getSignalRenamingRule() {
		return getSignalRenamingAccess().getRule();
	}

	//// renaming can also rename build in types and functions
	//BuildInFunction:
	//	"*" | "/" | "+" | "-" | "mod" | "=" | "<>" | ">" | "<" | "<=" | ">=" | "not" | "and" | "or";
	public BuildInFunctionElements getBuildInFunctionAccess() {
		return pBuildInFunction;
	}
	
	public ParserRule getBuildInFunctionRule() {
		return getBuildInFunctionAccess().getRule();
	}

	/// * ###################################################
	// * ###               7.6 Old Syntax                ###
	// * ###################################################
	// * / Do:
	//	annotations+=Annotation*
	//	"do" ((statements+=EsterelStatement ";")* statements+=EsterelStatement?) (endingAnnotations+=Annotation*
	//	"upto"
	//	expr=DelayExpr
	//	| endingAnnotations+=Annotation*
	//	"watching"
	//	delay=DelayExpr ("timeout" ((watchingStatements+=EsterelStatement ";")* watchingStatements+=EsterelStatement?)
	//	"end" "timeout"?)?);
	public DoElements getDoAccess() {
		return pDo;
	}
	
	public ParserRule getDoRule() {
		return getDoAccess().getRule();
	}

	//enum Esterel_CompareOperator returns OperatorType:
	//	EQ="=" | LT="<" | LEQ="<=" | GT=">" | GEQ=">=" | NE="<>";
	public Esterel_CompareOperatorElements getEsterel_CompareOperatorAccess() {
		return eEsterel_CompareOperator;
	}
	
	public EnumRule getEsterel_CompareOperatorRule() {
		return getEsterel_CompareOperatorAccess().getRule();
	}

	//enum Esterel_PreOperator returns OperatorType:
	//	PRE="pre";
	public Esterel_PreOperatorElements getEsterel_PreOperatorAccess() {
		return eEsterel_PreOperator;
	}
	
	public EnumRule getEsterel_PreOperatorRule() {
		return getEsterel_PreOperatorAccess().getRule();
	}

	//enum Esterel_OrOperator returns OperatorType:
	//	OR="or";
	public Esterel_OrOperatorElements getEsterel_OrOperatorAccess() {
		return eEsterel_OrOperator;
	}
	
	public EnumRule getEsterel_OrOperatorRule() {
		return getEsterel_OrOperatorAccess().getRule();
	}

	//enum Esterel_AndOperator returns OperatorType:
	//	AND="and";
	public Esterel_AndOperatorElements getEsterel_AndOperatorAccess() {
		return eEsterel_AndOperator;
	}
	
	public EnumRule getEsterel_AndOperatorRule() {
		return getEsterel_AndOperatorAccess().getRule();
	}

	//enum Esterel_NotOperator returns OperatorType:
	//	NOT="not";
	public Esterel_NotOperatorElements getEsterel_NotOperatorAccess() {
		return eEsterel_NotOperator;
	}
	
	public EnumRule getEsterel_NotOperatorRule() {
		return getEsterel_NotOperatorAccess().getRule();
	}

	//enum Esterel_AddOperator returns OperatorType:
	//	ADD="+";
	public Esterel_AddOperatorElements getEsterel_AddOperatorAccess() {
		return eEsterel_AddOperator;
	}
	
	public EnumRule getEsterel_AddOperatorRule() {
		return getEsterel_AddOperatorAccess().getRule();
	}

	//enum Esterel_SubOperator returns OperatorType:
	//	SUB="-";
	public Esterel_SubOperatorElements getEsterel_SubOperatorAccess() {
		return eEsterel_SubOperator;
	}
	
	public EnumRule getEsterel_SubOperatorRule() {
		return getEsterel_SubOperatorAccess().getRule();
	}

	//enum Esterel_MultOperator returns OperatorType:
	//	MULT="*";
	public Esterel_MultOperatorElements getEsterel_MultOperatorAccess() {
		return eEsterel_MultOperator;
	}
	
	public EnumRule getEsterel_MultOperatorRule() {
		return getEsterel_MultOperatorAccess().getRule();
	}

	//enum Esterel_ModOperator returns OperatorType:
	//	MOD="mod";
	public Esterel_ModOperatorElements getEsterel_ModOperatorAccess() {
		return eEsterel_ModOperator;
	}
	
	public EnumRule getEsterel_ModOperatorRule() {
		return getEsterel_ModOperatorAccess().getRule();
	}

	//enum Esterel_DivOperator returns OperatorType:
	//	DIV="/";
	public Esterel_DivOperatorElements getEsterel_DivOperatorAccess() {
		return eEsterel_DivOperator;
	}
	
	public EnumRule getEsterel_DivOperatorRule() {
		return getEsterel_DivOperatorAccess().getRule();
	}

	//enum Esterel_ValueTestOperator returns OperatorType:
	//	VAL="?";
	public Esterel_ValueTestOperatorElements getEsterel_ValueTestOperatorAccess() {
		return eEsterel_ValueTestOperator;
	}
	
	public EnumRule getEsterel_ValueTestOperatorRule() {
		return getEsterel_ValueTestOperatorAccess().getRule();
	}

	//enum Esterel_ValueType returns ValueType:
	//	PURE="pure" | BOOL="boolean" | UNSIGNED="unsigned" |
	//	INT="integer" | FLOAT="float" | DOUBLE="double" |
	//	STRING="string" | HOST="host";
	public Esterel_ValueTypeElements getEsterel_ValueTypeAccess() {
		return eEsterel_ValueType;
	}
	
	public EnumRule getEsterel_ValueTypeRule() {
		return getEsterel_ValueTypeAccess().getRule();
	}

	//enum Esterel_CombineOperator returns CombineOperator:
	//	NONE="none" | ADD="+" | MULT="*" | MAX="max" |
	//	MIN="min" | OR="or" | AND="and" | HOST="host";
	public Esterel_CombineOperatorElements getEsterel_CombineOperatorAccess() {
		return eEsterel_CombineOperator;
	}
	
	public EnumRule getEsterel_CombineOperatorRule() {
		return getEsterel_CombineOperatorAccess().getRule();
	}

	//terminal SL_COMMENT:
	//	'%' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	} 

	//terminal ML_COMMENT:
	//	('%' '{')->('}' '%');
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	} 

	//terminal STRING:
	//	'"' (!'"' | '"' '"')* '"';
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	} 

	//terminal HOSTCODE:
	//	"'" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | "'"))* "'";
	public TerminalRule getHOSTCODERule() {
		return tHOSTCODE;
	} 

	/// * ###################################################
	// * ###               Expressions                   ###
	// * ###################################################
	// * / // Esterel is a bit richer than what is provided by kexpressions. 
	//// These rules are introduced here.
	//// Care about order of the rules! 
	//AtomicExpression Expression:
	//	FunctionExpression
	//	| TrapExpression
	//	| BooleanValue
	//	| ValuedObjectTestExpression
	//	| TextExpression
	//	| '(' BooleanExpression ')'
	//	| ConstantExpression
	public AtomicExpressionElements getAtomicExpressionAccess() {
		return pAtomicExpression;
	}
	
	public ParserRule getAtomicExpressionRule() {
		return getAtomicExpressionAccess().getRule();
	}

	//TrapExpression Expression:
	//	{TrapExpression} "??" trap=[ISignal]
	public TrapExpressionElements getTrapExpressionAccess() {
		return pTrapExpression;
	}
	
	public ParserRule getTrapExpressionRule() {
		return getTrapExpressionAccess().getRule();
	}

	//FunctionExpression Expression:
	//	{FunctionExpression} function=[Function]
	//	"(" (kexpressions+=Expression ("," kexpressions+=Expression)*)? ")"
	public FunctionExpressionElements getFunctionExpressionAccess() {
		return pFunctionExpression;
	}
	
	public ParserRule getFunctionExpressionRule() {
		return getFunctionExpressionAccess().getRule();
	}

	//ConstantExpression Expression:
	//	{ConstantExpression} (constant=[Constant] | value=ConstantValue)
	public ConstantExpressionElements getConstantExpressionAccess() {
		return pConstantExpression;
	}
	
	public ParserRule getConstantExpressionRule() {
		return getConstantExpressionAccess().getRule();
	}

	//// --> B.3.5 Trap Expressions <--
	//// -------------------------------------
	//TrapExpr Expression:
	//	SignalExpression
	public TrapExprElements getTrapExprAccess() {
		return pTrapExpr;
	}
	
	public ParserRule getTrapExprRule() {
		return getTrapExprAccess().getRule();
	}

	//// --> B.3.3 Signal Expressions <--
	//// -------------------------------------
	//SignalExpression Expression:
	//	SignalAndExpression ({OperatorExpression.subExpressions+=current} operator=Esterel_OrOperator
	//	subExpressions+=SignalAndExpression)*
	public SignalExpressionElements getSignalExpressionAccess() {
		return pSignalExpression;
	}
	
	public ParserRule getSignalExpressionRule() {
		return getSignalExpressionAccess().getRule();
	}

	//SignalAndExpression Expression:
	//	SignalNotExpression ({OperatorExpression.subExpressions+=current} operator=Esterel_AndOperator
	//	subExpressions+=SignalNotExpression)*
	public SignalAndExpressionElements getSignalAndExpressionAccess() {
		return pSignalAndExpression;
	}
	
	public ParserRule getSignalAndExpressionRule() {
		return getSignalAndExpressionAccess().getRule();
	}

	//SignalNotExpression Expression:
	//	{OperatorExpression} operator=Esterel_NotOperator
	//	subExpressions+=SignalNotExpression | SignalAtomicExpression
	public SignalNotExpressionElements getSignalNotExpressionAccess() {
		return pSignalNotExpression;
	}
	
	public ParserRule getSignalNotExpressionRule() {
		return getSignalNotExpressionAccess().getRule();
	}

	//SignalAtomicExpression Expression:
	//	SignalReferenceExpr
	//	| "(" SignalExpression ")"
	//	| SignalPreExpr
	//	| TrapReferenceExpr
	public SignalAtomicExpressionElements getSignalAtomicExpressionAccess() {
		return pSignalAtomicExpression;
	}
	
	public ParserRule getSignalAtomicExpressionRule() {
		return getSignalAtomicExpressionAccess().getRule();
	}

	//SignalReferenceExpr ValuedObjectReference:
	//	valuedObject=[ISignal]
	public SignalReferenceExprElements getSignalReferenceExprAccess() {
		return pSignalReferenceExpr;
	}
	
	public ParserRule getSignalReferenceExprRule() {
		return getSignalReferenceExprAccess().getRule();
	}

	//SignalPreExpr Expression:
	//	{OperatorExpression} operator=Esterel_PreOperator
	//	'(' subExpressions+=SignalReferenceExpr ')'
	public SignalPreExprElements getSignalPreExprAccess() {
		return pSignalPreExpr;
	}
	
	public ParserRule getSignalPreExprRule() {
		return getSignalPreExprAccess().getRule();
	}

	//TrapReferenceExpr ValuedObjectReference:
	//	{TrapReferenceExpr} valuedObject=[TrapSignal]
	public TrapReferenceExprElements getTrapReferenceExprAccess() {
		return pTrapReferenceExpr;
	}
	
	public ParserRule getTrapReferenceExprRule() {
		return getTrapReferenceExprAccess().getRule();
	}

	//// --> B.3.4 Delay Expressions <--
	//// -------------------------------------
	//DelayExpr:
	//	expr=Expression (tick=Tick
	//	| signalExpr=SignalReferenceExpr
	//	| "[" signalExpr=SignalExpression "]") | (tick=Tick
	//	| signalExpr=SignalReferenceExpr
	//	| "[" signalExpr=SignalExpression "]") | isImmediate?="immediate" (tick=Tick
	//	| signalExpr=SignalReferenceExpr
	//	| "[" signalExpr=SignalExpression "]");
	public DelayExprElements getDelayExprAccess() {
		return pDelayExpr;
	}
	
	public ParserRule getDelayExprRule() {
		return getDelayExprAccess().getRule();
	}

	/// * #########################################################################
	// * 
	// * 
	// * Before the following was an extra plugin named
	// * "KExpressions":  de.cau.cs.kieler.esterel.kexpressions
	// * 
	// * 
	// * #########################################################################
	// * / Expression:
	//	=> BooleanExpression
	//	| ValuedExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//// Example: not D and C or ?E = 42 or not (A and (B or C))
	//BooleanExpression Expression:
	//	OrExpression
	public BooleanExpressionElements getBooleanExpressionAccess() {
		return pBooleanExpression;
	}
	
	public ParserRule getBooleanExpressionRule() {
		return getBooleanExpressionAccess().getRule();
	}

	//// Example: A or B, A and B and C, C and B or D and not E, A and B and C
	//OrExpression Expression:
	//	AndExpression ({OperatorExpression.subExpressions+=current} operator=Esterel_OrOperator
	//	subExpressions+=AndExpression)*
	public OrExpressionElements getOrExpressionAccess() {
		return pOrExpression;
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}

	//// Example: A and B, not C and 42 <= ?D
	//AndExpression Expression:
	//	CompareOperation ({OperatorExpression.subExpressions+=current} operator=Esterel_AndOperator
	//	subExpressions+=CompareOperation)*
	public AndExpressionElements getAndExpressionAccess() {
		return pAndExpression;
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}

	//// Example: 42 <= ?A
	//CompareOperation Expression:
	//	=> NotOrValuedExpression ({OperatorExpression.subExpressions+=current} operator=Esterel_CompareOperator
	//	subExpressions+=NotOrValuedExpression) | NotExpression
	public CompareOperationElements getCompareOperationAccess() {
		return pCompareOperation;
	}
	
	public ParserRule getCompareOperationRule() {
		return getCompareOperationAccess().getRule();
	}

	//// order IS IMPORTANT
	//NotOrValuedExpression Expression:
	//	=> ValuedExpression
	//	| NotExpression
	public NotOrValuedExpressionElements getNotOrValuedExpressionAccess() {
		return pNotOrValuedExpression;
	}
	
	public ParserRule getNotOrValuedExpressionRule() {
		return getNotOrValuedExpressionAccess().getRule();
	}

	//// Example: not A, not false, not (A or B)
	//// at the latter we need the parans to indicate the right binding
	//NotExpression Expression:
	//	{OperatorExpression} operator=Esterel_NotOperator
	//	subExpressions+=NotExpression | AtomicExpression
	public NotExpressionElements getNotExpressionAccess() {
		return pNotExpression;
	}
	
	public ParserRule getNotExpressionRule() {
		return getNotExpressionAccess().getRule();
	}

	//// everything that evaluates to a primitive number value
	//ValuedExpression Expression:
	//	AddExpression
	public ValuedExpressionElements getValuedExpressionAccess() {
		return pValuedExpression;
	}
	
	public ParserRule getValuedExpressionRule() {
		return getValuedExpressionAccess().getRule();
	}

	//// Example: 1 + 2
	//AddExpression Expression:
	//	SubExpression ({OperatorExpression.subExpressions+=current} operator=Esterel_AddOperator
	//	subExpressions+=SubExpression)*
	public AddExpressionElements getAddExpressionAccess() {
		return pAddExpression;
	}
	
	public ParserRule getAddExpressionRule() {
		return getAddExpressionAccess().getRule();
	}

	//// Example: varA - ?B
	//SubExpression Expression:
	//	MultExpression ({OperatorExpression.subExpressions+=current} operator=Esterel_SubOperator
	//	subExpressions+=MultExpression)*
	public SubExpressionElements getSubExpressionAccess() {
		return pSubExpression;
	}
	
	public ParserRule getSubExpressionRule() {
		return getSubExpressionAccess().getRule();
	}

	//// Example: 2 * 4
	//MultExpression Expression:
	//	DivExpression ({OperatorExpression.subExpressions+=current} operator=Esterel_MultOperator
	//	subExpressions+=DivExpression)*
	public MultExpressionElements getMultExpressionAccess() {
		return pMultExpression;
	}
	
	public ParserRule getMultExpressionRule() {
		return getMultExpressionAccess().getRule();
	}

	//// Example: (2 / 4)
	//// note: division always has to have parantheses because the '/' sign is also used for trigger/effect delimiter
	//DivExpression Expression:
	//	ModExpression ({OperatorExpression.subExpressions+=current} operator=Esterel_DivOperator
	//	subExpressions+=ModExpression)?
	public DivExpressionElements getDivExpressionAccess() {
		return pDivExpression;
	}
	
	public ParserRule getDivExpressionRule() {
		return getDivExpressionAccess().getRule();
	}

	//// Example: varA mod ?B
	//ModExpression Expression:
	//	NegExpression ({OperatorExpression.subExpressions+=current} operator=Esterel_ModOperator
	//	subExpressions+=AtomicValuedExpression)?
	public ModExpressionElements getModExpressionAccess() {
		return pModExpression;
	}
	
	public ParserRule getModExpressionRule() {
		return getModExpressionAccess().getRule();
	}

	//// Example: not A, not false, not (A or B)
	//// at the latter we need the parans to indicate the right binding
	//NegExpression Expression:
	//	{OperatorExpression} operator=Esterel_SubOperator
	//	subExpressions+=NegExpression | AtomicValuedExpression
	public NegExpressionElements getNegExpressionAccess() {
		return pNegExpression;
	}
	
	public ParserRule getNegExpressionRule() {
		return getNegExpressionAccess().getRule();
	}

	//AtomicValuedExpression Expression:
	//	Esterel_IntValue
	//	| FloatValue
	//	//    | '(' DivExpression ')'
	//	| => '(' ValuedExpression ')'
	//	| AtomicExpression
	public AtomicValuedExpressionElements getAtomicValuedExpressionAccess() {
		return pAtomicValuedExpression;
	}
	
	public ParserRule getAtomicValuedExpressionRule() {
		return getAtomicValuedExpressionAccess().getRule();
	}

	//// Example: pre(pre(?A)), pre(pre(A)), ?A, A varX
	//ValuedObjectTestExpression Expression:
	//	{OperatorExpression} operator=Esterel_PreOperator '(' subExpressions+=ValuedObjectTestExpression ')'
	//	| {OperatorExpression} operator=Esterel_ValueTestOperator subExpressions+=Esterel_ValuedObjectReference
	//	| Esterel_ValuedObjectReference
	public ValuedObjectTestExpressionElements getValuedObjectTestExpressionAccess() {
		return pValuedObjectTestExpression;
	}
	
	public ParserRule getValuedObjectTestExpressionRule() {
		return getValuedObjectTestExpressionAccess().getRule();
	}

	//// Example: A, varB
	//Esterel_ValuedObjectReference ValuedObjectReference:
	//	{Esterel_ValuedObjectReference} valuedObject=[ValuedObject]
	public Esterel_ValuedObjectReferenceElements getEsterel_ValuedObjectReferenceAccess() {
		return pEsterel_ValuedObjectReference;
	}
	
	public ParserRule getEsterel_ValuedObjectReferenceRule() {
		return getEsterel_ValuedObjectReferenceAccess().getRule();
	}

	//// Example: 'printf(...)'(C)
	//TextExpression:
	//	code=HOSTCODE ("(" type=ID ")")?;
	public TextExpressionElements getTextExpressionAccess() {
		return pTextExpression;
	}
	
	public ParserRule getTextExpressionRule() {
		return getTextExpressionAccess().getRule();
	}

	//Esterel_IntValue IntValue:
	//	value=INT
	public Esterel_IntValueElements getEsterel_IntValueAccess() {
		return pEsterel_IntValue;
	}
	
	public ParserRule getEsterel_IntValueRule() {
		return getEsterel_IntValueAccess().getRule();
	}

	//FloatValue:
	//	value=FLOAT;
	public FloatValueElements getFloatValueAccess() {
		return pFloatValue;
	}
	
	public ParserRule getFloatValueRule() {
		return getFloatValueAccess().getRule();
	}

	//BooleanValue:
	//	value=BOOLEAN;
	public BooleanValueElements getBooleanValueAccess() {
		return pBooleanValue;
	}
	
	public ParserRule getBooleanValueRule() {
		return getBooleanValueAccess().getRule();
	}

	//// data type rule allowing any kind of value to be accepted,
	//// e.g. as initialValues of valuedObjects
	//// used in Kits.xtext 
	//AnyType:
	//	BOOLEAN | INT | FLOAT | ID | STRING;
	public AnyTypeElements getAnyTypeAccess() {
		return pAnyType;
	}
	
	public ParserRule getAnyTypeRule() {
		return getAnyTypeAccess().getRule();
	}

	//SCLProgram:
	//	annotations+=Annotation*
	//	'module' name=ID ':'?
	//	declarations+=Declaration* (statements+=InstructionStatement ';' | statements+=MetaStatement)* statements+=Statement?;
	public SCLGrammarAccess.SCLProgramElements getSCLProgramAccess() {
		return gaSCL.getSCLProgramAccess();
	}
	
	public ParserRule getSCLProgramRule() {
		return getSCLProgramAccess().getRule();
	}

	//StatementContainer:
	//	statements+=Statement;
	public SCLGrammarAccess.StatementContainerElements getStatementContainerAccess() {
		return gaSCL.getStatementContainerAccess();
	}
	
	public ParserRule getStatementContainerRule() {
		return getStatementContainerAccess().getRule();
	}

	//Statement:
	//	InstructionStatement | MetaStatement;
	public SCLGrammarAccess.StatementElements getStatementAccess() {
		return gaSCL.getStatementAccess();
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//InstructionStatement Statement:
	//	Assignment | Conditional | Goto | Parallel | Pause
	public SCLGrammarAccess.InstructionStatementElements getInstructionStatementAccess() {
		return gaSCL.getInstructionStatementAccess();
	}
	
	public ParserRule getInstructionStatementRule() {
		return getInstructionStatementAccess().getRule();
	}

	//MetaStatement Statement:
	//	Label | ScopeStatement
	public SCLGrammarAccess.MetaStatementElements getMetaStatementAccess() {
		return gaSCL.getMetaStatementAccess();
	}
	
	public ParserRule getMetaStatementRule() {
		return getMetaStatementAccess().getRule();
	}

	//Pause:
	//	{Pause} annotations+=Annotation*
	//	'pause';
	public SCLGrammarAccess.PauseElements getPauseAccess() {
		return gaSCL.getPauseAccess();
	}
	
	public ParserRule getPauseRule() {
		return getPauseAccess().getRule();
	}

	//Label:
	//	annotations+=Annotation* (name=ID ':');
	public SCLGrammarAccess.LabelElements getLabelAccess() {
		return gaSCL.getLabelAccess();
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}

	//Goto:
	//	'goto' target=[Label];
	public SCLGrammarAccess.GotoElements getGotoAccess() {
		return gaSCL.getGotoAccess();
	}
	
	public ParserRule getGotoRule() {
		return getGotoAccess().getRule();
	}

	//Assignment:
	//	annotations+=Annotation*
	//	valuedObject=[kexpressions::ValuedObject] ('[' indices+=super::Expression ']')* "=" expression=super::Expression;
	public SCLGrammarAccess.AssignmentElements getAssignmentAccess() {
		return gaSCL.getAssignmentAccess();
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//Conditional:
	//	annotations+=Annotation*
	//	'if' expression=super::Expression ('then'? '{'
	//	declarations+=Declaration* (statements+=InstructionStatement ';' | statements+=MetaStatement)* statements+=Statement?
	//	'}') else=ElseScope?;
	public SCLGrammarAccess.ConditionalElements getConditionalAccess() {
		return gaSCL.getConditionalAccess();
	}
	
	public ParserRule getConditionalRule() {
		return getConditionalAccess().getRule();
	}

	//ElseScope:
	//	{ElseScope} annotations+=Annotation*
	//	'else' '{'
	//	declarations+=Declaration* (statements+=InstructionStatement ';' | statements+=MetaStatement)* statements+=Statement?
	//	'}';
	public SCLGrammarAccess.ElseScopeElements getElseScopeAccess() {
		return gaSCL.getElseScopeAccess();
	}
	
	public ParserRule getElseScopeRule() {
		return getElseScopeAccess().getRule();
	}

	//Thread:
	//	{Thread} (annotations+=Annotation*
	//	'{'
	//	declarations+=Declaration* (statements+=InstructionStatement ';' | statements+=MetaStatement)* statements+=Statement?
	//	'}'
	//	| (statements+=InstructionStatement ';' | statements+=MetaStatement)* statements+=Statement?);
	public SCLGrammarAccess.ThreadElements getThreadAccess() {
		return gaSCL.getThreadAccess();
	}
	
	public ParserRule getThreadRule() {
		return getThreadAccess().getRule();
	}

	//Parallel:
	//	'fork' (threads+=Thread ('par'
	//	threads+=Thread)*)
	//	'join';
	public SCLGrammarAccess.ParallelElements getParallelAccess() {
		return gaSCL.getParallelAccess();
	}
	
	public ParserRule getParallelRule() {
		return getParallelAccess().getRule();
	}

	//ScopeStatement:
	//	{ScopeStatement} annotations+=Annotation*
	//	'{'
	//	declarations+=Declaration* (statements+=InstructionStatement ';' | statements+=MetaStatement)* statements+=Statement?
	//	'}';
	public SCLGrammarAccess.ScopeStatementElements getScopeStatementAccess() {
		return gaSCL.getScopeStatementAccess();
	}
	
	public ParserRule getScopeStatementRule() {
		return getScopeStatementAccess().getRule();
	}

	/// **
	// * @author ssm
	// * @kieler.design 2015-08-23 proposed 
	// * @kieler.rating 2015-08-23 proposed yellow
	// * / / *
	// * KEXT (KText) provides a general stub for subsequent grammars that will use kexpressions, keffects
	// * and need some kind of declaration mechanism. It is also used to generate the textual KEXT language 
	// * that is used for testing kexpressions and keffects.  
	// * / // ------------ //
	////  KEXT Rules  // 
	//// ------------ //
	//// KEXT Rule
	//// The KEXT lagnuages starts with an optional declaration part. Then, an arbitrary number of 
	//// test entities may follow.
	//Kext kext::Kext:
	//	declarations+=Declaration*
	//	entities+=TestEntity*
	public KExtGrammarAccess.KextElements getKextAccess() {
		return gaKExt.getKextAccess();
	}
	
	public ParserRule getKextRule() {
		return getKextAccess().getRule();
	}

	//// Test Entity Rule
	//// A test entity is either an annotation expression or an effect.
	//TestEntity kext::TestEntity:
	//	expression=AnnotatedExpression | effect=Effect
	public KExtGrammarAccess.TestEntityElements getTestEntityAccess() {
		return gaKExt.getTestEntityAccess();
	}
	
	public ParserRule getTestEntityRule() {
		return getTestEntityAccess().getRule();
	}

	//// Annotated Expression Rule
	//// An annotated expression is declared with the keyword "expression". It may be preceded by a list
	//// of annotations. The expression itself follows the keyword.
	//AnnotatedExpression kext::AnnotatedExpression:
	//	annotations+=Annotation*
	//	'expression'
	//	expression=super::Expression
	public KExtGrammarAccess.AnnotatedExpressionElements getAnnotatedExpressionAccess() {
		return gaKExt.getAnnotatedExpressionAccess();
	}
	
	public ParserRule getAnnotatedExpressionRule() {
		return getAnnotatedExpressionAccess().getRule();
	}

	//// Declaration Rule
	//// A declaration follows the general KIELER pattern for variable declaration. More specific:
	//// this centralized declaration rule should replace any other declaration in drived grammars.
	//// It may start with arbitrary many declarations followed by keywords affecting the type of the
	//// valued objects that follow.
	//// Examples: const float pi = 3.14, input signal I, output bool z  
	//Declaration kexpressions::Declaration:
	//	annotations+=Annotation*
	//	const?='const'?
	//	extern?='extern'?
	//	volatile?='volatile'?
	//	input?='input'?
	//	output?='output'?
	//	static?='static'? (signal?='signal'? type=ValueType | signal?='signal') valuedObjects+=ValuedObject (','
	//	valuedObjects+=ValuedObject)* ';'
	public KExtGrammarAccess.DeclarationElements getDeclarationAccess() {
		return gaKExt.getDeclarationAccess();
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}

	//// Valued Object Rule
	//// A valued object is identified by its name. Then, a part for its cardinalities and an initial 
	//// expression may follow. Additionally, the declaration of the object may be finished by a combine part. 
	//// Examples: array[10], initial = false, z = 0 combine max
	//ValuedObject kexpressions::ValuedObject:
	//	name=ID ('[' cardinalities+=super::Expression ']')* ('=' initialValue=super::Expression)? ('combine'
	//	combineOperator=CombineOperator)?
	public KExtGrammarAccess.ValuedObjectElements getValuedObjectAccess() {
		return gaKExt.getValuedObjectAccess();
	}
	
	public ParserRule getValuedObjectRule() {
		return getValuedObjectAccess().getRule();
	}

	/// **
	// * @author ssm
	// * @kieler.design 2015-08-23 proposed 
	// * @kieler.rating 2015-08-23 proposed yellow
	// * / / *
	// * KEffects allow deriving grammars to use a range of different effects, namely assignments,
	// * postfix effects, esterel like emissions, host code and function call effects.
	// * Of course other grammars may extend this list.
	// * / // ---------------- //
	////  KEffects Rules  // 
	//// ---------------- //
	//// Effect Rule
	//// An effect is either an assignment, a postfix effect, an emission, a hostcode effect or a 
	//// function call effect.
	//Effect keffects::Effect:
	//	super::Assignment | PostfixEffect | Emission | HostcodeEffect | FunctionCallEffect
	public KEffectsGrammarAccess.EffectElements getEffectAccess() {
		return gaKEffects.getEffectAccess();
	}
	
	public ParserRule getEffectRule() {
		return getEffectAccess().getRule();
	}

	//// Emission Rule
	//// An emission is a esterel like 'call' of a signal instance. A transition effect list may simply set
	//// an emission for a specific signal to emit it. Additionally, emission may include a parameter part for
	//// a new value in the case of valued signals. 
	//// Example: A, B(2)
	//// Important: To help the parser and to avoid ambiguities, emissions may only allow restricted 
	//// annotations defined in the annotations grammar.		
	//Emission keffects::Emission:
	//	annotations+=RestrictedAnnotation*
	//	valuedObject=[kexpressions::ValuedObject] ("(" newValue=super::Expression ")")?
	public KEffectsGrammarAccess.EmissionElements getEmissionAccess() {
		return gaKEffects.getEmissionAccess();
	}
	
	public ParserRule getEmissionRule() {
		return getEmissionAccess().getRule();
	}

	//// Postfix Effect
	//// A postfix effect is an assignment missing the part beyond the operator. In this case the operator type
	//// must be a postfix operator.
	//// Example: I++, I-- 
	//PostfixEffect keffects::Assignment:
	//	annotations+=Annotation*
	//	valuedObject=[kexpressions::ValuedObject] ('[' indices+=super::Expression ']')*
	//	operator=PostfixOperator
	public KEffectsGrammarAccess.PostfixEffectElements getPostfixEffectAccess() {
		return gaKEffects.getPostfixEffectAccess();
	}
	
	public ParserRule getPostfixEffectRule() {
		return getPostfixEffectAccess().getRule();
	}

	//// Hostcode Effect Rule
	//// A hostcode effect is an effect that include hostcode. It may be preceded by a list of annotations.
	//HostcodeEffect keffects::HostcodeEffect:
	//	annotations+=Annotation*
	//	text=super::HOSTCODE
	public KEffectsGrammarAccess.HostcodeEffectElements getHostcodeEffectAccess() {
		return gaKEffects.getHostcodeEffectAccess();
	}
	
	public ParserRule getHostcodeEffectRule() {
		return getHostcodeEffectAccess().getRule();
	}

	//// Function Call Effect Rule
	//// A function call effect works similar to the function call expression. Additionally, it may be
	//// preceded by a list of annotations.
	//FunctionCallEffect keffects::FunctionCallEffect:
	//	annotations+=Annotation*
	//	'<' functionName=ExtendedID ('(' parameters+=Parameter (',' parameters+=Parameter)* ')' | '()')?
	//	'>'
	public KEffectsGrammarAccess.FunctionCallEffectElements getFunctionCallEffectAccess() {
		return gaKEffects.getFunctionCallEffectAccess();
	}
	
	public ParserRule getFunctionCallEffectRule() {
		return getFunctionCallEffectAccess().getRule();
	}

	//enum AssignOperator returns keffects::AssignOperator:
	//	ASSIGN="=" | ASSIGNADD="+=" | ASSIGNSUB="-=" | ASSIGNMUL="*=" | ASSIGNDIV="/=";
	public KEffectsGrammarAccess.AssignOperatorElements getAssignOperatorAccess() {
		return gaKEffects.getAssignOperatorAccess();
	}
	
	public EnumRule getAssignOperatorRule() {
		return getAssignOperatorAccess().getRule();
	}

	//enum PostfixOperator returns keffects::AssignOperator:
	//	POSTFIXADD="++" | POSTFIXSUB="--";
	public KEffectsGrammarAccess.PostfixOperatorElements getPostfixOperatorAccess() {
		return gaKEffects.getPostfixOperatorAccess();
	}
	
	public EnumRule getPostfixOperatorRule() {
		return getPostfixOperatorAccess().getRule();
	}

	/// **
	// * @author ssm
	// * @kieler.design 2015-08-21 proposed 
	// * @kieler.rating 2015-08-21 proposed yellow
	// * / // -------------------- //
	////  KExpressions Rules  // 
	//// -------------------- //
	/// * Expression rules are organized in a chain. They pass the actual instance to the next rule but may 
	// * consume tokens to create a specific expression element. Following this pattern, complex constructs
	// * can be created. This also implies an order of precedence.
	// *
	// * Expression
	// * + BooleanExpression
	// *   + LogicalOrExpression
	// *     + LogicalAndExpression
	// *       + BitwiseOrExpression
	// *         + BitwiseAndExpression
	// *           + CompareExpression
	// *             + NotOrValuedExpression
	// *               + ValuedExpression (see valued expression below)
	// *               + NotExpression *
	// *                 + AtomicExpression *
	// *                   + BoolValue
	// *                   + ValuedObjectTestExpression
	// *                     + ValuedObjectReference
	// *                   + FunctionCall
	// *                   + TextExpression
	// * + ValuedExpression
	// *   + AddExpression
	// *     + SubExpression
	// *       + MultExpression
	// *         + DivExpression
	// *           + ModExpression
	// *             + NegExpression *
	// *               + AtomicValuedExpression *
	// *                 + IntValue
	// *                 + FloatValue
	// *                 + StringValue
	// *                 + AtomicExpression
	// * / // Root Rule
	//// Always return an expression.
	//Root ecore::EObject:
	//	super::Expression
	public KExpressionsGrammarAccess.RootElements getRootAccess() {
		return gaKExpressions.getRootAccess();
	}
	
	public ParserRule getRootRule() {
		return getRootAccess().getRule();
	}

	//// Boolean Expression Rule
	//// Boolean expression directs to logical or expression and kept for overview (and legacy) reason. 
	//// One could skip directly to the next rule.
	//BoolExpression Expression:
	//	LogicalOrExpression
	public KExpressionsGrammarAccess.BoolExpressionElements getBoolExpressionAccess() {
		return gaKExpressions.getBoolExpressionAccess();
	}
	
	public ParserRule getBoolExpressionRule() {
		return getBoolExpressionAccess().getRule();
	}

	//// Logical Or Expression Rule
	//// Directs to the 'logical and' rule and may create an operator expression for 'logical or' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//LogicalOrExpression Expression:
	//	LogicalAndExpression ({OperatorExpression.subExpressions+=current} (operator=LogicalOrOperator
	//	subExpressions+=LogicalAndExpression)+)?
	public KExpressionsGrammarAccess.LogicalOrExpressionElements getLogicalOrExpressionAccess() {
		return gaKExpressions.getLogicalOrExpressionAccess();
	}
	
	public ParserRule getLogicalOrExpressionRule() {
		return getLogicalOrExpressionAccess().getRule();
	}

	//// Logical And Expression Rule
	//// Directs to the 'bitwise or' rule and may create an operator expression for 'logical and' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//LogicalAndExpression Expression:
	//	BitwiseOrExpression ({OperatorExpression.subExpressions+=current} (operator=LogicalAndOperator
	//	subExpressions+=BitwiseOrExpression)+)?
	public KExpressionsGrammarAccess.LogicalAndExpressionElements getLogicalAndExpressionAccess() {
		return gaKExpressions.getLogicalAndExpressionAccess();
	}
	
	public ParserRule getLogicalAndExpressionRule() {
		return getLogicalAndExpressionAccess().getRule();
	}

	//// Bitwiese Or Expression Rule
	//// Directs to the 'bitwise and' rule and may create an operator expression for 'bitwise or' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//BitwiseOrExpression Expression:
	//	BitwiseAndExpression ({OperatorExpression.subExpressions+=current} (operator=BitwiseOrOperator
	//	subExpressions+=BitwiseAndExpression)+)?
	public KExpressionsGrammarAccess.BitwiseOrExpressionElements getBitwiseOrExpressionAccess() {
		return gaKExpressions.getBitwiseOrExpressionAccess();
	}
	
	public ParserRule getBitwiseOrExpressionRule() {
		return getBitwiseOrExpressionAccess().getRule();
	}

	//// Bitwise And Expression Rule
	//// Directs to the compare rule and may create an operator expression for 'bitwise and' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//BitwiseAndExpression Expression:
	//	super::CompareOperation ({OperatorExpression.subExpressions+=current} (operator=BitwiseAndOperator
	//	subExpressions+=super::CompareOperation)+)?
	public KExpressionsGrammarAccess.BitwiseAndExpressionElements getBitwiseAndExpressionAccess() {
		return gaKExpressions.getBitwiseAndExpressionAccess();
	}
	
	public ParserRule getBitwiseAndExpressionRule() {
		return getBitwiseAndExpressionAccess().getRule();
	}

	//// Valued Object Reference Rule
	//// References a valued object with arbitrary (including none) indices part.
	//// Example: A, B
	//ValuedObjectReference:
	//	valuedObject=[ValuedObject] ('[' indices+=super::Expression ']')*;
	public KExpressionsGrammarAccess.ValuedObjectReferenceElements getValuedObjectReferenceAccess() {
		return gaKExpressions.getValuedObjectReferenceAccess();
	}
	
	public ParserRule getValuedObjectReferenceRule() {
		return getValuedObjectReferenceAccess().getRule();
	}

	//// Function Call Rule
	//// Calls to functions are indicated by angle brackets. They may include a parameter list. 
	//FunctionCall:
	//	'<' functionName=ExtendedID ('(' parameters+=Parameter (',' parameters+=Parameter)* ')' | '()')?
	//	'>';
	public KExpressionsGrammarAccess.FunctionCallElements getFunctionCallAccess() {
		return gaKExpressions.getFunctionCallAccess();
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}

	//// Parameter Rule
	//// The parameter rule is used by the function call rule. Every expression may be a paramter.
	//// Additionally, a parameter may be preceded by an ampersand to indicate a call by reference.
	//// Analogously, an prefixed exclamation mark marks the parameter as pure output.
	//Parameter:
	//	(pureOutput?='!'? callByReference?='&')?
	//	expression=super::Expression;
	public KExpressionsGrammarAccess.ParameterElements getParameterAccess() {
		return gaKExpressions.getParameterAccess();
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//// Int Value Rule
	//IntValue:
	//	value=INT;
	public KExpressionsGrammarAccess.IntValueElements getIntValueAccess() {
		return gaKExpressions.getIntValueAccess();
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}

	//// Bool Value Rule
	//BoolValue:
	//	value=BOOLEAN;
	public KExpressionsGrammarAccess.BoolValueElements getBoolValueAccess() {
		return gaKExpressions.getBoolValueAccess();
	}
	
	public ParserRule getBoolValueRule() {
		return getBoolValueAccess().getRule();
	}

	//// String Value Rule	
	//StringValue:
	//	value=super::STRING;
	public KExpressionsGrammarAccess.StringValueElements getStringValueAccess() {
		return gaKExpressions.getStringValueAccess();
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}

	//AnyValue Value:
	//	IntValue | super::FloatValue | BoolValue | StringValue
	public KExpressionsGrammarAccess.AnyValueElements getAnyValueAccess() {
		return gaKExpressions.getAnyValueAccess();
	}
	
	public ParserRule getAnyValueRule() {
		return getAnyValueAccess().getRule();
	}

	//enum CompareOperator returns OperatorType:
	//	EQ="==" | LT="<" | LEQ="<=" | GT=">" | GEQ=">=" | NE="!=";
	public KExpressionsGrammarAccess.CompareOperatorElements getCompareOperatorAccess() {
		return gaKExpressions.getCompareOperatorAccess();
	}
	
	public EnumRule getCompareOperatorRule() {
		return getCompareOperatorAccess().getRule();
	}

	//enum PreOperator returns OperatorType:
	//	PRE="pre";
	public KExpressionsGrammarAccess.PreOperatorElements getPreOperatorAccess() {
		return gaKExpressions.getPreOperatorAccess();
	}
	
	public EnumRule getPreOperatorRule() {
		return getPreOperatorAccess().getRule();
	}

	//enum BitwiseOrOperator returns OperatorType:
	//	BITWISE_OR="|";
	public KExpressionsGrammarAccess.BitwiseOrOperatorElements getBitwiseOrOperatorAccess() {
		return gaKExpressions.getBitwiseOrOperatorAccess();
	}
	
	public EnumRule getBitwiseOrOperatorRule() {
		return getBitwiseOrOperatorAccess().getRule();
	}

	//enum BitwiseAndOperator returns OperatorType:
	//	BITWISE_AND="&";
	public KExpressionsGrammarAccess.BitwiseAndOperatorElements getBitwiseAndOperatorAccess() {
		return gaKExpressions.getBitwiseAndOperatorAccess();
	}
	
	public EnumRule getBitwiseAndOperatorRule() {
		return getBitwiseAndOperatorAccess().getRule();
	}

	//enum NotOperator returns OperatorType:
	//	NOT="!";
	public KExpressionsGrammarAccess.NotOperatorElements getNotOperatorAccess() {
		return gaKExpressions.getNotOperatorAccess();
	}
	
	public EnumRule getNotOperatorRule() {
		return getNotOperatorAccess().getRule();
	}

	//enum AddOperator returns OperatorType:
	//	ADD="+";
	public KExpressionsGrammarAccess.AddOperatorElements getAddOperatorAccess() {
		return gaKExpressions.getAddOperatorAccess();
	}
	
	public EnumRule getAddOperatorRule() {
		return getAddOperatorAccess().getRule();
	}

	//enum SubOperator returns OperatorType:
	//	SUB="-";
	public KExpressionsGrammarAccess.SubOperatorElements getSubOperatorAccess() {
		return gaKExpressions.getSubOperatorAccess();
	}
	
	public EnumRule getSubOperatorRule() {
		return getSubOperatorAccess().getRule();
	}

	//enum MultOperator returns OperatorType:
	//	MULT="*";
	public KExpressionsGrammarAccess.MultOperatorElements getMultOperatorAccess() {
		return gaKExpressions.getMultOperatorAccess();
	}
	
	public EnumRule getMultOperatorRule() {
		return getMultOperatorAccess().getRule();
	}

	//enum ModOperator returns OperatorType:
	//	MOD="%";
	public KExpressionsGrammarAccess.ModOperatorElements getModOperatorAccess() {
		return gaKExpressions.getModOperatorAccess();
	}
	
	public EnumRule getModOperatorRule() {
		return getModOperatorAccess().getRule();
	}

	//enum DivOperator returns OperatorType:
	//	DIV="/";
	public KExpressionsGrammarAccess.DivOperatorElements getDivOperatorAccess() {
		return gaKExpressions.getDivOperatorAccess();
	}
	
	public EnumRule getDivOperatorRule() {
		return getDivOperatorAccess().getRule();
	}

	//enum ValOperator returns OperatorType:
	//	VAL="val";
	public KExpressionsGrammarAccess.ValOperatorElements getValOperatorAccess() {
		return gaKExpressions.getValOperatorAccess();
	}
	
	public EnumRule getValOperatorRule() {
		return getValOperatorAccess().getRule();
	}

	//enum LogicalOrOperator returns OperatorType:
	//	LOGICAL_OR="||";
	public KExpressionsGrammarAccess.LogicalOrOperatorElements getLogicalOrOperatorAccess() {
		return gaKExpressions.getLogicalOrOperatorAccess();
	}
	
	public EnumRule getLogicalOrOperatorRule() {
		return getLogicalOrOperatorAccess().getRule();
	}

	//enum LogicalAndOperator returns OperatorType:
	//	LOGICAL_AND="&&";
	public KExpressionsGrammarAccess.LogicalAndOperatorElements getLogicalAndOperatorAccess() {
		return gaKExpressions.getLogicalAndOperatorAccess();
	}
	
	public EnumRule getLogicalAndOperatorRule() {
		return getLogicalAndOperatorAccess().getRule();
	}

	//enum PostfixAdd returns OperatorType:
	//	POSTFIX_ADD="++";
	public KExpressionsGrammarAccess.PostfixAddElements getPostfixAddAccess() {
		return gaKExpressions.getPostfixAddAccess();
	}
	
	public EnumRule getPostfixAddRule() {
		return getPostfixAddAccess().getRule();
	}

	//enum PostfixSub returns OperatorType:
	//	POSTFIX_SUB="--";
	public KExpressionsGrammarAccess.PostfixSubElements getPostfixSubAccess() {
		return gaKExpressions.getPostfixSubAccess();
	}
	
	public EnumRule getPostfixSubRule() {
		return getPostfixSubAccess().getRule();
	}

	//enum ValueType:
	//	PURE="pure" | BOOL="bool" | UNSIGNED="unsigned" |
	//	INT="int" | FLOAT="float" |
	//	STRING="string" | HOST="host";
	public KExpressionsGrammarAccess.ValueTypeElements getValueTypeAccess() {
		return gaKExpressions.getValueTypeAccess();
	}
	
	public EnumRule getValueTypeRule() {
		return getValueTypeAccess().getRule();
	}

	//enum HostType returns ValueType:
	//	HOST="host";
	public KExpressionsGrammarAccess.HostTypeElements getHostTypeAccess() {
		return gaKExpressions.getHostTypeAccess();
	}
	
	public EnumRule getHostTypeRule() {
		return getHostTypeAccess().getRule();
	}

	//enum CombineOperator:
	//	NONE="none" | ADD="+" | MULT="*" | MAX="max" |
	//	MIN="min" | OR="|" | AND="&" | HOST="host";
	public KExpressionsGrammarAccess.CombineOperatorElements getCombineOperatorAccess() {
		return gaKExpressions.getCombineOperatorAccess();
	}
	
	public EnumRule getCombineOperatorRule() {
		return getCombineOperatorAccess().getRule();
	}

	/// **
	// * @author ssm
	// * @kieler.design 2015-08-21 proposed 
	// * @kieler.rating 2015-08-21 proposed yellow
	// * / // ------------------ //
	////  Annotation Rules  // 
	//// ------------------ //
	//// General rule for annotations
	//// The different annotation sub rules are tested in order. Hence, order matters! 
	//Annotation:
	//	CommentAnnotation | KeyBooleanValueAnnotation | KeyStringValueAnnotation | TypedKeyStringValueAnnotation |
	//	KeyIntValueAnnotation | KeyFloatValueAnnotation | TagAnnotation;
	public AnnotationsGrammarAccess.AnnotationElements getAnnotationAccess() {
		return gaAnnotations.getAnnotationAccess();
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}

	//// Valued Annotation Rule
	//// Valued annotations must have a value. For instance, tag annotations are not allowed.
	//// Derived grammars may use this rule if the general annotation rules compromises the grammar
	//// due to ambiguities.
	//ValuedAnnotation Annotation:
	//	CommentAnnotation | KeyStringValueAnnotation | TypedKeyStringValueAnnotation | KeyBooleanValueAnnotation |
	//	KeyIntValueAnnotation | KeyFloatValueAnnotation
	public AnnotationsGrammarAccess.ValuedAnnotationElements getValuedAnnotationAccess() {
		return gaAnnotations.getValuedAnnotationAccess();
	}
	
	public ParserRule getValuedAnnotationRule() {
		return getValuedAnnotationAccess().getRule();
	}

	//// Restiricted Annotation Rule
	//// The restricted annotation rules uses quoted key string annotations. You can use this rule in 
	//// derived grammars if you don't want to permit unquoted strings. 
	//// (If you are looking for an example, the keffects grammar uses this rule for their emission
	//// rule and to avoid grammar ambiguities.)  
	//RestrictedAnnotation Annotation:
	//	CommentAnnotation | QuotedKeyStringValueAnnotation | QuotedTypedKeyStringValueAnnotation | KeyBooleanValueAnnotation |
	//	KeyIntValueAnnotation | KeyFloatValueAnnotation | TagAnnotation
	public AnnotationsGrammarAccess.RestrictedAnnotationElements getRestrictedAnnotationAccess() {
		return gaAnnotations.getRestrictedAnnotationAccess();
	}
	
	public ParserRule getRestrictedAnnotationRule() {
		return getRestrictedAnnotationAccess().getRule();
	}

	//// CommentAnnotation
	//// e.g.: / ** semantic comment * /
	//CommentAnnotation:
	//	values+=COMMENT_ANNOTATION;
	public AnnotationsGrammarAccess.CommentAnnotationElements getCommentAnnotationAccess() {
		return gaAnnotations.getCommentAnnotationAccess();
	}
	
	public ParserRule getCommentAnnotationRule() {
		return getCommentAnnotationAccess().getRule();
	}

	//// TagAnnotation
	//// e.g.: @HVlayout
	//TagAnnotation Annotation:
	//	'@' name=ExtendedID
	public AnnotationsGrammarAccess.TagAnnotationElements getTagAnnotationAccess() {
		return gaAnnotations.getTagAnnotationAccess();
	}
	
	public ParserRule getTagAnnotationRule() {
		return getTagAnnotationAccess().getRule();
	}

	//// KeyStringValueAnnotation
	//// e.g.: @layouter dot
	//// You may separate different values via comma.   
	//KeyStringValueAnnotation StringAnnotation:
	//	'@' name=ExtendedID values+=EString (',' values+=EString)*
	public AnnotationsGrammarAccess.KeyStringValueAnnotationElements getKeyStringValueAnnotationAccess() {
		return gaAnnotations.getKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getKeyStringValueAnnotationRule() {
		return getKeyStringValueAnnotationAccess().getRule();
	}

	//// TypedKeyStringValueAnnotation
	//// e.g.: @position[de.cau.cs.kieler.core.math.KVector] "(3,2)"
	//TypedKeyStringValueAnnotation TypedStringAnnotation:
	//	'@' name=ExtendedID '[' type=ExtendedID ']' values+=EStringBoolean (',' values+=EStringBoolean)*
	public AnnotationsGrammarAccess.TypedKeyStringValueAnnotationElements getTypedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getTypedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getTypedKeyStringValueAnnotationRule() {
		return getTypedKeyStringValueAnnotationAccess().getRule();
	}

	//// QuotedKeyStringValueAnnotation
	//// The quoted key string value annotation is a replacement derived grammars may use
	//// if they want to disallow quote-less strings in a key string annotation. 
	//QuotedKeyStringValueAnnotation StringAnnotation:
	//	'@' name=ExtendedID values+=super::STRING (',' values+=super::STRING)*
	public AnnotationsGrammarAccess.QuotedKeyStringValueAnnotationElements getQuotedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getQuotedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getQuotedKeyStringValueAnnotationRule() {
		return getQuotedKeyStringValueAnnotationAccess().getRule();
	}

	//// QuotedTypedKeyStringValueAnnotation
	//// The quoted typed key string value annotation is a replacement derived grammars may use
	//// if they want to disallow quote-less strings in a key string annotation. 
	//QuotedTypedKeyStringValueAnnotation TypedStringAnnotation:
	//	'@' name=ExtendedID '[' type=ExtendedID ']' values+=super::STRING (',' values+=super::STRING)*
	public AnnotationsGrammarAccess.QuotedTypedKeyStringValueAnnotationElements getQuotedTypedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getQuotedTypedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getQuotedTypedKeyStringValueAnnotationRule() {
		return getQuotedTypedKeyStringValueAnnotationAccess().getRule();
	}

	//// KeyBooleanValueAnnotation    
	//// e.g.: @visible true;
	//KeyBooleanValueAnnotation BooleanAnnotation:
	//	'@' name=ExtendedID value=BOOLEAN
	public AnnotationsGrammarAccess.KeyBooleanValueAnnotationElements getKeyBooleanValueAnnotationAccess() {
		return gaAnnotations.getKeyBooleanValueAnnotationAccess();
	}
	
	public ParserRule getKeyBooleanValueAnnotationRule() {
		return getKeyBooleanValueAnnotationAccess().getRule();
	}

	//// KeyIntValueAnnotation
	//// e.g.: @minSpace 10;    
	//KeyIntValueAnnotation IntAnnotation:
	//	'@' name=ExtendedID value=Integer
	public AnnotationsGrammarAccess.KeyIntValueAnnotationElements getKeyIntValueAnnotationAccess() {
		return gaAnnotations.getKeyIntValueAnnotationAccess();
	}
	
	public ParserRule getKeyIntValueAnnotationRule() {
		return getKeyIntValueAnnotationAccess().getRule();
	}

	//// KeyFloatValueAnnotation
	//// e.g.: @minSpace 10.0;    
	//KeyFloatValueAnnotation FloatAnnotation:
	//	'@' name=ExtendedID value=Floateger
	public AnnotationsGrammarAccess.KeyFloatValueAnnotationElements getKeyFloatValueAnnotationAccess() {
		return gaAnnotations.getKeyFloatValueAnnotationAccess();
	}
	
	public ParserRule getKeyFloatValueAnnotationRule() {
		return getKeyFloatValueAnnotationAccess().getRule();
	}

	//// EString
	//// Allow strings without quotes if they don't contain spaces.
	//// For quoteless strings the ExtendedID rule is used.
	//EString:
	//	super::STRING | ExtendedID;
	public AnnotationsGrammarAccess.EStringElements getEStringAccess() {
		return gaAnnotations.getEStringAccess();
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//EStringBoolean:
	//	super::STRING | ExtendedID | BOOLEAN;
	public AnnotationsGrammarAccess.EStringBooleanElements getEStringBooleanAccess() {
		return gaAnnotations.getEStringBooleanAccess();
	}
	
	public ParserRule getEStringBooleanRule() {
		return getEStringBooleanAccess().getRule();
	}

	//// ExtendedID
	//// ExtendedID extends the ID rule provided by the terminals grammar.
	//// An ID may have dot separated parts and may close with a number separated by a hash mark.
	//ExtendedID:
	//	ID ("." ID)* ("#" INT)?;
	public AnnotationsGrammarAccess.ExtendedIDElements getExtendedIDAccess() {
		return gaAnnotations.getExtendedIDAccess();
	}
	
	public ParserRule getExtendedIDRule() {
		return getExtendedIDAccess().getRule();
	}

	//// Integer
	//// The integer rule extends the EInt terminal by an optional sign for negative numbers.
	//Integer ecore::EInt:
	//	'-'? INT
	public AnnotationsGrammarAccess.IntegerElements getIntegerAccess() {
		return gaAnnotations.getIntegerAccess();
	}
	
	public ParserRule getIntegerRule() {
		return getIntegerAccess().getRule();
	}

	//// Floateger
	//// The floateger rule extends the EFloat terminal by an optional sign for negative numbers.
	//Floateger ecore::EFloat:
	//	'-'? FLOAT
	public AnnotationsGrammarAccess.FloategerElements getFloategerAccess() {
		return gaAnnotations.getFloategerAccess();
	}
	
	public ParserRule getFloategerRule() {
		return getFloategerAccess().getRule();
	}

	//terminal COMMENT_ANNOTATION:
	//	'/ **'->'* /';
	public TerminalRule getCOMMENT_ANNOTATIONRule() {
		return gaAnnotations.getCOMMENT_ANNOTATIONRule();
	} 

	//terminal fragment NUMBER:
	//	'0'..'9';
	public TerminalRule getNUMBERRule() {
		return gaAnnotations.getNUMBERRule();
	} 

	//terminal INT returns ecore::EInt:
	//	NUMBER+;
	public TerminalRule getINTRule() {
		return gaAnnotations.getINTRule();
	} 

	//terminal FLOAT returns ecore::EFloatObject:
	//	NUMBER+ ('.' NUMBER*) (("e" | "E") ("+" | "-")? NUMBER+)? 'f'? | NUMBER+ 'f';
	public TerminalRule getFLOATRule() {
		return gaAnnotations.getFLOATRule();
	} 

	//terminal BOOLEAN returns ecore::EBooleanObject:
	//	'true' | 'false';
	public TerminalRule getBOOLEANRule() {
		return gaAnnotations.getBOOLEANRule();
	} 

	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
