/*
 * generated by Xtext
 */
package de.cau.cs.kieler.scl.scoping;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.yakindu.sct.model.stext.scoping.STextScopeProvider;

import de.cau.cs.kieler.scl.scl.Program;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping
 * on how and when to use it 
 *
 */
public class SCLScopeProvider extends STextScopeProvider {

/*    public IScope scope_Assignment_assignment(final EObject context,
            final EReference reference) {
        Assignment asm = getAssignment(context);
        
        List<EObject> scopeCandidates = Lists.newArrayList();
        ArrayList<VariableDeclaration> declarations = new ArrayList<VariableDeclaration>();
        EObject object = asm.eContainer();
        while (object != null) {
                if (object instanceof Program) {
                        EList<VariableDeclaration> vds = ((Program) object).getInterface();
                        declarations.addAll(vds);
                }
                object = object.eContainer();
        }
        if (declarations.size() > 0) {
                scopeCandidates.addAll(declarations);
                return new SimpleScope(Scopes.scopeFor(scopeCandidates).getAllElements());
        } else {
                return IScope.NULLSCOPE;
        }
        
    }
    
    protected Assignment getAssignment(EObject context) {
        final ContextElementAdapter provider = (ContextElementAdapter) EcoreUtil
                        .getExistingAdapter(context.eResource(),
                                        ContextElementAdapter.class);

        if (provider == null) {
                return EcoreUtil2.getContainerOfType(context, Assignment.class);
        } else {
                return (Assignment) EcoreUtil.getObjectByType(provider.getElement()
                                .eResource().getContents(),
                                SclPackage.Literals.ASSIGNMENT);
        }
    }*/
    
    
    public IScope scope_ElementReferenceExpression_reference(final EObject context,
            final EReference reference) {
        Program p = EcoreUtil2.getContainerOfType(context, Program.class);
        return null; //Scopes.scopeFor(p.getInterface());
    }  
    
}
