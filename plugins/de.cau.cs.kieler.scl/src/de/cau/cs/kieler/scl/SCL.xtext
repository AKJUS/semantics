grammar de.cau.cs.kieler.scl.SCL with org.yakindu.sct.model.stext.SText 

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.yakindu.org/sct/sgraph/2.0.0" as sgraph
import "http://www.yakindu.org/base/types/2.0.0" as types
import "http://www.yakindu.org/base/base/2.0.0" as base
import "http://www.yakindu.org/sct/statechart/SText" as stext
import "http://kieler.cs.cau.de/annotations" as annotations

generate scl "http://www.cau.de/cs/kieler/scl/scl"

Program:
	'module' name = ID
	(interface+=VariableDeclaration)*
	'{'
        (
            ((statements += Statement';') | statements += EmptyStatement)*
           statements += ( Statement | EmptyStatement)
         )?
    '}' 
;

VariableDeclaration:
    (Input?='input')? (Output?='output')? 'signal' (name=ID)(':'type=[types::Type])?('='initialValue=Expression)?';'
;

EmptyStatement:
    ('label' label = ID ':')

;
Statement:
//    ('label' label = ID ':')
//    |    
    (
        ('label' label = ID ':')?
        instruction = (Assignment | Conditional | Goto | Parallel | Pause | Scope)
    )

;

Assignment:
    assignment = Expression
;

Conditional:
    'if' expression = Expression 'then'
        ((statements += Statement';')*
        (statements += Statement))?
    'end' 
;

Goto:
    'goto' name = ID 
;

Thread:
    {Thread}
        ((statements += Statement';')*
        (statements += Statement))?
;

Parallel:
    'fork'
    (    threads += Thread
    ('par'
         threads += Thread)+)
    'join'
;


Pause:
    'pause' {Pause}
;

Scope:
    {Scope}
    '{'
    (declarations+=VariableDeclaration)*
        ((statements += Statement';')*
        (statements += Statement))?
    '}'    
;
