grammar de.cau.cs.kieler.scl.SCL with org.yakindu.sct.model.stext.SText 

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.yakindu.org/sct/sgraph/2.0.0" as sgraph
import "http://www.yakindu.org/base/types/2.0.0" as types
import "http://www.yakindu.org/base/base/2.0.0" as base
import "http://www.yakindu.org/sct/statechart/SText" as stext

generate scl "http://www.cau.de/cs/kieler/scl/scl"

Program:
	'module' name = ID
	(interface+=VariableDeclaration)*
	'{'
        (
            (
                (instructions += Instruction';')
                |
                (instructions += Annotation)
                |
                (instructions += Label)
            )*
            (instructions += Instruction)
            |
            (instructions += Annotation)
            |
            (instructions += Label)
        )*
    '}' 
;

VariableDeclaration:
    (Input?='input')? (Output?='output')? 'signal' (name=ID)(':'type=[types::Type])?('='initialValue=Expression)?';'
;

Instruction:
    (Assignment | Conditional | Goto | Parallel | Pause | InstructionScope)
    (priority=INT)?
;

Assignment:
    assignment = Expression
;

Label:
    'label' name = ID ':'
;

Conditional:
    'if' expression = Expression 'then'
        (
            (
                (instructions += Instruction';')
                |
                (instructions += Annotation)
                |
                (instructions += Label)
            )*
            (instructions += Instruction)
            |
            (instructions += Annotation)
            |
            (instructions += Label)
        )*
    'end' 
;

Goto:
    'goto' name = ID 
;

Thread:
    {Thread}
        (
            (
                (instructions += Instruction';')
                |
                (instructions += Annotation)
                |
                (instructions += Label)
            )*
            (instructions += Instruction)
            |
            (instructions += Annotation)
            |
            (instructions += Label)
        )*
//    (program = [Program])?
;

Parallel:
    'fork'
    (    threads += Thread
    ('par'
         threads += Thread)+)
    'join'
;


Pause:
    'pause' {Pause}
;

InstructionScope:
    {InstructionScope}
    '{'
    (interface+=VariableDeclaration)*
        (
            (
                (instructions += Instruction';')
                |
                (instructions += Annotation)
                |
                (instructions += Label)
            )*
            (instructions += Instruction)
            |
            (instructions += Annotation)
            |
            (instructions += Label)
        )*
    '}'    
;

Annotation:
    comment = SL_COMMENT
;

