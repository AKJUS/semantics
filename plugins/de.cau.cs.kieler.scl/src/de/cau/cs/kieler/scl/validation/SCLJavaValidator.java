/*
 * generated by Xtext
 */
package de.cau.cs.kieler.scl.validation;

import java.util.ArrayList;
import java.util.HashSet;

import org.eclipse.emf.common.util.EList;
import org.eclipse.xtext.validation.Check;

import de.cau.cs.kieler.core.kexpressions.Declaration;
import de.cau.cs.kieler.core.kexpressions.ValuedObject;
import de.cau.cs.kieler.scl.scl.Program;
import de.cau.cs.kieler.scl.scl.StatementScope;

/**
 * Custom validation rules.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 * 
 * @author krat
 * 
 */
public class SCLJavaValidator extends de.cau.cs.kieler.scl.validation.AbstractSCLJavaValidator {

    // TODO beautify
    @Check
    public void checkUniqueNamesInProgram(Program program) {
        if (hasDuplicateDeclaration(program.getDeclarations())) {
            for (Declaration decl : program.getDeclarations()) {
                error("Duplicate variable declaration", decl, null, -1);
            }
        }
    }

    @Check
    public void checkUniqueNamesInScope(StatementScope sScope) {
        if (hasDuplicateDeclaration(sScope.getDeclarations())) {
            for (Declaration decl : sScope.getDeclarations()) {
                error("Duplicate variable declaration", decl, null, -1);
            }
        }
    }
    
    public boolean hasDuplicateDeclaration (EList<Declaration> declarations) {
        ArrayList<String> vars = new ArrayList<String>();
        for (Declaration decl : declarations) {
            for (ValuedObject valObj : decl.getValuedObjects()) {
                vars.add(valObj.getName());
            }
        }
        HashSet<String> varSet = new HashSet<String>(vars);
        if (varSet.size() != vars.size()) {
            return true;
        }
        return false;
    }
}
