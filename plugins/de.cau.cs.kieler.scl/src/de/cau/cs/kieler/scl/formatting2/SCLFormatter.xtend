/*
 * generated by Xtext
 */
package de.cau.cs.kieler.scl.formatting2;

import com.google.inject.Inject;
import de.cau.cs.kieler.annotations.Annotation;
import de.cau.cs.kieler.kexpressions.Declaration;
import de.cau.cs.kieler.kexpressions.Expression;
import de.cau.cs.kieler.kexpressions.kext.formatting2.KExtFormatter;
import de.cau.cs.kieler.scl.Assignment;
import de.cau.cs.kieler.scl.Conditional;
import de.cau.cs.kieler.scl.ElseScope;
import de.cau.cs.kieler.scl.Label;
import de.cau.cs.kieler.scl.Parallel;
import de.cau.cs.kieler.scl.Pause;
import de.cau.cs.kieler.scl.SCLProgram;
import de.cau.cs.kieler.scl.ScopeStatement;
import de.cau.cs.kieler.scl.Statement;
import de.cau.cs.kieler.scl.services.SCLGrammarAccess;
import org.eclipse.xtext.formatting2.IFormattableDocument;

class SCLFormatter extends KExtFormatter {
	
	@Inject extension SCLGrammarAccess

	def dispatch void format(SCLProgram sclprogram, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Annotation annotations : sclprogram.getAnnotations()) {
			format(annotations, document);
		}
		for (Declaration declarations : sclprogram.getDeclarations()) {
			format(declarations, document);
		}
		for (Statement statements : sclprogram.getStatements()) {
			format(statements, document);
		}
	}

	def dispatch void format(Pause pause, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Annotation annotations : pause.getAnnotations()) {
			format(annotations, document);
		}
	}

	def dispatch void format(Label label, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Annotation annotations : label.getAnnotations()) {
			format(annotations, document);
		}
	}

	def dispatch void format(Assignment assignment, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Annotation annotations : assignment.getAnnotations()) {
			format(annotations, document);
		}
		for (Expression indices : assignment.getIndices()) {
			format(indices, document);
		}
		format(assignment.getExpression(), document);
	}

	def dispatch void format(Conditional conditional, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Annotation annotations : conditional.getAnnotations()) {
			format(annotations, document);
		}
		format(conditional.getExpression(), document);
		for (Declaration declarations : conditional.getDeclarations()) {
			format(declarations, document);
		}
		for (Statement statements : conditional.getStatements()) {
			format(statements, document);
		}
		format(conditional.getElse(), document);
	}

	def dispatch void format(ElseScope elsescope, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Annotation annotations : elsescope.getAnnotations()) {
			format(annotations, document);
		}
		for (Declaration declarations : elsescope.getDeclarations()) {
			format(declarations, document);
		}
		for (Statement statements : elsescope.getStatements()) {
			format(statements, document);
		}
	}

	def dispatch void format(de.cau.cs.kieler.scl.Thread thread, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Annotation annotations : thread.getAnnotations()) {
			format(annotations, document);
		}
		for (Declaration declarations : thread.getDeclarations()) {
			format(declarations, document);
		}
		for (Statement statements : thread.getStatements()) {
			format(statements, document);
		}
	}

	def dispatch void format(Parallel parallel, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (de.cau.cs.kieler.scl.Thread threads : parallel.getThreads()) {
			format(threads, document);
		}
	}

	def dispatch void format(ScopeStatement scopestatement, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Annotation annotations : scopestatement.getAnnotations()) {
			format(annotations, document);
		}
		for (Declaration declarations : scopestatement.getDeclarations()) {
			format(declarations, document);
		}
		for (Statement statements : scopestatement.getStatements()) {
			format(statements, document);
		}
	}
}
