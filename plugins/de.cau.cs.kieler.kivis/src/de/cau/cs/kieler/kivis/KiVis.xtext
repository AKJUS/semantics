grammar de.cau.cs.kieler.kivis.KiVis with de.cau.cs.kieler.prom.KiBuild

generate kivis "http://www.cau.de/cs/kieler/kivis/KiVis"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://kieler.cs.cau.de/kexpressions/0.1.2" as kexpressions 
import "http://www.cau.de/cs/kieler/prom/KiBuild" as kibuild 

VisualizationConfiguration:
	('image' ':' image=STRING)?
	(elements += Element | interactions += Interaction)*
;

Element:
	'animate' name=ID '{'
        (animations+=Animation)+
	'}'
;

Interaction:
    {Interaction}
    'perform' ('on' event=Event)? '{'
        (actions+=Action)*
    '}' ('if' condition=AndExpression)?
;

Event:
    event=DOMEvent 'from' element=ID
;

Action returns Action:
    VariableAssignment | SimulationAction
;

VariableAssignment returns Action:
    variable=VariableReference '=' (value=Literal | function=Function)
;

SimulationAction returns Action:
    operation=SimulationOperation 'simulation'
;

Function returns Function:
    functionName=ID
    (('(' parameters += FunctionParameter 
          (',' parameters += FunctionParameter)* ')')
    | '()')
;

Animation:
    'apply' type=ID ('using' variable=VariableReference)? '{'
        (attributeMappings+=AttributeMapping)*
    '}' ('if' condition=AndExpression)?
;

AttributeMapping:
    attribute=ID ':' (currentValue ?= 'value' | literal=Literal | (mappings+=Mapping) (',' mappings+=Mapping)*)
;

Mapping:
    variableDomain = VariableDomain 'is' attributeDomain = AttributeDomain
;

AndExpression returns Condition:
    Comparison 
    (({AndExpression.left=current} operator="&&") right=Comparison)*
;

Comparison:
    left=VariableReference
    relation=CompareOperator
    (right=Literal | right=VariableReference)
;

VariableDomain returns Domain:
    otherValues ?= 'others'
    | value = Literal
    | range = Interval
;

Interval:
    (from=SignedInt | from=SignedFloat)
    Range
    (to=SignedInt | to=SignedFloat)
;

AttributeDomain returns Domain:
    currentValue ?= 'value'
    | value = Literal
    | range = Interval
;

VariableReference:
    (model=ModelReference)?
    name=ID
    ('[' indices+=INT ']')*
;

ModelReference:
    name=ID '.'
;

FunctionParameter:
    variableReference = VariableReference
    | value = Literal
;

enum DOMEvent:
    CLICK='click'
    | MOUSEDOWN='mousedown' | MOUSEUP='mouseup'
    | MOUSEMOVE='mousemove'
    // The following events do not work very well (or not at all) with the JSVGCanvas
//    | DOUBLECLICK='dblclick'
//    | MOUSEOVER='mouseover' | MOUSEOUT='mouseout'
//    | MOUSEENTER='mouseenter' | MOUSELEAVE='mouseleave'
;

enum SimulationOperation:
    STEP='step' | STOP='stop' | PAUSE='pause' | PLAY='play'
;

Range:
    '-' // Alternative would be '..'
;