/*
 * generated by Xtext
 */
grammar InternalKVis;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package de.cau.cs.kieler.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package de.cau.cs.kieler.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import de.cau.cs.kieler.services.KVisGrammarAccess;

}

@parser::members {
 
 	private KVisGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(KVisGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleVisualization
entryRuleVisualization 
:
{ before(grammarAccess.getVisualizationRule()); }
	 ruleVisualization
{ after(grammarAccess.getVisualizationRule()); } 
	 EOF 
;

// Rule Visualization
ruleVisualization
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVisualizationAccess().getGroup()); }
(rule__Visualization__Group__0)
{ after(grammarAccess.getVisualizationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleElement
entryRuleElement 
:
{ before(grammarAccess.getElementRule()); }
	 ruleElement
{ after(grammarAccess.getElementRule()); } 
	 EOF 
;

// Rule Element
ruleElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getElementAccess().getGroup()); }
(rule__Element__Group__0)
{ after(grammarAccess.getElementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAnimation
entryRuleAnimation 
:
{ before(grammarAccess.getAnimationRule()); }
	 ruleAnimation
{ after(grammarAccess.getAnimationRule()); } 
	 EOF 
;

// Rule Animation
ruleAnimation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAnimationAccess().getGroup()); }
(rule__Animation__Group__0)
{ after(grammarAccess.getAnimationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAttributeMapping
entryRuleAttributeMapping 
:
{ before(grammarAccess.getAttributeMappingRule()); }
	 ruleAttributeMapping
{ after(grammarAccess.getAttributeMappingRule()); } 
	 EOF 
;

// Rule AttributeMapping
ruleAttributeMapping
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAttributeMappingAccess().getGroup()); }
(rule__AttributeMapping__Group__0)
{ after(grammarAccess.getAttributeMappingAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMapping
entryRuleMapping 
:
{ before(grammarAccess.getMappingRule()); }
	 ruleMapping
{ after(grammarAccess.getMappingRule()); } 
	 EOF 
;

// Rule Mapping
ruleMapping
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMappingAccess().getGroup()); }
(rule__Mapping__Group__0)
{ after(grammarAccess.getMappingAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableDomain
entryRuleVariableDomain 
:
{ before(grammarAccess.getVariableDomainRule()); }
	 ruleVariableDomain
{ after(grammarAccess.getVariableDomainRule()); } 
	 EOF 
;

// Rule VariableDomain
ruleVariableDomain
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableDomainAccess().getAlternatives()); }
(rule__VariableDomain__Alternatives)
{ after(grammarAccess.getVariableDomainAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInterval
entryRuleInterval 
:
{ before(grammarAccess.getIntervalRule()); }
	 ruleInterval
{ after(grammarAccess.getIntervalRule()); } 
	 EOF 
;

// Rule Interval
ruleInterval
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntervalAccess().getGroup()); }
(rule__Interval__Group__0)
{ after(grammarAccess.getIntervalAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAttributeDomain
entryRuleAttributeDomain 
:
{ before(grammarAccess.getAttributeDomainRule()); }
	 ruleAttributeDomain
{ after(grammarAccess.getAttributeDomainRule()); } 
	 EOF 
;

// Rule AttributeDomain
ruleAttributeDomain
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAttributeDomainAccess().getVariableDomainParserRuleCall()); }
	ruleVariableDomain
{ after(grammarAccess.getAttributeDomainAccess().getVariableDomainParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCondition
entryRuleCondition 
:
{ before(grammarAccess.getConditionRule()); }
	 ruleCondition
{ after(grammarAccess.getConditionRule()); } 
	 EOF 
;

// Rule Condition
ruleCondition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConditionAccess().getGroup()); }
(rule__Condition__Group__0)
{ after(grammarAccess.getConditionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableReference
entryRuleVariableReference 
:
{ before(grammarAccess.getVariableReferenceRule()); }
	 ruleVariableReference
{ after(grammarAccess.getVariableReferenceRule()); } 
	 EOF 
;

// Rule VariableReference
ruleVariableReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableReferenceAccess().getGroup()); }
(rule__VariableReference__Group__0)
{ after(grammarAccess.getVariableReferenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleModelReference
entryRuleModelReference 
:
{ before(grammarAccess.getModelReferenceRule()); }
	 ruleModelReference
{ after(grammarAccess.getModelReferenceRule()); } 
	 EOF 
;

// Rule ModelReference
ruleModelReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelReferenceAccess().getGroup()); }
(rule__ModelReference__Group__0)
{ after(grammarAccess.getModelReferenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanExpression
entryRuleBooleanExpression 
:
{ before(grammarAccess.getBooleanExpressionRule()); }
	 ruleBooleanExpression
{ after(grammarAccess.getBooleanExpressionRule()); } 
	 EOF 
;

// Rule BooleanExpression
ruleBooleanExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanExpressionAccess().getComparisonParserRuleCall()); }
	ruleComparison
{ after(grammarAccess.getBooleanExpressionAccess().getComparisonParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComparison
entryRuleComparison 
:
{ before(grammarAccess.getComparisonRule()); }
	 ruleComparison
{ after(grammarAccess.getComparisonRule()); } 
	 EOF 
;

// Rule Comparison
ruleComparison
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getComparisonAccess().getGroup()); }
(rule__Comparison__Group__0)
{ after(grammarAccess.getComparisonAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOperand
entryRuleOperand 
:
{ before(grammarAccess.getOperandRule()); }
	 ruleOperand
{ after(grammarAccess.getOperandRule()); } 
	 EOF 
;

// Rule Operand
ruleOperand
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOperandAccess().getAlternatives()); }
(rule__Operand__Alternatives)
{ after(grammarAccess.getOperandAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteral
entryRuleLiteral 
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralAccess().getAlternatives()); }
(rule__Literal__Alternatives)
{ after(grammarAccess.getLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule CompareOperator
ruleCompareOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperatorAccess().getAlternatives()); }
(rule__CompareOperator__Alternatives)
{ after(grammarAccess.getCompareOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule AnimationType
ruleAnimationType
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnimationTypeAccess().getAlternatives()); }
(rule__AnimationType__Alternatives)
{ after(grammarAccess.getAnimationTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}





rule__AttributeMapping__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeMappingAccess().getLiteralAssignment_2_0()); }
(rule__AttributeMapping__LiteralAssignment_2_0)
{ after(grammarAccess.getAttributeMappingAccess().getLiteralAssignment_2_0()); }
)

    |(
{ before(grammarAccess.getAttributeMappingAccess().getGroup_2_1()); }
(rule__AttributeMapping__Group_2_1__0)
{ after(grammarAccess.getAttributeMappingAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDomain__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDomainAccess().getValueAssignment_0()); }
(rule__VariableDomain__ValueAssignment_0)
{ after(grammarAccess.getVariableDomainAccess().getValueAssignment_0()); }
)

    |(
{ before(grammarAccess.getVariableDomainAccess().getRangeAssignment_1()); }
(rule__VariableDomain__RangeAssignment_1)
{ after(grammarAccess.getVariableDomainAccess().getRangeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operand__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandAccess().getVariableAssignment_0()); }
(rule__Operand__VariableAssignment_0)
{ after(grammarAccess.getOperandAccess().getVariableAssignment_0()); }
)

    |(
{ before(grammarAccess.getOperandAccess().getLiteralAssignment_1()); }
(rule__Operand__LiteralAssignment_1)
{ after(grammarAccess.getOperandAccess().getLiteralAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getINTTerminalRuleCall_0()); }
	RULE_INT
{ after(grammarAccess.getLiteralAccess().getINTTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getFLOATTerminalRuleCall_1()); }
	RULE_FLOAT
{ after(grammarAccess.getLiteralAccess().getFLOATTerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getSTRINGTerminalRuleCall_2()); }
	RULE_STRING
{ after(grammarAccess.getLiteralAccess().getSTRINGTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperatorAccess().getEQEnumLiteralDeclaration_0()); }
(	'=' 
)
{ after(grammarAccess.getCompareOperatorAccess().getEQEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getCompareOperatorAccess().getLTEnumLiteralDeclaration_1()); }
(	'<' 
)
{ after(grammarAccess.getCompareOperatorAccess().getLTEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getCompareOperatorAccess().getLEQEnumLiteralDeclaration_2()); }
(	'<=' 
)
{ after(grammarAccess.getCompareOperatorAccess().getLEQEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getCompareOperatorAccess().getGTEnumLiteralDeclaration_3()); }
(	'>' 
)
{ after(grammarAccess.getCompareOperatorAccess().getGTEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getCompareOperatorAccess().getGEQEnumLiteralDeclaration_4()); }
(	'>=' 
)
{ after(grammarAccess.getCompareOperatorAccess().getGEQEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getCompareOperatorAccess().getNEEnumLiteralDeclaration_5()); }
(	'!=' 
)
{ after(grammarAccess.getCompareOperatorAccess().getNEEnumLiteralDeclaration_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AnimationType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnimationTypeAccess().getCOLOREnumLiteralDeclaration_0()); }
(	'set color' 
)
{ after(grammarAccess.getAnimationTypeAccess().getCOLOREnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getAnimationTypeAccess().getTEXTEnumLiteralDeclaration_1()); }
(	'set text' 
)
{ after(grammarAccess.getAnimationTypeAccess().getTEXTEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getAnimationTypeAccess().getROTATEEnumLiteralDeclaration_2()); }
(	'rotate' 
)
{ after(grammarAccess.getAnimationTypeAccess().getROTATEEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getAnimationTypeAccess().getMOVEEnumLiteralDeclaration_3()); }
(	'move' 
)
{ after(grammarAccess.getAnimationTypeAccess().getMOVEEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getAnimationTypeAccess().getVISIBILITYEnumLiteralDeclaration_4()); }
(	'set visible' 
)
{ after(grammarAccess.getAnimationTypeAccess().getVISIBILITYEnumLiteralDeclaration_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Visualization__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Visualization__Group__0__Impl
	rule__Visualization__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Visualization__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVisualizationAccess().getImageKeyword_0()); }

	'image' 

{ after(grammarAccess.getVisualizationAccess().getImageKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Visualization__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Visualization__Group__1__Impl
	rule__Visualization__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Visualization__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVisualizationAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getVisualizationAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Visualization__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Visualization__Group__2__Impl
	rule__Visualization__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Visualization__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVisualizationAccess().getImageAssignment_2()); }
(rule__Visualization__ImageAssignment_2)
{ after(grammarAccess.getVisualizationAccess().getImageAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Visualization__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Visualization__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Visualization__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVisualizationAccess().getElementsAssignment_3()); }
(rule__Visualization__ElementsAssignment_3)*
{ after(grammarAccess.getVisualizationAccess().getElementsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Element__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Element__Group__0__Impl
	rule__Element__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementAccess().getAnimateKeyword_0()); }

	'animate' 

{ after(grammarAccess.getElementAccess().getAnimateKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Element__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Element__Group__1__Impl
	rule__Element__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementAccess().getNameAssignment_1()); }
(rule__Element__NameAssignment_1)
{ after(grammarAccess.getElementAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Element__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Element__Group__2__Impl
	rule__Element__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getElementAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Element__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Element__Group__3__Impl
	rule__Element__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getElementAccess().getAnimationsAssignment_3()); }
(rule__Element__AnimationsAssignment_3)
{ after(grammarAccess.getElementAccess().getAnimationsAssignment_3()); }
)
(
{ before(grammarAccess.getElementAccess().getAnimationsAssignment_3()); }
(rule__Element__AnimationsAssignment_3)*
{ after(grammarAccess.getElementAccess().getAnimationsAssignment_3()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Element__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Element__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getElementAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Animation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Animation__Group__0__Impl
	rule__Animation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Animation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnimationAccess().getTypeAssignment_0()); }
(rule__Animation__TypeAssignment_0)
{ after(grammarAccess.getAnimationAccess().getTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Animation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Animation__Group__1__Impl
	rule__Animation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Animation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnimationAccess().getGroup_1()); }
(rule__Animation__Group_1__0)?
{ after(grammarAccess.getAnimationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Animation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Animation__Group__2__Impl
	rule__Animation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Animation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnimationAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getAnimationAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Animation__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Animation__Group__3__Impl
	rule__Animation__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Animation__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnimationAccess().getMappingsAssignment_3()); }
(rule__Animation__MappingsAssignment_3)*
{ after(grammarAccess.getAnimationAccess().getMappingsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Animation__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Animation__Group__4__Impl
	rule__Animation__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Animation__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnimationAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getAnimationAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Animation__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Animation__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Animation__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnimationAccess().getConditionAssignment_5()); }
(rule__Animation__ConditionAssignment_5)?
{ after(grammarAccess.getAnimationAccess().getConditionAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Animation__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Animation__Group_1__0__Impl
	rule__Animation__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Animation__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnimationAccess().getUsingKeyword_1_0()); }

	'using' 

{ after(grammarAccess.getAnimationAccess().getUsingKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Animation__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Animation__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Animation__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnimationAccess().getVariableAssignment_1_1()); }
(rule__Animation__VariableAssignment_1_1)
{ after(grammarAccess.getAnimationAccess().getVariableAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AttributeMapping__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeMapping__Group__0__Impl
	rule__AttributeMapping__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeMapping__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeMappingAccess().getAttributeAssignment_0()); }
(rule__AttributeMapping__AttributeAssignment_0)
{ after(grammarAccess.getAttributeMappingAccess().getAttributeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeMapping__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeMapping__Group__1__Impl
	rule__AttributeMapping__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeMapping__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeMappingAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getAttributeMappingAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeMapping__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeMapping__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeMapping__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeMappingAccess().getAlternatives_2()); }
(rule__AttributeMapping__Alternatives_2)
{ after(grammarAccess.getAttributeMappingAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AttributeMapping__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeMapping__Group_2_1__0__Impl
	rule__AttributeMapping__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeMapping__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeMappingAccess().getMappingsAssignment_2_1_0()); }
(rule__AttributeMapping__MappingsAssignment_2_1_0)
{ after(grammarAccess.getAttributeMappingAccess().getMappingsAssignment_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeMapping__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeMapping__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeMapping__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeMappingAccess().getGroup_2_1_1()); }
(rule__AttributeMapping__Group_2_1_1__0)*
{ after(grammarAccess.getAttributeMappingAccess().getGroup_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AttributeMapping__Group_2_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeMapping__Group_2_1_1__0__Impl
	rule__AttributeMapping__Group_2_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeMapping__Group_2_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeMappingAccess().getCommaKeyword_2_1_1_0()); }

	',' 

{ after(grammarAccess.getAttributeMappingAccess().getCommaKeyword_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeMapping__Group_2_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeMapping__Group_2_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeMapping__Group_2_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeMappingAccess().getMappingsAssignment_2_1_1_1()); }
(rule__AttributeMapping__MappingsAssignment_2_1_1_1)
{ after(grammarAccess.getAttributeMappingAccess().getMappingsAssignment_2_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Mapping__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mapping__Group__0__Impl
	rule__Mapping__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getVariableDomainAssignment_0()); }
(rule__Mapping__VariableDomainAssignment_0)
{ after(grammarAccess.getMappingAccess().getVariableDomainAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mapping__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mapping__Group__1__Impl
	rule__Mapping__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getIsKeyword_1()); }

	'is' 

{ after(grammarAccess.getMappingAccess().getIsKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mapping__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mapping__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getAttributeDomainAssignment_2()); }
(rule__Mapping__AttributeDomainAssignment_2)
{ after(grammarAccess.getMappingAccess().getAttributeDomainAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Interval__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interval__Group__0__Impl
	rule__Interval__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntervalAccess().getFromAssignment_0()); }
(rule__Interval__FromAssignment_0)
{ after(grammarAccess.getIntervalAccess().getFromAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Interval__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interval__Group__1__Impl
	rule__Interval__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntervalAccess().getFullStopFullStopKeyword_1()); }

	'..' 

{ after(grammarAccess.getIntervalAccess().getFullStopFullStopKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Interval__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interval__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntervalAccess().getToAssignment_2()); }
(rule__Interval__ToAssignment_2)
{ after(grammarAccess.getIntervalAccess().getToAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Condition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Condition__Group__0__Impl
	rule__Condition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getWhenKeyword_0()); }

	'when' 

{ after(grammarAccess.getConditionAccess().getWhenKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Condition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Condition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getExpressionAssignment_1()); }
(rule__Condition__ExpressionAssignment_1)
{ after(grammarAccess.getConditionAccess().getExpressionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VariableReference__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableReference__Group__0__Impl
	rule__VariableReference__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableReference__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getModelAssignment_0()); }
(rule__VariableReference__ModelAssignment_0)?
{ after(grammarAccess.getVariableReferenceAccess().getModelAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableReference__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableReference__Group__1__Impl
	rule__VariableReference__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableReference__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getNameAssignment_1()); }
(rule__VariableReference__NameAssignment_1)
{ after(grammarAccess.getVariableReferenceAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableReference__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableReference__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableReference__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getGroup_2()); }
(rule__VariableReference__Group_2__0)*
{ after(grammarAccess.getVariableReferenceAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__VariableReference__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableReference__Group_2__0__Impl
	rule__VariableReference__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableReference__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getLeftSquareBracketKeyword_2_0()); }

	'[' 

{ after(grammarAccess.getVariableReferenceAccess().getLeftSquareBracketKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableReference__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableReference__Group_2__1__Impl
	rule__VariableReference__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableReference__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getIndicesAssignment_2_1()); }
(rule__VariableReference__IndicesAssignment_2_1)
{ after(grammarAccess.getVariableReferenceAccess().getIndicesAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableReference__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableReference__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableReference__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getRightSquareBracketKeyword_2_2()); }

	']' 

{ after(grammarAccess.getVariableReferenceAccess().getRightSquareBracketKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ModelReference__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModelReference__Group__0__Impl
	rule__ModelReference__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ModelReference__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelReferenceAccess().getNameAssignment_0()); }
(rule__ModelReference__NameAssignment_0)
{ after(grammarAccess.getModelReferenceAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ModelReference__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModelReference__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ModelReference__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelReferenceAccess().getFullStopKeyword_1()); }

	'.' 

{ after(grammarAccess.getModelReferenceAccess().getFullStopKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Comparison__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group__0__Impl
	rule__Comparison__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getLeftSideAssignment_0()); }
(rule__Comparison__LeftSideAssignment_0)
{ after(grammarAccess.getComparisonAccess().getLeftSideAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group__1__Impl
	rule__Comparison__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getRelationAssignment_1()); }
(rule__Comparison__RelationAssignment_1)
{ after(grammarAccess.getComparisonAccess().getRelationAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getRightSideAssignment_2()); }
(rule__Comparison__RightSideAssignment_2)
{ after(grammarAccess.getComparisonAccess().getRightSideAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__Visualization__ImageAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVisualizationAccess().getImageSTRINGTerminalRuleCall_2_0()); }
	RULE_STRING{ after(grammarAccess.getVisualizationAccess().getImageSTRINGTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Visualization__ElementsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVisualizationAccess().getElementsElementParserRuleCall_3_0()); }
	ruleElement{ after(grammarAccess.getVisualizationAccess().getElementsElementParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Element__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getElementAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Element__AnimationsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElementAccess().getAnimationsAnimationParserRuleCall_3_0()); }
	ruleAnimation{ after(grammarAccess.getElementAccess().getAnimationsAnimationParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Animation__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnimationAccess().getTypeAnimationTypeEnumRuleCall_0_0()); }
	ruleAnimationType{ after(grammarAccess.getAnimationAccess().getTypeAnimationTypeEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Animation__VariableAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnimationAccess().getVariableVariableReferenceParserRuleCall_1_1_0()); }
	ruleVariableReference{ after(grammarAccess.getAnimationAccess().getVariableVariableReferenceParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Animation__MappingsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnimationAccess().getMappingsAttributeMappingParserRuleCall_3_0()); }
	ruleAttributeMapping{ after(grammarAccess.getAnimationAccess().getMappingsAttributeMappingParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Animation__ConditionAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnimationAccess().getConditionConditionParserRuleCall_5_0()); }
	ruleCondition{ after(grammarAccess.getAnimationAccess().getConditionConditionParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeMapping__AttributeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeMappingAccess().getAttributeIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getAttributeMappingAccess().getAttributeIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeMapping__LiteralAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeMappingAccess().getLiteralLiteralParserRuleCall_2_0_0()); }
	ruleLiteral{ after(grammarAccess.getAttributeMappingAccess().getLiteralLiteralParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeMapping__MappingsAssignment_2_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeMappingAccess().getMappingsMappingParserRuleCall_2_1_0_0()); }
	ruleMapping{ after(grammarAccess.getAttributeMappingAccess().getMappingsMappingParserRuleCall_2_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeMapping__MappingsAssignment_2_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeMappingAccess().getMappingsMappingParserRuleCall_2_1_1_1_0()); }
	ruleMapping{ after(grammarAccess.getAttributeMappingAccess().getMappingsMappingParserRuleCall_2_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__VariableDomainAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getVariableDomainVariableDomainParserRuleCall_0_0()); }
	ruleVariableDomain{ after(grammarAccess.getMappingAccess().getVariableDomainVariableDomainParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Mapping__AttributeDomainAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMappingAccess().getAttributeDomainAttributeDomainParserRuleCall_2_0()); }
	ruleAttributeDomain{ after(grammarAccess.getMappingAccess().getAttributeDomainAttributeDomainParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDomain__ValueAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDomainAccess().getValueLiteralParserRuleCall_0_0()); }
	ruleLiteral{ after(grammarAccess.getVariableDomainAccess().getValueLiteralParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDomain__RangeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDomainAccess().getRangeIntervalParserRuleCall_1_0()); }
	ruleInterval{ after(grammarAccess.getVariableDomainAccess().getRangeIntervalParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__FromAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntervalAccess().getFromLiteralParserRuleCall_0_0()); }
	ruleLiteral{ after(grammarAccess.getIntervalAccess().getFromLiteralParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__ToAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntervalAccess().getToLiteralParserRuleCall_2_0()); }
	ruleLiteral{ after(grammarAccess.getIntervalAccess().getToLiteralParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__ExpressionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getExpressionBooleanExpressionParserRuleCall_1_0()); }
	ruleBooleanExpression{ after(grammarAccess.getConditionAccess().getExpressionBooleanExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableReference__ModelAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getModelModelReferenceParserRuleCall_0_0()); }
	ruleModelReference{ after(grammarAccess.getVariableReferenceAccess().getModelModelReferenceParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableReference__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getVariableReferenceAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableReference__IndicesAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getIndicesINTTerminalRuleCall_2_1_0()); }
	RULE_INT{ after(grammarAccess.getVariableReferenceAccess().getIndicesINTTerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ModelReference__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelReferenceAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getModelReferenceAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__LeftSideAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getLeftSideVariableReferenceParserRuleCall_0_0()); }
	ruleVariableReference{ after(grammarAccess.getComparisonAccess().getLeftSideVariableReferenceParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__RelationAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getRelationCompareOperatorEnumRuleCall_1_0()); }
	ruleCompareOperator{ after(grammarAccess.getComparisonAccess().getRelationCompareOperatorEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__RightSideAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getRightSideOperandParserRuleCall_2_0()); }
	ruleOperand{ after(grammarAccess.getComparisonAccess().getRightSideOperandParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operand__VariableAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandAccess().getVariableVariableReferenceParserRuleCall_0_0()); }
	ruleVariableReference{ after(grammarAccess.getOperandAccess().getVariableVariableReferenceParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operand__LiteralAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandAccess().getLiteralLiteralParserRuleCall_1_0()); }
	ruleLiteral{ after(grammarAccess.getOperandAccess().getLiteralLiteralParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


fragment RULE_DIGIT : '0'..'9';

RULE_INT : RULE_DIGIT+;

RULE_FLOAT : (RULE_DIGIT+ '.' RULE_DIGIT* (('e'|'E') ('+'|'-')? RULE_DIGIT+)? 'f'?|RULE_DIGIT+ 'f');

RULE_BOOLEAN : ('true'|'false');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


