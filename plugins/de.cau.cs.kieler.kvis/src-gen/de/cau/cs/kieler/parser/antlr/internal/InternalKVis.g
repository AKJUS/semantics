/*
 * generated by Xtext
 */
grammar InternalKVis;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package de.cau.cs.kieler.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.cau.cs.kieler.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.cau.cs.kieler.services.KVisGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private KVisGrammarAccess grammarAccess;
 	
    public InternalKVisParser(TokenStream input, KVisGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Visualization";	
   	}
   	
   	@Override
   	protected KVisGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleVisualization
entryRuleVisualization returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVisualizationRule()); }
	 iv_ruleVisualization=ruleVisualization 
	 { $current=$iv_ruleVisualization.current; } 
	 EOF 
;

// Rule Visualization
ruleVisualization returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='image' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getVisualizationAccess().getImageKeyword_0());
    }
	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVisualizationAccess().getColonKeyword_1());
    }
(
(
		lv_image_2_0=RULE_STRING
		{
			newLeafNode(lv_image_2_0, grammarAccess.getVisualizationAccess().getImageSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVisualizationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"image",
        		lv_image_2_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getVisualizationAccess().getElementsElementParserRuleCall_3_0()); 
	    }
		lv_elements_3_0=ruleElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVisualizationRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_3_0, 
        		"de.cau.cs.kieler.KVis.Element");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleElement
entryRuleElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElementRule()); }
	 iv_ruleElement=ruleElement 
	 { $current=$iv_ruleElement.current; } 
	 EOF 
;

// Rule Element
ruleElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='animate' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getElementAccess().getAnimateKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getElementAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getElementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getElementAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getElementAccess().getAnimationsAnimationRuleParserRuleCall_3_0()); 
	    }
		lv_animations_3_0=ruleAnimationRule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElementRule());
	        }
       		add(
       			$current, 
       			"animations",
        		lv_animations_3_0, 
        		"de.cau.cs.kieler.KVis.AnimationRule");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getElementAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleAnimationRule
entryRuleAnimationRule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnimationRuleRule()); }
	 iv_ruleAnimationRule=ruleAnimationRule 
	 { $current=$iv_ruleAnimationRule.current; } 
	 EOF 
;

// Rule AnimationRule
ruleAnimationRule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='set' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAnimationRuleAccess().getSetKeyword_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAnimationRuleAccess().getAnimationParserRuleCall_1()); 
    }
    this_Animation_1=ruleAnimation
    { 
        $current = $this_Animation_1.current; 
        afterParserOrEnumRuleCall();
    }
(	otherlv_2='using' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAnimationRuleAccess().getUsingKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAnimationRuleAccess().getVariableVariableReferenceParserRuleCall_2_1_0()); 
	    }
		lv_variable_3_0=ruleVariableReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnimationRuleRule());
	        }
       		set(
       			$current, 
       			"variable",
        		lv_variable_3_0, 
        		"de.cau.cs.kieler.KVis.VariableReference");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAnimationRuleAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAnimationRuleAccess().getMappingsAttributeMappingParserRuleCall_4_0()); 
	    }
		lv_mappings_5_0=ruleAttributeMapping		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnimationRuleRule());
	        }
       		add(
       			$current, 
       			"mappings",
        		lv_mappings_5_0, 
        		"de.cau.cs.kieler.KVis.AttributeMapping");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getAnimationRuleAccess().getRightCurlyBracketKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAnimationRuleAccess().getConditionConditionParserRuleCall_6_0()); 
	    }
		lv_condition_7_0=ruleCondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnimationRuleRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_7_0, 
        		"de.cau.cs.kieler.KVis.Condition");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleAnimation
entryRuleAnimation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnimationRule()); }
	 iv_ruleAnimation=ruleAnimation 
	 { $current=$iv_ruleAnimation.current; } 
	 EOF 
;

// Rule Animation
ruleAnimation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='color' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAnimationAccess().getColorKeyword_0_0());
    }
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getAnimationAccess().getColorAnimationAction_0_1(),
            $current);
    }
))
    |(	otherlv_2='text' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAnimationAccess().getTextKeyword_1_0());
    }
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getAnimationAccess().getTextAnimationAction_1_1(),
            $current);
    }
))
    |(	otherlv_4='visible' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAnimationAccess().getVisibleKeyword_2_0());
    }
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getAnimationAccess().getVisibleAnimationAction_2_1(),
            $current);
    }
))
    |(	otherlv_6='rotation' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getAnimationAccess().getRotationKeyword_3_0());
    }
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getAnimationAccess().getRotateAnimationAction_3_1(),
            $current);
    }
))
    |(	otherlv_8='movement' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getAnimationAccess().getMovementKeyword_4_0());
    }
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getAnimationAccess().getMoveAnimationAction_4_1(),
            $current);
    }
)))
;





// Entry rule entryRuleAttributeMapping
entryRuleAttributeMapping returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeMappingRule()); }
	 iv_ruleAttributeMapping=ruleAttributeMapping 
	 { $current=$iv_ruleAttributeMapping.current; } 
	 EOF 
;

// Rule AttributeMapping
ruleAttributeMapping returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_attribute_0_0=RULE_ID
		{
			newLeafNode(lv_attribute_0_0, grammarAccess.getAttributeMappingAccess().getAttributeIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeMappingRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"attribute",
        		lv_attribute_0_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAttributeMappingAccess().getColonKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeMappingAccess().getLiteralLiteralParserRuleCall_2_0_0()); 
	    }
		lv_literal_2_0=ruleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeMappingRule());
	        }
       		set(
       			$current, 
       			"literal",
        		lv_literal_2_0, 
        		"de.cau.cs.kieler.KVis.Literal");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeMappingAccess().getMappingsMappingParserRuleCall_2_1_0_0()); 
	    }
		lv_mappings_3_0=ruleMapping		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeMappingRule());
	        }
       		add(
       			$current, 
       			"mappings",
        		lv_mappings_3_0, 
        		"de.cau.cs.kieler.KVis.Mapping");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAttributeMappingAccess().getCommaKeyword_2_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeMappingAccess().getMappingsMappingParserRuleCall_2_1_1_1_0()); 
	    }
		lv_mappings_5_0=ruleMapping		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeMappingRule());
	        }
       		add(
       			$current, 
       			"mappings",
        		lv_mappings_5_0, 
        		"de.cau.cs.kieler.KVis.Mapping");
	        afterParserOrEnumRuleCall();
	    }

)
))*)))
;





// Entry rule entryRuleMapping
entryRuleMapping returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMappingRule()); }
	 iv_ruleMapping=ruleMapping 
	 { $current=$iv_ruleMapping.current; } 
	 EOF 
;

// Rule Mapping
ruleMapping returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMappingAccess().getVariableDomainVariableDomainParserRuleCall_0_0()); 
	    }
		lv_variableDomain_0_0=ruleVariableDomain		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMappingRule());
	        }
       		set(
       			$current, 
       			"variableDomain",
        		lv_variableDomain_0_0, 
        		"de.cau.cs.kieler.KVis.VariableDomain");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='is' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMappingAccess().getIsKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMappingAccess().getAttributeDomainAttributeDomainParserRuleCall_2_0()); 
	    }
		lv_attributeDomain_2_0=ruleAttributeDomain		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMappingRule());
	        }
       		set(
       			$current, 
       			"attributeDomain",
        		lv_attributeDomain_2_0, 
        		"de.cau.cs.kieler.KVis.AttributeDomain");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleVariableDomain
entryRuleVariableDomain returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableDomainRule()); }
	 iv_ruleVariableDomain=ruleVariableDomain 
	 { $current=$iv_ruleVariableDomain.current; } 
	 EOF 
;

// Rule VariableDomain
ruleVariableDomain returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDomainAccess().getValueLiteralParserRuleCall_0_0()); 
	    }
		lv_value_0_0=ruleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDomainRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"de.cau.cs.kieler.KVis.Literal");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDomainAccess().getRangeIntervalParserRuleCall_1_0()); 
	    }
		lv_range_1_0=ruleInterval		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDomainRule());
	        }
       		set(
       			$current, 
       			"range",
        		lv_range_1_0, 
        		"de.cau.cs.kieler.KVis.Interval");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleInterval
entryRuleInterval returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntervalRule()); }
	 iv_ruleInterval=ruleInterval 
	 { $current=$iv_ruleInterval.current; } 
	 EOF 
;

// Rule Interval
ruleInterval returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_from_0_0=RULE_INT
		{
			newLeafNode(lv_from_0_0, grammarAccess.getIntervalAccess().getFromINTTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntervalRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"from",
        		lv_from_0_0, 
        		"de.cau.cs.kieler.KVis.INT");
	    }

)
)	otherlv_1='..' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIntervalAccess().getFullStopFullStopKeyword_1());
    }
(
(
		lv_to_2_0=RULE_INT
		{
			newLeafNode(lv_to_2_0, grammarAccess.getIntervalAccess().getToINTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntervalRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"to",
        		lv_to_2_0, 
        		"de.cau.cs.kieler.KVis.INT");
	    }

)
))
;





// Entry rule entryRuleAttributeDomain
entryRuleAttributeDomain returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeDomainRule()); }
	 iv_ruleAttributeDomain=ruleAttributeDomain 
	 { $current=$iv_ruleAttributeDomain.current; } 
	 EOF 
;

// Rule AttributeDomain
ruleAttributeDomain returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAttributeDomainAccess().getVariableDomainParserRuleCall()); 
    }
    this_VariableDomain_0=ruleVariableDomain
    { 
        $current = $this_VariableDomain_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleCondition
entryRuleCondition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionRule()); }
	 iv_ruleCondition=ruleCondition 
	 { $current=$iv_ruleCondition.current; } 
	 EOF 
;

// Rule Condition
ruleCondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='when' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getConditionAccess().getWhenKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionAccess().getExpressionBooleanExpressionParserRuleCall_1_0()); 
	    }
		lv_expression_1_0=ruleBooleanExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_1_0, 
        		"de.cau.cs.kieler.KVis.BooleanExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleVariableReference
entryRuleVariableReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableReferenceRule()); }
	 iv_ruleVariableReference=ruleVariableReference 
	 { $current=$iv_ruleVariableReference.current; } 
	 EOF 
;

// Rule VariableReference
ruleVariableReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getVariableReferenceAccess().getModelModelReferenceParserRuleCall_0_0()); 
	    }
		lv_model_0_0=ruleModelReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableReferenceRule());
	        }
       		set(
       			$current, 
       			"model",
        		lv_model_0_0, 
        		"de.cau.cs.kieler.KVis.ModelReference");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getVariableReferenceAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableReferenceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)(	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getVariableReferenceAccess().getLeftSquareBracketKeyword_2_0());
    }
(
(
		lv_indices_3_0=RULE_INT
		{
			newLeafNode(lv_indices_3_0, grammarAccess.getVariableReferenceAccess().getIndicesINTTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableReferenceRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"indices",
        		lv_indices_3_0, 
        		"de.cau.cs.kieler.KVis.INT");
	    }

)
)	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getVariableReferenceAccess().getRightSquareBracketKeyword_2_2());
    }
)*)
;





// Entry rule entryRuleModelReference
entryRuleModelReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelReferenceRule()); }
	 iv_ruleModelReference=ruleModelReference 
	 { $current=$iv_ruleModelReference.current; } 
	 EOF 
;

// Rule ModelReference
ruleModelReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getModelReferenceAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getModelReferenceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)	otherlv_1='.' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getModelReferenceAccess().getFullStopKeyword_1());
    }
)
;





// Entry rule entryRuleBooleanExpression
entryRuleBooleanExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanExpressionRule()); }
	 iv_ruleBooleanExpression=ruleBooleanExpression 
	 { $current=$iv_ruleBooleanExpression.current; } 
	 EOF 
;

// Rule BooleanExpression
ruleBooleanExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBooleanExpressionAccess().getComparisonParserRuleCall_0()); 
    }
    this_Comparison_0=ruleComparison
    { 
        $current = $this_Comparison_0.current; 
        afterParserOrEnumRuleCall();
    }
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBooleanExpressionAccess().getAndOrExpressionLeftAction_1_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBooleanExpressionAccess().getOperatorBooleanOperatorEnumRuleCall_1_0_1_0()); 
	    }
		lv_operator_2_0=ruleBooleanOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBooleanExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"de.cau.cs.kieler.KVis.BooleanOperator");
	        afterParserOrEnumRuleCall();
	    }

)
))(
(
		{ 
	        newCompositeNode(grammarAccess.getBooleanExpressionAccess().getRightComparisonParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleComparison		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBooleanExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"de.cau.cs.kieler.KVis.Comparison");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleComparison
entryRuleComparison returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComparisonRule()); }
	 iv_ruleComparison=ruleComparison 
	 { $current=$iv_ruleComparison.current; } 
	 EOF 
;

// Rule Comparison
ruleComparison returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getComparisonAccess().getLeftSideVariableReferenceParserRuleCall_0_0()); 
	    }
		lv_leftSide_0_0=ruleVariableReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComparisonRule());
	        }
       		set(
       			$current, 
       			"leftSide",
        		lv_leftSide_0_0, 
        		"de.cau.cs.kieler.KVis.VariableReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getComparisonAccess().getRelationCompareOperatorEnumRuleCall_1_0()); 
	    }
		lv_relation_1_0=ruleCompareOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComparisonRule());
	        }
       		set(
       			$current, 
       			"relation",
        		lv_relation_1_0, 
        		"de.cau.cs.kieler.KVis.CompareOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getComparisonAccess().getRightSideOperandParserRuleCall_2_0()); 
	    }
		lv_rightSide_2_0=ruleOperand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComparisonRule());
	        }
       		set(
       			$current, 
       			"rightSide",
        		lv_rightSide_2_0, 
        		"de.cau.cs.kieler.KVis.Operand");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleOperand
entryRuleOperand returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperandRule()); }
	 iv_ruleOperand=ruleOperand 
	 { $current=$iv_ruleOperand.current; } 
	 EOF 
;

// Rule Operand
ruleOperand returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getOperandAccess().getVariableVariableReferenceParserRuleCall_0_0()); 
	    }
		lv_variable_0_0=ruleVariableReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperandRule());
	        }
       		set(
       			$current, 
       			"variable",
        		lv_variable_0_0, 
        		"de.cau.cs.kieler.KVis.VariableReference");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getOperandAccess().getLiteralLiteralParserRuleCall_1_0()); 
	    }
		lv_literal_1_0=ruleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperandRule());
	        }
       		set(
       			$current, 
       			"literal",
        		lv_literal_1_0, 
        		"de.cau.cs.kieler.KVis.Literal");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLiteral
entryRuleLiteral returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralRule()); } 
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current.getText(); }  
	 EOF 
;

// Rule Literal
ruleLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getLiteralAccess().getINTTerminalRuleCall_0()); 
    }

    |    this_FLOAT_1=RULE_FLOAT    {
		$current.merge(this_FLOAT_1);
    }

    { 
    newLeafNode(this_FLOAT_1, grammarAccess.getLiteralAccess().getFLOATTerminalRuleCall_1()); 
    }

    |    this_STRING_2=RULE_STRING    {
		$current.merge(this_STRING_2);
    }

    { 
    newLeafNode(this_STRING_2, grammarAccess.getLiteralAccess().getSTRINGTerminalRuleCall_2()); 
    }
)
    ;





// Rule CompareOperator
ruleCompareOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='=' 
	{
        $current = grammarAccess.getCompareOperatorAccess().getEQEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getCompareOperatorAccess().getEQEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='<' 
	{
        $current = grammarAccess.getCompareOperatorAccess().getLTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getCompareOperatorAccess().getLTEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='<=' 
	{
        $current = grammarAccess.getCompareOperatorAccess().getLEQEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getCompareOperatorAccess().getLEQEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='>' 
	{
        $current = grammarAccess.getCompareOperatorAccess().getGTEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getCompareOperatorAccess().getGTEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='>=' 
	{
        $current = grammarAccess.getCompareOperatorAccess().getGEQEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getCompareOperatorAccess().getGEQEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='!=' 
	{
        $current = grammarAccess.getCompareOperatorAccess().getNEEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getCompareOperatorAccess().getNEEnumLiteralDeclaration_5()); 
    }
));



// Rule BooleanOperator
ruleBooleanOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='and' 
	{
        $current = grammarAccess.getBooleanOperatorAccess().getANDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getBooleanOperatorAccess().getANDEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='or' 
	{
        $current = grammarAccess.getBooleanOperatorAccess().getOREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getBooleanOperatorAccess().getOREnumLiteralDeclaration_1()); 
    }
));



fragment RULE_DIGIT : '0'..'9';

RULE_INT : RULE_DIGIT+;

RULE_FLOAT : (RULE_DIGIT+ '.' RULE_DIGIT* (('e'|'E') ('+'|'-')? RULE_DIGIT+)? 'f'?|RULE_DIGIT+ 'f');

RULE_BOOLEAN : ('true'|'false');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


