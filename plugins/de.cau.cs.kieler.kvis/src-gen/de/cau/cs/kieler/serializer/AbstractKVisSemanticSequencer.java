/*
 * generated by Xtext
 */
package de.cau.cs.kieler.serializer;

import com.google.inject.Inject;
import de.cau.cs.kieler.kvis.Animation;
import de.cau.cs.kieler.kvis.AttributeMapping;
import de.cau.cs.kieler.kvis.Condition;
import de.cau.cs.kieler.kvis.Element;
import de.cau.cs.kieler.kvis.Expression;
import de.cau.cs.kieler.kvis.Interval;
import de.cau.cs.kieler.kvis.KvisPackage;
import de.cau.cs.kieler.kvis.Mapping;
import de.cau.cs.kieler.kvis.ModelReference;
import de.cau.cs.kieler.kvis.Operand;
import de.cau.cs.kieler.kvis.VariableDomain;
import de.cau.cs.kieler.kvis.VariableReference;
import de.cau.cs.kieler.kvis.Visualization;
import de.cau.cs.kieler.services.KVisGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public abstract class AbstractKVisSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private KVisGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == KvisPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case KvisPackage.ANIMATION:
				sequence_Animation(context, (Animation) semanticObject); 
				return; 
			case KvisPackage.ATTRIBUTE_MAPPING:
				sequence_AttributeMapping(context, (AttributeMapping) semanticObject); 
				return; 
			case KvisPackage.CONDITION:
				sequence_Condition(context, (Condition) semanticObject); 
				return; 
			case KvisPackage.ELEMENT:
				sequence_Element(context, (Element) semanticObject); 
				return; 
			case KvisPackage.EXPRESSION:
				sequence_Comparison(context, (Expression) semanticObject); 
				return; 
			case KvisPackage.INTERVAL:
				sequence_Interval(context, (Interval) semanticObject); 
				return; 
			case KvisPackage.MAPPING:
				sequence_Mapping(context, (Mapping) semanticObject); 
				return; 
			case KvisPackage.MODEL_REFERENCE:
				sequence_ModelReference(context, (ModelReference) semanticObject); 
				return; 
			case KvisPackage.OPERAND:
				sequence_Operand(context, (Operand) semanticObject); 
				return; 
			case KvisPackage.VARIABLE_DOMAIN:
				sequence_VariableDomain(context, (VariableDomain) semanticObject); 
				return; 
			case KvisPackage.VARIABLE_REFERENCE:
				sequence_VariableReference(context, (VariableReference) semanticObject); 
				return; 
			case KvisPackage.VISUALIZATION:
				sequence_Visualization(context, (Visualization) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Animation returns Animation
	 *
	 * Constraint:
	 *     (type=AnimationType variable=VariableReference? mappings+=AttributeMapping* condition=Condition?)
	 */
	protected void sequence_Animation(ISerializationContext context, Animation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AttributeMapping returns AttributeMapping
	 *
	 * Constraint:
	 *     (attribute=ID (literal=Literal | (mappings+=Mapping mappings+=Mapping*)))
	 */
	protected void sequence_AttributeMapping(ISerializationContext context, AttributeMapping semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BooleanExpression returns Expression
	 *     Comparison returns Expression
	 *
	 * Constraint:
	 *     (leftSide=VariableReference relation=CompareOperator rightSide=Operand)
	 */
	protected void sequence_Comparison(ISerializationContext context, Expression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, KvisPackage.Literals.EXPRESSION__LEFT_SIDE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KvisPackage.Literals.EXPRESSION__LEFT_SIDE));
			if (transientValues.isValueTransient(semanticObject, KvisPackage.Literals.EXPRESSION__RELATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KvisPackage.Literals.EXPRESSION__RELATION));
			if (transientValues.isValueTransient(semanticObject, KvisPackage.Literals.EXPRESSION__RIGHT_SIDE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KvisPackage.Literals.EXPRESSION__RIGHT_SIDE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getComparisonAccess().getLeftSideVariableReferenceParserRuleCall_0_0(), semanticObject.getLeftSide());
		feeder.accept(grammarAccess.getComparisonAccess().getRelationCompareOperatorEnumRuleCall_1_0(), semanticObject.getRelation());
		feeder.accept(grammarAccess.getComparisonAccess().getRightSideOperandParserRuleCall_2_0(), semanticObject.getRightSide());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Condition returns Condition
	 *
	 * Constraint:
	 *     expression=BooleanExpression
	 */
	protected void sequence_Condition(ISerializationContext context, Condition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, KvisPackage.Literals.CONDITION__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KvisPackage.Literals.CONDITION__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConditionAccess().getExpressionBooleanExpressionParserRuleCall_1_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Element returns Element
	 *
	 * Constraint:
	 *     (name=ID animations+=Animation+)
	 */
	protected void sequence_Element(ISerializationContext context, Element semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Interval returns Interval
	 *
	 * Constraint:
	 *     (from=Literal to=Literal)
	 */
	protected void sequence_Interval(ISerializationContext context, Interval semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, KvisPackage.Literals.INTERVAL__FROM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KvisPackage.Literals.INTERVAL__FROM));
			if (transientValues.isValueTransient(semanticObject, KvisPackage.Literals.INTERVAL__TO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KvisPackage.Literals.INTERVAL__TO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIntervalAccess().getFromLiteralParserRuleCall_0_0(), semanticObject.getFrom());
		feeder.accept(grammarAccess.getIntervalAccess().getToLiteralParserRuleCall_2_0(), semanticObject.getTo());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Mapping returns Mapping
	 *
	 * Constraint:
	 *     (variableDomain=VariableDomain attributeDomain=AttributeDomain)
	 */
	protected void sequence_Mapping(ISerializationContext context, Mapping semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, KvisPackage.Literals.MAPPING__VARIABLE_DOMAIN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KvisPackage.Literals.MAPPING__VARIABLE_DOMAIN));
			if (transientValues.isValueTransient(semanticObject, KvisPackage.Literals.MAPPING__ATTRIBUTE_DOMAIN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KvisPackage.Literals.MAPPING__ATTRIBUTE_DOMAIN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMappingAccess().getVariableDomainVariableDomainParserRuleCall_0_0(), semanticObject.getVariableDomain());
		feeder.accept(grammarAccess.getMappingAccess().getAttributeDomainAttributeDomainParserRuleCall_2_0(), semanticObject.getAttributeDomain());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ModelReference returns ModelReference
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_ModelReference(ISerializationContext context, ModelReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, KvisPackage.Literals.MODEL_REFERENCE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KvisPackage.Literals.MODEL_REFERENCE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getModelReferenceAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Operand returns Operand
	 *
	 * Constraint:
	 *     (variable=VariableReference | literal=Literal)
	 */
	protected void sequence_Operand(ISerializationContext context, Operand semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VariableDomain returns VariableDomain
	 *     AttributeDomain returns VariableDomain
	 *
	 * Constraint:
	 *     (value=Literal | range=Interval)
	 */
	protected void sequence_VariableDomain(ISerializationContext context, VariableDomain semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VariableReference returns VariableReference
	 *
	 * Constraint:
	 *     (model=ModelReference? name=ID indices+=INT*)
	 */
	protected void sequence_VariableReference(ISerializationContext context, VariableReference semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Visualization returns Visualization
	 *
	 * Constraint:
	 *     (image=STRING elements+=Element*)
	 */
	protected void sequence_Visualization(ISerializationContext context, Visualization semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
