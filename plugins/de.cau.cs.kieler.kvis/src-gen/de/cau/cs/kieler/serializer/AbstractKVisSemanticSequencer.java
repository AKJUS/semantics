/*
 * generated by Xtext
 */
package de.cau.cs.kieler.serializer;

import com.google.inject.Inject;
import de.cau.cs.kieler.kvis.AndOrExpression;
import de.cau.cs.kieler.kvis.AttributeMapping;
import de.cau.cs.kieler.kvis.ColorAnimation;
import de.cau.cs.kieler.kvis.Condition;
import de.cau.cs.kieler.kvis.Domain;
import de.cau.cs.kieler.kvis.Element;
import de.cau.cs.kieler.kvis.Expression;
import de.cau.cs.kieler.kvis.Interval;
import de.cau.cs.kieler.kvis.KvisPackage;
import de.cau.cs.kieler.kvis.Mapping;
import de.cau.cs.kieler.kvis.ModelReference;
import de.cau.cs.kieler.kvis.MoveAnimation;
import de.cau.cs.kieler.kvis.Operand;
import de.cau.cs.kieler.kvis.RotateAnimation;
import de.cau.cs.kieler.kvis.TextAnimation;
import de.cau.cs.kieler.kvis.VariableReference;
import de.cau.cs.kieler.kvis.VisibleAnimation;
import de.cau.cs.kieler.kvis.Visualization;
import de.cau.cs.kieler.services.KVisGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public abstract class AbstractKVisSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private KVisGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == KvisPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case KvisPackage.AND_OR_EXPRESSION:
				sequence_BooleanExpression(context, (AndOrExpression) semanticObject); 
				return; 
			case KvisPackage.ATTRIBUTE_MAPPING:
				sequence_AttributeMapping(context, (AttributeMapping) semanticObject); 
				return; 
			case KvisPackage.COLOR_ANIMATION:
				if (rule == grammarAccess.getAnimationRuleRule()) {
					sequence_Animation_AnimationRule(context, (ColorAnimation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAnimationRule()) {
					sequence_Animation(context, (ColorAnimation) semanticObject); 
					return; 
				}
				else break;
			case KvisPackage.CONDITION:
				sequence_Condition(context, (Condition) semanticObject); 
				return; 
			case KvisPackage.DOMAIN:
				sequence_VariableDomain(context, (Domain) semanticObject); 
				return; 
			case KvisPackage.ELEMENT:
				sequence_Element(context, (Element) semanticObject); 
				return; 
			case KvisPackage.EXPRESSION:
				sequence_Comparison(context, (Expression) semanticObject); 
				return; 
			case KvisPackage.INTERVAL:
				sequence_Interval(context, (Interval) semanticObject); 
				return; 
			case KvisPackage.MAPPING:
				sequence_Mapping(context, (Mapping) semanticObject); 
				return; 
			case KvisPackage.MODEL_REFERENCE:
				sequence_ModelReference(context, (ModelReference) semanticObject); 
				return; 
			case KvisPackage.MOVE_ANIMATION:
				if (rule == grammarAccess.getAnimationRuleRule()) {
					sequence_Animation_AnimationRule(context, (MoveAnimation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAnimationRule()) {
					sequence_Animation(context, (MoveAnimation) semanticObject); 
					return; 
				}
				else break;
			case KvisPackage.OPERAND:
				sequence_Operand(context, (Operand) semanticObject); 
				return; 
			case KvisPackage.ROTATE_ANIMATION:
				if (rule == grammarAccess.getAnimationRuleRule()) {
					sequence_Animation_AnimationRule(context, (RotateAnimation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAnimationRule()) {
					sequence_Animation(context, (RotateAnimation) semanticObject); 
					return; 
				}
				else break;
			case KvisPackage.TEXT_ANIMATION:
				if (rule == grammarAccess.getAnimationRuleRule()) {
					sequence_Animation_AnimationRule(context, (TextAnimation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAnimationRule()) {
					sequence_Animation(context, (TextAnimation) semanticObject); 
					return; 
				}
				else break;
			case KvisPackage.VARIABLE_REFERENCE:
				sequence_VariableReference(context, (VariableReference) semanticObject); 
				return; 
			case KvisPackage.VISIBLE_ANIMATION:
				if (rule == grammarAccess.getAnimationRuleRule()) {
					sequence_Animation_AnimationRule(context, (VisibleAnimation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAnimationRule()) {
					sequence_Animation(context, (VisibleAnimation) semanticObject); 
					return; 
				}
				else break;
			case KvisPackage.VISUALIZATION:
				sequence_Visualization(context, (Visualization) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     AnimationRule returns ColorAnimation
	 *
	 * Constraint:
	 *     (variable=VariableReference? mappings+=AttributeMapping* condition=Condition?)
	 */
	protected void sequence_Animation_AnimationRule(ISerializationContext context, ColorAnimation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AnimationRule returns MoveAnimation
	 *
	 * Constraint:
	 *     (variable=VariableReference? mappings+=AttributeMapping* condition=Condition?)
	 */
	protected void sequence_Animation_AnimationRule(ISerializationContext context, MoveAnimation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AnimationRule returns RotateAnimation
	 *
	 * Constraint:
	 *     (variable=VariableReference? mappings+=AttributeMapping* condition=Condition?)
	 */
	protected void sequence_Animation_AnimationRule(ISerializationContext context, RotateAnimation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AnimationRule returns TextAnimation
	 *
	 * Constraint:
	 *     (variable=VariableReference? mappings+=AttributeMapping* condition=Condition?)
	 */
	protected void sequence_Animation_AnimationRule(ISerializationContext context, TextAnimation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AnimationRule returns VisibleAnimation
	 *
	 * Constraint:
	 *     (variable=VariableReference? mappings+=AttributeMapping* condition=Condition?)
	 */
	protected void sequence_Animation_AnimationRule(ISerializationContext context, VisibleAnimation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Animation returns ColorAnimation
	 *
	 * Constraint:
	 *     {ColorAnimation}
	 */
	protected void sequence_Animation(ISerializationContext context, ColorAnimation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Animation returns MoveAnimation
	 *
	 * Constraint:
	 *     {MoveAnimation}
	 */
	protected void sequence_Animation(ISerializationContext context, MoveAnimation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Animation returns RotateAnimation
	 *
	 * Constraint:
	 *     {RotateAnimation}
	 */
	protected void sequence_Animation(ISerializationContext context, RotateAnimation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Animation returns TextAnimation
	 *
	 * Constraint:
	 *     {TextAnimation}
	 */
	protected void sequence_Animation(ISerializationContext context, TextAnimation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Animation returns VisibleAnimation
	 *
	 * Constraint:
	 *     {VisibleAnimation}
	 */
	protected void sequence_Animation(ISerializationContext context, VisibleAnimation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AttributeMapping returns AttributeMapping
	 *
	 * Constraint:
	 *     (attribute=ID (literal=Literal | (mappings+=Mapping mappings+=Mapping*)))
	 */
	protected void sequence_AttributeMapping(ISerializationContext context, AttributeMapping semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BooleanExpression returns AndOrExpression
	 *     BooleanExpression.AndOrExpression_1_0_0 returns AndOrExpression
	 *
	 * Constraint:
	 *     (left=BooleanExpression_AndOrExpression_1_0_0 operator=BooleanOperator right=Comparison)
	 */
	protected void sequence_BooleanExpression(ISerializationContext context, AndOrExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, KvisPackage.Literals.AND_OR_EXPRESSION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KvisPackage.Literals.AND_OR_EXPRESSION__LEFT));
			if (transientValues.isValueTransient(semanticObject, KvisPackage.Literals.AND_OR_EXPRESSION__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KvisPackage.Literals.AND_OR_EXPRESSION__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, KvisPackage.Literals.AND_OR_EXPRESSION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KvisPackage.Literals.AND_OR_EXPRESSION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBooleanExpressionAccess().getAndOrExpressionLeftAction_1_0_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getBooleanExpressionAccess().getOperatorBooleanOperatorEnumRuleCall_1_0_1_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getBooleanExpressionAccess().getRightComparisonParserRuleCall_1_1_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     BooleanExpression returns Expression
	 *     BooleanExpression.AndOrExpression_1_0_0 returns Expression
	 *     Comparison returns Expression
	 *
	 * Constraint:
	 *     (leftSide=VariableReference relation=CompareOperator rightSide=Operand)
	 */
	protected void sequence_Comparison(ISerializationContext context, Expression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, KvisPackage.Literals.EXPRESSION__LEFT_SIDE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KvisPackage.Literals.EXPRESSION__LEFT_SIDE));
			if (transientValues.isValueTransient(semanticObject, KvisPackage.Literals.EXPRESSION__RELATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KvisPackage.Literals.EXPRESSION__RELATION));
			if (transientValues.isValueTransient(semanticObject, KvisPackage.Literals.EXPRESSION__RIGHT_SIDE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KvisPackage.Literals.EXPRESSION__RIGHT_SIDE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getComparisonAccess().getLeftSideVariableReferenceParserRuleCall_0_0(), semanticObject.getLeftSide());
		feeder.accept(grammarAccess.getComparisonAccess().getRelationCompareOperatorEnumRuleCall_1_0(), semanticObject.getRelation());
		feeder.accept(grammarAccess.getComparisonAccess().getRightSideOperandParserRuleCall_2_0(), semanticObject.getRightSide());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Condition returns Condition
	 *
	 * Constraint:
	 *     expression=BooleanExpression
	 */
	protected void sequence_Condition(ISerializationContext context, Condition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, KvisPackage.Literals.CONDITION__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KvisPackage.Literals.CONDITION__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConditionAccess().getExpressionBooleanExpressionParserRuleCall_1_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Element returns Element
	 *
	 * Constraint:
	 *     (name=ID animations+=AnimationRule+)
	 */
	protected void sequence_Element(ISerializationContext context, Element semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Interval returns Interval
	 *
	 * Constraint:
	 *     (from=INT to=INT)
	 */
	protected void sequence_Interval(ISerializationContext context, Interval semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, KvisPackage.Literals.INTERVAL__FROM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KvisPackage.Literals.INTERVAL__FROM));
			if (transientValues.isValueTransient(semanticObject, KvisPackage.Literals.INTERVAL__TO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KvisPackage.Literals.INTERVAL__TO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIntervalAccess().getFromINTTerminalRuleCall_0_0(), semanticObject.getFrom());
		feeder.accept(grammarAccess.getIntervalAccess().getToINTTerminalRuleCall_2_0(), semanticObject.getTo());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Mapping returns Mapping
	 *
	 * Constraint:
	 *     (variableDomain=VariableDomain attributeDomain=AttributeDomain)
	 */
	protected void sequence_Mapping(ISerializationContext context, Mapping semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, KvisPackage.Literals.MAPPING__VARIABLE_DOMAIN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KvisPackage.Literals.MAPPING__VARIABLE_DOMAIN));
			if (transientValues.isValueTransient(semanticObject, KvisPackage.Literals.MAPPING__ATTRIBUTE_DOMAIN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KvisPackage.Literals.MAPPING__ATTRIBUTE_DOMAIN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMappingAccess().getVariableDomainVariableDomainParserRuleCall_0_0(), semanticObject.getVariableDomain());
		feeder.accept(grammarAccess.getMappingAccess().getAttributeDomainAttributeDomainParserRuleCall_2_0(), semanticObject.getAttributeDomain());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ModelReference returns ModelReference
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_ModelReference(ISerializationContext context, ModelReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, KvisPackage.Literals.MODEL_REFERENCE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KvisPackage.Literals.MODEL_REFERENCE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getModelReferenceAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Operand returns Operand
	 *
	 * Constraint:
	 *     (variable=VariableReference | literal=Literal)
	 */
	protected void sequence_Operand(ISerializationContext context, Operand semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VariableDomain returns Domain
	 *     AttributeDomain returns Domain
	 *
	 * Constraint:
	 *     (value=Literal | range=Interval)
	 */
	protected void sequence_VariableDomain(ISerializationContext context, Domain semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VariableReference returns VariableReference
	 *
	 * Constraint:
	 *     (model=ModelReference? name=ID indices+=INT*)
	 */
	protected void sequence_VariableReference(ISerializationContext context, VariableReference semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Visualization returns Visualization
	 *
	 * Constraint:
	 *     (image=STRING elements+=Element*)
	 */
	protected void sequence_Visualization(ISerializationContext context, Visualization semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
