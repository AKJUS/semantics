/*
 * generated by Xtext
 */
package de.cau.cs.kieler.sccharts.text.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import de.cau.cs.kieler.core.kexpressions.text.services.KEXTGrammarAccess;
import de.cau.cs.kieler.core.kexpressions.keffects.services.KEffectsGrammarAccess;
import de.cau.cs.kieler.core.kexpressions.services.KExpressionsGrammarAccess;
import de.cau.cs.kieler.core.annotations.text.services.AnnotationsGrammarAccess;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SCTGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SCChartsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCT.SCCharts");
		private final Assignment cRootStatesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRootStatesRootStateParserRuleCall_0 = (RuleCall)cRootStatesAssignment.eContents().get(0);
		
		////generate sct3 "http://kieler.cs.cau.de/sccharts/textual3/0.1.0"
		//// ---------------- //
		////  SCCharts Rules  // 
		//// ---------------- //
		//SCCharts sccharts::SCCharts:
		//	rootStates+=RootState*
		@Override public ParserRule getRule() { return rule; }

		//rootStates+=RootState*
		public Assignment getRootStatesAssignment() { return cRootStatesAssignment; }

		//RootState
		public RuleCall getRootStatesRootStateParserRuleCall_0() { return cRootStatesRootStateParserRuleCall_0; }
	}

	public class RootStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCT.RootState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cScchartKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdIDTerminalRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		private final Assignment cLabelAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLabelSTRINGTerminalRuleCall_3_0 = (RuleCall)cLabelAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDeclarationsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDeclarationsDeclarationWOSemicolonParserRuleCall_5_0 = (RuleCall)cDeclarationsAssignment_5.eContents().get(0);
		private final Assignment cLocalActionsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cLocalActionsLocalActionParserRuleCall_6_0 = (RuleCall)cLocalActionsAssignment_6.eContents().get(0);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Assignment cRegionsAssignment_7_0 = (Assignment)cAlternatives_7.eContents().get(0);
		private final RuleCall cRegionsSingleControlflowRegionParserRuleCall_7_0_0 = (RuleCall)cRegionsAssignment_7_0.eContents().get(0);
		private final Assignment cRegionsAssignment_7_1 = (Assignment)cAlternatives_7.eContents().get(1);
		private final RuleCall cRegionsSingleDataflowRegionParserRuleCall_7_1_0 = (RuleCall)cRegionsAssignment_7_1.eContents().get(0);
		private final Assignment cRegionsAssignment_7_2 = (Assignment)cAlternatives_7.eContents().get(2);
		private final RuleCall cRegionsRegionParserRuleCall_7_2_0 = (RuleCall)cRegionsAssignment_7_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//// ------------- //
		////  State Rules  // 
		//// ------------- //
		//RootState sccharts::State:
		//	annotations+=Annotation*
		//	'scchart' id=ID label=STRING?
		//	'{'
		//	declarations+=DeclarationWOSemicolon*
		//	localActions+=LocalAction* (regions+=SingleControlflowRegion | regions+=SingleDataflowRegion | regions+=Region*)
		//	'}'
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* 'scchart' id=ID label=STRING? '{' declarations+=DeclarationWOSemicolon*
		//localActions+=LocalAction* (regions+=SingleControlflowRegion | regions+=SingleDataflowRegion | regions+=Region*) '}'
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//'scchart'
		public Keyword getScchartKeyword_1() { return cScchartKeyword_1; }

		//id=ID
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_2_0() { return cIdIDTerminalRuleCall_2_0; }

		//label=STRING?
		public Assignment getLabelAssignment_3() { return cLabelAssignment_3; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_3_0() { return cLabelSTRINGTerminalRuleCall_3_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//declarations+=DeclarationWOSemicolon*
		public Assignment getDeclarationsAssignment_5() { return cDeclarationsAssignment_5; }

		//DeclarationWOSemicolon
		public RuleCall getDeclarationsDeclarationWOSemicolonParserRuleCall_5_0() { return cDeclarationsDeclarationWOSemicolonParserRuleCall_5_0; }

		//localActions+=LocalAction*
		public Assignment getLocalActionsAssignment_6() { return cLocalActionsAssignment_6; }

		//LocalAction
		public RuleCall getLocalActionsLocalActionParserRuleCall_6_0() { return cLocalActionsLocalActionParserRuleCall_6_0; }

		//(regions+=SingleControlflowRegion | regions+=SingleDataflowRegion | regions+=Region*)
		public Alternatives getAlternatives_7() { return cAlternatives_7; }

		//regions+=SingleControlflowRegion
		public Assignment getRegionsAssignment_7_0() { return cRegionsAssignment_7_0; }

		//SingleControlflowRegion
		public RuleCall getRegionsSingleControlflowRegionParserRuleCall_7_0_0() { return cRegionsSingleControlflowRegionParserRuleCall_7_0_0; }

		//regions+=SingleDataflowRegion
		public Assignment getRegionsAssignment_7_1() { return cRegionsAssignment_7_1; }

		//SingleDataflowRegion
		public RuleCall getRegionsSingleDataflowRegionParserRuleCall_7_1_0() { return cRegionsSingleDataflowRegionParserRuleCall_7_1_0; }

		//regions+=Region*
		public Assignment getRegionsAssignment_7_2() { return cRegionsAssignment_7_2; }

		//Region
		public RuleCall getRegionsRegionParserRuleCall_7_2_0() { return cRegionsRegionParserRuleCall_7_2_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCT.State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cInitialAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cInitialInitialKeyword_1_0 = (Keyword)cInitialAssignment_1.eContents().get(0);
		private final Assignment cFinalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cFinalFinalKeyword_2_0 = (Keyword)cFinalAssignment_2.eContents().get(0);
		private final Assignment cConnectorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cConnectorConnectorKeyword_3_0 = (Keyword)cConnectorAssignment_3.eContents().get(0);
		private final Keyword cStateKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cIdAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cIdIDTerminalRuleCall_5_0 = (RuleCall)cIdAssignment_5.eContents().get(0);
		private final Assignment cLabelAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cLabelSTRINGTerminalRuleCall_6_0 = (RuleCall)cLabelAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cDeclarationsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cDeclarationsDeclarationWOSemicolonParserRuleCall_7_1_0 = (RuleCall)cDeclarationsAssignment_7_1.eContents().get(0);
		private final Assignment cLocalActionsAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cLocalActionsLocalActionParserRuleCall_7_2_0 = (RuleCall)cLocalActionsAssignment_7_2.eContents().get(0);
		private final Alternatives cAlternatives_7_3 = (Alternatives)cGroup_7.eContents().get(3);
		private final Assignment cRegionsAssignment_7_3_0 = (Assignment)cAlternatives_7_3.eContents().get(0);
		private final RuleCall cRegionsSingleControlflowRegionParserRuleCall_7_3_0_0 = (RuleCall)cRegionsAssignment_7_3_0.eContents().get(0);
		private final Assignment cRegionsAssignment_7_3_1 = (Assignment)cAlternatives_7_3.eContents().get(1);
		private final RuleCall cRegionsSingleDataflowRegionParserRuleCall_7_3_1_0 = (RuleCall)cRegionsAssignment_7_3_1.eContents().get(0);
		private final Assignment cRegionsAssignment_7_3_2 = (Assignment)cAlternatives_7_3.eContents().get(2);
		private final RuleCall cRegionsRegionParserRuleCall_7_3_2_0 = (RuleCall)cRegionsAssignment_7_3_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		private final Assignment cOutgoingTransitionsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cOutgoingTransitionsTransitionParserRuleCall_8_0 = (RuleCall)cOutgoingTransitionsAssignment_8.eContents().get(0);
		
		//State sccharts::State:
		//	annotations+=Annotation*
		//	initial?='initial'?
		//	final?='final'?
		//	connector?='connector'?
		//	'state' id=ID label=STRING? ('{'
		//	declarations+=DeclarationWOSemicolon*
		//	localActions+=LocalAction* (regions+=SingleControlflowRegion | regions+=SingleDataflowRegion | regions+=Region*)
		//	'}')?
		//	outgoingTransitions+=Transition*
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* initial?='initial'? final?='final'? connector?='connector'? 'state' id=ID label=STRING? ('{'
		//declarations+=DeclarationWOSemicolon* localActions+=LocalAction* (regions+=SingleControlflowRegion |
		//regions+=SingleDataflowRegion | regions+=Region*) '}')? outgoingTransitions+=Transition*
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//initial?='initial'?
		public Assignment getInitialAssignment_1() { return cInitialAssignment_1; }

		//'initial'
		public Keyword getInitialInitialKeyword_1_0() { return cInitialInitialKeyword_1_0; }

		//final?='final'?
		public Assignment getFinalAssignment_2() { return cFinalAssignment_2; }

		//'final'
		public Keyword getFinalFinalKeyword_2_0() { return cFinalFinalKeyword_2_0; }

		//connector?='connector'?
		public Assignment getConnectorAssignment_3() { return cConnectorAssignment_3; }

		//'connector'
		public Keyword getConnectorConnectorKeyword_3_0() { return cConnectorConnectorKeyword_3_0; }

		//'state'
		public Keyword getStateKeyword_4() { return cStateKeyword_4; }

		//id=ID
		public Assignment getIdAssignment_5() { return cIdAssignment_5; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_5_0() { return cIdIDTerminalRuleCall_5_0; }

		//label=STRING?
		public Assignment getLabelAssignment_6() { return cLabelAssignment_6; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_6_0() { return cLabelSTRINGTerminalRuleCall_6_0; }

		//('{' declarations+=DeclarationWOSemicolon* localActions+=LocalAction* (regions+=SingleControlflowRegion |
		//regions+=SingleDataflowRegion | regions+=Region*) '}')?
		public Group getGroup_7() { return cGroup_7; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_0() { return cLeftCurlyBracketKeyword_7_0; }

		//declarations+=DeclarationWOSemicolon*
		public Assignment getDeclarationsAssignment_7_1() { return cDeclarationsAssignment_7_1; }

		//DeclarationWOSemicolon
		public RuleCall getDeclarationsDeclarationWOSemicolonParserRuleCall_7_1_0() { return cDeclarationsDeclarationWOSemicolonParserRuleCall_7_1_0; }

		//localActions+=LocalAction*
		public Assignment getLocalActionsAssignment_7_2() { return cLocalActionsAssignment_7_2; }

		//LocalAction
		public RuleCall getLocalActionsLocalActionParserRuleCall_7_2_0() { return cLocalActionsLocalActionParserRuleCall_7_2_0; }

		//(regions+=SingleControlflowRegion | regions+=SingleDataflowRegion | regions+=Region*)
		public Alternatives getAlternatives_7_3() { return cAlternatives_7_3; }

		//regions+=SingleControlflowRegion
		public Assignment getRegionsAssignment_7_3_0() { return cRegionsAssignment_7_3_0; }

		//SingleControlflowRegion
		public RuleCall getRegionsSingleControlflowRegionParserRuleCall_7_3_0_0() { return cRegionsSingleControlflowRegionParserRuleCall_7_3_0_0; }

		//regions+=SingleDataflowRegion
		public Assignment getRegionsAssignment_7_3_1() { return cRegionsAssignment_7_3_1; }

		//SingleDataflowRegion
		public RuleCall getRegionsSingleDataflowRegionParserRuleCall_7_3_1_0() { return cRegionsSingleDataflowRegionParserRuleCall_7_3_1_0; }

		//regions+=Region*
		public Assignment getRegionsAssignment_7_3_2() { return cRegionsAssignment_7_3_2; }

		//Region
		public RuleCall getRegionsRegionParserRuleCall_7_3_2_0() { return cRegionsRegionParserRuleCall_7_3_2_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_7_4() { return cRightCurlyBracketKeyword_7_4; }

		//outgoingTransitions+=Transition*
		public Assignment getOutgoingTransitionsAssignment_8() { return cOutgoingTransitionsAssignment_8; }

		//Transition
		public RuleCall getOutgoingTransitionsTransitionParserRuleCall_8_0() { return cOutgoingTransitionsTransitionParserRuleCall_8_0; }
	}

	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCT.Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsRestrictedTypeAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTransitionTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cTargetStateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTargetStateStateCrossReference_2_0 = (CrossReference)cTargetStateAssignment_2.eContents().get(0);
		private final RuleCall cTargetStateStateIDTerminalRuleCall_2_0_1 = (RuleCall)cTargetStateStateCrossReference_2_0.eContents().get(1);
		private final Assignment cImmediateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cImmediateImmediateKeyword_3_0 = (Keyword)cImmediateAssignment_3.eContents().get(0);
		private final Assignment cDeferredAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cDeferredDeferredKeyword_4_0 = (Keyword)cDeferredAssignment_4.eContents().get(0);
		private final Assignment cHistoryAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cHistoryHistoryTypeEnumRuleCall_5_0 = (RuleCall)cHistoryAssignment_5.eContents().get(0);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Group cGroup_6_0 = (Group)cAlternatives_6.eContents().get(0);
		private final Group cGroup_6_0_0 = (Group)cGroup_6_0.eContents().get(0);
		private final Keyword cIfKeyword_6_0_0_0 = (Keyword)cGroup_6_0_0.eContents().get(0);
		private final Assignment cDelayAssignment_6_0_0_1 = (Assignment)cGroup_6_0_0.eContents().get(1);
		private final RuleCall cDelayINTTerminalRuleCall_6_0_0_1_0 = (RuleCall)cDelayAssignment_6_0_0_1.eContents().get(0);
		private final Assignment cTriggerAssignment_6_0_0_2 = (Assignment)cGroup_6_0_0.eContents().get(2);
		private final RuleCall cTriggerBoolExpressionParserRuleCall_6_0_0_2_0 = (RuleCall)cTriggerAssignment_6_0_0_2.eContents().get(0);
		private final Group cGroup_6_0_1 = (Group)cGroup_6_0.eContents().get(1);
		private final Keyword cThenKeyword_6_0_1_0 = (Keyword)cGroup_6_0_1.eContents().get(0);
		private final Assignment cEffectsAssignment_6_0_1_1 = (Assignment)cGroup_6_0_1.eContents().get(1);
		private final RuleCall cEffectsEffectParserRuleCall_6_0_1_1_0 = (RuleCall)cEffectsAssignment_6_0_1_1.eContents().get(0);
		private final Group cGroup_6_0_1_2 = (Group)cGroup_6_0_1.eContents().get(2);
		private final Keyword cSemicolonKeyword_6_0_1_2_0 = (Keyword)cGroup_6_0_1_2.eContents().get(0);
		private final Assignment cEffectsAssignment_6_0_1_2_1 = (Assignment)cGroup_6_0_1_2.eContents().get(1);
		private final RuleCall cEffectsEffectParserRuleCall_6_0_1_2_1_0 = (RuleCall)cEffectsAssignment_6_0_1_2_1.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cAlternatives_6.eContents().get(1);
		private final Keyword cIfKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cLabelAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cLabelSTRINGTerminalRuleCall_6_1_1_0 = (RuleCall)cLabelAssignment_6_1_1.eContents().get(0);
		
		//// ------------------ //
		////  Transition Rules  // 
		//// ------------------ //
		//Transition sccharts::Transition:
		//	annotations+=RestrictedTypeAnnotation*
		//	type=TransitionType
		//	targetState=[sccharts::State] immediate?='immediate'?
		//	deferred?='deferred'?
		//	history=HistoryType? (('if' delay=INT? trigger=BoolExpression)? ('then' effects+=Effect (';' effects+=Effect)*)?
		//	| 'if' label=STRING)?
		@Override public ParserRule getRule() { return rule; }

		//annotations+=RestrictedTypeAnnotation* type=TransitionType targetState=[sccharts::State] immediate?='immediate'?
		//deferred?='deferred'? history=HistoryType? (('if' delay=INT? trigger=BoolExpression)? ('then' effects+=Effect (';'
		//effects+=Effect)*)? | 'if' label=STRING)?
		public Group getGroup() { return cGroup; }

		//annotations+=RestrictedTypeAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//RestrictedTypeAnnotation
		public RuleCall getAnnotationsRestrictedTypeAnnotationParserRuleCall_0_0() { return cAnnotationsRestrictedTypeAnnotationParserRuleCall_0_0; }

		//type=TransitionType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//TransitionType
		public RuleCall getTypeTransitionTypeEnumRuleCall_1_0() { return cTypeTransitionTypeEnumRuleCall_1_0; }

		//targetState=[sccharts::State]
		public Assignment getTargetStateAssignment_2() { return cTargetStateAssignment_2; }

		//[sccharts::State]
		public CrossReference getTargetStateStateCrossReference_2_0() { return cTargetStateStateCrossReference_2_0; }

		//ID
		public RuleCall getTargetStateStateIDTerminalRuleCall_2_0_1() { return cTargetStateStateIDTerminalRuleCall_2_0_1; }

		//immediate?='immediate'?
		public Assignment getImmediateAssignment_3() { return cImmediateAssignment_3; }

		//'immediate'
		public Keyword getImmediateImmediateKeyword_3_0() { return cImmediateImmediateKeyword_3_0; }

		//deferred?='deferred'?
		public Assignment getDeferredAssignment_4() { return cDeferredAssignment_4; }

		//'deferred'
		public Keyword getDeferredDeferredKeyword_4_0() { return cDeferredDeferredKeyword_4_0; }

		//history=HistoryType?
		public Assignment getHistoryAssignment_5() { return cHistoryAssignment_5; }

		//HistoryType
		public RuleCall getHistoryHistoryTypeEnumRuleCall_5_0() { return cHistoryHistoryTypeEnumRuleCall_5_0; }

		//(('if' delay=INT? trigger=BoolExpression)? ('then' effects+=Effect (';' effects+=Effect)*)? | 'if' label=STRING)?
		public Alternatives getAlternatives_6() { return cAlternatives_6; }

		//('if' delay=INT? trigger=BoolExpression)? ('then' effects+=Effect (';' effects+=Effect)*)?
		public Group getGroup_6_0() { return cGroup_6_0; }

		//('if' delay=INT? trigger=BoolExpression)?
		public Group getGroup_6_0_0() { return cGroup_6_0_0; }

		//'if'
		public Keyword getIfKeyword_6_0_0_0() { return cIfKeyword_6_0_0_0; }

		//delay=INT?
		public Assignment getDelayAssignment_6_0_0_1() { return cDelayAssignment_6_0_0_1; }

		//INT
		public RuleCall getDelayINTTerminalRuleCall_6_0_0_1_0() { return cDelayINTTerminalRuleCall_6_0_0_1_0; }

		//trigger=BoolExpression
		public Assignment getTriggerAssignment_6_0_0_2() { return cTriggerAssignment_6_0_0_2; }

		//BoolExpression
		public RuleCall getTriggerBoolExpressionParserRuleCall_6_0_0_2_0() { return cTriggerBoolExpressionParserRuleCall_6_0_0_2_0; }

		//('then' effects+=Effect (';' effects+=Effect)*)?
		public Group getGroup_6_0_1() { return cGroup_6_0_1; }

		//'then'
		public Keyword getThenKeyword_6_0_1_0() { return cThenKeyword_6_0_1_0; }

		//effects+=Effect
		public Assignment getEffectsAssignment_6_0_1_1() { return cEffectsAssignment_6_0_1_1; }

		//Effect
		public RuleCall getEffectsEffectParserRuleCall_6_0_1_1_0() { return cEffectsEffectParserRuleCall_6_0_1_1_0; }

		//(';' effects+=Effect)*
		public Group getGroup_6_0_1_2() { return cGroup_6_0_1_2; }

		//';'
		public Keyword getSemicolonKeyword_6_0_1_2_0() { return cSemicolonKeyword_6_0_1_2_0; }

		//effects+=Effect
		public Assignment getEffectsAssignment_6_0_1_2_1() { return cEffectsAssignment_6_0_1_2_1; }

		//Effect
		public RuleCall getEffectsEffectParserRuleCall_6_0_1_2_1_0() { return cEffectsEffectParserRuleCall_6_0_1_2_1_0; }

		//'if' label=STRING
		public Group getGroup_6_1() { return cGroup_6_1; }

		//'if'
		public Keyword getIfKeyword_6_1_0() { return cIfKeyword_6_1_0; }

		//label=STRING
		public Assignment getLabelAssignment_6_1_1() { return cLabelAssignment_6_1_1; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_6_1_1_0() { return cLabelSTRINGTerminalRuleCall_6_1_1_0; }
	}

	public class LocalActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCT.LocalAction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEntryActionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDuringActionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExitActionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSuspendActionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cIterateActionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cInitActionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cFinalActionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//// -------------- //
		////  Action Rules  // 
		//// -------------- //
		//LocalAction sccharts::LocalAction:
		//	EntryAction | DuringAction | ExitAction | SuspendAction | IterateAction | InitAction | FinalAction
		@Override public ParserRule getRule() { return rule; }

		//EntryAction | DuringAction | ExitAction | SuspendAction | IterateAction | InitAction | FinalAction
		public Alternatives getAlternatives() { return cAlternatives; }

		//EntryAction
		public RuleCall getEntryActionParserRuleCall_0() { return cEntryActionParserRuleCall_0; }

		//DuringAction
		public RuleCall getDuringActionParserRuleCall_1() { return cDuringActionParserRuleCall_1; }

		//ExitAction
		public RuleCall getExitActionParserRuleCall_2() { return cExitActionParserRuleCall_2; }

		//SuspendAction
		public RuleCall getSuspendActionParserRuleCall_3() { return cSuspendActionParserRuleCall_3; }

		//IterateAction
		public RuleCall getIterateActionParserRuleCall_4() { return cIterateActionParserRuleCall_4; }

		//InitAction
		public RuleCall getInitActionParserRuleCall_5() { return cInitActionParserRuleCall_5; }

		//FinalAction
		public RuleCall getFinalActionParserRuleCall_6() { return cFinalActionParserRuleCall_6; }
	}

	public class EntryActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCT.EntryAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEntryActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEntryKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cIfKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTriggerAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTriggerBoolExpressionParserRuleCall_2_1_0 = (RuleCall)cTriggerAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cThenKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cEffectsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cEffectsEffectParserRuleCall_3_1_0 = (RuleCall)cEffectsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cSemicolonKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cEffectsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cEffectsEffectParserRuleCall_3_2_1_0 = (RuleCall)cEffectsAssignment_3_2_1.eContents().get(0);
		
		//EntryAction sccharts::EntryAction:
		//	{sccharts::EntryAction}
		//	'entry' ('if' trigger=BoolExpression)? ('then' effects+=Effect (';' effects+=Effect)*)?
		@Override public ParserRule getRule() { return rule; }

		//{sccharts::EntryAction} 'entry' ('if' trigger=BoolExpression)? ('then' effects+=Effect (';' effects+=Effect)*)?
		public Group getGroup() { return cGroup; }

		//{sccharts::EntryAction}
		public Action getEntryActionAction_0() { return cEntryActionAction_0; }

		//'entry'
		public Keyword getEntryKeyword_1() { return cEntryKeyword_1; }

		//('if' trigger=BoolExpression)?
		public Group getGroup_2() { return cGroup_2; }

		//'if'
		public Keyword getIfKeyword_2_0() { return cIfKeyword_2_0; }

		//trigger=BoolExpression
		public Assignment getTriggerAssignment_2_1() { return cTriggerAssignment_2_1; }

		//BoolExpression
		public RuleCall getTriggerBoolExpressionParserRuleCall_2_1_0() { return cTriggerBoolExpressionParserRuleCall_2_1_0; }

		//('then' effects+=Effect (';' effects+=Effect)*)?
		public Group getGroup_3() { return cGroup_3; }

		//'then'
		public Keyword getThenKeyword_3_0() { return cThenKeyword_3_0; }

		//effects+=Effect
		public Assignment getEffectsAssignment_3_1() { return cEffectsAssignment_3_1; }

		//Effect
		public RuleCall getEffectsEffectParserRuleCall_3_1_0() { return cEffectsEffectParserRuleCall_3_1_0; }

		//(';' effects+=Effect)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//';'
		public Keyword getSemicolonKeyword_3_2_0() { return cSemicolonKeyword_3_2_0; }

		//effects+=Effect
		public Assignment getEffectsAssignment_3_2_1() { return cEffectsAssignment_3_2_1; }

		//Effect
		public RuleCall getEffectsEffectParserRuleCall_3_2_1_0() { return cEffectsEffectParserRuleCall_3_2_1_0; }
	}

	public class DuringActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCT.DuringAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDuringActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cImmediateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cImmediateImmediateKeyword_1_0 = (Keyword)cImmediateAssignment_1.eContents().get(0);
		private final Keyword cDuringKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cIfKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTriggerAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTriggerBoolExpressionParserRuleCall_3_1_0 = (RuleCall)cTriggerAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cThenKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cEffectsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cEffectsEffectParserRuleCall_4_1_0 = (RuleCall)cEffectsAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cSemicolonKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cEffectsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cEffectsEffectParserRuleCall_4_2_1_0 = (RuleCall)cEffectsAssignment_4_2_1.eContents().get(0);
		
		//DuringAction sccharts::DuringAction:
		//	{sccharts::DuringAction} immediate?='immediate'? 'during' ('if' trigger=BoolExpression)? ('then' effects+=Effect (';'
		//	effects+=Effect)*)?
		@Override public ParserRule getRule() { return rule; }

		//{sccharts::DuringAction} immediate?='immediate'? 'during' ('if' trigger=BoolExpression)? ('then' effects+=Effect (';'
		//effects+=Effect)*)?
		public Group getGroup() { return cGroup; }

		//{sccharts::DuringAction}
		public Action getDuringActionAction_0() { return cDuringActionAction_0; }

		//immediate?='immediate'?
		public Assignment getImmediateAssignment_1() { return cImmediateAssignment_1; }

		//'immediate'
		public Keyword getImmediateImmediateKeyword_1_0() { return cImmediateImmediateKeyword_1_0; }

		//'during'
		public Keyword getDuringKeyword_2() { return cDuringKeyword_2; }

		//('if' trigger=BoolExpression)?
		public Group getGroup_3() { return cGroup_3; }

		//'if'
		public Keyword getIfKeyword_3_0() { return cIfKeyword_3_0; }

		//trigger=BoolExpression
		public Assignment getTriggerAssignment_3_1() { return cTriggerAssignment_3_1; }

		//BoolExpression
		public RuleCall getTriggerBoolExpressionParserRuleCall_3_1_0() { return cTriggerBoolExpressionParserRuleCall_3_1_0; }

		//('then' effects+=Effect (';' effects+=Effect)*)?
		public Group getGroup_4() { return cGroup_4; }

		//'then'
		public Keyword getThenKeyword_4_0() { return cThenKeyword_4_0; }

		//effects+=Effect
		public Assignment getEffectsAssignment_4_1() { return cEffectsAssignment_4_1; }

		//Effect
		public RuleCall getEffectsEffectParserRuleCall_4_1_0() { return cEffectsEffectParserRuleCall_4_1_0; }

		//(';' effects+=Effect)*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//';'
		public Keyword getSemicolonKeyword_4_2_0() { return cSemicolonKeyword_4_2_0; }

		//effects+=Effect
		public Assignment getEffectsAssignment_4_2_1() { return cEffectsAssignment_4_2_1; }

		//Effect
		public RuleCall getEffectsEffectParserRuleCall_4_2_1_0() { return cEffectsEffectParserRuleCall_4_2_1_0; }
	}

	public class ExitActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCT.ExitAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExitActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cExitKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cIfKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTriggerAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTriggerBoolExpressionParserRuleCall_2_1_0 = (RuleCall)cTriggerAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cThenKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cEffectsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cEffectsEffectParserRuleCall_3_1_0 = (RuleCall)cEffectsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cSemicolonKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cEffectsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cEffectsEffectParserRuleCall_3_2_1_0 = (RuleCall)cEffectsAssignment_3_2_1.eContents().get(0);
		
		//ExitAction sccharts::ExitAction:
		//	{sccharts::ExitAction}
		//	'exit' ('if' trigger=BoolExpression)? ('then' effects+=Effect (';' effects+=Effect)*)?
		@Override public ParserRule getRule() { return rule; }

		//{sccharts::ExitAction} 'exit' ('if' trigger=BoolExpression)? ('then' effects+=Effect (';' effects+=Effect)*)?
		public Group getGroup() { return cGroup; }

		//{sccharts::ExitAction}
		public Action getExitActionAction_0() { return cExitActionAction_0; }

		//'exit'
		public Keyword getExitKeyword_1() { return cExitKeyword_1; }

		//('if' trigger=BoolExpression)?
		public Group getGroup_2() { return cGroup_2; }

		//'if'
		public Keyword getIfKeyword_2_0() { return cIfKeyword_2_0; }

		//trigger=BoolExpression
		public Assignment getTriggerAssignment_2_1() { return cTriggerAssignment_2_1; }

		//BoolExpression
		public RuleCall getTriggerBoolExpressionParserRuleCall_2_1_0() { return cTriggerBoolExpressionParserRuleCall_2_1_0; }

		//('then' effects+=Effect (';' effects+=Effect)*)?
		public Group getGroup_3() { return cGroup_3; }

		//'then'
		public Keyword getThenKeyword_3_0() { return cThenKeyword_3_0; }

		//effects+=Effect
		public Assignment getEffectsAssignment_3_1() { return cEffectsAssignment_3_1; }

		//Effect
		public RuleCall getEffectsEffectParserRuleCall_3_1_0() { return cEffectsEffectParserRuleCall_3_1_0; }

		//(';' effects+=Effect)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//';'
		public Keyword getSemicolonKeyword_3_2_0() { return cSemicolonKeyword_3_2_0; }

		//effects+=Effect
		public Assignment getEffectsAssignment_3_2_1() { return cEffectsAssignment_3_2_1; }

		//Effect
		public RuleCall getEffectsEffectParserRuleCall_3_2_1_0() { return cEffectsEffectParserRuleCall_3_2_1_0; }
	}

	public class SuspendActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCT.SuspendAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSuspendActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cImmediateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cImmediateImmediateKeyword_1_0 = (Keyword)cImmediateAssignment_1.eContents().get(0);
		private final Assignment cWeakAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cWeakWeakKeyword_2_0 = (Keyword)cWeakAssignment_2.eContents().get(0);
		private final Keyword cSuspendKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cIfKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTriggerAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTriggerBoolExpressionParserRuleCall_4_1_0 = (RuleCall)cTriggerAssignment_4_1.eContents().get(0);
		
		//SuspendAction sccharts::SuspendAction:
		//	{sccharts::SuspendAction} immediate?='immediate'? weak?='weak'? 'suspend' ('if' trigger=BoolExpression)?
		@Override public ParserRule getRule() { return rule; }

		//{sccharts::SuspendAction} immediate?='immediate'? weak?='weak'? 'suspend' ('if' trigger=BoolExpression)?
		public Group getGroup() { return cGroup; }

		//{sccharts::SuspendAction}
		public Action getSuspendActionAction_0() { return cSuspendActionAction_0; }

		//immediate?='immediate'?
		public Assignment getImmediateAssignment_1() { return cImmediateAssignment_1; }

		//'immediate'
		public Keyword getImmediateImmediateKeyword_1_0() { return cImmediateImmediateKeyword_1_0; }

		//weak?='weak'?
		public Assignment getWeakAssignment_2() { return cWeakAssignment_2; }

		//'weak'
		public Keyword getWeakWeakKeyword_2_0() { return cWeakWeakKeyword_2_0; }

		//'suspend'
		public Keyword getSuspendKeyword_3() { return cSuspendKeyword_3; }

		//('if' trigger=BoolExpression)?
		public Group getGroup_4() { return cGroup_4; }

		//'if'
		public Keyword getIfKeyword_4_0() { return cIfKeyword_4_0; }

		//trigger=BoolExpression
		public Assignment getTriggerAssignment_4_1() { return cTriggerAssignment_4_1; }

		//BoolExpression
		public RuleCall getTriggerBoolExpressionParserRuleCall_4_1_0() { return cTriggerBoolExpressionParserRuleCall_4_1_0; }
	}

	public class IterateActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCT.IterateAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIterateActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cImmediateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cImmediateImmediateKeyword_1_0 = (Keyword)cImmediateAssignment_1.eContents().get(0);
		private final Keyword cIterateKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cIfKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTriggerAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTriggerBoolExpressionParserRuleCall_3_1_0 = (RuleCall)cTriggerAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cThenKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cEffectsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cEffectsEffectParserRuleCall_4_1_0 = (RuleCall)cEffectsAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cSemicolonKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cEffectsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cEffectsEffectParserRuleCall_4_2_1_0 = (RuleCall)cEffectsAssignment_4_2_1.eContents().get(0);
		
		//IterateAction sccharts::IterateAction:
		//	{sccharts::IterateAction} immediate?='immediate'? 'iterate' ('if' trigger=BoolExpression)? ('then' effects+=Effect
		//	(';' effects+=Effect)*)?
		@Override public ParserRule getRule() { return rule; }

		//{sccharts::IterateAction} immediate?='immediate'? 'iterate' ('if' trigger=BoolExpression)? ('then' effects+=Effect (';'
		//effects+=Effect)*)?
		public Group getGroup() { return cGroup; }

		//{sccharts::IterateAction}
		public Action getIterateActionAction_0() { return cIterateActionAction_0; }

		//immediate?='immediate'?
		public Assignment getImmediateAssignment_1() { return cImmediateAssignment_1; }

		//'immediate'
		public Keyword getImmediateImmediateKeyword_1_0() { return cImmediateImmediateKeyword_1_0; }

		//'iterate'
		public Keyword getIterateKeyword_2() { return cIterateKeyword_2; }

		//('if' trigger=BoolExpression)?
		public Group getGroup_3() { return cGroup_3; }

		//'if'
		public Keyword getIfKeyword_3_0() { return cIfKeyword_3_0; }

		//trigger=BoolExpression
		public Assignment getTriggerAssignment_3_1() { return cTriggerAssignment_3_1; }

		//BoolExpression
		public RuleCall getTriggerBoolExpressionParserRuleCall_3_1_0() { return cTriggerBoolExpressionParserRuleCall_3_1_0; }

		//('then' effects+=Effect (';' effects+=Effect)*)?
		public Group getGroup_4() { return cGroup_4; }

		//'then'
		public Keyword getThenKeyword_4_0() { return cThenKeyword_4_0; }

		//effects+=Effect
		public Assignment getEffectsAssignment_4_1() { return cEffectsAssignment_4_1; }

		//Effect
		public RuleCall getEffectsEffectParserRuleCall_4_1_0() { return cEffectsEffectParserRuleCall_4_1_0; }

		//(';' effects+=Effect)*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//';'
		public Keyword getSemicolonKeyword_4_2_0() { return cSemicolonKeyword_4_2_0; }

		//effects+=Effect
		public Assignment getEffectsAssignment_4_2_1() { return cEffectsAssignment_4_2_1; }

		//Effect
		public RuleCall getEffectsEffectParserRuleCall_4_2_1_0() { return cEffectsEffectParserRuleCall_4_2_1_0; }
	}

	public class InitActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCT.InitAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInitActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInitKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cIfKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTriggerAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTriggerBoolExpressionParserRuleCall_2_1_0 = (RuleCall)cTriggerAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cThenKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cEffectsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cEffectsEffectParserRuleCall_3_1_0 = (RuleCall)cEffectsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cSemicolonKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cEffectsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cEffectsEffectParserRuleCall_3_2_1_0 = (RuleCall)cEffectsAssignment_3_2_1.eContents().get(0);
		
		//InitAction sccharts::InitAction:
		//	{sccharts::InitAction}
		//	'init' ('if' trigger=BoolExpression)? ('then' effects+=Effect (';' effects+=Effect)*)?
		@Override public ParserRule getRule() { return rule; }

		//{sccharts::InitAction} 'init' ('if' trigger=BoolExpression)? ('then' effects+=Effect (';' effects+=Effect)*)?
		public Group getGroup() { return cGroup; }

		//{sccharts::InitAction}
		public Action getInitActionAction_0() { return cInitActionAction_0; }

		//'init'
		public Keyword getInitKeyword_1() { return cInitKeyword_1; }

		//('if' trigger=BoolExpression)?
		public Group getGroup_2() { return cGroup_2; }

		//'if'
		public Keyword getIfKeyword_2_0() { return cIfKeyword_2_0; }

		//trigger=BoolExpression
		public Assignment getTriggerAssignment_2_1() { return cTriggerAssignment_2_1; }

		//BoolExpression
		public RuleCall getTriggerBoolExpressionParserRuleCall_2_1_0() { return cTriggerBoolExpressionParserRuleCall_2_1_0; }

		//('then' effects+=Effect (';' effects+=Effect)*)?
		public Group getGroup_3() { return cGroup_3; }

		//'then'
		public Keyword getThenKeyword_3_0() { return cThenKeyword_3_0; }

		//effects+=Effect
		public Assignment getEffectsAssignment_3_1() { return cEffectsAssignment_3_1; }

		//Effect
		public RuleCall getEffectsEffectParserRuleCall_3_1_0() { return cEffectsEffectParserRuleCall_3_1_0; }

		//(';' effects+=Effect)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//';'
		public Keyword getSemicolonKeyword_3_2_0() { return cSemicolonKeyword_3_2_0; }

		//effects+=Effect
		public Assignment getEffectsAssignment_3_2_1() { return cEffectsAssignment_3_2_1; }

		//Effect
		public RuleCall getEffectsEffectParserRuleCall_3_2_1_0() { return cEffectsEffectParserRuleCall_3_2_1_0; }
	}

	public class FinalActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCT.FinalAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFinalActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFinalKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cIfKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTriggerAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTriggerBoolExpressionParserRuleCall_2_1_0 = (RuleCall)cTriggerAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cThenKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cEffectsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cEffectsEffectParserRuleCall_3_1_0 = (RuleCall)cEffectsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cSemicolonKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cEffectsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cEffectsEffectParserRuleCall_3_2_1_0 = (RuleCall)cEffectsAssignment_3_2_1.eContents().get(0);
		
		//FinalAction sccharts::FinalAction:
		//	{sccharts::FinalAction}
		//	'final' ('if' trigger=BoolExpression)? ('then' effects+=Effect (';' effects+=Effect)*)?
		@Override public ParserRule getRule() { return rule; }

		//{sccharts::FinalAction} 'final' ('if' trigger=BoolExpression)? ('then' effects+=Effect (';' effects+=Effect)*)?
		public Group getGroup() { return cGroup; }

		//{sccharts::FinalAction}
		public Action getFinalActionAction_0() { return cFinalActionAction_0; }

		//'final'
		public Keyword getFinalKeyword_1() { return cFinalKeyword_1; }

		//('if' trigger=BoolExpression)?
		public Group getGroup_2() { return cGroup_2; }

		//'if'
		public Keyword getIfKeyword_2_0() { return cIfKeyword_2_0; }

		//trigger=BoolExpression
		public Assignment getTriggerAssignment_2_1() { return cTriggerAssignment_2_1; }

		//BoolExpression
		public RuleCall getTriggerBoolExpressionParserRuleCall_2_1_0() { return cTriggerBoolExpressionParserRuleCall_2_1_0; }

		//('then' effects+=Effect (';' effects+=Effect)*)?
		public Group getGroup_3() { return cGroup_3; }

		//'then'
		public Keyword getThenKeyword_3_0() { return cThenKeyword_3_0; }

		//effects+=Effect
		public Assignment getEffectsAssignment_3_1() { return cEffectsAssignment_3_1; }

		//Effect
		public RuleCall getEffectsEffectParserRuleCall_3_1_0() { return cEffectsEffectParserRuleCall_3_1_0; }

		//(';' effects+=Effect)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//';'
		public Keyword getSemicolonKeyword_3_2_0() { return cSemicolonKeyword_3_2_0; }

		//effects+=Effect
		public Assignment getEffectsAssignment_3_2_1() { return cEffectsAssignment_3_2_1; }

		//Effect
		public RuleCall getEffectsEffectParserRuleCall_3_2_1_0() { return cEffectsEffectParserRuleCall_3_2_1_0; }
	}

	public class RegionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCT.Region");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cControlflowRegionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDataflowRegionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// -------------- //
		////  Region Rules  // 
		//// -------------- //
		//Region sccharts::Region:
		//	ControlflowRegion | DataflowRegion
		@Override public ParserRule getRule() { return rule; }

		//ControlflowRegion | DataflowRegion
		public Alternatives getAlternatives() { return cAlternatives; }

		//ControlflowRegion
		public RuleCall getControlflowRegionParserRuleCall_0() { return cControlflowRegionParserRuleCall_0; }

		//DataflowRegion
		public RuleCall getDataflowRegionParserRuleCall_1() { return cDataflowRegionParserRuleCall_1; }
	}

	public class SingleControlflowRegionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCT.SingleControlflowRegion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cControlflowRegionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cStatesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatesStateParserRuleCall_1_0 = (RuleCall)cStatesAssignment_1.eContents().get(0);
		
		//SingleControlflowRegion sccharts::ControlflowRegion:
		//	{sccharts::ControlflowRegion} states+=State+
		@Override public ParserRule getRule() { return rule; }

		//{sccharts::ControlflowRegion} states+=State+
		public Group getGroup() { return cGroup; }

		//{sccharts::ControlflowRegion}
		public Action getControlflowRegionAction_0() { return cControlflowRegionAction_0; }

		//states+=State+
		public Assignment getStatesAssignment_1() { return cStatesAssignment_1; }

		//State
		public RuleCall getStatesStateParserRuleCall_1_0() { return cStatesStateParserRuleCall_1_0; }
	}

	public class SingleDataflowRegionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCT.SingleDataflowRegion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDataflowRegionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cEquationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEquationsEquationParserRuleCall_1_0 = (RuleCall)cEquationsAssignment_1.eContents().get(0);
		
		//SingleDataflowRegion sccharts::DataflowRegion:
		//	{sccharts::DataflowRegion} equations+=Equation+
		@Override public ParserRule getRule() { return rule; }

		//{sccharts::DataflowRegion} equations+=Equation+
		public Group getGroup() { return cGroup; }

		//{sccharts::DataflowRegion}
		public Action getDataflowRegionAction_0() { return cDataflowRegionAction_0; }

		//equations+=Equation+
		public Assignment getEquationsAssignment_1() { return cEquationsAssignment_1; }

		//Equation
		public RuleCall getEquationsEquationParserRuleCall_1_0() { return cEquationsEquationParserRuleCall_1_0; }
	}

	public class ControlflowRegionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCT.ControlflowRegion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cControlflowRegionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Keyword cRegionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIdAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIdIDTerminalRuleCall_3_0 = (RuleCall)cIdAssignment_3.eContents().get(0);
		private final Assignment cLabelAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLabelSTRINGTerminalRuleCall_4_0 = (RuleCall)cLabelAssignment_4.eContents().get(0);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDeclarationsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDeclarationsDeclarationWOSemicolonParserRuleCall_6_0 = (RuleCall)cDeclarationsAssignment_6.eContents().get(0);
		private final Assignment cStatesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cStatesStateParserRuleCall_7_0 = (RuleCall)cStatesAssignment_7.eContents().get(0);
		
		//ControlflowRegion sccharts::ControlflowRegion:
		//	{sccharts::ControlflowRegion} annotations+=Annotation*
		//	'region' id=ID? label=STRING? ':'
		//	declarations+=DeclarationWOSemicolon*
		//	states+=State+
		@Override public ParserRule getRule() { return rule; }

		//{sccharts::ControlflowRegion} annotations+=Annotation* 'region' id=ID? label=STRING? ':'
		//declarations+=DeclarationWOSemicolon* states+=State+
		public Group getGroup() { return cGroup; }

		//{sccharts::ControlflowRegion}
		public Action getControlflowRegionAction_0() { return cControlflowRegionAction_0; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() { return cAnnotationsAnnotationParserRuleCall_1_0; }

		//'region'
		public Keyword getRegionKeyword_2() { return cRegionKeyword_2; }

		//id=ID?
		public Assignment getIdAssignment_3() { return cIdAssignment_3; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_3_0() { return cIdIDTerminalRuleCall_3_0; }

		//label=STRING?
		public Assignment getLabelAssignment_4() { return cLabelAssignment_4; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_4_0() { return cLabelSTRINGTerminalRuleCall_4_0; }

		//':'
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }

		//declarations+=DeclarationWOSemicolon*
		public Assignment getDeclarationsAssignment_6() { return cDeclarationsAssignment_6; }

		//DeclarationWOSemicolon
		public RuleCall getDeclarationsDeclarationWOSemicolonParserRuleCall_6_0() { return cDeclarationsDeclarationWOSemicolonParserRuleCall_6_0; }

		//states+=State+
		public Assignment getStatesAssignment_7() { return cStatesAssignment_7; }

		//State
		public RuleCall getStatesStateParserRuleCall_7_0() { return cStatesStateParserRuleCall_7_0; }
	}

	public class DataflowRegionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCT.DataflowRegion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDataflowRegionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Keyword cDataflowKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIdAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIdIDTerminalRuleCall_3_0 = (RuleCall)cIdAssignment_3.eContents().get(0);
		private final Assignment cLabelAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLabelSTRINGTerminalRuleCall_4_0 = (RuleCall)cLabelAssignment_4.eContents().get(0);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDeclarationsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDeclarationsDeclarationWOSemicolonParserRuleCall_6_0 = (RuleCall)cDeclarationsAssignment_6.eContents().get(0);
		private final Assignment cEquationsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cEquationsEquationParserRuleCall_7_0 = (RuleCall)cEquationsAssignment_7.eContents().get(0);
		
		//DataflowRegion sccharts::DataflowRegion:
		//	{sccharts::DataflowRegion} annotations+=Annotation*
		//	'dataflow' id=ID? label=STRING? ':'
		//	declarations+=DeclarationWOSemicolon*
		//	equations+=Equation+
		@Override public ParserRule getRule() { return rule; }

		//{sccharts::DataflowRegion} annotations+=Annotation* 'dataflow' id=ID? label=STRING? ':'
		//declarations+=DeclarationWOSemicolon* equations+=Equation+
		public Group getGroup() { return cGroup; }

		//{sccharts::DataflowRegion}
		public Action getDataflowRegionAction_0() { return cDataflowRegionAction_0; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() { return cAnnotationsAnnotationParserRuleCall_1_0; }

		//'dataflow'
		public Keyword getDataflowKeyword_2() { return cDataflowKeyword_2; }

		//id=ID?
		public Assignment getIdAssignment_3() { return cIdAssignment_3; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_3_0() { return cIdIDTerminalRuleCall_3_0; }

		//label=STRING?
		public Assignment getLabelAssignment_4() { return cLabelAssignment_4; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_4_0() { return cLabelSTRINGTerminalRuleCall_4_0; }

		//':'
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }

		//declarations+=DeclarationWOSemicolon*
		public Assignment getDeclarationsAssignment_6() { return cDeclarationsAssignment_6; }

		//DeclarationWOSemicolon
		public RuleCall getDeclarationsDeclarationWOSemicolonParserRuleCall_6_0() { return cDeclarationsDeclarationWOSemicolonParserRuleCall_6_0; }

		//equations+=Equation+
		public Assignment getEquationsAssignment_7() { return cEquationsAssignment_7; }

		//Equation
		public RuleCall getEquationsEquationParserRuleCall_7_0() { return cEquationsEquationParserRuleCall_7_0; }
	}

	public class DFAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCT.DFAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cValuedObjectAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cValuedObjectValuedObjectCrossReference_1_0 = (CrossReference)cValuedObjectAssignment_1.eContents().get(0);
		private final RuleCall cValuedObjectValuedObjectIDTerminalRuleCall_1_0_1 = (RuleCall)cValuedObjectValuedObjectCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cIndicesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIndicesExpressionParserRuleCall_2_1_0 = (RuleCall)cIndicesAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cOperatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperatorAssignOperatorEnumRuleCall_3_0 = (RuleCall)cOperatorAssignment_3.eContents().get(0);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionExpressionParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		
		//// ---------------- //
		////  Equation Rules  // 
		//// ---------------- //
		//DFAssignment keffects::Assignment:
		//	annotations+=Annotation*
		//	valuedObject=[kexpressions::ValuedObject] ('[' indices+=Expression ']')*
		//	operator=AssignOperator expression=Expression
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* valuedObject=[kexpressions::ValuedObject] ('[' indices+=Expression ']')*
		//operator=AssignOperator expression=Expression
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//valuedObject=[kexpressions::ValuedObject]
		public Assignment getValuedObjectAssignment_1() { return cValuedObjectAssignment_1; }

		//[kexpressions::ValuedObject]
		public CrossReference getValuedObjectValuedObjectCrossReference_1_0() { return cValuedObjectValuedObjectCrossReference_1_0; }

		//ID
		public RuleCall getValuedObjectValuedObjectIDTerminalRuleCall_1_0_1() { return cValuedObjectValuedObjectIDTerminalRuleCall_1_0_1; }

		//('[' indices+=Expression ']')*
		public Group getGroup_2() { return cGroup_2; }

		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }

		//indices+=Expression
		public Assignment getIndicesAssignment_2_1() { return cIndicesAssignment_2_1; }

		//Expression
		public RuleCall getIndicesExpressionParserRuleCall_2_1_0() { return cIndicesExpressionParserRuleCall_2_1_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }

		//operator=AssignOperator
		public Assignment getOperatorAssignment_3() { return cOperatorAssignment_3; }

		//AssignOperator
		public RuleCall getOperatorAssignOperatorEnumRuleCall_3_0() { return cOperatorAssignOperatorEnumRuleCall_3_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_4_0() { return cExpressionExpressionParserRuleCall_4_0; }
	}

	public class EquationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCT.Equation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEquationAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cValuedObjectAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final CrossReference cValuedObjectValuedObjectCrossReference_1_0_0 = (CrossReference)cValuedObjectAssignment_1_0.eContents().get(0);
		private final RuleCall cValuedObjectValuedObjectIDTerminalRuleCall_1_0_0_1 = (RuleCall)cValuedObjectValuedObjectCrossReference_1_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//Equation sccharts::Equation:
		//	{sccharts::Equation} (valuedObject=[kexpressions::ValuedObject] '=' expression=Expression ';')
		@Override public ParserRule getRule() { return rule; }

		//{sccharts::Equation} (valuedObject=[kexpressions::ValuedObject] '=' expression=Expression ';')
		public Group getGroup() { return cGroup; }

		//{sccharts::Equation}
		public Action getEquationAction_0() { return cEquationAction_0; }

		//(valuedObject=[kexpressions::ValuedObject] '=' expression=Expression ';')
		public Group getGroup_1() { return cGroup_1; }

		//valuedObject=[kexpressions::ValuedObject]
		public Assignment getValuedObjectAssignment_1_0() { return cValuedObjectAssignment_1_0; }

		//[kexpressions::ValuedObject]
		public CrossReference getValuedObjectValuedObjectCrossReference_1_0_0() { return cValuedObjectValuedObjectCrossReference_1_0_0; }

		//ID
		public RuleCall getValuedObjectValuedObjectIDTerminalRuleCall_1_0_0_1() { return cValuedObjectValuedObjectIDTerminalRuleCall_1_0_0_1; }

		//'='
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_2_0() { return cExpressionExpressionParserRuleCall_1_2_0; }

		//';'
		public Keyword getSemicolonKeyword_1_3() { return cSemicolonKeyword_1_3; }
	}

	public class BindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCT.Binding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cFormalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFormalValuedObjectCrossReference_1_0 = (CrossReference)cFormalAssignment_1.eContents().get(0);
		private final RuleCall cFormalValuedObjectIDTerminalRuleCall_1_0_1 = (RuleCall)cFormalValuedObjectCrossReference_1_0.eContents().get(1);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cActualAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cActualValuedObjectCrossReference_3_0 = (CrossReference)cActualAssignment_3.eContents().get(0);
		private final RuleCall cActualValuedObjectIDTerminalRuleCall_3_0_1 = (RuleCall)cActualValuedObjectCrossReference_3_0.eContents().get(1);
		
		////ScopeReference returns sccharts::ScopeReference:
		////    scope=[sccharts::Scope|ID];
		////
		////ScopeCall returns sccharts::ScopeCall:
		////    '[' scope=[sccharts::Scope|ID]
		////    	(('(' parameters += Parameter (',' parameters += Parameter)* ')') | '()')? 
		////    ']'
		////    ('.' valuedObject = [kexpressions::ValuedObject])
		////;
		//Binding sccharts::Binding:
		//	annotations+=Annotation*
		//	formal=[kexpressions::ValuedObject]
		//	'to'
		//	actual=[kexpressions::ValuedObject]
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* formal=[kexpressions::ValuedObject] 'to' actual=[kexpressions::ValuedObject]
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//formal=[kexpressions::ValuedObject]
		public Assignment getFormalAssignment_1() { return cFormalAssignment_1; }

		//[kexpressions::ValuedObject]
		public CrossReference getFormalValuedObjectCrossReference_1_0() { return cFormalValuedObjectCrossReference_1_0; }

		//ID
		public RuleCall getFormalValuedObjectIDTerminalRuleCall_1_0_1() { return cFormalValuedObjectIDTerminalRuleCall_1_0_1; }

		//'to'
		public Keyword getToKeyword_2() { return cToKeyword_2; }

		//actual=[kexpressions::ValuedObject]
		public Assignment getActualAssignment_3() { return cActualAssignment_3; }

		//[kexpressions::ValuedObject]
		public CrossReference getActualValuedObjectCrossReference_3_0() { return cActualValuedObjectCrossReference_3_0; }

		//ID
		public RuleCall getActualValuedObjectIDTerminalRuleCall_3_0_1() { return cActualValuedObjectIDTerminalRuleCall_3_0_1; }
	}

	public class AtomicExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCT.AtomicExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBoolValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cValuedObjectTestExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cBoolExpressionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final RuleCall cReferenceCallParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTextExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//AtomicExpression kexpressions::Expression:
		//	BoolValue
		//	| ValuedObjectTestExpression
		//	| '(' BoolExpression ')'
		//	| ReferenceCall
		//	//    | ScopeCall
		//	| TextExpression
		@Override public ParserRule getRule() { return rule; }

		//BoolValue | ValuedObjectTestExpression | '(' BoolExpression ')' | ReferenceCall //    | ScopeCall
		//| TextExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//BoolValue
		public RuleCall getBoolValueParserRuleCall_0() { return cBoolValueParserRuleCall_0; }

		//ValuedObjectTestExpression
		public RuleCall getValuedObjectTestExpressionParserRuleCall_1() { return cValuedObjectTestExpressionParserRuleCall_1; }

		//'(' BoolExpression ')'
		public Group getGroup_2() { return cGroup_2; }

		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//BoolExpression
		public RuleCall getBoolExpressionParserRuleCall_2_1() { return cBoolExpressionParserRuleCall_2_1; }

		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }

		//ReferenceCall
		public RuleCall getReferenceCallParserRuleCall_3() { return cReferenceCallParserRuleCall_3; }

		//TextExpression
		public RuleCall getTextExpressionParserRuleCall_4() { return cTextExpressionParserRuleCall_4; }
	}
	
	
	public class TransitionTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCT.TransitionType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cWEAKABORTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cWEAKABORTHyphenMinusHyphenMinusKeyword_0_0 = (Keyword)cWEAKABORTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSTRONGABORTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSTRONGABORTAbortKeyword_1_0 = (Keyword)cSTRONGABORTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cTERMINATIONEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cTERMINATIONJoinKeyword_2_0 = (Keyword)cTERMINATIONEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum TransitionType returns sccharts::TransitionType:
		//	WEAKABORT='--' | STRONGABORT='-- abort' | TERMINATION='-- join';
		public EnumRule getRule() { return rule; }

		//WEAKABORT='--' | STRONGABORT='-- abort' | TERMINATION='-- join'
		public Alternatives getAlternatives() { return cAlternatives; }

		//WEAKABORT='--'
		public EnumLiteralDeclaration getWEAKABORTEnumLiteralDeclaration_0() { return cWEAKABORTEnumLiteralDeclaration_0; }

		//'--'
		public Keyword getWEAKABORTHyphenMinusHyphenMinusKeyword_0_0() { return cWEAKABORTHyphenMinusHyphenMinusKeyword_0_0; }

		//STRONGABORT='-- abort'
		public EnumLiteralDeclaration getSTRONGABORTEnumLiteralDeclaration_1() { return cSTRONGABORTEnumLiteralDeclaration_1; }

		//'-- abort'
		public Keyword getSTRONGABORTAbortKeyword_1_0() { return cSTRONGABORTAbortKeyword_1_0; }

		//TERMINATION='-- join'
		public EnumLiteralDeclaration getTERMINATIONEnumLiteralDeclaration_2() { return cTERMINATIONEnumLiteralDeclaration_2; }

		//'-- join'
		public Keyword getTERMINATIONJoinKeyword_2_0() { return cTERMINATIONJoinKeyword_2_0; }
	}

	public class HistoryTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.cau.cs.kieler.sccharts.text.SCT.HistoryType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cRESETEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cRESETResetKeyword_0_0 = (Keyword)cRESETEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSHALLOWEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSHALLOWShallowHistoryKeyword_1_0 = (Keyword)cSHALLOWEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDEEPEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDEEPHistoryKeyword_2_0 = (Keyword)cDEEPEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum HistoryType returns sccharts::HistoryType:
		//	RESET='reset' | SHALLOW='shallow history' | DEEP='history';
		public EnumRule getRule() { return rule; }

		//RESET='reset' | SHALLOW='shallow history' | DEEP='history'
		public Alternatives getAlternatives() { return cAlternatives; }

		//RESET='reset'
		public EnumLiteralDeclaration getRESETEnumLiteralDeclaration_0() { return cRESETEnumLiteralDeclaration_0; }

		//'reset'
		public Keyword getRESETResetKeyword_0_0() { return cRESETResetKeyword_0_0; }

		//SHALLOW='shallow history'
		public EnumLiteralDeclaration getSHALLOWEnumLiteralDeclaration_1() { return cSHALLOWEnumLiteralDeclaration_1; }

		//'shallow history'
		public Keyword getSHALLOWShallowHistoryKeyword_1_0() { return cSHALLOWShallowHistoryKeyword_1_0; }

		//DEEP='history'
		public EnumLiteralDeclaration getDEEPEnumLiteralDeclaration_2() { return cDEEPEnumLiteralDeclaration_2; }

		//'history'
		public Keyword getDEEPHistoryKeyword_2_0() { return cDEEPHistoryKeyword_2_0; }
	}
	
	private final SCChartsElements pSCCharts;
	private final RootStateElements pRootState;
	private final StateElements pState;
	private final TransitionElements pTransition;
	private final LocalActionElements pLocalAction;
	private final EntryActionElements pEntryAction;
	private final DuringActionElements pDuringAction;
	private final ExitActionElements pExitAction;
	private final SuspendActionElements pSuspendAction;
	private final IterateActionElements pIterateAction;
	private final InitActionElements pInitAction;
	private final FinalActionElements pFinalAction;
	private final RegionElements pRegion;
	private final SingleControlflowRegionElements pSingleControlflowRegion;
	private final SingleDataflowRegionElements pSingleDataflowRegion;
	private final ControlflowRegionElements pControlflowRegion;
	private final DataflowRegionElements pDataflowRegion;
	private final DFAssignmentElements pDFAssignment;
	private final EquationElements pEquation;
	private final BindingElements pBinding;
	private final AtomicExpressionElements pAtomicExpression;
	private final TransitionTypeElements eTransitionType;
	private final HistoryTypeElements eHistoryType;
	
	private final Grammar grammar;

	private final KEXTGrammarAccess gaKEXT;

	private final KEffectsGrammarAccess gaKEffects;

	private final KExpressionsGrammarAccess gaKExpressions;

	private final AnnotationsGrammarAccess gaAnnotations;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SCTGrammarAccess(GrammarProvider grammarProvider,
		KEXTGrammarAccess gaKEXT,
		KEffectsGrammarAccess gaKEffects,
		KExpressionsGrammarAccess gaKExpressions,
		AnnotationsGrammarAccess gaAnnotations,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaKEXT = gaKEXT;
		this.gaKEffects = gaKEffects;
		this.gaKExpressions = gaKExpressions;
		this.gaAnnotations = gaAnnotations;
		this.gaTerminals = gaTerminals;
		this.pSCCharts = new SCChartsElements();
		this.pRootState = new RootStateElements();
		this.pState = new StateElements();
		this.pTransition = new TransitionElements();
		this.pLocalAction = new LocalActionElements();
		this.pEntryAction = new EntryActionElements();
		this.pDuringAction = new DuringActionElements();
		this.pExitAction = new ExitActionElements();
		this.pSuspendAction = new SuspendActionElements();
		this.pIterateAction = new IterateActionElements();
		this.pInitAction = new InitActionElements();
		this.pFinalAction = new FinalActionElements();
		this.pRegion = new RegionElements();
		this.pSingleControlflowRegion = new SingleControlflowRegionElements();
		this.pSingleDataflowRegion = new SingleDataflowRegionElements();
		this.pControlflowRegion = new ControlflowRegionElements();
		this.pDataflowRegion = new DataflowRegionElements();
		this.pDFAssignment = new DFAssignmentElements();
		this.pEquation = new EquationElements();
		this.pBinding = new BindingElements();
		this.pAtomicExpression = new AtomicExpressionElements();
		this.eTransitionType = new TransitionTypeElements();
		this.eHistoryType = new HistoryTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.cau.cs.kieler.sccharts.text.SCT".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public KEXTGrammarAccess getKEXTGrammarAccess() {
		return gaKEXT;
	}

	public KEffectsGrammarAccess getKEffectsGrammarAccess() {
		return gaKEffects;
	}

	public KExpressionsGrammarAccess getKExpressionsGrammarAccess() {
		return gaKExpressions;
	}

	public AnnotationsGrammarAccess getAnnotationsGrammarAccess() {
		return gaAnnotations;
	}

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////generate sct3 "http://kieler.cs.cau.de/sccharts/textual3/0.1.0"
	//// ---------------- //
	////  SCCharts Rules  // 
	//// ---------------- //
	//SCCharts sccharts::SCCharts:
	//	rootStates+=RootState*
	public SCChartsElements getSCChartsAccess() {
		return pSCCharts;
	}
	
	public ParserRule getSCChartsRule() {
		return getSCChartsAccess().getRule();
	}

	//// ------------- //
	////  State Rules  // 
	//// ------------- //
	//RootState sccharts::State:
	//	annotations+=Annotation*
	//	'scchart' id=ID label=STRING?
	//	'{'
	//	declarations+=DeclarationWOSemicolon*
	//	localActions+=LocalAction* (regions+=SingleControlflowRegion | regions+=SingleDataflowRegion | regions+=Region*)
	//	'}'
	public RootStateElements getRootStateAccess() {
		return pRootState;
	}
	
	public ParserRule getRootStateRule() {
		return getRootStateAccess().getRule();
	}

	//State sccharts::State:
	//	annotations+=Annotation*
	//	initial?='initial'?
	//	final?='final'?
	//	connector?='connector'?
	//	'state' id=ID label=STRING? ('{'
	//	declarations+=DeclarationWOSemicolon*
	//	localActions+=LocalAction* (regions+=SingleControlflowRegion | regions+=SingleDataflowRegion | regions+=Region*)
	//	'}')?
	//	outgoingTransitions+=Transition*
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}

	//// ------------------ //
	////  Transition Rules  // 
	//// ------------------ //
	//Transition sccharts::Transition:
	//	annotations+=RestrictedTypeAnnotation*
	//	type=TransitionType
	//	targetState=[sccharts::State] immediate?='immediate'?
	//	deferred?='deferred'?
	//	history=HistoryType? (('if' delay=INT? trigger=BoolExpression)? ('then' effects+=Effect (';' effects+=Effect)*)?
	//	| 'if' label=STRING)?
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}

	//// -------------- //
	////  Action Rules  // 
	//// -------------- //
	//LocalAction sccharts::LocalAction:
	//	EntryAction | DuringAction | ExitAction | SuspendAction | IterateAction | InitAction | FinalAction
	public LocalActionElements getLocalActionAccess() {
		return pLocalAction;
	}
	
	public ParserRule getLocalActionRule() {
		return getLocalActionAccess().getRule();
	}

	//EntryAction sccharts::EntryAction:
	//	{sccharts::EntryAction}
	//	'entry' ('if' trigger=BoolExpression)? ('then' effects+=Effect (';' effects+=Effect)*)?
	public EntryActionElements getEntryActionAccess() {
		return pEntryAction;
	}
	
	public ParserRule getEntryActionRule() {
		return getEntryActionAccess().getRule();
	}

	//DuringAction sccharts::DuringAction:
	//	{sccharts::DuringAction} immediate?='immediate'? 'during' ('if' trigger=BoolExpression)? ('then' effects+=Effect (';'
	//	effects+=Effect)*)?
	public DuringActionElements getDuringActionAccess() {
		return pDuringAction;
	}
	
	public ParserRule getDuringActionRule() {
		return getDuringActionAccess().getRule();
	}

	//ExitAction sccharts::ExitAction:
	//	{sccharts::ExitAction}
	//	'exit' ('if' trigger=BoolExpression)? ('then' effects+=Effect (';' effects+=Effect)*)?
	public ExitActionElements getExitActionAccess() {
		return pExitAction;
	}
	
	public ParserRule getExitActionRule() {
		return getExitActionAccess().getRule();
	}

	//SuspendAction sccharts::SuspendAction:
	//	{sccharts::SuspendAction} immediate?='immediate'? weak?='weak'? 'suspend' ('if' trigger=BoolExpression)?
	public SuspendActionElements getSuspendActionAccess() {
		return pSuspendAction;
	}
	
	public ParserRule getSuspendActionRule() {
		return getSuspendActionAccess().getRule();
	}

	//IterateAction sccharts::IterateAction:
	//	{sccharts::IterateAction} immediate?='immediate'? 'iterate' ('if' trigger=BoolExpression)? ('then' effects+=Effect
	//	(';' effects+=Effect)*)?
	public IterateActionElements getIterateActionAccess() {
		return pIterateAction;
	}
	
	public ParserRule getIterateActionRule() {
		return getIterateActionAccess().getRule();
	}

	//InitAction sccharts::InitAction:
	//	{sccharts::InitAction}
	//	'init' ('if' trigger=BoolExpression)? ('then' effects+=Effect (';' effects+=Effect)*)?
	public InitActionElements getInitActionAccess() {
		return pInitAction;
	}
	
	public ParserRule getInitActionRule() {
		return getInitActionAccess().getRule();
	}

	//FinalAction sccharts::FinalAction:
	//	{sccharts::FinalAction}
	//	'final' ('if' trigger=BoolExpression)? ('then' effects+=Effect (';' effects+=Effect)*)?
	public FinalActionElements getFinalActionAccess() {
		return pFinalAction;
	}
	
	public ParserRule getFinalActionRule() {
		return getFinalActionAccess().getRule();
	}

	//// -------------- //
	////  Region Rules  // 
	//// -------------- //
	//Region sccharts::Region:
	//	ControlflowRegion | DataflowRegion
	public RegionElements getRegionAccess() {
		return pRegion;
	}
	
	public ParserRule getRegionRule() {
		return getRegionAccess().getRule();
	}

	//SingleControlflowRegion sccharts::ControlflowRegion:
	//	{sccharts::ControlflowRegion} states+=State+
	public SingleControlflowRegionElements getSingleControlflowRegionAccess() {
		return pSingleControlflowRegion;
	}
	
	public ParserRule getSingleControlflowRegionRule() {
		return getSingleControlflowRegionAccess().getRule();
	}

	//SingleDataflowRegion sccharts::DataflowRegion:
	//	{sccharts::DataflowRegion} equations+=Equation+
	public SingleDataflowRegionElements getSingleDataflowRegionAccess() {
		return pSingleDataflowRegion;
	}
	
	public ParserRule getSingleDataflowRegionRule() {
		return getSingleDataflowRegionAccess().getRule();
	}

	//ControlflowRegion sccharts::ControlflowRegion:
	//	{sccharts::ControlflowRegion} annotations+=Annotation*
	//	'region' id=ID? label=STRING? ':'
	//	declarations+=DeclarationWOSemicolon*
	//	states+=State+
	public ControlflowRegionElements getControlflowRegionAccess() {
		return pControlflowRegion;
	}
	
	public ParserRule getControlflowRegionRule() {
		return getControlflowRegionAccess().getRule();
	}

	//DataflowRegion sccharts::DataflowRegion:
	//	{sccharts::DataflowRegion} annotations+=Annotation*
	//	'dataflow' id=ID? label=STRING? ':'
	//	declarations+=DeclarationWOSemicolon*
	//	equations+=Equation+
	public DataflowRegionElements getDataflowRegionAccess() {
		return pDataflowRegion;
	}
	
	public ParserRule getDataflowRegionRule() {
		return getDataflowRegionAccess().getRule();
	}

	//// ---------------- //
	////  Equation Rules  // 
	//// ---------------- //
	//DFAssignment keffects::Assignment:
	//	annotations+=Annotation*
	//	valuedObject=[kexpressions::ValuedObject] ('[' indices+=Expression ']')*
	//	operator=AssignOperator expression=Expression
	public DFAssignmentElements getDFAssignmentAccess() {
		return pDFAssignment;
	}
	
	public ParserRule getDFAssignmentRule() {
		return getDFAssignmentAccess().getRule();
	}

	//Equation sccharts::Equation:
	//	{sccharts::Equation} (valuedObject=[kexpressions::ValuedObject] '=' expression=Expression ';')
	public EquationElements getEquationAccess() {
		return pEquation;
	}
	
	public ParserRule getEquationRule() {
		return getEquationAccess().getRule();
	}

	////ScopeReference returns sccharts::ScopeReference:
	////    scope=[sccharts::Scope|ID];
	////
	////ScopeCall returns sccharts::ScopeCall:
	////    '[' scope=[sccharts::Scope|ID]
	////    	(('(' parameters += Parameter (',' parameters += Parameter)* ')') | '()')? 
	////    ']'
	////    ('.' valuedObject = [kexpressions::ValuedObject])
	////;
	//Binding sccharts::Binding:
	//	annotations+=Annotation*
	//	formal=[kexpressions::ValuedObject]
	//	'to'
	//	actual=[kexpressions::ValuedObject]
	public BindingElements getBindingAccess() {
		return pBinding;
	}
	
	public ParserRule getBindingRule() {
		return getBindingAccess().getRule();
	}

	//AtomicExpression kexpressions::Expression:
	//	BoolValue
	//	| ValuedObjectTestExpression
	//	| '(' BoolExpression ')'
	//	| ReferenceCall
	//	//    | ScopeCall
	//	| TextExpression
	public AtomicExpressionElements getAtomicExpressionAccess() {
		return pAtomicExpression;
	}
	
	public ParserRule getAtomicExpressionRule() {
		return getAtomicExpressionAccess().getRule();
	}

	//enum TransitionType returns sccharts::TransitionType:
	//	WEAKABORT='--' | STRONGABORT='-- abort' | TERMINATION='-- join';
	public TransitionTypeElements getTransitionTypeAccess() {
		return eTransitionType;
	}
	
	public EnumRule getTransitionTypeRule() {
		return getTransitionTypeAccess().getRule();
	}

	//enum HistoryType returns sccharts::HistoryType:
	//	RESET='reset' | SHALLOW='shallow history' | DEEP='history';
	public HistoryTypeElements getHistoryTypeAccess() {
		return eHistoryType;
	}
	
	public EnumRule getHistoryTypeRule() {
		return getHistoryTypeAccess().getRule();
	}

	/// **
	// * @author ssm
	// * @kieler.design 2015-08-23 proposed 
	// * @kieler.rating 2015-08-23 proposed yellow
	// * / / *
	// * KEXT (KText) provides a general stub for subsequent grammars that will use kexpressions, keffects
	// * and need some kind of declaration mechanism. It is also used to generate the textual KEXT language 
	// * that is used for testing kexpressions and keffects.  
	// * / // ------------ //
	////  KEXT Rules  // 
	//// ------------ //
	//// KEXT Rule
	//// The KEXT lagnuages starts with an optional declaration part. Then, an arbitrary number of 
	//// test entities may follow.
	//Kext kext::Kext:
	//	scopes+=RootScope
	public KEXTGrammarAccess.KextElements getKextAccess() {
		return gaKEXT.getKextAccess();
	}
	
	public ParserRule getKextRule() {
		return getKextAccess().getRule();
	}

	//RootScope kext::KEXTScope:
	//	{kext::KEXTScope} declarations+=Declaration*
	//	entities+=TestEntity* ('scope' scopes+=Scope)*
	public KEXTGrammarAccess.RootScopeElements getRootScopeAccess() {
		return gaKEXT.getRootScopeAccess();
	}
	
	public ParserRule getRootScopeRule() {
		return getRootScopeAccess().getRule();
	}

	//Scope kext::KEXTScope:
	//	{kext::KEXTScope} id=ID? '{'
	//	declarations+=Declaration*
	//	entities+=TestEntity* ('scope' scopes+=Scope)* '}'
	public KEXTGrammarAccess.ScopeElements getScopeAccess() {
		return gaKEXT.getScopeAccess();
	}
	
	public ParserRule getScopeRule() {
		return getScopeAccess().getRule();
	}

	//// Test Entity Rule
	//// A test entity is either an annotation expression or an effect.
	//TestEntity kext::TestEntity:
	//	expression=AnnotatedExpression | effect=Effect
	public KEXTGrammarAccess.TestEntityElements getTestEntityAccess() {
		return gaKEXT.getTestEntityAccess();
	}
	
	public ParserRule getTestEntityRule() {
		return getTestEntityAccess().getRule();
	}

	//// Annotated Expression Rule
	//// An annotated expression is declared with the keyword "expression". It may be preceded by a list
	//// of annotations. The expression itself follows the keyword.
	//AnnotatedExpression kext::AnnotatedExpression:
	//	annotations+=Annotation*
	//	'expression'
	//	expression=Expression
	public KEXTGrammarAccess.AnnotatedExpressionElements getAnnotatedExpressionAccess() {
		return gaKEXT.getAnnotatedExpressionAccess();
	}
	
	public ParserRule getAnnotatedExpressionRule() {
		return getAnnotatedExpressionAccess().getRule();
	}

	//// Declaration Rule
	//// A declaration follows the general KIELER pattern for variable declaration. More specific:
	//// this centralized declaration rule should replace any other declaration in drived grammars.
	//// It may start with arbitrary many declarations followed by keywords affecting the type of the
	//// valued objects that follow.
	//// Examples: const float pi = 3.14, input signal I, output bool z  
	//Declaration kexpressions::Declaration:
	//	VariableDeclaration | ReferenceDeclaration
	public KEXTGrammarAccess.DeclarationElements getDeclarationAccess() {
		return gaKEXT.getDeclarationAccess();
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}

	//DeclarationWOSemicolon kexpressions::Declaration:
	//	VariableDeclarationWOSemicolon | ReferenceDeclarationWOSemicolon
	public KEXTGrammarAccess.DeclarationWOSemicolonElements getDeclarationWOSemicolonAccess() {
		return gaKEXT.getDeclarationWOSemicolonAccess();
	}
	
	public ParserRule getDeclarationWOSemicolonRule() {
		return getDeclarationWOSemicolonAccess().getRule();
	}

	//VariableDeclaration kexpressions::VariableDeclaration:
	//	annotations+=Annotation*
	//	const?='const'?
	//	input?='input'?
	//	output?='output'?
	//	static?='static'? (signal?='signal'? type=ValueType | signal?='signal') valuedObjects+=ValuedObject (','
	//	valuedObjects+=ValuedObject)* ';'
	public KEXTGrammarAccess.VariableDeclarationElements getVariableDeclarationAccess() {
		return gaKEXT.getVariableDeclarationAccess();
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}

	//VariableDeclarationWOSemicolon kexpressions::VariableDeclaration:
	//	annotations+=Annotation*
	//	const?='const'?
	//	input?='input'?
	//	output?='output'?
	//	static?='static'? (signal?='signal'? type=ValueType | signal?='signal') valuedObjects+=ValuedObject (','
	//	valuedObjects+=ValuedObject)*
	public KEXTGrammarAccess.VariableDeclarationWOSemicolonElements getVariableDeclarationWOSemicolonAccess() {
		return gaKEXT.getVariableDeclarationWOSemicolonAccess();
	}
	
	public ParserRule getVariableDeclarationWOSemicolonRule() {
		return getVariableDeclarationWOSemicolonAccess().getRule();
	}

	//NamespaceID:
	//	ID (':' ID)*;
	public KEXTGrammarAccess.NamespaceIDElements getNamespaceIDAccess() {
		return gaKEXT.getNamespaceIDAccess();
	}
	
	public ParserRule getNamespaceIDRule() {
		return getNamespaceIDAccess().getRule();
	}

	//ReferenceDeclaration kexpressions::ReferenceDeclaration:
	//	annotations+=Annotation* ('&' reference=[kext::Identifiable|NamespaceID] | 'extern' extern=STRING)
	//	valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)* ';'
	public KEXTGrammarAccess.ReferenceDeclarationElements getReferenceDeclarationAccess() {
		return gaKEXT.getReferenceDeclarationAccess();
	}
	
	public ParserRule getReferenceDeclarationRule() {
		return getReferenceDeclarationAccess().getRule();
	}

	//ReferenceDeclarationWOSemicolon kexpressions::ReferenceDeclaration:
	//	annotations+=Annotation* ('&' reference=[kext::Identifiable|NamespaceID] | 'extern' extern=STRING)
	//	valuedObjects+=ValuedObject (',' valuedObjects+=ValuedObject)*
	public KEXTGrammarAccess.ReferenceDeclarationWOSemicolonElements getReferenceDeclarationWOSemicolonAccess() {
		return gaKEXT.getReferenceDeclarationWOSemicolonAccess();
	}
	
	public ParserRule getReferenceDeclarationWOSemicolonRule() {
		return getReferenceDeclarationWOSemicolonAccess().getRule();
	}

	//// Valued Object Rule
	//// A valued object is identified by its name. Then, a part for its cardinalities and an initial 
	//// expression may follow. Additionally, the declaration of the object may be finished by a combine part. 
	//// Examples: array[10], initial = false, z = 0 combine max
	//ValuedObject kexpressions::ValuedObject:
	//	annotations+=QuotedStringAnnotation*
	//	name=ID ('[' cardinalities+=INT ']')* ('=' initialValue=Expression)? ('combine'
	//	combineOperator=CombineOperator)?
	public KEXTGrammarAccess.ValuedObjectElements getValuedObjectAccess() {
		return gaKEXT.getValuedObjectAccess();
	}
	
	public ParserRule getValuedObjectRule() {
		return getValuedObjectAccess().getRule();
	}

	/// **
	// * @author ssm
	// * @kieler.design 2015-08-23 proposed 
	// * @kieler.rating 2015-08-23 proposed yellow
	// * / / *
	// * KEffects allow deriving grammars to use a range of different effects, namely assignments,
	// * postfix effects, esterel like emissions, host code and function call effects.
	// * Of course other grammars may extend this list.
	// * / // ---------------- //
	////  KEffects Rules  // 
	//// ---------------- //
	//// Effect Rule
	//// An effect is either an assignment, a postfix effect, an emission, a hostcode effect or a 
	//// function call effect.
	//Effect keffects::Effect:
	//	Assignment | PostfixEffect | Emission | HostcodeEffect | ReferenceCallEffect | FunctionCallEffect
	public KEffectsGrammarAccess.EffectElements getEffectAccess() {
		return gaKEffects.getEffectAccess();
	}
	
	public ParserRule getEffectRule() {
		return getEffectAccess().getRule();
	}

	//// Emission Rule
	//// An emission is a esterel like 'call' of a signal instance. A transition effect list may simply set
	//// an emission for a specific signal to emit it. Additionally, emission may include a parameter part for
	//// a new value in the case of valued signals. 
	//// Example: A, B(2)
	//// Important: To help the parser and to avoid ambiguities, emissions may only allow restricted 
	//// annotations defined in the annotations grammar.		
	//Emission keffects::Emission:
	//	annotations+=QuotedStringAnnotation*
	//	valuedObject=[kexpressions::ValuedObject] ("(" newValue=Expression ")")?
	public KEffectsGrammarAccess.EmissionElements getEmissionAccess() {
		return gaKEffects.getEmissionAccess();
	}
	
	public ParserRule getEmissionRule() {
		return getEmissionAccess().getRule();
	}

	//// Assignment Rule
	//// An assignment may start with a list of arbitrary annotatations.
	//// Then, an arbitrary expression is assigned to a valued object. The object may be suffixed by an 
	//// indices part. The type of assignment is determined by the type of the operator.
	//// Example: A = true, I[0] = I[1], I += 1     
	//Assignment keffects::Assignment:
	//	annotations+=Annotation*
	//	valuedObject=[kexpressions::ValuedObject] ('[' indices+=Expression ']')*
	//	operator=AssignOperator expression=Expression
	public KEffectsGrammarAccess.AssignmentElements getAssignmentAccess() {
		return gaKEffects.getAssignmentAccess();
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//// Postfix Effect
	//// A postfix effect is an assignment missing the part beyond the operator. In this case the operator type
	//// must be a postfix operator.
	//// Example: I++, I-- 
	//PostfixEffect keffects::Assignment:
	//	annotations+=Annotation*
	//	valuedObject=[kexpressions::ValuedObject] ('[' indices+=Expression ']')*
	//	operator=PostfixOperator
	public KEffectsGrammarAccess.PostfixEffectElements getPostfixEffectAccess() {
		return gaKEffects.getPostfixEffectAccess();
	}
	
	public ParserRule getPostfixEffectRule() {
		return getPostfixEffectAccess().getRule();
	}

	//// Hostcode Effect Rule
	//// A hostcode effect is an effect that include hostcode. It may be preceded by a list of annotations.
	//HostcodeEffect keffects::HostcodeEffect:
	//	annotations+=Annotation*
	//	text=HOSTCODE
	public KEffectsGrammarAccess.HostcodeEffectElements getHostcodeEffectAccess() {
		return gaKEffects.getHostcodeEffectAccess();
	}
	
	public ParserRule getHostcodeEffectRule() {
		return getHostcodeEffectAccess().getRule();
	}

	//// Reference Call Effect Rule
	//// A reference call effect works similar to the reference call expression. Additionally, it may be
	//// preceded by a list of annotations.
	//ReferenceCallEffect keffects::ReferenceCallEffect:
	//	annotations+=Annotation*
	//	valuedObject=[kexpressions::ValuedObject] ('(' parameters+=Parameter (',' parameters+=Parameter)* ')' | '()')
	public KEffectsGrammarAccess.ReferenceCallEffectElements getReferenceCallEffectAccess() {
		return gaKEffects.getReferenceCallEffectAccess();
	}
	
	public ParserRule getReferenceCallEffectRule() {
		return getReferenceCallEffectAccess().getRule();
	}

	//// Function Call Effect Rule
	//// A function call effect works similar to the function call expression. Additionally, it may be
	//// preceded by a list of annotations.
	//FunctionCallEffect keffects::FunctionCallEffect:
	//	annotations+=Annotation* ('extern' functionName=ID ('(' parameters+=Parameter (',' parameters+=Parameter)* ')'
	//	| '()')) | '<' functionName=ID ('(' parameters+=Parameter (',' parameters+=Parameter)* ')'
	//	| '()')
	//	'>'
	public KEffectsGrammarAccess.FunctionCallEffectElements getFunctionCallEffectAccess() {
		return gaKEffects.getFunctionCallEffectAccess();
	}
	
	public ParserRule getFunctionCallEffectRule() {
		return getFunctionCallEffectAccess().getRule();
	}

	//enum AssignOperator returns keffects::AssignOperator:
	//	ASSIGN="=" | ASSIGNADD="+=" | ASSIGNSUB="-=" | ASSIGNMUL="*=" | ASSIGNDIV="/=" |
	//	ASSIGNMOD="%=" | ASSIGNAND="&=" | ASSIGNOR="|=" | ASSIGNXOR="^=";
	public KEffectsGrammarAccess.AssignOperatorElements getAssignOperatorAccess() {
		return gaKEffects.getAssignOperatorAccess();
	}
	
	public EnumRule getAssignOperatorRule() {
		return getAssignOperatorAccess().getRule();
	}

	//enum PostfixOperator returns keffects::AssignOperator:
	//	POSTFIXADD="++" | POSTFIXSUB="--";
	public KEffectsGrammarAccess.PostfixOperatorElements getPostfixOperatorAccess() {
		return gaKEffects.getPostfixOperatorAccess();
	}
	
	public EnumRule getPostfixOperatorRule() {
		return getPostfixOperatorAccess().getRule();
	}

	/// **
	// * @author ssm
	// * @kieler.design 2015-08-21 proposed 
	// * @kieler.rating 2015-08-21 proposed yellow
	// * / // -------------------- //
	////  KExpressions Rules  // 
	//// -------------------- //
	/// * Expression rules are organized in a chain. They pass the actual instance to the next rule but may 
	// * consume tokens to create a specific expression element. Following this pattern, complex constructs
	// * can be created. This also implies an order of precedence.
	// *
	// * Expression
	// * + BooleanExpression
	// *   + LogicalOrExpression
	// *     + LogicalAndExpression
	// *       + BitwiseOrExpression
	// *         + BitwiseAndExpression
	// *           + CompareExpression
	// *             + NotOrValuedExpression
	// *               + ValuedExpression (see valued expression below)
	// *               + NotExpression *
	// *                 + AtomicExpression *
	// *                   + BoolValue
	// *                   + ValuedObjectTestExpression
	// *                     + ValuedObjectReference
	// *                   + FunctionCall
	// *                   + TextExpression
	// * + ValuedExpression
	// *   + AddExpression
	// *     + SubExpression
	// *       + MultExpression
	// *         + DivExpression
	// *           + ModExpression
	// *             + NegExpression *
	// *               + AtomicValuedExpression *
	// *                 + IntValue
	// *                 + FloatValue
	// *                 + StringValue
	// *                 + AtomicExpression
	// * / // Root Rule
	//// Always return an expression.
	//Root ecore::EObject:
	//	Expression
	public KExpressionsGrammarAccess.RootElements getRootAccess() {
		return gaKExpressions.getRootAccess();
	}
	
	public ParserRule getRootRule() {
		return getRootAccess().getRule();
	}

	//// Expression Rule
	//// An expression is either a boolean expression or a valued expression.
	//Expression:
	//	BoolExpression
	//	| ValuedExpression;
	public KExpressionsGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaKExpressions.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//// Boolean Expression Rule
	//// Boolean expression directs to logical or expression and kept for overview (and legacy) reason. 
	//// One could skip directly to the next rule.
	//BoolExpression Expression:
	//	LogicalOrExpression
	public KExpressionsGrammarAccess.BoolExpressionElements getBoolExpressionAccess() {
		return gaKExpressions.getBoolExpressionAccess();
	}
	
	public ParserRule getBoolExpressionRule() {
		return getBoolExpressionAccess().getRule();
	}

	//// Logical Or Expression Rule
	//// Directs to the 'logical and' rule and may create an operator expression for 'logical or' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//LogicalOrExpression Expression:
	//	LogicalAndExpression ({OperatorExpression.subExpressions+=current} (operator=LogicalOrOperator
	//	subExpressions+=LogicalAndExpression)+)?
	public KExpressionsGrammarAccess.LogicalOrExpressionElements getLogicalOrExpressionAccess() {
		return gaKExpressions.getLogicalOrExpressionAccess();
	}
	
	public ParserRule getLogicalOrExpressionRule() {
		return getLogicalOrExpressionAccess().getRule();
	}

	//// Logical And Expression Rule
	//// Directs to the 'bitwise or' rule and may create an operator expression for 'logical and' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//LogicalAndExpression Expression:
	//	BitwiseOrExpression ({OperatorExpression.subExpressions+=current} (operator=LogicalAndOperator
	//	subExpressions+=BitwiseOrExpression)+)?
	public KExpressionsGrammarAccess.LogicalAndExpressionElements getLogicalAndExpressionAccess() {
		return gaKExpressions.getLogicalAndExpressionAccess();
	}
	
	public ParserRule getLogicalAndExpressionRule() {
		return getLogicalAndExpressionAccess().getRule();
	}

	//// Bitwiese Or Expression Rule
	//// Directs to the 'bitwise and' rule and may create an operator expression for 'bitwise or' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//BitwiseOrExpression Expression:
	//	BitwiseAndExpression ({OperatorExpression.subExpressions+=current} (operator=BitwiseOrOperator
	//	subExpressions+=BitwiseAndExpression)+)?
	public KExpressionsGrammarAccess.BitwiseOrExpressionElements getBitwiseOrExpressionAccess() {
		return gaKExpressions.getBitwiseOrExpressionAccess();
	}
	
	public ParserRule getBitwiseOrExpressionRule() {
		return getBitwiseOrExpressionAccess().getRule();
	}

	//// Bitwise And Expression Rule
	//// Directs to the compare rule and may create an operator expression for 'bitwise and' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//BitwiseAndExpression Expression:
	//	CompareOperation ({OperatorExpression.subExpressions+=current} (operator=BitwiseAndOperator
	//	subExpressions+=CompareOperation)+)?
	public KExpressionsGrammarAccess.BitwiseAndExpressionElements getBitwiseAndExpressionAccess() {
		return gaKExpressions.getBitwiseAndExpressionAccess();
	}
	
	public ParserRule getBitwiseAndExpressionRule() {
		return getBitwiseAndExpressionAccess().getRule();
	}

	//// Compare Operation Rule
	//// Directs to the 'not or valued expression' rule and may create an operator expression for compares. 
	//// Example: 42 <= val(A)
	//CompareOperation Expression:
	//	NotOrValuedExpression ({OperatorExpression.subExpressions+=current} operator=CompareOperator
	//	subExpressions+=NotOrValuedExpression)?
	public KExpressionsGrammarAccess.CompareOperationElements getCompareOperationAccess() {
		return gaKExpressions.getCompareOperationAccess();
	}
	
	public ParserRule getCompareOperationRule() {
		return getCompareOperationAccess().getRule();
	}

	//// 'Not or Valued Expression' Rule
	//// ORDER IS IMPORTANT!
	//NotOrValuedExpression Expression:
	//	ValuedExpression
	//	| NotExpression
	public KExpressionsGrammarAccess.NotOrValuedExpressionElements getNotOrValuedExpressionAccess() {
		return gaKExpressions.getNotOrValuedExpressionAccess();
	}
	
	public ParserRule getNotOrValuedExpressionRule() {
		return getNotOrValuedExpressionAccess().getRule();
	}

	//// Not Expression Rule
	//// Example: !A, !false, !(A or B)
	//// At the latter we need the parents to indicate the right binding.
	//// A 'not expression' can also redirect to an 'atomic expression' to maintain the rule chain.
	//NotExpression Expression:
	//	{OperatorExpression} operator=NotOperator subExpressions+=NotExpression | super::AtomicExpression
	public KExpressionsGrammarAccess.NotExpressionElements getNotExpressionAccess() {
		return gaKExpressions.getNotExpressionAccess();
	}
	
	public ParserRule getNotExpressionRule() {
		return getNotExpressionAccess().getRule();
	}

	//// Valued Expression Rule    
	//// Everything that evaluates to a primitive number value.
	//// Similar to the boolean rule this rule is there for overview reasons.
	//ValuedExpression Expression:
	//	AddExpression
	public KExpressionsGrammarAccess.ValuedExpressionElements getValuedExpressionAccess() {
		return gaKExpressions.getValuedExpressionAccess();
	}
	
	public ParserRule getValuedExpressionRule() {
		return getValuedExpressionAccess().getRule();
	}

	//// Add Expression Rule
	//// The rule directs the 'sub expression' rule and creates an operator expression for additions
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: 1 + 2
	//AddExpression Expression:
	//	SubExpression ({OperatorExpression.subExpressions+=current} (operator=AddOperator subExpressions+=SubExpression)+)?
	public KExpressionsGrammarAccess.AddExpressionElements getAddExpressionAccess() {
		return gaKExpressions.getAddExpressionAccess();
	}
	
	public ParserRule getAddExpressionRule() {
		return getAddExpressionAccess().getRule();
	}

	//// Sub Expression Rule
	//// The rule directs the 'mult expression' rule and creates an operator expression for subtractions
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: var(A) - i
	//SubExpression Expression:
	//	MultExpression ({OperatorExpression.subExpressions+=current} (operator=SubOperator subExpressions+=MultExpression)+)?
	public KExpressionsGrammarAccess.SubExpressionElements getSubExpressionAccess() {
		return gaKExpressions.getSubExpressionAccess();
	}
	
	public ParserRule getSubExpressionRule() {
		return getSubExpressionAccess().getRule();
	}

	//// Mult Expression Rule
	//// The rule directs the 'div expression' rule and creates an operator expression for multiplications
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: 2 * 4
	//MultExpression Expression:
	//	DivExpression ({OperatorExpression.subExpressions+=current} (operator=MultOperator subExpressions+=DivExpression)+)?
	public KExpressionsGrammarAccess.MultExpressionElements getMultExpressionAccess() {
		return gaKExpressions.getMultExpressionAccess();
	}
	
	public ParserRule getMultExpressionRule() {
		return getMultExpressionAccess().getRule();
	}

	//// Div Expression Rule
	//// The rule directs the 'mod expression' rule and creates an operator expression for divisions
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: 2 / 4
	//DivExpression Expression:
	//	ModExpression ({OperatorExpression.subExpressions+=current} (operator=DivOperator subExpressions+=ModExpression)+)?
	public KExpressionsGrammarAccess.DivExpressionElements getDivExpressionAccess() {
		return gaKExpressions.getDivExpressionAccess();
	}
	
	public ParserRule getDivExpressionRule() {
		return getDivExpressionAccess().getRule();
	}

	//// Mod Expression Rule
	//// The rule directs the 'neg expression' rule and creates an operator expression for modulo operations
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: i % j
	//ModExpression Expression:
	//	NegExpression ({OperatorExpression.subExpressions+=current} (operator=ModOperator
	//	subExpressions+=AtomicValuedExpression)+)?
	public KExpressionsGrammarAccess.ModExpressionElements getModExpressionAccess() {
		return gaKExpressions.getModExpressionAccess();
	}
	
	public ParserRule getModExpressionRule() {
		return getModExpressionAccess().getRule();
	}

	//// Neg Expression Rule
	//// The rule negates the actual instance or directs the atomic value expression rule if necessary. 
	//// Example: -i, -2
	//NegExpression Expression:
	//	{OperatorExpression} operator=SubOperator subExpressions+=NegExpression | AtomicValuedExpression
	public KExpressionsGrammarAccess.NegExpressionElements getNegExpressionAccess() {
		return gaKExpressions.getNegExpressionAccess();
	}
	
	public ParserRule getNegExpressionRule() {
		return getNegExpressionAccess().getRule();
	}

	//// Atomic Valued Expression Rule
	//// An atomic valued expression is either a simple int float or string literal, another valued expression
	//// encapsulated in braces, or a atomic expression.
	//// Basically, the rule chain may start over again at this point.     
	//AtomicValuedExpression Expression:
	//	IntValue
	//	| FloatValue
	//	| StringValue
	//	| '(' ValuedExpression ')'
	//	| super::AtomicExpression
	public KExpressionsGrammarAccess.AtomicValuedExpressionElements getAtomicValuedExpressionAccess() {
		return gaKExpressions.getAtomicValuedExpressionAccess();
	}
	
	public ParserRule getAtomicValuedExpressionRule() {
		return getAtomicValuedExpressionAccess().getRule();
	}

	//// Valued Object Test Expression Rule
	//// This rules creates an operator expression for pre or val tests. Alternatively, it directs to a
	//// valued object reference.
	//// Example: pre(pre(val(A))), pre(val(pre(A))), val(A)
	//ValuedObjectTestExpression Expression:
	//	{OperatorExpression} operator=(PreOperator | ValOperator) '(' subExpressions+=ValuedObjectTestExpression ')'
	//	| ValuedObjectReference
	public KExpressionsGrammarAccess.ValuedObjectTestExpressionElements getValuedObjectTestExpressionAccess() {
		return gaKExpressions.getValuedObjectTestExpressionAccess();
	}
	
	public ParserRule getValuedObjectTestExpressionRule() {
		return getValuedObjectTestExpressionAccess().getRule();
	}

	//// Valued Object Reference Rule
	//// References a valued object with arbitrary (including none) indices part.
	//// Example: A, B
	//ValuedObjectReference:
	//	valuedObject=[ValuedObject] ('.' subReference=ValuedObjectReference)? ('[' indices+=Expression ']')*;
	public KExpressionsGrammarAccess.ValuedObjectReferenceElements getValuedObjectReferenceAccess() {
		return gaKExpressions.getValuedObjectReferenceAccess();
	}
	
	public ParserRule getValuedObjectReferenceRule() {
		return getValuedObjectReferenceAccess().getRule();
	}

	//// Reference Call Rule
	//// Calls to references. They may include a parameter list. 
	//ReferenceCall:
	//	valuedObject=[ValuedObject] ('(' parameters+=Parameter (',' parameters+=Parameter)* ')'
	//	| '()');
	public KExpressionsGrammarAccess.ReferenceCallElements getReferenceCallAccess() {
		return gaKExpressions.getReferenceCallAccess();
	}
	
	public ParserRule getReferenceCallRule() {
		return getReferenceCallAccess().getRule();
	}

	//// Function Call Rule
	//// Calls to functions are indicated by angle brackets. They may include a parameter list. 
	//// Deprecated?
	//FunctionCall:
	//	'extern' functionName=ID ('(' parameters+=Parameter (',' parameters+=Parameter)* ')'
	//	| '()') | '<' functionName=ID ('(' parameters+=Parameter (',' parameters+=Parameter)* ')'
	//	| '()')
	//	'>';
	public KExpressionsGrammarAccess.FunctionCallElements getFunctionCallAccess() {
		return gaKExpressions.getFunctionCallAccess();
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}

	//// Parameter Rule
	//// The parameter rule is used by the function call rule. Every expression may be a paramter.
	//// Additionally, a parameter may be preceded by an ampersand to indicate a call by reference.
	//// Analogously, an prefixed exclamation mark marks the parameter as pure output.
	//Parameter:
	//	(pureOutput?='!'? callByReference?='&')?
	//	expression=Expression;
	public KExpressionsGrammarAccess.ParameterElements getParameterAccess() {
		return gaKExpressions.getParameterAccess();
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//// Text Expression Rule
	//// The text expression rule returns a text expression. Most times text expressions are used for host code.
	//// Example: 'printf(...)'
	//TextExpression:
	//	text=HOSTCODE;
	public KExpressionsGrammarAccess.TextExpressionElements getTextExpressionAccess() {
		return gaKExpressions.getTextExpressionAccess();
	}
	
	public ParserRule getTextExpressionRule() {
		return getTextExpressionAccess().getRule();
	}

	//// Int Value Rule
	//IntValue:
	//	value=INT;
	public KExpressionsGrammarAccess.IntValueElements getIntValueAccess() {
		return gaKExpressions.getIntValueAccess();
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}

	//// Float Value Rule
	//FloatValue:
	//	value=FLOAT;
	public KExpressionsGrammarAccess.FloatValueElements getFloatValueAccess() {
		return gaKExpressions.getFloatValueAccess();
	}
	
	public ParserRule getFloatValueRule() {
		return getFloatValueAccess().getRule();
	}

	//// Bool Value Rule
	//BoolValue:
	//	value=BOOLEAN;
	public KExpressionsGrammarAccess.BoolValueElements getBoolValueAccess() {
		return gaKExpressions.getBoolValueAccess();
	}
	
	public ParserRule getBoolValueRule() {
		return getBoolValueAccess().getRule();
	}

	//// String Value Rule	
	//StringValue:
	//	value=STRING;
	public KExpressionsGrammarAccess.StringValueElements getStringValueAccess() {
		return gaKExpressions.getStringValueAccess();
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}

	//// Any Type Rule
	//// Data type rule allowing any kind of value to be accepted,
	//// e.g. as initialValues of valued objects used in Kits.xtext. 
	//AnyType:
	//	BOOLEAN | INT | FLOAT | ID | STRING;
	public KExpressionsGrammarAccess.AnyTypeElements getAnyTypeAccess() {
		return gaKExpressions.getAnyTypeAccess();
	}
	
	public ParserRule getAnyTypeRule() {
		return getAnyTypeAccess().getRule();
	}

	//enum CompareOperator returns OperatorType:
	//	EQ="==" | LT="<" | LEQ="<=" | GT=">" | GEQ=">=" | NE="!=";
	public KExpressionsGrammarAccess.CompareOperatorElements getCompareOperatorAccess() {
		return gaKExpressions.getCompareOperatorAccess();
	}
	
	public EnumRule getCompareOperatorRule() {
		return getCompareOperatorAccess().getRule();
	}

	//enum PreOperator returns OperatorType:
	//	PRE="pre";
	public KExpressionsGrammarAccess.PreOperatorElements getPreOperatorAccess() {
		return gaKExpressions.getPreOperatorAccess();
	}
	
	public EnumRule getPreOperatorRule() {
		return getPreOperatorAccess().getRule();
	}

	//enum BitwiseOrOperator returns OperatorType:
	//	BITWISE_OR="|";
	public KExpressionsGrammarAccess.BitwiseOrOperatorElements getBitwiseOrOperatorAccess() {
		return gaKExpressions.getBitwiseOrOperatorAccess();
	}
	
	public EnumRule getBitwiseOrOperatorRule() {
		return getBitwiseOrOperatorAccess().getRule();
	}

	//enum BitwiseAndOperator returns OperatorType:
	//	BITWISE_AND="&";
	public KExpressionsGrammarAccess.BitwiseAndOperatorElements getBitwiseAndOperatorAccess() {
		return gaKExpressions.getBitwiseAndOperatorAccess();
	}
	
	public EnumRule getBitwiseAndOperatorRule() {
		return getBitwiseAndOperatorAccess().getRule();
	}

	//enum NotOperator returns OperatorType:
	//	NOT="!";
	public KExpressionsGrammarAccess.NotOperatorElements getNotOperatorAccess() {
		return gaKExpressions.getNotOperatorAccess();
	}
	
	public EnumRule getNotOperatorRule() {
		return getNotOperatorAccess().getRule();
	}

	//enum AddOperator returns OperatorType:
	//	ADD="+";
	public KExpressionsGrammarAccess.AddOperatorElements getAddOperatorAccess() {
		return gaKExpressions.getAddOperatorAccess();
	}
	
	public EnumRule getAddOperatorRule() {
		return getAddOperatorAccess().getRule();
	}

	//enum SubOperator returns OperatorType:
	//	SUB="-";
	public KExpressionsGrammarAccess.SubOperatorElements getSubOperatorAccess() {
		return gaKExpressions.getSubOperatorAccess();
	}
	
	public EnumRule getSubOperatorRule() {
		return getSubOperatorAccess().getRule();
	}

	//enum MultOperator returns OperatorType:
	//	MULT="*";
	public KExpressionsGrammarAccess.MultOperatorElements getMultOperatorAccess() {
		return gaKExpressions.getMultOperatorAccess();
	}
	
	public EnumRule getMultOperatorRule() {
		return getMultOperatorAccess().getRule();
	}

	//enum ModOperator returns OperatorType:
	//	MOD="%";
	public KExpressionsGrammarAccess.ModOperatorElements getModOperatorAccess() {
		return gaKExpressions.getModOperatorAccess();
	}
	
	public EnumRule getModOperatorRule() {
		return getModOperatorAccess().getRule();
	}

	//enum DivOperator returns OperatorType:
	//	DIV="/";
	public KExpressionsGrammarAccess.DivOperatorElements getDivOperatorAccess() {
		return gaKExpressions.getDivOperatorAccess();
	}
	
	public EnumRule getDivOperatorRule() {
		return getDivOperatorAccess().getRule();
	}

	//enum ValOperator returns OperatorType:
	//	VAL="val";
	public KExpressionsGrammarAccess.ValOperatorElements getValOperatorAccess() {
		return gaKExpressions.getValOperatorAccess();
	}
	
	public EnumRule getValOperatorRule() {
		return getValOperatorAccess().getRule();
	}

	//enum LogicalOrOperator returns OperatorType:
	//	LOGICAL_OR="||";
	public KExpressionsGrammarAccess.LogicalOrOperatorElements getLogicalOrOperatorAccess() {
		return gaKExpressions.getLogicalOrOperatorAccess();
	}
	
	public EnumRule getLogicalOrOperatorRule() {
		return getLogicalOrOperatorAccess().getRule();
	}

	//enum LogicalAndOperator returns OperatorType:
	//	LOGICAL_AND="&&";
	public KExpressionsGrammarAccess.LogicalAndOperatorElements getLogicalAndOperatorAccess() {
		return gaKExpressions.getLogicalAndOperatorAccess();
	}
	
	public EnumRule getLogicalAndOperatorRule() {
		return getLogicalAndOperatorAccess().getRule();
	}

	//enum PostfixAdd returns OperatorType:
	//	POSTFIX_ADD="++";
	public KExpressionsGrammarAccess.PostfixAddElements getPostfixAddAccess() {
		return gaKExpressions.getPostfixAddAccess();
	}
	
	public EnumRule getPostfixAddRule() {
		return getPostfixAddAccess().getRule();
	}

	//enum PostfixSub returns OperatorType:
	//	POSTFIX_SUB="--";
	public KExpressionsGrammarAccess.PostfixSubElements getPostfixSubAccess() {
		return gaKExpressions.getPostfixSubAccess();
	}
	
	public EnumRule getPostfixSubRule() {
		return getPostfixSubAccess().getRule();
	}

	//enum ValueType:
	//	PURE="pure" | BOOL="bool" | UNSIGNED="unsigned" |
	//	INT="int" | FLOAT="float" |
	//	STRING="string" | HOST="host";
	public KExpressionsGrammarAccess.ValueTypeElements getValueTypeAccess() {
		return gaKExpressions.getValueTypeAccess();
	}
	
	public EnumRule getValueTypeRule() {
		return getValueTypeAccess().getRule();
	}

	//enum HostType returns ValueType:
	//	HOST="host";
	public KExpressionsGrammarAccess.HostTypeElements getHostTypeAccess() {
		return gaKExpressions.getHostTypeAccess();
	}
	
	public EnumRule getHostTypeRule() {
		return getHostTypeAccess().getRule();
	}

	//enum CombineOperator:
	//	NONE="none" | ADD="+" | MULT="*" | MAX="max" |
	//	MIN="min" | OR="|" | AND="&" | HOST="host";
	public KExpressionsGrammarAccess.CombineOperatorElements getCombineOperatorAccess() {
		return gaKExpressions.getCombineOperatorAccess();
	}
	
	public EnumRule getCombineOperatorRule() {
		return getCombineOperatorAccess().getRule();
	}

	//terminal HOSTCODE:
	//	"'" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | "'"))* "'";
	public TerminalRule getHOSTCODERule() {
		return gaKExpressions.getHOSTCODERule();
	} 

	/// **
	// * @author ssm
	// * @kieler.design 2015-08-21 proposed 
	// * @kieler.rating 2015-08-21 proposed yellow
	// * / // ------------------ //
	////  Annotation Rules  // 
	//// ------------------ //
	//// General rule for annotations
	//// The different annotation sub rules are tested in order. Hence, order matters! 
	//Annotation:
	//	CommentAnnotation | KeyStringValueAnnotation | TypedKeyStringValueAnnotation | TagAnnotation;
	public AnnotationsGrammarAccess.AnnotationElements getAnnotationAccess() {
		return gaAnnotations.getAnnotationAccess();
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}

	//// Valued Annotation Rule
	//// Valued annotations must have a value. For instance, tag annotations are not allowed.
	//// Derived grammars may use this rule if the general annotation rules compromises the grammar
	//// due to ambiguities.
	//ValuedAnnotation Annotation:
	//	CommentAnnotation | KeyStringValueAnnotation | TypedKeyStringValueAnnotation
	public AnnotationsGrammarAccess.ValuedAnnotationElements getValuedAnnotationAccess() {
		return gaAnnotations.getValuedAnnotationAccess();
	}
	
	public ParserRule getValuedAnnotationRule() {
		return getValuedAnnotationAccess().getRule();
	}

	//// Restricted Type Annotation Rule
	//// The restricted type annotation rule does not allow typed string annotations. 
	//// You can use this rule in derived grammars if you don't want to permit typed strings. 
	//RestrictedTypeAnnotation Annotation:
	//	CommentAnnotation | RestrictedKeyStringValueAnnotation | RestrictedTypedKeyStringValueAnnotation | TagAnnotation
	public AnnotationsGrammarAccess.RestrictedTypeAnnotationElements getRestrictedTypeAnnotationAccess() {
		return gaAnnotations.getRestrictedTypeAnnotationAccess();
	}
	
	public ParserRule getRestrictedTypeAnnotationRule() {
		return getRestrictedTypeAnnotationAccess().getRule();
	}

	//// Quoted String Annotation Rule
	//// The quoted string annotation rules uses quoted key string annotations. You can use this rule in 
	//// derived grammars if you don't want to permit unquoted strings. 
	//// (If you are looking for an example, the keffects grammar uses this rule for their emission
	//// rule and to avoid grammar ambiguities.)  
	//QuotedStringAnnotation Annotation:
	//	CommentAnnotation | QuotedKeyStringValueAnnotation | QuotedTypedKeyStringValueAnnotation | TagAnnotation
	public AnnotationsGrammarAccess.QuotedStringAnnotationElements getQuotedStringAnnotationAccess() {
		return gaAnnotations.getQuotedStringAnnotationAccess();
	}
	
	public ParserRule getQuotedStringAnnotationRule() {
		return getQuotedStringAnnotationAccess().getRule();
	}

	//// CommentAnnotation
	//// e.g.: / ** semantic comment * /
	//CommentAnnotation:
	//	values+=COMMENT_ANNOTATION;
	public AnnotationsGrammarAccess.CommentAnnotationElements getCommentAnnotationAccess() {
		return gaAnnotations.getCommentAnnotationAccess();
	}
	
	public ParserRule getCommentAnnotationRule() {
		return getCommentAnnotationAccess().getRule();
	}

	//// TagAnnotation
	//// e.g.: @HVlayout
	//TagAnnotation Annotation:
	//	'@' name=ExtendedID
	public AnnotationsGrammarAccess.TagAnnotationElements getTagAnnotationAccess() {
		return gaAnnotations.getTagAnnotationAccess();
	}
	
	public ParserRule getTagAnnotationRule() {
		return getTagAnnotationAccess().getRule();
	}

	//// KeyStringValueAnnotation
	//// e.g.: @layouter dot
	//// You may separate different values via comma.   
	//KeyStringValueAnnotation StringAnnotation:
	//	'@' name=ExtendedID values+=EStringAllTypes (',' values+=EStringAllTypes)*
	public AnnotationsGrammarAccess.KeyStringValueAnnotationElements getKeyStringValueAnnotationAccess() {
		return gaAnnotations.getKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getKeyStringValueAnnotationRule() {
		return getKeyStringValueAnnotationAccess().getRule();
	}

	//RestrictedKeyStringValueAnnotation StringAnnotation:
	//	'@' name=ExtendedID values+=EStringBoolean (',' values+=EStringBoolean)*
	public AnnotationsGrammarAccess.RestrictedKeyStringValueAnnotationElements getRestrictedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getRestrictedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getRestrictedKeyStringValueAnnotationRule() {
		return getRestrictedKeyStringValueAnnotationAccess().getRule();
	}

	//// TypedKeyStringValueAnnotation
	//// e.g.: @position[de.cau.cs.kieler.core.math.KVector] "(3,2)"
	//TypedKeyStringValueAnnotation TypedStringAnnotation:
	//	'@' name=ExtendedID '[' type=ExtendedID ']' values+=EStringAllTypes (',' values+=EStringAllTypes)*
	public AnnotationsGrammarAccess.TypedKeyStringValueAnnotationElements getTypedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getTypedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getTypedKeyStringValueAnnotationRule() {
		return getTypedKeyStringValueAnnotationAccess().getRule();
	}

	//RestrictedTypedKeyStringValueAnnotation TypedStringAnnotation:
	//	'@' name=ExtendedID '[' type=ExtendedID ']' values+=EStringBoolean (',' values+=EStringBoolean)*
	public AnnotationsGrammarAccess.RestrictedTypedKeyStringValueAnnotationElements getRestrictedTypedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getRestrictedTypedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getRestrictedTypedKeyStringValueAnnotationRule() {
		return getRestrictedTypedKeyStringValueAnnotationAccess().getRule();
	}

	//// QuotedKeyStringValueAnnotation
	//// The quoted key string value annotation is a replacement derived grammars may use
	//// if they want to disallow quote-less strings in a key string annotation. 
	//QuotedKeyStringValueAnnotation StringAnnotation:
	//	'@' name=ExtendedID values+=STRING (',' values+=STRING)*
	public AnnotationsGrammarAccess.QuotedKeyStringValueAnnotationElements getQuotedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getQuotedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getQuotedKeyStringValueAnnotationRule() {
		return getQuotedKeyStringValueAnnotationAccess().getRule();
	}

	//// QuotedTypedKeyStringValueAnnotation
	//// The quoted typed key string value annotation is a replacement derived grammars may use
	//// if they want to disallow quote-less strings in a key string annotation. 
	//QuotedTypedKeyStringValueAnnotation TypedStringAnnotation:
	//	'@' name=ExtendedID '[' type=ExtendedID ']' values+=STRING (',' values+=STRING)*
	public AnnotationsGrammarAccess.QuotedTypedKeyStringValueAnnotationElements getQuotedTypedKeyStringValueAnnotationAccess() {
		return gaAnnotations.getQuotedTypedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getQuotedTypedKeyStringValueAnnotationRule() {
		return getQuotedTypedKeyStringValueAnnotationAccess().getRule();
	}

	//// EString
	//// Allow strings without quotes if they don't contain spaces.
	//// For quoteless strings the ExtendedID rule is used.
	//EString:
	//	STRING | ExtendedID;
	public AnnotationsGrammarAccess.EStringElements getEStringAccess() {
		return gaAnnotations.getEStringAccess();
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//EStringBoolean:
	//	STRING | ExtendedID | BOOLEAN;
	public AnnotationsGrammarAccess.EStringBooleanElements getEStringBooleanAccess() {
		return gaAnnotations.getEStringBooleanAccess();
	}
	
	public ParserRule getEStringBooleanRule() {
		return getEStringBooleanAccess().getRule();
	}

	//EStringAllTypes:
	//	STRING | ExtendedID | BOOLEAN | Integer | Floateger;
	public AnnotationsGrammarAccess.EStringAllTypesElements getEStringAllTypesAccess() {
		return gaAnnotations.getEStringAllTypesAccess();
	}
	
	public ParserRule getEStringAllTypesRule() {
		return getEStringAllTypesAccess().getRule();
	}

	//// ExtendedID
	//// ExtendedID extends the ID rule provided by the terminals grammar.
	//// An ID may have dot separated parts and may close with a number separated by a hash mark.
	//ExtendedID:
	//	ID ("." ID)* ("#" INT)?;
	public AnnotationsGrammarAccess.ExtendedIDElements getExtendedIDAccess() {
		return gaAnnotations.getExtendedIDAccess();
	}
	
	public ParserRule getExtendedIDRule() {
		return getExtendedIDAccess().getRule();
	}

	//QualifiedID:
	//	ID ("." ID)*;
	public AnnotationsGrammarAccess.QualifiedIDElements getQualifiedIDAccess() {
		return gaAnnotations.getQualifiedIDAccess();
	}
	
	public ParserRule getQualifiedIDRule() {
		return getQualifiedIDAccess().getRule();
	}

	//// Integer
	//// The integer rule extends the EInt terminal by an optional sign for negative numbers.
	//Integer ecore::EInt:
	//	'-'? INT
	public AnnotationsGrammarAccess.IntegerElements getIntegerAccess() {
		return gaAnnotations.getIntegerAccess();
	}
	
	public ParserRule getIntegerRule() {
		return getIntegerAccess().getRule();
	}

	//// Floateger
	//// The floateger rule extends the EFloat terminal by an optional sign for negative numbers.
	//Floateger ecore::EFloat:
	//	'-'? FLOAT
	public AnnotationsGrammarAccess.FloategerElements getFloategerAccess() {
		return gaAnnotations.getFloategerAccess();
	}
	
	public ParserRule getFloategerRule() {
		return getFloategerAccess().getRule();
	}

	//terminal COMMENT_ANNOTATION:
	//	'/ **'->'* /';
	public TerminalRule getCOMMENT_ANNOTATIONRule() {
		return gaAnnotations.getCOMMENT_ANNOTATIONRule();
	} 

	//terminal ML_COMMENT:
	//	'/ *' !'*'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaAnnotations.getML_COMMENTRule();
	} 

	//terminal fragment NUMBER:
	//	'0'..'9';
	public TerminalRule getNUMBERRule() {
		return gaAnnotations.getNUMBERRule();
	} 

	//terminal INT returns ecore::EInt:
	//	NUMBER+;
	public TerminalRule getINTRule() {
		return gaAnnotations.getINTRule();
	} 

	//terminal FLOAT returns ecore::EFloatObject:
	//	NUMBER+ ('.' NUMBER*) (("e" | "E") ("+" | "-")? NUMBER+)? 'f'? | NUMBER+ 'f';
	public TerminalRule getFLOATRule() {
		return gaAnnotations.getFLOATRule();
	} 

	//terminal BOOLEAN returns ecore::EBooleanObject:
	//	'true' | 'false';
	public TerminalRule getBOOLEANRule() {
		return gaAnnotations.getBOOLEANRule();
	} 

	//terminal STRING:
	//	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | "'" | '\\') | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return gaAnnotations.getSTRINGRule();
	} 

	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
