/*
 * KIELER - Kiel Integrated Environment for Layout Eclipse RichClient
 *
 * http://rtsys.informatik.uni-kiel.de/kieler
 * 
 * Copyright ${year} by
 * + Kiel University
 *   + Department of Computer Science
 *     + Real-Time and Embedded Systems Group
 * 
 * This code is provided under the terms of the Eclipse Public License (EPL).
 */
package de.cau.cs.kieler.sccharts.ui.debug.breakpoints

import de.cau.cs.kieler.sccharts.State
import de.cau.cs.kieler.sccharts.Transition
import de.cau.cs.kieler.sccharts.ui.debug.highlighting.DebugHighlighter

/**
 * Central class to synchronize and manage all breakpoints generated by the debugger.
 * 
 * @author stu121235
 *
 */
class DebugBreakpointManager {
   
    private static var DebugBreakpointManager instance
    
    private val DebugHighlighter debugHighlighter
    
    val statesWithBreakpoint = <State> newHashSet 
    val transitionsWithBreakpoint = <Transition> newHashSet
    
    /**
     * Private for singleton behavior.
     */
    private new() {
        debugHighlighter = DebugHighlighter.instance
    }
    
    static def getInstance() {
        if (instance === null) {
            instance = new DebugBreakpointManager()
        }
        return instance
    }
    
    def toggleBreakpoint(State state) {
        if (statesWithBreakpoint.contains(state)) {
            statesWithBreakpoint.remove(state)
            debugHighlighter.removeBreakpointHighlight(state)
        } else {
            statesWithBreakpoint.add(state)
            debugHighlighter.addBreakpointHighlight(state)
        }
    }
    
    def toggleBreakpoint(Transition transition) {
        if (transitionsWithBreakpoint.contains(transition)) {
            transitionsWithBreakpoint.remove(transition)
            debugHighlighter.removeBreakpointDecorator(transition)
        } else {
            transitionsWithBreakpoint.add(transition)
            debugHighlighter.addBreakpointDecorator(transition)
        }
    }
}