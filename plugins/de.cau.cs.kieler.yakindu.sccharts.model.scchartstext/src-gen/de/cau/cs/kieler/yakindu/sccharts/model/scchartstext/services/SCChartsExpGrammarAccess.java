/*
* generated by Xtext
*/

package de.cau.cs.kieler.yakindu.sccharts.model.scchartstext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.yakindu.sct.model.stext.services.STextGrammarAccess;

@Singleton
public class SCChartsExpGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class StateScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateScope");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSimpleScopeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDeclarationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cDeclarationsAlternatives_1_0 = (Alternatives)cDeclarationsAssignment_1.eContents().get(0);
		private final RuleCall cDeclarationsVariableDeclarationParserRuleCall_1_0_0 = (RuleCall)cDeclarationsAlternatives_1_0.eContents().get(0);
		private final RuleCall cDeclarationsSignalDeclarationParserRuleCall_1_0_1 = (RuleCall)cDeclarationsAlternatives_1_0.eContents().get(1);
		private final RuleCall cDeclarationsLocalReactionParserRuleCall_1_0_2 = (RuleCall)cDeclarationsAlternatives_1_0.eContents().get(2);
		
		/// *********************************** INTERFACE DECLARATION **************************************** * / ////defines the possible scopes for a state
		//
		//StateScope:
		//
		//	{SimpleScope} declarations+=(VariableDeclaration | SignalDeclaration | LocalReaction)*;
		public ParserRule getRule() { return rule; }

		//{SimpleScope} declarations+=(VariableDeclaration | SignalDeclaration | LocalReaction)*
		public Group getGroup() { return cGroup; }

		//{SimpleScope}
		public Action getSimpleScopeAction_0() { return cSimpleScopeAction_0; }

		//declarations+=(VariableDeclaration | SignalDeclaration | LocalReaction)*
		public Assignment getDeclarationsAssignment_1() { return cDeclarationsAssignment_1; }

		//VariableDeclaration | SignalDeclaration | LocalReaction
		public Alternatives getDeclarationsAlternatives_1_0() { return cDeclarationsAlternatives_1_0; }

		//VariableDeclaration
		public RuleCall getDeclarationsVariableDeclarationParserRuleCall_1_0_0() { return cDeclarationsVariableDeclarationParserRuleCall_1_0_0; }

		//SignalDeclaration
		public RuleCall getDeclarationsSignalDeclarationParserRuleCall_1_0_1() { return cDeclarationsSignalDeclarationParserRuleCall_1_0_1; }

		//LocalReaction
		public RuleCall getDeclarationsLocalReactionParserRuleCall_1_0_2() { return cDeclarationsLocalReactionParserRuleCall_1_0_2; }
	}

	public class SignalDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SignalDeclaration");
		private final RuleCall cSignalDefinitionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//SignalDeclaration returns sgraph::Event:
		//
		//	SignalDefinition;
		public ParserRule getRule() { return rule; }

		//SignalDefinition
		public RuleCall getSignalDefinitionParserRuleCall() { return cSignalDefinitionParserRuleCall; }
	}

	public class SignalDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SignalDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEventDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSignalKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SignalDefinition:
		//
		//	{EventDefinition} "signal" name=ID ";";
		public ParserRule getRule() { return rule; }

		//{EventDefinition} "signal" name=ID ";"
		public Group getGroup() { return cGroup; }

		//{EventDefinition}
		public Action getEventDefinitionAction_0() { return cEventDefinitionAction_0; }

		//"signal"
		public Keyword getSignalKeyword_1() { return cSignalKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class VariableDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDirectionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDirectionVarDirectionEnumRuleCall_1_0 = (RuleCall)cDirectionAssignment_1.eContents().get(0);
		private final Assignment cIsStaticAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cIsStaticStaticKeyword_2_0 = (Keyword)cIsStaticAssignment_2.eContents().get(0);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypeTypeCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeTypeFQNParserRuleCall_3_0_1 = (RuleCall)cTypeTypeCrossReference_3_0.eContents().get(1);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cVarInitialValueAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cVarInitialValueExpressionParserRuleCall_5_1_0 = (RuleCall)cVarInitialValueAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cWithKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cVarCombineOperatorAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cVarCombineOperatorCombineOperatorEnumRuleCall_6_1_0 = (RuleCall)cVarCombineOperatorAssignment_6_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		////StateScope returns sgraph::Scope:
		//
		////	InterfaceScope;// | ReactionScope;
		//
		/// ************************************************ / / *			  INTERFACE DECLARATION				* /
		//
		/// ************************************************ / //override the SText InterfaceScope rule
		//
		//// The InterfaceScope rule specifies that a InterfaceScope starts with 
		//
		//// the literal 'interface :', followed by one or more interface declaration variables
		//
		////InterfaceScope:
		//
		////	{InterfaceScope} 'interface' ':' declarations+=VariableDeclaration (','
		//
		////	declarations+=VariableDeclaration)* ';';
		//
		/// ************************************************ / / *			 Variable Definition				* /
		//
		/// ************************************************ / // Override the SText VariableDefinition rule
		//
		//// A variable is a Declaration. It has a Direction, a Name, a Type, an InitialValue and a CombineOperator
		//
		/// * ---- variable definition ---- * / VariableDefinition:
		//
		//	{VariableDefinition} direction=VarDirection? isStatic?="static"? type=[types::Type|FQN] name=ID ("="
		//
		//	varInitialValue=Expression)? ("with" varCombineOperator=CombineOperator)? ";";
		public ParserRule getRule() { return rule; }

		//{VariableDefinition} direction=VarDirection? isStatic?="static"? type=[types::Type|FQN] name=ID ("="
		//
		//varInitialValue=Expression)? ("with" varCombineOperator=CombineOperator)? ";"
		public Group getGroup() { return cGroup; }

		//{VariableDefinition}
		public Action getVariableDefinitionAction_0() { return cVariableDefinitionAction_0; }

		//direction=VarDirection?
		public Assignment getDirectionAssignment_1() { return cDirectionAssignment_1; }

		//VarDirection
		public RuleCall getDirectionVarDirectionEnumRuleCall_1_0() { return cDirectionVarDirectionEnumRuleCall_1_0; }

		//isStatic?="static"?
		public Assignment getIsStaticAssignment_2() { return cIsStaticAssignment_2; }

		//"static"
		public Keyword getIsStaticStaticKeyword_2_0() { return cIsStaticStaticKeyword_2_0; }

		//type=[types::Type|FQN]
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//[types::Type|FQN]
		public CrossReference getTypeTypeCrossReference_3_0() { return cTypeTypeCrossReference_3_0; }

		//FQN
		public RuleCall getTypeTypeFQNParserRuleCall_3_0_1() { return cTypeTypeFQNParserRuleCall_3_0_1; }

		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }

		//("=" varInitialValue=Expression)?
		public Group getGroup_5() { return cGroup_5; }

		//"="
		public Keyword getEqualsSignKeyword_5_0() { return cEqualsSignKeyword_5_0; }

		//varInitialValue=Expression
		public Assignment getVarInitialValueAssignment_5_1() { return cVarInitialValueAssignment_5_1; }

		//Expression
		public RuleCall getVarInitialValueExpressionParserRuleCall_5_1_0() { return cVarInitialValueExpressionParserRuleCall_5_1_0; }

		//("with" varCombineOperator=CombineOperator)?
		public Group getGroup_6() { return cGroup_6; }

		//"with"
		public Keyword getWithKeyword_6_0() { return cWithKeyword_6_0; }

		//varCombineOperator=CombineOperator
		public Assignment getVarCombineOperatorAssignment_6_1() { return cVarCombineOperatorAssignment_6_1; }

		//CombineOperator
		public RuleCall getVarCombineOperatorCombineOperatorEnumRuleCall_6_1_0() { return cVarCombineOperatorCombineOperatorEnumRuleCall_6_1_0; }

		//";"
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}

	public class LocalReactionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocalReaction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTriggerAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTriggerLocalReactionTriggerParserRuleCall_0_0 = (RuleCall)cTriggerAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cEffectAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cEffectLocalReactionEffectParserRuleCall_1_0_1_0 = (RuleCall)cEffectAssignment_1_0_1.eContents().get(0);
		
		/// ************************************************ / / *			 	ReactionScope					* /
		//
		/// ************************************************ / LocalReaction:
		//
		//	trigger=LocalReactionTrigger => ("/" effect=LocalReactionEffect);
		public ParserRule getRule() { return rule; }

		//trigger=LocalReactionTrigger => ("/" effect=LocalReactionEffect)
		public Group getGroup() { return cGroup; }

		//trigger=LocalReactionTrigger
		public Assignment getTriggerAssignment_0() { return cTriggerAssignment_0; }

		//LocalReactionTrigger
		public RuleCall getTriggerLocalReactionTriggerParserRuleCall_0_0() { return cTriggerLocalReactionTriggerParserRuleCall_0_0; }

		//=> ("/" effect=LocalReactionEffect)
		public Group getGroup_1() { return cGroup_1; }

		//"/" effect=LocalReactionEffect
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"/"
		public Keyword getSolidusKeyword_1_0_0() { return cSolidusKeyword_1_0_0; }

		//effect=LocalReactionEffect
		public Assignment getEffectAssignment_1_0_1() { return cEffectAssignment_1_0_1; }

		//LocalReactionEffect
		public RuleCall getEffectLocalReactionEffectParserRuleCall_1_0_1_0() { return cEffectLocalReactionEffectParserRuleCall_1_0_1_0; }
	}

	public class LocalReactionTriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocalReactionTrigger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReactionTriggerAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cTriggersAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cTriggersLocalReactionSpecParserRuleCall_1_0_0_0 = (RuleCall)cTriggersAssignment_1_0_0.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final Keyword cCommaKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Assignment cTriggersAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final RuleCall cTriggersLocalReactionSpecParserRuleCall_1_0_1_1_0 = (RuleCall)cTriggersAssignment_1_0_1_1.eContents().get(0);
		private final Group cGroup_1_0_2 = (Group)cGroup_1_0.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_1_0_2_0 = (Keyword)cGroup_1_0_2.eContents().get(0);
		private final Assignment cGuardExpressionAssignment_1_0_2_1 = (Assignment)cGroup_1_0_2.eContents().get(1);
		private final RuleCall cGuardExpressionExpressionParserRuleCall_1_0_2_1_0 = (RuleCall)cGuardExpressionAssignment_1_0_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_0_2_2 = (Keyword)cGroup_1_0_2.eContents().get(2);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cGuardExpressionAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cGuardExpressionExpressionParserRuleCall_1_1_1_0 = (RuleCall)cGuardExpressionAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		//LocalReactionTrigger returns sgraph::Trigger:
		//
		//	{ReactionTrigger} (triggers+=LocalReactionSpec ("," triggers+=LocalReactionSpec)* ("[" guardExpression=Expression
		//
		//	"]")? | "[" guardExpression=Expression "]");
		public ParserRule getRule() { return rule; }

		//{ReactionTrigger} (triggers+=LocalReactionSpec ("," triggers+=LocalReactionSpec)* ("[" guardExpression=Expression "]")?
		//
		//| "[" guardExpression=Expression "]")
		public Group getGroup() { return cGroup; }

		//{ReactionTrigger}
		public Action getReactionTriggerAction_0() { return cReactionTriggerAction_0; }

		//triggers+=LocalReactionSpec ("," triggers+=LocalReactionSpec)* ("[" guardExpression=Expression "]")? | "["
		//
		//guardExpression=Expression "]"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//triggers+=LocalReactionSpec ("," triggers+=LocalReactionSpec)* ("[" guardExpression=Expression "]")?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//triggers+=LocalReactionSpec
		public Assignment getTriggersAssignment_1_0_0() { return cTriggersAssignment_1_0_0; }

		//LocalReactionSpec
		public RuleCall getTriggersLocalReactionSpecParserRuleCall_1_0_0_0() { return cTriggersLocalReactionSpecParserRuleCall_1_0_0_0; }

		//("," triggers+=LocalReactionSpec)*
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//","
		public Keyword getCommaKeyword_1_0_1_0() { return cCommaKeyword_1_0_1_0; }

		//triggers+=LocalReactionSpec
		public Assignment getTriggersAssignment_1_0_1_1() { return cTriggersAssignment_1_0_1_1; }

		//LocalReactionSpec
		public RuleCall getTriggersLocalReactionSpecParserRuleCall_1_0_1_1_0() { return cTriggersLocalReactionSpecParserRuleCall_1_0_1_1_0; }

		//(=> "[" guardExpression=Expression "]")?
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }

		//=> "["
		public Keyword getLeftSquareBracketKeyword_1_0_2_0() { return cLeftSquareBracketKeyword_1_0_2_0; }

		//guardExpression=Expression
		public Assignment getGuardExpressionAssignment_1_0_2_1() { return cGuardExpressionAssignment_1_0_2_1; }

		//Expression
		public RuleCall getGuardExpressionExpressionParserRuleCall_1_0_2_1_0() { return cGuardExpressionExpressionParserRuleCall_1_0_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_0_2_2() { return cRightSquareBracketKeyword_1_0_2_2; }

		//"[" guardExpression=Expression "]"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_1_0() { return cLeftSquareBracketKeyword_1_1_0; }

		//guardExpression=Expression
		public Assignment getGuardExpressionAssignment_1_1_1() { return cGuardExpressionAssignment_1_1_1; }

		//Expression
		public RuleCall getGuardExpressionExpressionParserRuleCall_1_1_1_0() { return cGuardExpressionExpressionParserRuleCall_1_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_1_2() { return cRightSquareBracketKeyword_1_1_2; }
	}

	public class LocalReactionEffectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocalReactionEffect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReactionEffectAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cActionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cActionsExpressionParserRuleCall_1_0 = (RuleCall)cActionsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cActionsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cActionsExpressionParserRuleCall_2_1_0 = (RuleCall)cActionsAssignment_2_1.eContents().get(0);
		
		//// (';')?;
		//
		//LocalReactionEffect returns sgraph::Effect:
		//
		//	{ReactionEffect} actions+=Expression (";" actions+=Expression)*;
		public ParserRule getRule() { return rule; }

		//{ReactionEffect} actions+=Expression (";" actions+=Expression)*
		public Group getGroup() { return cGroup; }

		//{ReactionEffect}
		public Action getReactionEffectAction_0() { return cReactionEffectAction_0; }

		//actions+=Expression
		public Assignment getActionsAssignment_1() { return cActionsAssignment_1; }

		//Expression
		public RuleCall getActionsExpressionParserRuleCall_1_0() { return cActionsExpressionParserRuleCall_1_0; }

		//(=> ";" actions+=Expression)*
		public Group getGroup_2() { return cGroup_2; }

		//=> ";"
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }

		//actions+=Expression
		public Assignment getActionsAssignment_2_1() { return cActionsAssignment_2_1; }

		//Expression
		public RuleCall getActionsExpressionParserRuleCall_2_1_0() { return cActionsExpressionParserRuleCall_2_1_0; }
	}

	public class LocalReactionSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocalReactionSpec");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRegularEventSpecParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStateReactionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//LocalReactionSpec returns stext::EventSpec:
		//
		//	RegularEventSpec | StateReaction;
		public ParserRule getRule() { return rule; }

		//RegularEventSpec | StateReaction
		public Alternatives getAlternatives() { return cAlternatives; }

		//RegularEventSpec
		public RuleCall getRegularEventSpecParserRuleCall_0() { return cRegularEventSpecParserRuleCall_0; }

		//StateReaction
		public RuleCall getStateReactionParserRuleCall_1() { return cStateReactionParserRuleCall_1; }
	}

	public class StateReactionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateReaction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEntryParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInsideParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExitParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//StateReaction:
		//
		//	Entry | Inside | Exit;
		public ParserRule getRule() { return rule; }

		//Entry | Inside | Exit
		public Alternatives getAlternatives() { return cAlternatives; }

		//Entry
		public RuleCall getEntryParserRuleCall_0() { return cEntryParserRuleCall_0; }

		//Inside
		public RuleCall getInsideParserRuleCall_1() { return cInsideParserRuleCall_1; }

		//Exit
		public RuleCall getExitParserRuleCall_2() { return cExitParserRuleCall_2; }
	}

	public class EntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Entry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEntryAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEntryKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Entry:
		//
		//	{Entry} "Entry";
		public ParserRule getRule() { return rule; }

		//{Entry} "Entry"
		public Group getGroup() { return cGroup; }

		//{Entry}
		public Action getEntryAction_0() { return cEntryAction_0; }

		//"Entry"
		public Keyword getEntryKeyword_1() { return cEntryKeyword_1; }
	}

	public class InsideElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Inside");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInsideAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDuringKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Inside:
		//
		//	{Inside} "During";
		public ParserRule getRule() { return rule; }

		//{Inside} "During"
		public Group getGroup() { return cGroup; }

		//{Inside}
		public Action getInsideAction_0() { return cInsideAction_0; }

		//"During"
		public Keyword getDuringKeyword_1() { return cDuringKeyword_1; }
	}

	public class ExitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Exit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExitAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cExitKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Exit:
		//
		//	{Exit} "Exit";
		public ParserRule getRule() { return rule; }

		//{Exit} "Exit"
		public Group getGroup() { return cGroup; }

		//{Exit}
		public Action getExitAction_0() { return cExitAction_0; }

		//"Exit"
		public Keyword getExitKeyword_1() { return cExitKeyword_1; }
	}

	public class ReactionTriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReactionTrigger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReactionTriggerAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIsImmediateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsImmediateNumberSignKeyword_1_0 = (Keyword)cIsImmediateAssignment_1.eContents().get(0);
		private final Assignment cDelayAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDelayINTTerminalRuleCall_2_0 = (RuleCall)cDelayAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Assignment cTriggersAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final RuleCall cTriggersEventSpecParserRuleCall_3_0_0_0 = (RuleCall)cTriggersAssignment_3_0_0.eContents().get(0);
		private final Group cGroup_3_0_1 = (Group)cGroup_3_0.eContents().get(1);
		private final Keyword cCommaKeyword_3_0_1_0 = (Keyword)cGroup_3_0_1.eContents().get(0);
		private final Assignment cTriggersAssignment_3_0_1_1 = (Assignment)cGroup_3_0_1.eContents().get(1);
		private final RuleCall cTriggersEventSpecParserRuleCall_3_0_1_1_0 = (RuleCall)cTriggersAssignment_3_0_1_1.eContents().get(0);
		private final Group cGroup_3_0_2 = (Group)cGroup_3_0.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_3_0_2_0 = (Keyword)cGroup_3_0_2.eContents().get(0);
		private final Assignment cGuardExpressionAssignment_3_0_2_1 = (Assignment)cGroup_3_0_2.eContents().get(1);
		private final RuleCall cGuardExpressionExpressionParserRuleCall_3_0_2_1_0 = (RuleCall)cGuardExpressionAssignment_3_0_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_0_2_2 = (Keyword)cGroup_3_0_2.eContents().get(2);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cGuardExpressionAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cGuardExpressionExpressionParserRuleCall_3_1_1_0 = (RuleCall)cGuardExpressionAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_1_2 = (Keyword)cGroup_3_1.eContents().get(2);
		
		////ReactionScope:
		//
		////	reactionScope+=(EntryAction | InsideAction | ExitAction | Suspend);
		//
		////
		//
		////ExitAction returns sgraph::Effect:
		//
		////	{ExitAction} 'Exit' ':' '/' effect=ReactionEffect ';';
		//
		////
		//
		////InsideAction returns sgraph::Effect:
		//
		////	{InsideAction} 'Inside' ':' '/' effect=ReactionEffect ';';
		//
		////
		//
		////EntryAction returns sgraph::Effect:
		//
		////	{EntryAction} 'Entry' ':' '/' effect=ReactionEffect ';';
		//
		/// ************************************************ / / *			 		SUSPEND 					* /
		//
		/// ************************************************ / // The  SuspendDeclaration is a Trigger
		//
		////TODO: only variables already declared in the interface 
		//
		////Suspend returns sgraph::Trigger:
		//
		////	{Suspend} 'Suspend' ':' trigger=ReactionTrigger ';';
		//
		/// ******************************************** TRANSITION ***************************************** * / // The ReactionTrigger is a Trigger and has an Expression, 
		//
		//// an optional delay and isImmediate option represented with a '#'
		//
		//ReactionTrigger returns sgraph::Trigger:
		//
		//	{ReactionTrigger} isImmediate?="#"? delay=INT? (triggers+=EventSpec ("," triggers+=EventSpec)* ("["
		//
		//	guardExpression=Expression "]")? | "[" guardExpression=Expression "]");
		public ParserRule getRule() { return rule; }

		//{ReactionTrigger} isImmediate?="#"? delay=INT? (triggers+=EventSpec ("," triggers+=EventSpec)* ("["
		//
		//guardExpression=Expression "]")? | "[" guardExpression=Expression "]")
		public Group getGroup() { return cGroup; }

		//{ReactionTrigger}
		public Action getReactionTriggerAction_0() { return cReactionTriggerAction_0; }

		//isImmediate?="#"?
		public Assignment getIsImmediateAssignment_1() { return cIsImmediateAssignment_1; }

		//"#"
		public Keyword getIsImmediateNumberSignKeyword_1_0() { return cIsImmediateNumberSignKeyword_1_0; }

		//delay=INT?
		public Assignment getDelayAssignment_2() { return cDelayAssignment_2; }

		//INT
		public RuleCall getDelayINTTerminalRuleCall_2_0() { return cDelayINTTerminalRuleCall_2_0; }

		//triggers+=EventSpec ("," triggers+=EventSpec)* ("[" guardExpression=Expression "]")? | "[" guardExpression=Expression
		//
		//"]"
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//triggers+=EventSpec ("," triggers+=EventSpec)* ("[" guardExpression=Expression "]")?
		public Group getGroup_3_0() { return cGroup_3_0; }

		//triggers+=EventSpec
		public Assignment getTriggersAssignment_3_0_0() { return cTriggersAssignment_3_0_0; }

		//EventSpec
		public RuleCall getTriggersEventSpecParserRuleCall_3_0_0_0() { return cTriggersEventSpecParserRuleCall_3_0_0_0; }

		//("," triggers+=EventSpec)*
		public Group getGroup_3_0_1() { return cGroup_3_0_1; }

		//","
		public Keyword getCommaKeyword_3_0_1_0() { return cCommaKeyword_3_0_1_0; }

		//triggers+=EventSpec
		public Assignment getTriggersAssignment_3_0_1_1() { return cTriggersAssignment_3_0_1_1; }

		//EventSpec
		public RuleCall getTriggersEventSpecParserRuleCall_3_0_1_1_0() { return cTriggersEventSpecParserRuleCall_3_0_1_1_0; }

		//(=> "[" guardExpression=Expression "]")?
		public Group getGroup_3_0_2() { return cGroup_3_0_2; }

		//=> "["
		public Keyword getLeftSquareBracketKeyword_3_0_2_0() { return cLeftSquareBracketKeyword_3_0_2_0; }

		//guardExpression=Expression
		public Assignment getGuardExpressionAssignment_3_0_2_1() { return cGuardExpressionAssignment_3_0_2_1; }

		//Expression
		public RuleCall getGuardExpressionExpressionParserRuleCall_3_0_2_1_0() { return cGuardExpressionExpressionParserRuleCall_3_0_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3_0_2_2() { return cRightSquareBracketKeyword_3_0_2_2; }

		//"[" guardExpression=Expression "]"
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3_1_0() { return cLeftSquareBracketKeyword_3_1_0; }

		//guardExpression=Expression
		public Assignment getGuardExpressionAssignment_3_1_1() { return cGuardExpressionAssignment_3_1_1; }

		//Expression
		public RuleCall getGuardExpressionExpressionParserRuleCall_3_1_1_0() { return cGuardExpressionExpressionParserRuleCall_3_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3_1_2() { return cRightSquareBracketKeyword_3_1_2; }
	}

	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitiveValueExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFeatureCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPreValueExpressionreturnsParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//// The ReactionEffect is an Effect. 
		//
		////ReactionEffect returns sgraph::Effect:
		//
		////	{ReactionEffect} actions+=Expression (=> ';' actions+=Expression)*; // (';')?;
		//
		/// ***************************************** Expressions ******************************************* * / // Override the stext::PrimaryExpression
		//
		//// remove the ActiveStateReferenceExpression and the EventValueReferenceExpression
		//
		//// and add PreValueExpressionreturns that returns the value of a variable in the previous tick. 
		//
		//PrimaryExpression returns stext::Expression:
		//
		//	PrimitiveValueExpression | FeatureCall | PreValueExpressionreturns | "(" Expression ")";
		public ParserRule getRule() { return rule; }

		//PrimitiveValueExpression | FeatureCall | PreValueExpressionreturns | "(" Expression ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//PrimitiveValueExpression
		public RuleCall getPrimitiveValueExpressionParserRuleCall_0() { return cPrimitiveValueExpressionParserRuleCall_0; }

		//FeatureCall
		public RuleCall getFeatureCallParserRuleCall_1() { return cFeatureCallParserRuleCall_1; }

		//PreValueExpressionreturns
		public RuleCall getPreValueExpressionreturnsParserRuleCall_2() { return cPreValueExpressionreturnsParserRuleCall_2; }

		//"(" Expression ")"
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_3_1() { return cExpressionParserRuleCall_3_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}

	public class PreValueExpressionreturnsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PreValueExpressionreturns");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPreValueExpressionreturnsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPreKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueFeatureCallParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//PreValueExpressionreturns returns stext::Expression:
		//
		//	{PreValueExpressionreturns} "pre" "(" value=FeatureCall ")";
		public ParserRule getRule() { return rule; }

		//{PreValueExpressionreturns} "pre" "(" value=FeatureCall ")"
		public Group getGroup() { return cGroup; }

		//{PreValueExpressionreturns}
		public Action getPreValueExpressionreturnsAction_0() { return cPreValueExpressionreturnsAction_0; }

		//"pre"
		public Keyword getPreKeyword_1() { return cPreKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//value=FeatureCall
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//FeatureCall
		public RuleCall getValueFeatureCallParserRuleCall_3_0() { return cValueFeatureCallParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	
	
	public class CombineOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "CombineOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNONEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNONENoneKeyword_0_0 = (Keyword)cNONEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cADDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cADDApostrophePlusSignApostropheKeyword_1_0 = (Keyword)cADDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMULTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMULTApostropheAsteriskApostropheKeyword_2_0 = (Keyword)cMULTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cMAXEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cMAXMaxKeyword_3_0 = (Keyword)cMAXEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cMINEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cMINMinKeyword_4_0 = (Keyword)cMINEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cOROrKeyword_5_0 = (Keyword)cOREnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cANDAndKeyword_6_0 = (Keyword)cANDEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cHOSTEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cHOSTHostKeyword_7_0 = (Keyword)cHOSTEnumLiteralDeclaration_7.eContents().get(0);
		
		/// ***************************************** COMBINE OPERATORS ************************************* * / enum
		//
		//CombineOperator:
		//
		//	NONE="\'none\'" | ADD="\'+\'" | MULT="\'*\'" | MAX="\'max\'" | MIN="\'min\'" | OR="\'or\'" | AND="\'and\'" |
		//
		//	HOST="\'host\'";
		public EnumRule getRule() { return rule; }

		//NONE="\'none\'" | ADD="\'+\'" | MULT="\'*\'" | MAX="\'max\'" | MIN="\'min\'" | OR="\'or\'" | AND="\'and\'" |
		//
		//HOST="\'host\'"
		public Alternatives getAlternatives() { return cAlternatives; }

		//NONE="\'none\'"
		public EnumLiteralDeclaration getNONEEnumLiteralDeclaration_0() { return cNONEEnumLiteralDeclaration_0; }

		//"\'none\'"
		public Keyword getNONENoneKeyword_0_0() { return cNONENoneKeyword_0_0; }

		//ADD="\'+\'"
		public EnumLiteralDeclaration getADDEnumLiteralDeclaration_1() { return cADDEnumLiteralDeclaration_1; }

		//"\'+\'"
		public Keyword getADDApostrophePlusSignApostropheKeyword_1_0() { return cADDApostrophePlusSignApostropheKeyword_1_0; }

		//MULT="\'*\'"
		public EnumLiteralDeclaration getMULTEnumLiteralDeclaration_2() { return cMULTEnumLiteralDeclaration_2; }

		//"\'*\'"
		public Keyword getMULTApostropheAsteriskApostropheKeyword_2_0() { return cMULTApostropheAsteriskApostropheKeyword_2_0; }

		//MAX="\'max\'"
		public EnumLiteralDeclaration getMAXEnumLiteralDeclaration_3() { return cMAXEnumLiteralDeclaration_3; }

		//"\'max\'"
		public Keyword getMAXMaxKeyword_3_0() { return cMAXMaxKeyword_3_0; }

		//MIN="\'min\'"
		public EnumLiteralDeclaration getMINEnumLiteralDeclaration_4() { return cMINEnumLiteralDeclaration_4; }

		//"\'min\'"
		public Keyword getMINMinKeyword_4_0() { return cMINMinKeyword_4_0; }

		//OR="\'or\'"
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_5() { return cOREnumLiteralDeclaration_5; }

		//"\'or\'"
		public Keyword getOROrKeyword_5_0() { return cOROrKeyword_5_0; }

		//AND="\'and\'"
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_6() { return cANDEnumLiteralDeclaration_6; }

		//"\'and\'"
		public Keyword getANDAndKeyword_6_0() { return cANDAndKeyword_6_0; }

		//HOST="\'host\'"
		public EnumLiteralDeclaration getHOSTEnumLiteralDeclaration_7() { return cHOSTEnumLiteralDeclaration_7; }

		//"\'host\'"
		public Keyword getHOSTHostKeyword_7_0() { return cHOSTHostKeyword_7_0; }
	}

	public class VarDirectionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "VarDirection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINOUTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cINOUTInputoututKeyword_0_0 = (Keyword)cINOUTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cINEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cINInputKeyword_1_0 = (Keyword)cINEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cOUTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cOUTOutputKeyword_2_0 = (Keyword)cOUTEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum VarDirection:
		//
		//	INOUT="inputoutut" | IN="input" | OUT="output";
		public EnumRule getRule() { return rule; }

		//INOUT="inputoutut" | IN="input" | OUT="output"
		public Alternatives getAlternatives() { return cAlternatives; }

		//INOUT="inputoutut"
		public EnumLiteralDeclaration getINOUTEnumLiteralDeclaration_0() { return cINOUTEnumLiteralDeclaration_0; }

		//"inputoutut"
		public Keyword getINOUTInputoututKeyword_0_0() { return cINOUTInputoututKeyword_0_0; }

		//IN="input"
		public EnumLiteralDeclaration getINEnumLiteralDeclaration_1() { return cINEnumLiteralDeclaration_1; }

		//"input"
		public Keyword getINInputKeyword_1_0() { return cINInputKeyword_1_0; }

		//OUT="output"
		public EnumLiteralDeclaration getOUTEnumLiteralDeclaration_2() { return cOUTEnumLiteralDeclaration_2; }

		//"output"
		public Keyword getOUTOutputKeyword_2_0() { return cOUTOutputKeyword_2_0; }
	}
	
	private StateScopeElements pStateScope;
	private SignalDeclarationElements pSignalDeclaration;
	private SignalDefinitionElements pSignalDefinition;
	private VariableDefinitionElements pVariableDefinition;
	private LocalReactionElements pLocalReaction;
	private LocalReactionTriggerElements pLocalReactionTrigger;
	private LocalReactionEffectElements pLocalReactionEffect;
	private LocalReactionSpecElements pLocalReactionSpec;
	private StateReactionElements pStateReaction;
	private EntryElements pEntry;
	private InsideElements pInside;
	private ExitElements pExit;
	private ReactionTriggerElements pReactionTrigger;
	private PrimaryExpressionElements pPrimaryExpression;
	private PreValueExpressionreturnsElements pPreValueExpressionreturns;
	private CombineOperatorElements unknownRuleCombineOperator;
	private VarDirectionElements unknownRuleVarDirection;
	
	private final Grammar grammar;

	private STextGrammarAccess gaSText;

	@Inject
	public SCChartsExpGrammarAccess(GrammarProvider grammarProvider,
		STextGrammarAccess gaSText) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaSText = gaSText;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.cau.cs.kieler.yakindu.sccharts.model.scchartstext.SCChartsExp".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public STextGrammarAccess getSTextGrammarAccess() {
		return gaSText;
	}

	
	/// *********************************** INTERFACE DECLARATION **************************************** * / ////defines the possible scopes for a state
	//
	//StateScope:
	//
	//	{SimpleScope} declarations+=(VariableDeclaration | SignalDeclaration | LocalReaction)*;
	public StateScopeElements getStateScopeAccess() {
		return (pStateScope != null) ? pStateScope : (pStateScope = new StateScopeElements());
	}
	
	public ParserRule getStateScopeRule() {
		return getStateScopeAccess().getRule();
	}

	//SignalDeclaration returns sgraph::Event:
	//
	//	SignalDefinition;
	public SignalDeclarationElements getSignalDeclarationAccess() {
		return (pSignalDeclaration != null) ? pSignalDeclaration : (pSignalDeclaration = new SignalDeclarationElements());
	}
	
	public ParserRule getSignalDeclarationRule() {
		return getSignalDeclarationAccess().getRule();
	}

	//SignalDefinition:
	//
	//	{EventDefinition} "signal" name=ID ";";
	public SignalDefinitionElements getSignalDefinitionAccess() {
		return (pSignalDefinition != null) ? pSignalDefinition : (pSignalDefinition = new SignalDefinitionElements());
	}
	
	public ParserRule getSignalDefinitionRule() {
		return getSignalDefinitionAccess().getRule();
	}

	////StateScope returns sgraph::Scope:
	//
	////	InterfaceScope;// | ReactionScope;
	//
	/// ************************************************ / / *			  INTERFACE DECLARATION				* /
	//
	/// ************************************************ / //override the SText InterfaceScope rule
	//
	//// The InterfaceScope rule specifies that a InterfaceScope starts with 
	//
	//// the literal 'interface :', followed by one or more interface declaration variables
	//
	////InterfaceScope:
	//
	////	{InterfaceScope} 'interface' ':' declarations+=VariableDeclaration (','
	//
	////	declarations+=VariableDeclaration)* ';';
	//
	/// ************************************************ / / *			 Variable Definition				* /
	//
	/// ************************************************ / // Override the SText VariableDefinition rule
	//
	//// A variable is a Declaration. It has a Direction, a Name, a Type, an InitialValue and a CombineOperator
	//
	/// * ---- variable definition ---- * / VariableDefinition:
	//
	//	{VariableDefinition} direction=VarDirection? isStatic?="static"? type=[types::Type|FQN] name=ID ("="
	//
	//	varInitialValue=Expression)? ("with" varCombineOperator=CombineOperator)? ";";
	public VariableDefinitionElements getVariableDefinitionAccess() {
		return (pVariableDefinition != null) ? pVariableDefinition : (pVariableDefinition = new VariableDefinitionElements());
	}
	
	public ParserRule getVariableDefinitionRule() {
		return getVariableDefinitionAccess().getRule();
	}

	/// ************************************************ / / *			 	ReactionScope					* /
	//
	/// ************************************************ / LocalReaction:
	//
	//	trigger=LocalReactionTrigger => ("/" effect=LocalReactionEffect);
	public LocalReactionElements getLocalReactionAccess() {
		return (pLocalReaction != null) ? pLocalReaction : (pLocalReaction = new LocalReactionElements());
	}
	
	public ParserRule getLocalReactionRule() {
		return getLocalReactionAccess().getRule();
	}

	//LocalReactionTrigger returns sgraph::Trigger:
	//
	//	{ReactionTrigger} (triggers+=LocalReactionSpec ("," triggers+=LocalReactionSpec)* ("[" guardExpression=Expression
	//
	//	"]")? | "[" guardExpression=Expression "]");
	public LocalReactionTriggerElements getLocalReactionTriggerAccess() {
		return (pLocalReactionTrigger != null) ? pLocalReactionTrigger : (pLocalReactionTrigger = new LocalReactionTriggerElements());
	}
	
	public ParserRule getLocalReactionTriggerRule() {
		return getLocalReactionTriggerAccess().getRule();
	}

	//// (';')?;
	//
	//LocalReactionEffect returns sgraph::Effect:
	//
	//	{ReactionEffect} actions+=Expression (";" actions+=Expression)*;
	public LocalReactionEffectElements getLocalReactionEffectAccess() {
		return (pLocalReactionEffect != null) ? pLocalReactionEffect : (pLocalReactionEffect = new LocalReactionEffectElements());
	}
	
	public ParserRule getLocalReactionEffectRule() {
		return getLocalReactionEffectAccess().getRule();
	}

	//LocalReactionSpec returns stext::EventSpec:
	//
	//	RegularEventSpec | StateReaction;
	public LocalReactionSpecElements getLocalReactionSpecAccess() {
		return (pLocalReactionSpec != null) ? pLocalReactionSpec : (pLocalReactionSpec = new LocalReactionSpecElements());
	}
	
	public ParserRule getLocalReactionSpecRule() {
		return getLocalReactionSpecAccess().getRule();
	}

	//StateReaction:
	//
	//	Entry | Inside | Exit;
	public StateReactionElements getStateReactionAccess() {
		return (pStateReaction != null) ? pStateReaction : (pStateReaction = new StateReactionElements());
	}
	
	public ParserRule getStateReactionRule() {
		return getStateReactionAccess().getRule();
	}

	//Entry:
	//
	//	{Entry} "Entry";
	public EntryElements getEntryAccess() {
		return (pEntry != null) ? pEntry : (pEntry = new EntryElements());
	}
	
	public ParserRule getEntryRule() {
		return getEntryAccess().getRule();
	}

	//Inside:
	//
	//	{Inside} "During";
	public InsideElements getInsideAccess() {
		return (pInside != null) ? pInside : (pInside = new InsideElements());
	}
	
	public ParserRule getInsideRule() {
		return getInsideAccess().getRule();
	}

	//Exit:
	//
	//	{Exit} "Exit";
	public ExitElements getExitAccess() {
		return (pExit != null) ? pExit : (pExit = new ExitElements());
	}
	
	public ParserRule getExitRule() {
		return getExitAccess().getRule();
	}

	////ReactionScope:
	//
	////	reactionScope+=(EntryAction | InsideAction | ExitAction | Suspend);
	//
	////
	//
	////ExitAction returns sgraph::Effect:
	//
	////	{ExitAction} 'Exit' ':' '/' effect=ReactionEffect ';';
	//
	////
	//
	////InsideAction returns sgraph::Effect:
	//
	////	{InsideAction} 'Inside' ':' '/' effect=ReactionEffect ';';
	//
	////
	//
	////EntryAction returns sgraph::Effect:
	//
	////	{EntryAction} 'Entry' ':' '/' effect=ReactionEffect ';';
	//
	/// ************************************************ / / *			 		SUSPEND 					* /
	//
	/// ************************************************ / // The  SuspendDeclaration is a Trigger
	//
	////TODO: only variables already declared in the interface 
	//
	////Suspend returns sgraph::Trigger:
	//
	////	{Suspend} 'Suspend' ':' trigger=ReactionTrigger ';';
	//
	/// ******************************************** TRANSITION ***************************************** * / // The ReactionTrigger is a Trigger and has an Expression, 
	//
	//// an optional delay and isImmediate option represented with a '#'
	//
	//ReactionTrigger returns sgraph::Trigger:
	//
	//	{ReactionTrigger} isImmediate?="#"? delay=INT? (triggers+=EventSpec ("," triggers+=EventSpec)* ("["
	//
	//	guardExpression=Expression "]")? | "[" guardExpression=Expression "]");
	public ReactionTriggerElements getReactionTriggerAccess() {
		return (pReactionTrigger != null) ? pReactionTrigger : (pReactionTrigger = new ReactionTriggerElements());
	}
	
	public ParserRule getReactionTriggerRule() {
		return getReactionTriggerAccess().getRule();
	}

	//// The ReactionEffect is an Effect. 
	//
	////ReactionEffect returns sgraph::Effect:
	//
	////	{ReactionEffect} actions+=Expression (=> ';' actions+=Expression)*; // (';')?;
	//
	/// ***************************************** Expressions ******************************************* * / // Override the stext::PrimaryExpression
	//
	//// remove the ActiveStateReferenceExpression and the EventValueReferenceExpression
	//
	//// and add PreValueExpressionreturns that returns the value of a variable in the previous tick. 
	//
	//PrimaryExpression returns stext::Expression:
	//
	//	PrimitiveValueExpression | FeatureCall | PreValueExpressionreturns | "(" Expression ")";
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return (pPrimaryExpression != null) ? pPrimaryExpression : (pPrimaryExpression = new PrimaryExpressionElements());
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//PreValueExpressionreturns returns stext::Expression:
	//
	//	{PreValueExpressionreturns} "pre" "(" value=FeatureCall ")";
	public PreValueExpressionreturnsElements getPreValueExpressionreturnsAccess() {
		return (pPreValueExpressionreturns != null) ? pPreValueExpressionreturns : (pPreValueExpressionreturns = new PreValueExpressionreturnsElements());
	}
	
	public ParserRule getPreValueExpressionreturnsRule() {
		return getPreValueExpressionreturnsAccess().getRule();
	}

	/// ***************************************** COMBINE OPERATORS ************************************* * / enum
	//
	//CombineOperator:
	//
	//	NONE="\'none\'" | ADD="\'+\'" | MULT="\'*\'" | MAX="\'max\'" | MIN="\'min\'" | OR="\'or\'" | AND="\'and\'" |
	//
	//	HOST="\'host\'";
	public CombineOperatorElements getCombineOperatorAccess() {
		return (unknownRuleCombineOperator != null) ? unknownRuleCombineOperator : (unknownRuleCombineOperator = new CombineOperatorElements());
	}
	
	public EnumRule getCombineOperatorRule() {
		return getCombineOperatorAccess().getRule();
	}

	//enum VarDirection:
	//
	//	INOUT="inputoutut" | IN="input" | OUT="output";
	public VarDirectionElements getVarDirectionAccess() {
		return (unknownRuleVarDirection != null) ? unknownRuleVarDirection : (unknownRuleVarDirection = new VarDirectionElements());
	}
	
	public EnumRule getVarDirectionRule() {
		return getVarDirectionAccess().getRule();
	}

	/// * ---- root rules ----
	//These root rules are not relevant for the grammar integration in the statechart. They just integrate the different start rules consistently 
	//into a single grammar. 
	// * /
	//
	//Root:
	//
	//	roots+=DefRoot*;
	public STextGrammarAccess.RootElements getRootAccess() {
		return gaSText.getRootAccess();
	}
	
	public ParserRule getRootRule() {
		return getRootAccess().getRule();
	}

	//DefRoot:
	//
	//	StatechartRoot | StateRoot | TransitionRoot;
	public STextGrammarAccess.DefRootElements getDefRootAccess() {
		return gaSText.getDefRootAccess();
	}
	
	public ParserRule getDefRootRule() {
		return getDefRootAccess().getRule();
	}

	//StatechartRoot:
	//
	//	"@@statechart@@" def=StatechartSpecification;
	public STextGrammarAccess.StatechartRootElements getStatechartRootAccess() {
		return gaSText.getStatechartRootAccess();
	}
	
	public ParserRule getStatechartRootRule() {
		return getStatechartRootAccess().getRule();
	}

	//StateRoot:
	//
	//	"@@state@@" def=StateSpecification;
	public STextGrammarAccess.StateRootElements getStateRootAccess() {
		return gaSText.getStateRootAccess();
	}
	
	public ParserRule getStateRootRule() {
		return getStateRootAccess().getRule();
	}

	//TransitionRoot:
	//
	//	"@@transition@@" def=TransitionSpecification;
	public STextGrammarAccess.TransitionRootElements getTransitionRootAccess() {
		return gaSText.getTransitionRootAccess();
	}
	
	public ParserRule getTransitionRootRule() {
		return getTransitionRootAccess().getRule();
	}

	/// * ---- start rules ----
	//Define the starting points used by the statechart integration. These rules hook in the concrete rules of the specific grammar.
	// * /
	//
	//ScopedElement returns sgraph::ScopedElement:
	//
	//	StatechartSpecification;
	public STextGrammarAccess.ScopedElementElements getScopedElementAccess() {
		return gaSText.getScopedElementAccess();
	}
	
	public ParserRule getScopedElementRule() {
		return getScopedElementAccess().getRule();
	}

	//StatechartSpecification:
	//
	//	{StatechartSpecification} ("namespace" namespace=FQN)? scopes+=StatechartScope*;
	public STextGrammarAccess.StatechartSpecificationElements getStatechartSpecificationAccess() {
		return gaSText.getStatechartSpecificationAccess();
	}
	
	public ParserRule getStatechartSpecificationRule() {
		return getStatechartSpecificationAccess().getRule();
	}

	//StateSpecification:
	//
	//	scope=StateScope;
	public STextGrammarAccess.StateSpecificationElements getStateSpecificationAccess() {
		return gaSText.getStateSpecificationAccess();
	}
	
	public ParserRule getStateSpecificationRule() {
		return getStateSpecificationAccess().getRule();
	}

	//TransitionSpecification:
	//
	//	reaction=TransitionReaction;
	public STextGrammarAccess.TransitionSpecificationElements getTransitionSpecificationAccess() {
		return gaSText.getTransitionSpecificationAccess();
	}
	
	public ParserRule getTransitionSpecificationRule() {
		return getTransitionSpecificationAccess().getRule();
	}

	/// * ---- scope rules ----
	//Defines different kinds of scopes that contain element definitions. Scopes are used for element definitions in statechart, regions, and state 
	// * /
	//
	//Scope returns sgraph::Scope:
	//
	//	StateScope | StatechartScope;
	public STextGrammarAccess.ScopeElements getScopeAccess() {
		return gaSText.getScopeAccess();
	}
	
	public ParserRule getScopeRule() {
		return getScopeAccess().getRule();
	}

	//// defines the poosible scopes for statecharts
	// StatechartScope:
	//
	//	InterfaceScope | InternalScope;
	public STextGrammarAccess.StatechartScopeElements getStatechartScopeAccess() {
		return gaSText.getStatechartScopeAccess();
	}
	
	public ParserRule getStatechartScopeRule() {
		return getStatechartScopeAccess().getRule();
	}

	//NamedInterfaceScope returns base::NamedElement:
	//
	//	InterfaceScope;
	public STextGrammarAccess.NamedInterfaceScopeElements getNamedInterfaceScopeAccess() {
		return gaSText.getNamedInterfaceScopeAccess();
	}
	
	public ParserRule getNamedInterfaceScopeRule() {
		return getNamedInterfaceScopeAccess().getRule();
	}

	//InterfaceScope:
	//
	//	{InterfaceScope} "interface" name=ID? ":" declarations+=(EventDeclarartion | VariableDeclaration |
	//
	//	OperationDeclaration | Entrypoint | Exitpoint)*;
	public STextGrammarAccess.InterfaceScopeElements getInterfaceScopeAccess() {
		return gaSText.getInterfaceScopeAccess();
	}
	
	public ParserRule getInterfaceScopeRule() {
		return getInterfaceScopeAccess().getRule();
	}

	//InternalScope:
	//
	//	{InternalScope} "internal" ":" declarations+=(EventDeclarartion | VariableDeclaration | OperationDeclaration |
	//
	//	LocalReaction)*;
	public STextGrammarAccess.InternalScopeElements getInternalScopeAccess() {
		return gaSText.getInternalScopeAccess();
	}
	
	public ParserRule getInternalScopeRule() {
		return getInternalScopeAccess().getRule();
	}

	/// * ---- declarations ----
	//a definition is a top level element of a definition scope. * / Declaration returns
	//
	//sgraph::Declaration:
	//
	//	EventDeclarartion | VariableDeclaration | OperationDeclaration | LocalReaction | Entrypoint | Exitpoint;
	public STextGrammarAccess.DeclarationElements getDeclarationAccess() {
		return gaSText.getDeclarationAccess();
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}

	/// * ---- event definition ---- * / EventDeclarartion returns sgraph::Event:
	//
	//	EventDefinition;
	public STextGrammarAccess.EventDeclarartionElements getEventDeclarartionAccess() {
		return gaSText.getEventDeclarartionAccess();
	}
	
	public ParserRule getEventDeclarartionRule() {
		return getEventDeclarartionAccess().getRule();
	}

	//EventFeature returns types::Event:
	//
	//	EventDefinition;
	public STextGrammarAccess.EventFeatureElements getEventFeatureAccess() {
		return gaSText.getEventFeatureAccess();
	}
	
	public ParserRule getEventFeatureRule() {
		return getEventFeatureAccess().getRule();
	}

	//// (derivation=EventDerivation)?;
	// EventDefinition:
	//
	//	direction=Direction? "event" name=ID (":" type=[types::Type|FQN])?;
	public STextGrammarAccess.EventDefinitionElements getEventDefinitionAccess() {
		return gaSText.getEventDefinitionAccess();
	}
	
	public ParserRule getEventDefinitionRule() {
		return getEventDefinitionAccess().getRule();
	}

	////EventDerivation:
	// //	 (':' value=Expression)?;
	// enum Direction:
	//
	//	LOCAL="local" | IN="in" | OUT="out";
	public STextGrammarAccess.DirectionElements getDirectionAccess() {
		return gaSText.getDirectionAccess();
	}
	
	public EnumRule getDirectionRule() {
		return getDirectionAccess().getRule();
	}

	/// * ---- variable definition ---- * / VariableDeclaration returns sgraph::Variable:
	//
	//	VariableDefinition;
	public STextGrammarAccess.VariableDeclarationElements getVariableDeclarationAccess() {
		return gaSText.getVariableDeclarationAccess();
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}

	//VariableFeature returns types::Property:
	//
	//	VariableDefinition;
	public STextGrammarAccess.VariableFeatureElements getVariableFeatureAccess() {
		return gaSText.getVariableFeatureAccess();
	}
	
	public ParserRule getVariableFeatureRule() {
		return getVariableFeatureAccess().getRule();
	}

	/// * ---- operation definition ---- * / OperationDeclaration returns sgraph::Declaration:
	//
	//	OperationDefinition;
	public STextGrammarAccess.OperationDeclarationElements getOperationDeclarationAccess() {
		return gaSText.getOperationDeclarationAccess();
	}
	
	public ParserRule getOperationDeclarationRule() {
		return getOperationDeclarationAccess().getRule();
	}

	//OperationFeature returns types::Operation:
	//
	//	OperationDefinition;
	public STextGrammarAccess.OperationFeatureElements getOperationFeatureAccess() {
		return gaSText.getOperationFeatureAccess();
	}
	
	public ParserRule getOperationFeatureRule() {
		return getOperationFeatureAccess().getRule();
	}

	//OperationDefinition:
	//
	//	{OperationDefinition} "operation" name=ID "(" (parameters+=Parameter ("," parameters+=Parameter)*)? ")" (":"
	//
	//	type=[types::Type|FQN])?;
	public STextGrammarAccess.OperationDefinitionElements getOperationDefinitionAccess() {
		return gaSText.getOperationDefinitionAccess();
	}
	
	public ParserRule getOperationDefinitionRule() {
		return getOperationDefinitionAccess().getRule();
	}

	//Parameter returns types::Parameter:
	//
	//	name=ID ":" type=[types::Type|FQN];
	public STextGrammarAccess.ParameterElements getParameterAccess() {
		return gaSText.getParameterAccess();
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	/// * ---- entrypoint definition ---- * / Entrypoint returns sgraph::Declaration:
	//
	//	{Entrypoint} "entrypoint" name=ID;
	public STextGrammarAccess.EntrypointElements getEntrypointAccess() {
		return gaSText.getEntrypointAccess();
	}
	
	public ParserRule getEntrypointRule() {
		return getEntrypointAccess().getRule();
	}

	/// * ---- exitpoint definition ---- * / Exitpoint returns sgraph::Declaration:
	//
	//	{Exitpoint} "exitpoint" name=ID;
	public STextGrammarAccess.ExitpointElements getExitpointAccess() {
		return gaSText.getExitpointAccess();
	}
	
	public ParserRule getExitpointRule() {
		return getExitpointAccess().getRule();
	}

	/// * ---- Datatype rules ---- * / FQN:
	//
	//	ID ("." ID)*;
	public STextGrammarAccess.FQNElements getFQNAccess() {
		return gaSText.getFQNAccess();
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}

	/// * ---- reaction rules ----
	//Define the structure of reactions that are central for describing the statecharts behavior. 
	// * /
	//
	//Reaction returns sgraph::Reaction:
	//
	//	LocalReaction | TransitionReaction;
	public STextGrammarAccess.ReactionElements getReactionAccess() {
		return gaSText.getReactionAccess();
	}
	
	public ParserRule getReactionRule() {
		return getReactionAccess().getRule();
	}

	//TransitionReaction:
	//
	//	{TransitionReaction} trigger=ReactionTrigger? ("/" effect=ReactionEffect)? ("#" properties=ReactionProperties)?;
	public STextGrammarAccess.TransitionReactionElements getTransitionReactionAccess() {
		return gaSText.getTransitionReactionAccess();
	}
	
	public ParserRule getTransitionReactionRule() {
		return getTransitionReactionAccess().getRule();
	}

	//// (';')?;
	// ReactionEffect returns sgraph::Effect:
	//
	//	{ReactionEffect} actions+=(Expression | EventRaisingExpression) (";" actions+=(Expression |
	//
	//	EventRaisingExpression))*;
	public STextGrammarAccess.ReactionEffectElements getReactionEffectAccess() {
		return gaSText.getReactionEffectAccess();
	}
	
	public ParserRule getReactionEffectRule() {
		return getReactionEffectAccess().getRule();
	}

	//ReactionProperties:
	//
	//	{ReactionProperties} properties+=ReactionProperty*;
	public STextGrammarAccess.ReactionPropertiesElements getReactionPropertiesAccess() {
		return gaSText.getReactionPropertiesAccess();
	}
	
	public ParserRule getReactionPropertiesRule() {
		return getReactionPropertiesAccess().getRule();
	}

	//ReactionProperty:
	//
	//	EntryPointSpec | ExitPointSpec;
	public STextGrammarAccess.ReactionPropertyElements getReactionPropertyAccess() {
		return gaSText.getReactionPropertyAccess();
	}
	
	public ParserRule getReactionPropertyRule() {
		return getReactionPropertyAccess().getRule();
	}

	//EntryPointSpec:
	//
	//	">" entrypoint=[Entrypoint|FQN];
	public STextGrammarAccess.EntryPointSpecElements getEntryPointSpecAccess() {
		return gaSText.getEntryPointSpecAccess();
	}
	
	public ParserRule getEntryPointSpecRule() {
		return getEntryPointSpecAccess().getRule();
	}

	//ExitPointSpec:
	//
	//	exitpoint=[Exitpoint|FQN] ">";
	public STextGrammarAccess.ExitPointSpecElements getExitPointSpecAccess() {
		return gaSText.getExitPointSpecAccess();
	}
	
	public ParserRule getExitPointSpecRule() {
		return getExitPointSpecAccess().getRule();
	}

	//EventSpec:
	//
	//	RegularEventSpec | TimeEventSpec | BuiltinEventSpec;
	public STextGrammarAccess.EventSpecElements getEventSpecAccess() {
		return gaSText.getEventSpecAccess();
	}
	
	public ParserRule getEventSpecRule() {
		return getEventSpecAccess().getRule();
	}

	//RegularEventSpec:
	//
	//	event=FeatureCall;
	public STextGrammarAccess.RegularEventSpecElements getRegularEventSpecAccess() {
		return gaSText.getRegularEventSpecAccess();
	}
	
	public ParserRule getRegularEventSpecRule() {
		return getRegularEventSpecAccess().getRule();
	}

	//// TODO: redefine after trigger - we need to use it with clocks
	// TimeEventSpec:
	//
	//	type=TimeEventType value=INT unit=TimeUnit?;
	public STextGrammarAccess.TimeEventSpecElements getTimeEventSpecAccess() {
		return gaSText.getTimeEventSpecAccess();
	}
	
	public ParserRule getTimeEventSpecRule() {
		return getTimeEventSpecAccess().getRule();
	}

	//enum TimeEventType:
	//
	//	after | every;
	public STextGrammarAccess.TimeEventTypeElements getTimeEventTypeAccess() {
		return gaSText.getTimeEventTypeAccess();
	}
	
	public EnumRule getTimeEventTypeRule() {
		return getTimeEventTypeAccess().getRule();
	}

	////TODO: Group OnCycleEvent and AlwaysEvent, maybe replace it by a DoEvent
	// BuiltinEventSpec:
	//
	//	EntryEvent | ExitEvent | OnCycleEvent | AlwaysEvent | DefaultEvent;
	public STextGrammarAccess.BuiltinEventSpecElements getBuiltinEventSpecAccess() {
		return gaSText.getBuiltinEventSpecAccess();
	}
	
	public ParserRule getBuiltinEventSpecRule() {
		return getBuiltinEventSpecAccess().getRule();
	}

	//EntryEvent:
	//
	//	{EntryEvent} "entry";
	public STextGrammarAccess.EntryEventElements getEntryEventAccess() {
		return gaSText.getEntryEventAccess();
	}
	
	public ParserRule getEntryEventRule() {
		return getEntryEventAccess().getRule();
	}

	//ExitEvent:
	//
	//	{ExitEvent} "exit";
	public STextGrammarAccess.ExitEventElements getExitEventAccess() {
		return gaSText.getExitEventAccess();
	}
	
	public ParserRule getExitEventRule() {
		return getExitEventAccess().getRule();
	}

	//OnCycleEvent:
	//
	//	{OnCycleEvent} "oncycle";
	public STextGrammarAccess.OnCycleEventElements getOnCycleEventAccess() {
		return gaSText.getOnCycleEventAccess();
	}
	
	public ParserRule getOnCycleEventRule() {
		return getOnCycleEventAccess().getRule();
	}

	//AlwaysEvent:
	//
	//	{AlwaysEvent} "always";
	public STextGrammarAccess.AlwaysEventElements getAlwaysEventAccess() {
		return gaSText.getAlwaysEventAccess();
	}
	
	public ParserRule getAlwaysEventRule() {
		return getAlwaysEventAccess().getRule();
	}

	//DefaultEvent:
	//
	//	{DefaultEvent} ("default" | "else");
	public STextGrammarAccess.DefaultEventElements getDefaultEventAccess() {
		return gaSText.getDefaultEventAccess();
	}
	
	public ParserRule getDefaultEventRule() {
		return getDefaultEventAccess().getRule();
	}

	//// ****************
	// // Expression Grammar
	// // ****************
	// EventRaisingExpression returns Expression:
	//
	//	{EventRaisingExpression} "raise" event=FeatureCall (":" value=Expression)?;
	public STextGrammarAccess.EventRaisingExpressionElements getEventRaisingExpressionAccess() {
		return gaSText.getEventRaisingExpressionAccess();
	}
	
	public ParserRule getEventRaisingExpressionRule() {
		return getEventRaisingExpressionAccess().getRule();
	}

	//StatementExpression returns sgraph::Statement:
	//
	//	Expression;
	public STextGrammarAccess.StatementExpressionElements getStatementExpressionAccess() {
		return gaSText.getStatementExpressionAccess();
	}
	
	public ParserRule getStatementExpressionRule() {
		return getStatementExpressionAccess().getRule();
	}

	//Expression:
	//
	//	AssignmentExpression;
	public STextGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaSText.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//AssignmentExpression returns Expression:
	//
	//	ConditionalExpression ({AssignmentExpression.varRef=current} operator=AssignmentOperator
	//
	//	expression=ConditionalExpression)*;
	public STextGrammarAccess.AssignmentExpressionElements getAssignmentExpressionAccess() {
		return gaSText.getAssignmentExpressionAccess();
	}
	
	public ParserRule getAssignmentExpressionRule() {
		return getAssignmentExpressionAccess().getRule();
	}

	//ConditionalExpression returns Expression:
	//
	//	LogicalOrExpression ({ConditionalExpression.condition=current} "?" trueCase=LogicalOrExpression ":"
	//
	//	falseCase=LogicalOrExpression)?;
	public STextGrammarAccess.ConditionalExpressionElements getConditionalExpressionAccess() {
		return gaSText.getConditionalExpressionAccess();
	}
	
	public ParserRule getConditionalExpressionRule() {
		return getConditionalExpressionAccess().getRule();
	}

	//LogicalOrExpression returns Expression:
	//
	//	LogicalAndExpression ({LogicalOrExpression.leftOperand=current} "||" rightOperand=LogicalAndExpression)*;
	public STextGrammarAccess.LogicalOrExpressionElements getLogicalOrExpressionAccess() {
		return gaSText.getLogicalOrExpressionAccess();
	}
	
	public ParserRule getLogicalOrExpressionRule() {
		return getLogicalOrExpressionAccess().getRule();
	}

	//LogicalAndExpression returns Expression:
	//
	//	LogicalNotExpression ({LogicalAndExpression.leftOperand=current} "&&" rightOperand=LogicalNotExpression)*;
	public STextGrammarAccess.LogicalAndExpressionElements getLogicalAndExpressionAccess() {
		return gaSText.getLogicalAndExpressionAccess();
	}
	
	public ParserRule getLogicalAndExpressionRule() {
		return getLogicalAndExpressionAccess().getRule();
	}

	//LogicalNotExpression returns Expression:
	//
	//	BitwiseXorExpression | {LogicalNotExpression} "!" operand=BitwiseXorExpression;
	public STextGrammarAccess.LogicalNotExpressionElements getLogicalNotExpressionAccess() {
		return gaSText.getLogicalNotExpressionAccess();
	}
	
	public ParserRule getLogicalNotExpressionRule() {
		return getLogicalNotExpressionAccess().getRule();
	}

	//BitwiseXorExpression returns Expression:
	//
	//	BitwiseOrExpression ({BitwiseXorExpression.leftOperand=current} "^" rightOperand=BitwiseOrExpression)*;
	public STextGrammarAccess.BitwiseXorExpressionElements getBitwiseXorExpressionAccess() {
		return gaSText.getBitwiseXorExpressionAccess();
	}
	
	public ParserRule getBitwiseXorExpressionRule() {
		return getBitwiseXorExpressionAccess().getRule();
	}

	//BitwiseOrExpression returns Expression:
	//
	//	BitwiseAndExpression ({BitwiseOrExpression.leftOperand=current} "|" rightOperand=BitwiseAndExpression)*;
	public STextGrammarAccess.BitwiseOrExpressionElements getBitwiseOrExpressionAccess() {
		return gaSText.getBitwiseOrExpressionAccess();
	}
	
	public ParserRule getBitwiseOrExpressionRule() {
		return getBitwiseOrExpressionAccess().getRule();
	}

	//BitwiseAndExpression returns Expression:
	//
	//	LogicalRelationExpression ({BitwiseAndExpression.leftOperand=current} "&" rightOperand=LogicalRelationExpression)*;
	public STextGrammarAccess.BitwiseAndExpressionElements getBitwiseAndExpressionAccess() {
		return gaSText.getBitwiseAndExpressionAccess();
	}
	
	public ParserRule getBitwiseAndExpressionRule() {
		return getBitwiseAndExpressionAccess().getRule();
	}

	//LogicalRelationExpression returns Expression:
	//
	//	ShiftExpression ({LogicalRelationExpression.leftOperand=current} operator=RelationalOperator
	//
	//	rightOperand=ShiftExpression)*;
	public STextGrammarAccess.LogicalRelationExpressionElements getLogicalRelationExpressionAccess() {
		return gaSText.getLogicalRelationExpressionAccess();
	}
	
	public ParserRule getLogicalRelationExpressionRule() {
		return getLogicalRelationExpressionAccess().getRule();
	}

	//ShiftExpression returns Expression:
	//
	//	NumericalAddSubtractExpression ({ShiftExpression.leftOperand=current} operator=ShiftOperator
	//
	//	rightOperand=NumericalAddSubtractExpression)*;
	public STextGrammarAccess.ShiftExpressionElements getShiftExpressionAccess() {
		return gaSText.getShiftExpressionAccess();
	}
	
	public ParserRule getShiftExpressionRule() {
		return getShiftExpressionAccess().getRule();
	}

	//NumericalAddSubtractExpression returns Expression:
	//
	//	NumericalMultiplyDivideExpression ({NumericalAddSubtractExpression.leftOperand=current} operator=AdditiveOperator
	//
	//	rightOperand=NumericalMultiplyDivideExpression)*;
	public STextGrammarAccess.NumericalAddSubtractExpressionElements getNumericalAddSubtractExpressionAccess() {
		return gaSText.getNumericalAddSubtractExpressionAccess();
	}
	
	public ParserRule getNumericalAddSubtractExpressionRule() {
		return getNumericalAddSubtractExpressionAccess().getRule();
	}

	//NumericalMultiplyDivideExpression returns Expression:
	//
	//	NumericalUnaryExpression ({NumericalMultiplyDivideExpression.leftOperand=current} operator=MultiplicativeOperator
	//
	//	rightOperand=NumericalUnaryExpression)*;
	public STextGrammarAccess.NumericalMultiplyDivideExpressionElements getNumericalMultiplyDivideExpressionAccess() {
		return gaSText.getNumericalMultiplyDivideExpressionAccess();
	}
	
	public ParserRule getNumericalMultiplyDivideExpressionRule() {
		return getNumericalMultiplyDivideExpressionAccess().getRule();
	}

	//NumericalUnaryExpression returns Expression:
	//
	//	PrimaryExpression | {NumericalUnaryExpression} operator=UnaryOperator operand=PrimaryExpression;
	public STextGrammarAccess.NumericalUnaryExpressionElements getNumericalUnaryExpressionAccess() {
		return gaSText.getNumericalUnaryExpressionAccess();
	}
	
	public ParserRule getNumericalUnaryExpressionRule() {
		return getNumericalUnaryExpressionAccess().getRule();
	}

	//PrimitiveValueExpression returns Expression:
	//
	//	{PrimitiveValueExpression} value=Literal;
	public STextGrammarAccess.PrimitiveValueExpressionElements getPrimitiveValueExpressionAccess() {
		return gaSText.getPrimitiveValueExpressionAccess();
	}
	
	public ParserRule getPrimitiveValueExpressionRule() {
		return getPrimitiveValueExpressionAccess().getRule();
	}

	//FeatureCall returns Expression:
	//
	//	ElementReferenceExpression ({FeatureCall.owner=current} "." feature=[ecore::EObject] (=> operationCall?="("
	//
	//	(args+=Expression ("," args+=Expression)*)? ")")?)*;
	public STextGrammarAccess.FeatureCallElements getFeatureCallAccess() {
		return gaSText.getFeatureCallAccess();
	}
	
	public ParserRule getFeatureCallRule() {
		return getFeatureCallAccess().getRule();
	}

	//ElementReferenceExpression returns Expression:
	//
	//	{ElementReferenceExpression} reference=[ecore::EObject] (=> operationCall?="(" (args+=Expression (","
	//
	//	args+=Expression)*)? ")")?;
	public STextGrammarAccess.ElementReferenceExpressionElements getElementReferenceExpressionAccess() {
		return gaSText.getElementReferenceExpressionAccess();
	}
	
	public ParserRule getElementReferenceExpressionRule() {
		return getElementReferenceExpressionAccess().getRule();
	}

	//EventValueReferenceExpression returns Expression:
	//
	//	{EventValueReferenceExpression} "valueof" "(" value=FeatureCall ")";
	public STextGrammarAccess.EventValueReferenceExpressionElements getEventValueReferenceExpressionAccess() {
		return gaSText.getEventValueReferenceExpressionAccess();
	}
	
	public ParserRule getEventValueReferenceExpressionRule() {
		return getEventValueReferenceExpressionAccess().getRule();
	}

	//ActiveStateReferenceExpression returns Expression:
	//
	//	{ActiveStateReferenceExpression} "active" "(" value=[sgraph::State|FQN] ")";
	public STextGrammarAccess.ActiveStateReferenceExpressionElements getActiveStateReferenceExpressionAccess() {
		return gaSText.getActiveStateReferenceExpressionAccess();
	}
	
	public ParserRule getActiveStateReferenceExpressionRule() {
		return getActiveStateReferenceExpressionAccess().getRule();
	}

	//Literal:
	//
	//	BoolLiteral | IntLiteral | HexLiteral | RealLiteral | StringLiteral;
	public STextGrammarAccess.LiteralElements getLiteralAccess() {
		return gaSText.getLiteralAccess();
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//BoolLiteral:
	//
	//	{BoolLiteral} value=BOOL;
	public STextGrammarAccess.BoolLiteralElements getBoolLiteralAccess() {
		return gaSText.getBoolLiteralAccess();
	}
	
	public ParserRule getBoolLiteralRule() {
		return getBoolLiteralAccess().getRule();
	}

	//IntLiteral:
	//
	//	{IntLiteral} value=INT;
	public STextGrammarAccess.IntLiteralElements getIntLiteralAccess() {
		return gaSText.getIntLiteralAccess();
	}
	
	public ParserRule getIntLiteralRule() {
		return getIntLiteralAccess().getRule();
	}

	//RealLiteral:
	//
	//	{RealLiteral} value=FLOAT;
	public STextGrammarAccess.RealLiteralElements getRealLiteralAccess() {
		return gaSText.getRealLiteralAccess();
	}
	
	public ParserRule getRealLiteralRule() {
		return getRealLiteralAccess().getRule();
	}

	//HexLiteral:
	//
	//	{HexLiteral} value=HEX;
	public STextGrammarAccess.HexLiteralElements getHexLiteralAccess() {
		return gaSText.getHexLiteralAccess();
	}
	
	public ParserRule getHexLiteralRule() {
		return getHexLiteralAccess().getRule();
	}

	//StringLiteral:
	//
	//	{StringLiteral} value=STRING;
	public STextGrammarAccess.StringLiteralElements getStringLiteralAccess() {
		return gaSText.getStringLiteralAccess();
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//enum AssignmentOperator:
	//
	//	assign="=" | multAssign="*=" | divAssign="/=" | modAssign="%=" | addAssign="+=" | subAssign="-=" |
	//
	//	leftShiftAssign="<<=" | rightShiftAssign=">>=" | andAssign="&=" | xorAssign="^=" | orAssign="|=";
	public STextGrammarAccess.AssignmentOperatorElements getAssignmentOperatorAccess() {
		return gaSText.getAssignmentOperatorAccess();
	}
	
	public EnumRule getAssignmentOperatorRule() {
		return getAssignmentOperatorAccess().getRule();
	}

	//enum ShiftOperator:
	//
	//	left="<<" | right=">>";
	public STextGrammarAccess.ShiftOperatorElements getShiftOperatorAccess() {
		return gaSText.getShiftOperatorAccess();
	}
	
	public EnumRule getShiftOperatorRule() {
		return getShiftOperatorAccess().getRule();
	}

	//enum AdditiveOperator:
	//
	//	plus="+" | minus="-";
	public STextGrammarAccess.AdditiveOperatorElements getAdditiveOperatorAccess() {
		return gaSText.getAdditiveOperatorAccess();
	}
	
	public EnumRule getAdditiveOperatorRule() {
		return getAdditiveOperatorAccess().getRule();
	}

	//enum MultiplicativeOperator:
	//
	//	mul="*" | div="/" | mod="%";
	public STextGrammarAccess.MultiplicativeOperatorElements getMultiplicativeOperatorAccess() {
		return gaSText.getMultiplicativeOperatorAccess();
	}
	
	public EnumRule getMultiplicativeOperatorRule() {
		return getMultiplicativeOperatorAccess().getRule();
	}

	//enum UnaryOperator:
	//
	//	positive="+" | negative="-" | complement="~";
	public STextGrammarAccess.UnaryOperatorElements getUnaryOperatorAccess() {
		return gaSText.getUnaryOperatorAccess();
	}
	
	public EnumRule getUnaryOperatorRule() {
		return getUnaryOperatorAccess().getRule();
	}

	//enum RelationalOperator:
	//
	//	smaller="<" | smallerEqual="<=" | greater=">" | greaterEqual=">=" | equals="==" | notEquals="!=";
	public STextGrammarAccess.RelationalOperatorElements getRelationalOperatorAccess() {
		return gaSText.getRelationalOperatorAccess();
	}
	
	public EnumRule getRelationalOperatorRule() {
		return getRelationalOperatorAccess().getRule();
	}

	//enum TimeUnit:
	//
	//	second="s" | millisecond="ms" | microsecond="us" | nanosecond="ns";
	public STextGrammarAccess.TimeUnitElements getTimeUnitAccess() {
		return gaSText.getTimeUnitAccess();
	}
	
	public EnumRule getTimeUnitRule() {
		return getTimeUnitAccess().getRule();
	}

	//terminal BOOL returns ecore::EBoolean:
	//
	//	"true" | "false" | "yes" | "no";
	public TerminalRule getBOOLRule() {
		return gaSText.getBOOLRule();
	} 

	//terminal HEX returns ecore::EInt:
	//
	//	"0" ("x" | "X") ("0".."9" | "a".."f" | "A".."F")+;
	public TerminalRule getHEXRule() {
		return gaSText.getHEXRule();
	} 

	//terminal FLOAT returns ecore::EFloat:
	//
	//	(INT "." INT) ("e" ("-" | "+") INT)? ("f" | "F" | "d" | "D")?;
	public TerminalRule getFLOATRule() {
		return gaSText.getFLOATRule();
	} 

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaSText.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaSText.getINTRule();
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaSText.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaSText.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaSText.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaSText.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaSText.getANY_OTHERRule();
	} 
}
