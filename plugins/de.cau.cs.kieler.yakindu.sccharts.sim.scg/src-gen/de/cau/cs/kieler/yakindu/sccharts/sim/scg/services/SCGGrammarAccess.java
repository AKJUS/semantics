/*
* generated by Xtext
*/

package de.cau.cs.kieler.yakindu.sccharts.sim.scg.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import de.cau.cs.kieler.yakindu.sccharts.sim.scl.services.SCLGrammarAccess;

@Singleton
public class SCGGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Instruction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAssignmentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConditionalParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLabelParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cGotoParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cParallelParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final RuleCall cPauseParserRuleCall_5_0 = (RuleCall)cGroup_5.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cSemicolonKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cSecondInstructionsAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cSecondInstructionsInstructionParserRuleCall_5_1_1_0 = (RuleCall)cSecondInstructionsAssignment_5_1_1.eContents().get(0);
		private final Keyword cPriorityKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cPriorityAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cPriorityINTTerminalRuleCall_5_3_0 = (RuleCall)cPriorityAssignment_5_3.eContents().get(0);
		private final Group cGroup_5_4 = (Group)cGroup_5.eContents().get(4);
		private final Keyword cDependencyKeyword_5_4_0 = (Keyword)cGroup_5_4.eContents().get(0);
		private final Assignment cDependenciesAssignment_5_4_1 = (Assignment)cGroup_5_4.eContents().get(1);
		private final RuleCall cDependenciesInstructionParserRuleCall_5_4_1_0 = (RuleCall)cDependenciesAssignment_5_4_1.eContents().get(0);
		
		//Instruction:
		//
		//	Assignment | Conditional | Label | Goto | Parallel | Pause (";" secondInstructions=Instruction)? "priority"
		//
		//	priority=INT ("dependency" dependencies+=Instruction)*;
		public ParserRule getRule() { return rule; }

		//Assignment | Conditional | Label | Goto | Parallel | Pause (";" secondInstructions=Instruction)? "priority" priority=INT
		//
		//("dependency" dependencies+=Instruction)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//Assignment
		public RuleCall getAssignmentParserRuleCall_0() { return cAssignmentParserRuleCall_0; }

		//Conditional
		public RuleCall getConditionalParserRuleCall_1() { return cConditionalParserRuleCall_1; }

		//Label
		public RuleCall getLabelParserRuleCall_2() { return cLabelParserRuleCall_2; }

		//Goto
		public RuleCall getGotoParserRuleCall_3() { return cGotoParserRuleCall_3; }

		//Parallel
		public RuleCall getParallelParserRuleCall_4() { return cParallelParserRuleCall_4; }

		//Pause (";" secondInstructions=Instruction)? "priority" priority=INT ("dependency" dependencies+=Instruction)*
		public Group getGroup_5() { return cGroup_5; }

		//Pause
		public RuleCall getPauseParserRuleCall_5_0() { return cPauseParserRuleCall_5_0; }

		//(";" secondInstructions=Instruction)?
		public Group getGroup_5_1() { return cGroup_5_1; }

		//";"
		public Keyword getSemicolonKeyword_5_1_0() { return cSemicolonKeyword_5_1_0; }

		//secondInstructions=Instruction
		public Assignment getSecondInstructionsAssignment_5_1_1() { return cSecondInstructionsAssignment_5_1_1; }

		//Instruction
		public RuleCall getSecondInstructionsInstructionParserRuleCall_5_1_1_0() { return cSecondInstructionsInstructionParserRuleCall_5_1_1_0; }

		//"priority"
		public Keyword getPriorityKeyword_5_2() { return cPriorityKeyword_5_2; }

		//priority=INT
		public Assignment getPriorityAssignment_5_3() { return cPriorityAssignment_5_3; }

		//INT
		public RuleCall getPriorityINTTerminalRuleCall_5_3_0() { return cPriorityINTTerminalRuleCall_5_3_0; }

		//("dependency" dependencies+=Instruction)*
		public Group getGroup_5_4() { return cGroup_5_4; }

		//"dependency"
		public Keyword getDependencyKeyword_5_4_0() { return cDependencyKeyword_5_4_0; }

		//dependencies+=Instruction
		public Assignment getDependenciesAssignment_5_4_1() { return cDependenciesAssignment_5_4_1; }

		//Instruction
		public RuleCall getDependenciesInstructionParserRuleCall_5_4_1_0() { return cDependenciesInstructionParserRuleCall_5_4_1_0; }
	}

	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assignment");
		private final Assignment cAssignmentAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cAssignmentSTRINGTerminalRuleCall_0 = (RuleCall)cAssignmentAssignment.eContents().get(0);
		
		//Assignment returns SCLExpression:
		//
		//	assignment=STRING;
		public ParserRule getRule() { return rule; }

		//assignment=STRING
		public Assignment getAssignmentAssignment() { return cAssignmentAssignment; }

		//STRING
		public RuleCall getAssignmentSTRINGTerminalRuleCall_0() { return cAssignmentSTRINGTerminalRuleCall_0; }
	}

	public class ConditionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Conditional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionSCLExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInstructionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInstructionsInstructionParserRuleCall_3_0 = (RuleCall)cInstructionsAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Conditional:
		//
		//	"if" expression=SCLExpression "then" instructions=Instruction "end";
		public ParserRule getRule() { return rule; }

		//"if" expression=SCLExpression "then" instructions=Instruction "end"
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//expression=SCLExpression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//SCLExpression
		public RuleCall getExpressionSCLExpressionParserRuleCall_1_0() { return cExpressionSCLExpressionParserRuleCall_1_0; }

		//"then"
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }

		//instructions=Instruction
		public Assignment getInstructionsAssignment_3() { return cInstructionsAssignment_3; }

		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_3_0() { return cInstructionsInstructionParserRuleCall_3_0; }

		//"end"
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}

	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Label");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLabelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInstructionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInstructionInstructionParserRuleCall_1_0 = (RuleCall)cInstructionAssignment_1.eContents().get(0);
		
		//Label:
		//
		//	"label:" instruction=Instruction;
		public ParserRule getRule() { return rule; }

		//"label:" instruction=Instruction
		public Group getGroup() { return cGroup; }

		//"label:"
		public Keyword getLabelKeyword_0() { return cLabelKeyword_0; }

		//instruction=Instruction
		public Assignment getInstructionAssignment_1() { return cInstructionAssignment_1; }

		//Instruction
		public RuleCall getInstructionInstructionParserRuleCall_1_0() { return cInstructionInstructionParserRuleCall_1_0; }
	}

	public class GotoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Goto");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGotoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Goto:
		//
		//	"goto" name=ID;
		public ParserRule getRule() { return rule; }

		//"goto" name=ID
		public Group getGroup() { return cGroup; }

		//"goto"
		public Keyword getGotoKeyword_0() { return cGotoKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class ParallelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parallel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFirstInstructionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFirstInstructionInstructionParserRuleCall_1_0 = (RuleCall)cFirstInstructionAssignment_1.eContents().get(0);
		private final Keyword cParKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSecondInstructionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSecondInstructionInstructionParserRuleCall_3_0 = (RuleCall)cSecondInstructionAssignment_3.eContents().get(0);
		private final Keyword cJoinKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Parallel:
		//
		//	"fork" firstInstruction=Instruction "par" secondInstruction=Instruction "join";
		public ParserRule getRule() { return rule; }

		//"fork" firstInstruction=Instruction "par" secondInstruction=Instruction "join"
		public Group getGroup() { return cGroup; }

		//"fork"
		public Keyword getForkKeyword_0() { return cForkKeyword_0; }

		//firstInstruction=Instruction
		public Assignment getFirstInstructionAssignment_1() { return cFirstInstructionAssignment_1; }

		//Instruction
		public RuleCall getFirstInstructionInstructionParserRuleCall_1_0() { return cFirstInstructionInstructionParserRuleCall_1_0; }

		//"par"
		public Keyword getParKeyword_2() { return cParKeyword_2; }

		//secondInstruction=Instruction
		public Assignment getSecondInstructionAssignment_3() { return cSecondInstructionAssignment_3; }

		//Instruction
		public RuleCall getSecondInstructionInstructionParserRuleCall_3_0() { return cSecondInstructionInstructionParserRuleCall_3_0; }

		//"join"
		public Keyword getJoinKeyword_4() { return cJoinKeyword_4; }
	}
	
	
	private InstructionElements pInstruction;
	private AssignmentElements pAssignment;
	private ConditionalElements pConditional;
	private LabelElements pLabel;
	private GotoElements pGoto;
	private ParallelElements pParallel;
	
	private final Grammar grammar;

	private SCLGrammarAccess gaSCL;

	@Inject
	public SCGGrammarAccess(GrammarProvider grammarProvider,
		SCLGrammarAccess gaSCL) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaSCL = gaSCL;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.cau.cs.kieler.yakindu.sccharts.sim.scg.SCG".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public SCLGrammarAccess getSCLGrammarAccess() {
		return gaSCL;
	}

	
	//Instruction:
	//
	//	Assignment | Conditional | Label | Goto | Parallel | Pause (";" secondInstructions=Instruction)? "priority"
	//
	//	priority=INT ("dependency" dependencies+=Instruction)*;
	public InstructionElements getInstructionAccess() {
		return (pInstruction != null) ? pInstruction : (pInstruction = new InstructionElements());
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}

	//Assignment returns SCLExpression:
	//
	//	assignment=STRING;
	public AssignmentElements getAssignmentAccess() {
		return (pAssignment != null) ? pAssignment : (pAssignment = new AssignmentElements());
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//Conditional:
	//
	//	"if" expression=SCLExpression "then" instructions=Instruction "end";
	public ConditionalElements getConditionalAccess() {
		return (pConditional != null) ? pConditional : (pConditional = new ConditionalElements());
	}
	
	public ParserRule getConditionalRule() {
		return getConditionalAccess().getRule();
	}

	//Label:
	//
	//	"label:" instruction=Instruction;
	public LabelElements getLabelAccess() {
		return (pLabel != null) ? pLabel : (pLabel = new LabelElements());
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}

	//Goto:
	//
	//	"goto" name=ID;
	public GotoElements getGotoAccess() {
		return (pGoto != null) ? pGoto : (pGoto = new GotoElements());
	}
	
	public ParserRule getGotoRule() {
		return getGotoAccess().getRule();
	}

	//Parallel:
	//
	//	"fork" firstInstruction=Instruction "par" secondInstruction=Instruction "join";
	public ParallelElements getParallelAccess() {
		return (pParallel != null) ? pParallel : (pParallel = new ParallelElements());
	}
	
	public ParserRule getParallelRule() {
		return getParallelAccess().getRule();
	}

	//Program:
	//
	//	"module" name=ID variables+=Variable? "{" instruction=Instruction "}";
	public SCLGrammarAccess.ProgramElements getProgramAccess() {
		return gaSCL.getProgramAccess();
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}

	//Variable returns stext::VariableDefinition:
	//
	//	("input" | "output") type=[types::Type] name=STRING ";";
	public SCLGrammarAccess.VariableElements getVariableAccess() {
		return gaSCL.getVariableAccess();
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//SCLExpression returns stext::Expression:
	//
	//	{SCLExpression} STRING;
	public SCLGrammarAccess.SCLExpressionElements getSCLExpressionAccess() {
		return gaSCL.getSCLExpressionAccess();
	}
	
	public ParserRule getSCLExpressionRule() {
		return getSCLExpressionAccess().getRule();
	}

	//Pause:
	//
	//	"pause";
	public SCLGrammarAccess.PauseElements getPauseAccess() {
		return gaSCL.getPauseAccess();
	}
	
	public ParserRule getPauseRule() {
		return getPauseAccess().getRule();
	}

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaSCL.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaSCL.getINTRule();
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaSCL.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaSCL.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaSCL.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaSCL.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaSCL.getANY_OTHERRule();
	} 
}
