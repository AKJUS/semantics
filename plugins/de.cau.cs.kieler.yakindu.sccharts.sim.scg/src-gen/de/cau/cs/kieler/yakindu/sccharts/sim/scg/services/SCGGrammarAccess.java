/*
* generated by Xtext
*/

package de.cau.cs.kieler.yakindu.sccharts.sim.scg.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import de.cau.cs.kieler.yakindu.sccharts.sim.scl.services.SCLGrammarAccess;

@Singleton
public class SCGGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Instruction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Action cInstructionAction_0_0 = (Action)cAlternatives_0.eContents().get(0);
		private final RuleCall cAssignmentParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cConditionalParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final Keyword cPriorityKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPriorityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPriorityINTTerminalRuleCall_2_0 = (RuleCall)cPriorityAssignment_2.eContents().get(0);
		
		//Instruction:
		//
		//	({Instruction} | Assignment | Conditional) //    (Assignment | Conditional | Goto | Parallel | Pause | Label | Scope)
		//
		//	"priority" priority=INT;
		public ParserRule getRule() { return rule; }

		//({Instruction} | Assignment | Conditional) //    (Assignment | Conditional | Goto | Parallel | Pause | Label | Scope)
		//
		//"priority" priority=INT
		public Group getGroup() { return cGroup; }

		//{Instruction} | Assignment | Conditional
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//{Instruction}
		public Action getInstructionAction_0_0() { return cInstructionAction_0_0; }

		//Assignment
		public RuleCall getAssignmentParserRuleCall_0_1() { return cAssignmentParserRuleCall_0_1; }

		//Conditional
		public RuleCall getConditionalParserRuleCall_0_2() { return cConditionalParserRuleCall_0_2; }

		////    (Assignment | Conditional | Goto | Parallel | Pause | Label | Scope)
		//
		//"priority"
		public Keyword getPriorityKeyword_1() { return cPriorityKeyword_1; }

		//priority=INT
		public Assignment getPriorityAssignment_2() { return cPriorityAssignment_2; }

		//INT
		public RuleCall getPriorityINTTerminalRuleCall_2_0() { return cPriorityINTTerminalRuleCall_2_0; }
	}

	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAssignmentAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDependenciesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDependenciesDependencyParserRuleCall_1_0 = (RuleCall)cDependenciesAssignment_1.eContents().get(0);
		
		//Assignment:
		//
		//	{Assignment} //    assignment=STRING
		//
		//	dependencies+=Dependency*;
		public ParserRule getRule() { return rule; }

		//{Assignment} //    assignment=STRING
		//
		//dependencies+=Dependency*
		public Group getGroup() { return cGroup; }

		//{Assignment}
		public Action getAssignmentAction_0() { return cAssignmentAction_0; }

		//dependencies+=Dependency*
		public Assignment getDependenciesAssignment_1() { return cDependenciesAssignment_1; }

		//Dependency
		public RuleCall getDependenciesDependencyParserRuleCall_1_0() { return cDependenciesDependencyParserRuleCall_1_0; }
	}

	public class ConditionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Conditional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionSCLExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConditionalAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionalInstructionSetParserRuleCall_3_0 = (RuleCall)cConditionalAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDependenciesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDependenciesDependencyParserRuleCall_5_0 = (RuleCall)cDependenciesAssignment_5.eContents().get(0);
		
		//Conditional:
		//
		//	"if" expression=SCLExpression "then" conditional=InstructionSet "end" dependencies+=Dependency*;
		public ParserRule getRule() { return rule; }

		//"if" expression=SCLExpression "then" conditional=InstructionSet "end" dependencies+=Dependency*
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//expression=SCLExpression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//SCLExpression
		public RuleCall getExpressionSCLExpressionParserRuleCall_1_0() { return cExpressionSCLExpressionParserRuleCall_1_0; }

		//"then"
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }

		//conditional=InstructionSet
		public Assignment getConditionalAssignment_3() { return cConditionalAssignment_3; }

		//InstructionSet
		public RuleCall getConditionalInstructionSetParserRuleCall_3_0() { return cConditionalInstructionSetParserRuleCall_3_0; }

		//"end"
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }

		//dependencies+=Dependency*
		public Assignment getDependenciesAssignment_5() { return cDependenciesAssignment_5; }

		//Dependency
		public RuleCall getDependenciesDependencyParserRuleCall_5_0() { return cDependenciesDependencyParserRuleCall_5_0; }
	}

	public class DependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Dependency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDependencyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDependenciesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cDependenciesAssignmentCrossReference_1_0 = (CrossReference)cDependenciesAssignment_1.eContents().get(0);
		private final RuleCall cDependenciesAssignmentIDTerminalRuleCall_1_0_1 = (RuleCall)cDependenciesAssignmentCrossReference_1_0.eContents().get(1);
		
		//Dependency:
		//
		//	"dependency" dependencies=[Assignment];
		public ParserRule getRule() { return rule; }

		//"dependency" dependencies=[Assignment]
		public Group getGroup() { return cGroup; }

		//"dependency"
		public Keyword getDependencyKeyword_0() { return cDependencyKeyword_0; }

		//dependencies=[Assignment]
		public Assignment getDependenciesAssignment_1() { return cDependenciesAssignment_1; }

		//[Assignment]
		public CrossReference getDependenciesAssignmentCrossReference_1_0() { return cDependenciesAssignmentCrossReference_1_0; }

		//ID
		public RuleCall getDependenciesAssignmentIDTerminalRuleCall_1_0_1() { return cDependenciesAssignmentIDTerminalRuleCall_1_0_1; }
	}
	
	
	private InstructionElements pInstruction;
	private AssignmentElements pAssignment;
	private ConditionalElements pConditional;
	private DependencyElements pDependency;
	
	private final Grammar grammar;

	private SCLGrammarAccess gaSCL;

	@Inject
	public SCGGrammarAccess(GrammarProvider grammarProvider,
		SCLGrammarAccess gaSCL) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaSCL = gaSCL;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.cau.cs.kieler.yakindu.sccharts.sim.scg.SCG".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public SCLGrammarAccess getSCLGrammarAccess() {
		return gaSCL;
	}

	
	//Instruction:
	//
	//	({Instruction} | Assignment | Conditional) //    (Assignment | Conditional | Goto | Parallel | Pause | Label | Scope)
	//
	//	"priority" priority=INT;
	public InstructionElements getInstructionAccess() {
		return (pInstruction != null) ? pInstruction : (pInstruction = new InstructionElements());
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}

	//Assignment:
	//
	//	{Assignment} //    assignment=STRING
	//
	//	dependencies+=Dependency*;
	public AssignmentElements getAssignmentAccess() {
		return (pAssignment != null) ? pAssignment : (pAssignment = new AssignmentElements());
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//Conditional:
	//
	//	"if" expression=SCLExpression "then" conditional=InstructionSet "end" dependencies+=Dependency*;
	public ConditionalElements getConditionalAccess() {
		return (pConditional != null) ? pConditional : (pConditional = new ConditionalElements());
	}
	
	public ParserRule getConditionalRule() {
		return getConditionalAccess().getRule();
	}

	//Dependency:
	//
	//	"dependency" dependencies=[Assignment];
	public DependencyElements getDependencyAccess() {
		return (pDependency != null) ? pDependency : (pDependency = new DependencyElements());
	}
	
	public ParserRule getDependencyRule() {
		return getDependencyAccess().getRule();
	}

	//Program:
	//
	//	"module" name=ID variables+=Variable? "{" program=InstructionSet "}";
	public SCLGrammarAccess.ProgramElements getProgramAccess() {
		return gaSCL.getProgramAccess();
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}

	//Variable:
	//
	//	("input" | "output") type=STRING name=STRING ";";
	public SCLGrammarAccess.VariableElements getVariableAccess() {
		return gaSCL.getVariableAccess();
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	////LocalVariable returns stext::VariableDefinition:
	//
	////    ('local') type=[types::Type] (name=STRING)';'
	//
	////;
	//
	//LocalVariable:
	//
	//	"local" type=STRING name=STRING ";";
	public SCLGrammarAccess.LocalVariableElements getLocalVariableAccess() {
		return gaSCL.getLocalVariableAccess();
	}
	
	public ParserRule getLocalVariableRule() {
		return getLocalVariableAccess().getRule();
	}

	//SCLExpression:
	//
	//	STRING;
	public SCLGrammarAccess.SCLExpressionElements getSCLExpressionAccess() {
		return gaSCL.getSCLExpressionAccess();
	}
	
	public ParserRule getSCLExpressionRule() {
		return getSCLExpressionAccess().getRule();
	}

	//InstructionSet:
	//
	//	{InstructionSet} (instructions+=InstructionOrCommentSequence+ instructions+=Instruction instructions+=Comment?) |
	//
	//	{InstructionSet} (instructions+=Comment instructions+=Instruction) | instructions+=Comment | {InstructionSet}
	//
	//	(instructions+=Instruction instructions+=Comment) | {InstructionSet} instructions+=Instruction;
	public SCLGrammarAccess.InstructionSetElements getInstructionSetAccess() {
		return gaSCL.getInstructionSetAccess();
	}
	
	public ParserRule getInstructionSetRule() {
		return getInstructionSetAccess().getRule();
	}

	////InstructionSetSingleAssignment:
	//
	////    Instruction
	//
	////;
	//
	////InstructionOrComment:
	//
	////    Instruction | Comment
	//
	////;
	//
	//InstructionOrCommentSequence:
	//
	//	Instruction ";" | Comment;
	public SCLGrammarAccess.InstructionOrCommentSequenceElements getInstructionOrCommentSequenceAccess() {
		return gaSCL.getInstructionOrCommentSequenceAccess();
	}
	
	public ParserRule getInstructionOrCommentSequenceRule() {
		return getInstructionOrCommentSequenceAccess().getRule();
	}

	//Label:
	//
	//	"label:" name=ID;
	public SCLGrammarAccess.LabelElements getLabelAccess() {
		return gaSCL.getLabelAccess();
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}

	//Scope: //    (label = Label)?
	//
	//	"{" variables+=LocalVariable* scope=InstructionSet "}";
	public SCLGrammarAccess.ScopeElements getScopeAccess() {
		return gaSCL.getScopeAccess();
	}
	
	public ParserRule getScopeRule() {
		return getScopeAccess().getRule();
	}

	//Goto: //    {Label}
	//
	//	"goto" name=ID;
	public SCLGrammarAccess.GotoElements getGotoAccess() {
		return gaSCL.getGotoAccess();
	}
	
	public ParserRule getGotoRule() {
		return getGotoAccess().getRule();
	}

	//Parallel: //    {Label}
	//
	//	"fork" (threads+=InstructionSet ("par" threads+=InstructionSet)+) "join";
	public SCLGrammarAccess.ParallelElements getParallelAccess() {
		return gaSCL.getParallelAccess();
	}
	
	public ParserRule getParallelRule() {
		return getParallelAccess().getRule();
	}

	//Pause: //    {Label}
	//
	//	"pause" {Pause};
	public SCLGrammarAccess.PauseElements getPauseAccess() {
		return gaSCL.getPauseAccess();
	}
	
	public ParserRule getPauseRule() {
		return getPauseAccess().getRule();
	}

	//Comment:
	//
	//	comment=SL_COMMENT;
	public SCLGrammarAccess.CommentElements getCommentAccess() {
		return gaSCL.getCommentAccess();
	}
	
	public ParserRule getCommentRule() {
		return getCommentAccess().getRule();
	}

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaSCL.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaSCL.getINTRule();
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaSCL.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaSCL.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaSCL.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaSCL.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaSCL.getANY_OTHERRule();
	} 
}
