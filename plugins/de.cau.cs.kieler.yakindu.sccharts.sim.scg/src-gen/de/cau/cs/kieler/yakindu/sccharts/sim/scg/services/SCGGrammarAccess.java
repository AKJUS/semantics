/*
* generated by Xtext
*/

package de.cau.cs.kieler.yakindu.sccharts.sim.scg.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import de.cau.cs.kieler.yakindu.sccharts.sim.scl.services.SCLGrammarAccess;

@Singleton
public class SCGGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cVariablesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariablesVariableParserRuleCall_2_0 = (RuleCall)cVariablesAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cProgramAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cProgramInstructionSetParserRuleCall_4_0 = (RuleCall)cProgramAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Program:
		//
		//	"module" name=ID variables+=Variable? "{" program=InstructionSet "}";
		public ParserRule getRule() { return rule; }

		//"module" name=ID variables+=Variable? "{" program=InstructionSet "}"
		public Group getGroup() { return cGroup; }

		//"module"
		public Keyword getModuleKeyword_0() { return cModuleKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//variables+=Variable?
		public Assignment getVariablesAssignment_2() { return cVariablesAssignment_2; }

		//Variable
		public RuleCall getVariablesVariableParserRuleCall_2_0() { return cVariablesVariableParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//program=InstructionSet
		public Assignment getProgramAssignment_4() { return cProgramAssignment_4; }

		//InstructionSet
		public RuleCall getProgramInstructionSetParserRuleCall_4_0() { return cProgramInstructionSetParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Instruction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Action cInstructionAction_0_0 = (Action)cAlternatives_0.eContents().get(0);
		private final RuleCall cAssignmentParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cConditionalParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cParallelParserRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final RuleCall cScopeParserRuleCall_0_4 = (RuleCall)cAlternatives_0.eContents().get(4);
		private final Keyword cPriorityKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPriorityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPriorityINTTerminalRuleCall_2_0 = (RuleCall)cPriorityAssignment_2.eContents().get(0);
		
		//Instruction:
		//
		//	({Instruction} | Assignment | Conditional | Parallel | Scope) //    (Assignment | Conditional | Goto | Parallel | Pause | Label | Scope)
		//
		//	"priority" priority=INT;
		public ParserRule getRule() { return rule; }

		//({Instruction} | Assignment | Conditional | Parallel | Scope) //    (Assignment | Conditional | Goto | Parallel | Pause | Label | Scope)
		//
		//"priority" priority=INT
		public Group getGroup() { return cGroup; }

		//{Instruction} | Assignment | Conditional | Parallel | Scope
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//{Instruction}
		public Action getInstructionAction_0_0() { return cInstructionAction_0_0; }

		//Assignment
		public RuleCall getAssignmentParserRuleCall_0_1() { return cAssignmentParserRuleCall_0_1; }

		//Conditional
		public RuleCall getConditionalParserRuleCall_0_2() { return cConditionalParserRuleCall_0_2; }

		//Parallel
		public RuleCall getParallelParserRuleCall_0_3() { return cParallelParserRuleCall_0_3; }

		//Scope
		public RuleCall getScopeParserRuleCall_0_4() { return cScopeParserRuleCall_0_4; }

		////    (Assignment | Conditional | Goto | Parallel | Pause | Label | Scope)
		//
		//"priority"
		public Keyword getPriorityKeyword_1() { return cPriorityKeyword_1; }

		//priority=INT
		public Assignment getPriorityAssignment_2() { return cPriorityAssignment_2; }

		//INT
		public RuleCall getPriorityINTTerminalRuleCall_2_0() { return cPriorityINTTerminalRuleCall_2_0; }
	}

	public class InstructionSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InstructionSet");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cInstructionSetAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cInstructionsAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cInstructionsInstructionOrCommentSequenceParserRuleCall_0_1_0_0 = (RuleCall)cInstructionsAssignment_0_1_0.eContents().get(0);
		private final Assignment cInstructionsAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cInstructionsInstructionParserRuleCall_0_1_1_0 = (RuleCall)cInstructionsAssignment_0_1_1.eContents().get(0);
		private final Assignment cInstructionsAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final RuleCall cInstructionsCommentParserRuleCall_0_1_2_0 = (RuleCall)cInstructionsAssignment_0_1_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cInstructionSetAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cInstructionsAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cInstructionsCommentParserRuleCall_1_1_0_0 = (RuleCall)cInstructionsAssignment_1_1_0.eContents().get(0);
		private final Assignment cInstructionsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cInstructionsInstructionParserRuleCall_1_1_1_0 = (RuleCall)cInstructionsAssignment_1_1_1.eContents().get(0);
		private final Assignment cInstructionsAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cInstructionsCommentParserRuleCall_2_0 = (RuleCall)cInstructionsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cInstructionSetAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Assignment cInstructionsAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cInstructionsInstructionParserRuleCall_3_1_0_0 = (RuleCall)cInstructionsAssignment_3_1_0.eContents().get(0);
		private final Assignment cInstructionsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cInstructionsCommentParserRuleCall_3_1_1_0 = (RuleCall)cInstructionsAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cInstructionSetAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cInstructionsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cInstructionsInstructionParserRuleCall_4_1_0 = (RuleCall)cInstructionsAssignment_4_1.eContents().get(0);
		
		//InstructionSet:
		//
		//	{InstructionSet} (instructions+=InstructionOrCommentSequence+ instructions+=Instruction instructions+=Comment?) |
		//
		//	{InstructionSet} (instructions+=Comment instructions+=Instruction) | instructions+=Comment | {InstructionSet}
		//
		//	(instructions+=Instruction instructions+=Comment) | {InstructionSet} instructions+=Instruction;
		public ParserRule getRule() { return rule; }

		//{InstructionSet} (instructions+=InstructionOrCommentSequence+ instructions+=Instruction instructions+=Comment?) |
		//
		//{InstructionSet} (instructions+=Comment instructions+=Instruction) | instructions+=Comment | {InstructionSet}
		//
		//(instructions+=Instruction instructions+=Comment) | {InstructionSet} instructions+=Instruction
		public Alternatives getAlternatives() { return cAlternatives; }

		//{InstructionSet} (instructions+=InstructionOrCommentSequence+ instructions+=Instruction instructions+=Comment?)
		public Group getGroup_0() { return cGroup_0; }

		//{InstructionSet}
		public Action getInstructionSetAction_0_0() { return cInstructionSetAction_0_0; }

		//instructions+=InstructionOrCommentSequence+ instructions+=Instruction instructions+=Comment?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//instructions+=InstructionOrCommentSequence+
		public Assignment getInstructionsAssignment_0_1_0() { return cInstructionsAssignment_0_1_0; }

		//InstructionOrCommentSequence
		public RuleCall getInstructionsInstructionOrCommentSequenceParserRuleCall_0_1_0_0() { return cInstructionsInstructionOrCommentSequenceParserRuleCall_0_1_0_0; }

		//instructions+=Instruction
		public Assignment getInstructionsAssignment_0_1_1() { return cInstructionsAssignment_0_1_1; }

		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_0_1_1_0() { return cInstructionsInstructionParserRuleCall_0_1_1_0; }

		//instructions+=Comment?
		public Assignment getInstructionsAssignment_0_1_2() { return cInstructionsAssignment_0_1_2; }

		//Comment
		public RuleCall getInstructionsCommentParserRuleCall_0_1_2_0() { return cInstructionsCommentParserRuleCall_0_1_2_0; }

		//{InstructionSet} (instructions+=Comment instructions+=Instruction)
		public Group getGroup_1() { return cGroup_1; }

		//{InstructionSet}
		public Action getInstructionSetAction_1_0() { return cInstructionSetAction_1_0; }

		//instructions+=Comment instructions+=Instruction
		public Group getGroup_1_1() { return cGroup_1_1; }

		//instructions+=Comment
		public Assignment getInstructionsAssignment_1_1_0() { return cInstructionsAssignment_1_1_0; }

		//Comment
		public RuleCall getInstructionsCommentParserRuleCall_1_1_0_0() { return cInstructionsCommentParserRuleCall_1_1_0_0; }

		//instructions+=Instruction
		public Assignment getInstructionsAssignment_1_1_1() { return cInstructionsAssignment_1_1_1; }

		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_1_1_1_0() { return cInstructionsInstructionParserRuleCall_1_1_1_0; }

		//instructions+=Comment
		public Assignment getInstructionsAssignment_2() { return cInstructionsAssignment_2; }

		//Comment
		public RuleCall getInstructionsCommentParserRuleCall_2_0() { return cInstructionsCommentParserRuleCall_2_0; }

		//{InstructionSet} (instructions+=Instruction instructions+=Comment)
		public Group getGroup_3() { return cGroup_3; }

		//{InstructionSet}
		public Action getInstructionSetAction_3_0() { return cInstructionSetAction_3_0; }

		//instructions+=Instruction instructions+=Comment
		public Group getGroup_3_1() { return cGroup_3_1; }

		//instructions+=Instruction
		public Assignment getInstructionsAssignment_3_1_0() { return cInstructionsAssignment_3_1_0; }

		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_3_1_0_0() { return cInstructionsInstructionParserRuleCall_3_1_0_0; }

		//instructions+=Comment
		public Assignment getInstructionsAssignment_3_1_1() { return cInstructionsAssignment_3_1_1; }

		//Comment
		public RuleCall getInstructionsCommentParserRuleCall_3_1_1_0() { return cInstructionsCommentParserRuleCall_3_1_1_0; }

		//{InstructionSet} instructions+=Instruction
		public Group getGroup_4() { return cGroup_4; }

		//{InstructionSet}
		public Action getInstructionSetAction_4_0() { return cInstructionSetAction_4_0; }

		//instructions+=Instruction
		public Assignment getInstructionsAssignment_4_1() { return cInstructionsAssignment_4_1; }

		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_4_1_0() { return cInstructionsInstructionParserRuleCall_4_1_0; }
	}

	public class InstructionOrCommentSequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InstructionOrCommentSequence");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cInstructionParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cCommentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//InstructionOrCommentSequence:
		//
		//	Instruction ";" | Comment;
		public ParserRule getRule() { return rule; }

		//Instruction ";" | Comment
		public Alternatives getAlternatives() { return cAlternatives; }

		//Instruction ";"
		public Group getGroup_0() { return cGroup_0; }

		//Instruction
		public RuleCall getInstructionParserRuleCall_0_0() { return cInstructionParserRuleCall_0_0; }

		//";"
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }

		//Comment
		public RuleCall getCommentParserRuleCall_1() { return cCommentParserRuleCall_1; }
	}

	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAssignmentAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDependenciesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDependenciesDependencyParserRuleCall_1_0 = (RuleCall)cDependenciesAssignment_1.eContents().get(0);
		
		//Assignment:
		//
		//	{Assignment} //    assignment=STRING
		//
		//	dependencies+=Dependency*;
		public ParserRule getRule() { return rule; }

		//{Assignment} //    assignment=STRING
		//
		//dependencies+=Dependency*
		public Group getGroup() { return cGroup; }

		//{Assignment}
		public Action getAssignmentAction_0() { return cAssignmentAction_0; }

		//dependencies+=Dependency*
		public Assignment getDependenciesAssignment_1() { return cDependenciesAssignment_1; }

		//Dependency
		public RuleCall getDependenciesDependencyParserRuleCall_1_0() { return cDependenciesDependencyParserRuleCall_1_0; }
	}

	public class ConditionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Conditional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionSCLExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConditionalAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionalInstructionSetParserRuleCall_3_0 = (RuleCall)cConditionalAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDependenciesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDependenciesDependencyParserRuleCall_5_0 = (RuleCall)cDependenciesAssignment_5.eContents().get(0);
		
		//Conditional:
		//
		//	"if" expression=SCLExpression "then" conditional=InstructionSet "end" dependencies+=Dependency*;
		public ParserRule getRule() { return rule; }

		//"if" expression=SCLExpression "then" conditional=InstructionSet "end" dependencies+=Dependency*
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//expression=SCLExpression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//SCLExpression
		public RuleCall getExpressionSCLExpressionParserRuleCall_1_0() { return cExpressionSCLExpressionParserRuleCall_1_0; }

		//"then"
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }

		//conditional=InstructionSet
		public Assignment getConditionalAssignment_3() { return cConditionalAssignment_3; }

		//InstructionSet
		public RuleCall getConditionalInstructionSetParserRuleCall_3_0() { return cConditionalInstructionSetParserRuleCall_3_0; }

		//"end"
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }

		//dependencies+=Dependency*
		public Assignment getDependenciesAssignment_5() { return cDependenciesAssignment_5; }

		//Dependency
		public RuleCall getDependenciesDependencyParserRuleCall_5_0() { return cDependenciesDependencyParserRuleCall_5_0; }
	}

	public class DependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Dependency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDependencyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDependenciesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cDependenciesAssignmentCrossReference_1_0 = (CrossReference)cDependenciesAssignment_1.eContents().get(0);
		private final RuleCall cDependenciesAssignmentIDTerminalRuleCall_1_0_1 = (RuleCall)cDependenciesAssignmentCrossReference_1_0.eContents().get(1);
		
		//Dependency:
		//
		//	"dependency" dependencies=[Assignment];
		public ParserRule getRule() { return rule; }

		//"dependency" dependencies=[Assignment]
		public Group getGroup() { return cGroup; }

		//"dependency"
		public Keyword getDependencyKeyword_0() { return cDependencyKeyword_0; }

		//dependencies=[Assignment]
		public Assignment getDependenciesAssignment_1() { return cDependenciesAssignment_1; }

		//[Assignment]
		public CrossReference getDependenciesAssignmentCrossReference_1_0() { return cDependenciesAssignmentCrossReference_1_0; }

		//ID
		public RuleCall getDependenciesAssignmentIDTerminalRuleCall_1_0_1() { return cDependenciesAssignmentIDTerminalRuleCall_1_0_1; }
	}

	public class CommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Comment");
		private final Assignment cCommentAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCommentSL_COMMENTTerminalRuleCall_0 = (RuleCall)cCommentAssignment.eContents().get(0);
		
		//Comment:
		//
		//	comment=SL_COMMENT;
		public ParserRule getRule() { return rule; }

		//comment=SL_COMMENT
		public Assignment getCommentAssignment() { return cCommentAssignment; }

		//SL_COMMENT
		public RuleCall getCommentSL_COMMENTTerminalRuleCall_0() { return cCommentSL_COMMENTTerminalRuleCall_0; }
	}

	public class ParallelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parallel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cThreadsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cThreadsInstructionSetParserRuleCall_1_0_0 = (RuleCall)cThreadsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cParKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cThreadsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cThreadsInstructionSetParserRuleCall_1_1_1_0 = (RuleCall)cThreadsAssignment_1_1_1.eContents().get(0);
		private final Keyword cJoinKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Parallel: //    {Label}
		//
		//	"fork" (threads+=InstructionSet ("par" threads+=InstructionSet)+) "join";
		public ParserRule getRule() { return rule; }

		////    {Label}
		//
		//"fork" (threads+=InstructionSet ("par" threads+=InstructionSet)+) "join"
		public Group getGroup() { return cGroup; }

		////    {Label}
		//
		//"fork"
		public Keyword getForkKeyword_0() { return cForkKeyword_0; }

		//threads+=InstructionSet ("par" threads+=InstructionSet)+
		public Group getGroup_1() { return cGroup_1; }

		//threads+=InstructionSet
		public Assignment getThreadsAssignment_1_0() { return cThreadsAssignment_1_0; }

		//InstructionSet
		public RuleCall getThreadsInstructionSetParserRuleCall_1_0_0() { return cThreadsInstructionSetParserRuleCall_1_0_0; }

		//("par" threads+=InstructionSet)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"par"
		public Keyword getParKeyword_1_1_0() { return cParKeyword_1_1_0; }

		//threads+=InstructionSet
		public Assignment getThreadsAssignment_1_1_1() { return cThreadsAssignment_1_1_1; }

		//InstructionSet
		public RuleCall getThreadsInstructionSetParserRuleCall_1_1_1_0() { return cThreadsInstructionSetParserRuleCall_1_1_1_0; }

		//"join"
		public Keyword getJoinKeyword_2() { return cJoinKeyword_2; }
	}

	public class ScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Scope");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariablesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariablesLocalVariableParserRuleCall_1_0 = (RuleCall)cVariablesAssignment_1.eContents().get(0);
		private final Assignment cScopeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cScopeInstructionSetParserRuleCall_2_0 = (RuleCall)cScopeAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Scope: //    (label = Label)?
		//
		//	"{" variables+=LocalVariable* scope=InstructionSet "}";
		public ParserRule getRule() { return rule; }

		////    (label = Label)?
		//
		//"{" variables+=LocalVariable* scope=InstructionSet "}"
		public Group getGroup() { return cGroup; }

		////    (label = Label)?
		//
		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//variables+=LocalVariable*
		public Assignment getVariablesAssignment_1() { return cVariablesAssignment_1; }

		//LocalVariable
		public RuleCall getVariablesLocalVariableParserRuleCall_1_0() { return cVariablesLocalVariableParserRuleCall_1_0; }

		//scope=InstructionSet
		public Assignment getScopeAssignment_2() { return cScopeAssignment_2; }

		//InstructionSet
		public RuleCall getScopeInstructionSetParserRuleCall_2_0() { return cScopeInstructionSetParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	
	
	private ProgramElements pProgram;
	private InstructionElements pInstruction;
	private InstructionSetElements pInstructionSet;
	private InstructionOrCommentSequenceElements pInstructionOrCommentSequence;
	private AssignmentElements pAssignment;
	private ConditionalElements pConditional;
	private DependencyElements pDependency;
	private CommentElements pComment;
	private ParallelElements pParallel;
	private ScopeElements pScope;
	
	private final Grammar grammar;

	private SCLGrammarAccess gaSCL;

	@Inject
	public SCGGrammarAccess(GrammarProvider grammarProvider,
		SCLGrammarAccess gaSCL) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaSCL = gaSCL;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.cau.cs.kieler.yakindu.sccharts.sim.scg.SCG".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public SCLGrammarAccess getSCLGrammarAccess() {
		return gaSCL;
	}

	
	//Program:
	//
	//	"module" name=ID variables+=Variable? "{" program=InstructionSet "}";
	public ProgramElements getProgramAccess() {
		return (pProgram != null) ? pProgram : (pProgram = new ProgramElements());
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}

	//Instruction:
	//
	//	({Instruction} | Assignment | Conditional | Parallel | Scope) //    (Assignment | Conditional | Goto | Parallel | Pause | Label | Scope)
	//
	//	"priority" priority=INT;
	public InstructionElements getInstructionAccess() {
		return (pInstruction != null) ? pInstruction : (pInstruction = new InstructionElements());
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}

	//InstructionSet:
	//
	//	{InstructionSet} (instructions+=InstructionOrCommentSequence+ instructions+=Instruction instructions+=Comment?) |
	//
	//	{InstructionSet} (instructions+=Comment instructions+=Instruction) | instructions+=Comment | {InstructionSet}
	//
	//	(instructions+=Instruction instructions+=Comment) | {InstructionSet} instructions+=Instruction;
	public InstructionSetElements getInstructionSetAccess() {
		return (pInstructionSet != null) ? pInstructionSet : (pInstructionSet = new InstructionSetElements());
	}
	
	public ParserRule getInstructionSetRule() {
		return getInstructionSetAccess().getRule();
	}

	//InstructionOrCommentSequence:
	//
	//	Instruction ";" | Comment;
	public InstructionOrCommentSequenceElements getInstructionOrCommentSequenceAccess() {
		return (pInstructionOrCommentSequence != null) ? pInstructionOrCommentSequence : (pInstructionOrCommentSequence = new InstructionOrCommentSequenceElements());
	}
	
	public ParserRule getInstructionOrCommentSequenceRule() {
		return getInstructionOrCommentSequenceAccess().getRule();
	}

	//Assignment:
	//
	//	{Assignment} //    assignment=STRING
	//
	//	dependencies+=Dependency*;
	public AssignmentElements getAssignmentAccess() {
		return (pAssignment != null) ? pAssignment : (pAssignment = new AssignmentElements());
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//Conditional:
	//
	//	"if" expression=SCLExpression "then" conditional=InstructionSet "end" dependencies+=Dependency*;
	public ConditionalElements getConditionalAccess() {
		return (pConditional != null) ? pConditional : (pConditional = new ConditionalElements());
	}
	
	public ParserRule getConditionalRule() {
		return getConditionalAccess().getRule();
	}

	//Dependency:
	//
	//	"dependency" dependencies=[Assignment];
	public DependencyElements getDependencyAccess() {
		return (pDependency != null) ? pDependency : (pDependency = new DependencyElements());
	}
	
	public ParserRule getDependencyRule() {
		return getDependencyAccess().getRule();
	}

	//Comment:
	//
	//	comment=SL_COMMENT;
	public CommentElements getCommentAccess() {
		return (pComment != null) ? pComment : (pComment = new CommentElements());
	}
	
	public ParserRule getCommentRule() {
		return getCommentAccess().getRule();
	}

	//Parallel: //    {Label}
	//
	//	"fork" (threads+=InstructionSet ("par" threads+=InstructionSet)+) "join";
	public ParallelElements getParallelAccess() {
		return (pParallel != null) ? pParallel : (pParallel = new ParallelElements());
	}
	
	public ParserRule getParallelRule() {
		return getParallelAccess().getRule();
	}

	//Scope: //    (label = Label)?
	//
	//	"{" variables+=LocalVariable* scope=InstructionSet "}";
	public ScopeElements getScopeAccess() {
		return (pScope != null) ? pScope : (pScope = new ScopeElements());
	}
	
	public ParserRule getScopeRule() {
		return getScopeAccess().getRule();
	}

	//Variable:
	//
	//	("input" | "output") type=STRING name=STRING ";";
	public SCLGrammarAccess.VariableElements getVariableAccess() {
		return gaSCL.getVariableAccess();
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	////LocalVariable returns stext::VariableDefinition:
	//
	////    ('local') type=[types::Type] (name=STRING)';'
	//
	////;
	//
	//LocalVariable:
	//
	//	"local" type=STRING name=STRING ";";
	public SCLGrammarAccess.LocalVariableElements getLocalVariableAccess() {
		return gaSCL.getLocalVariableAccess();
	}
	
	public ParserRule getLocalVariableRule() {
		return getLocalVariableAccess().getRule();
	}

	//SCLExpression:
	//
	//	STRING;
	public SCLGrammarAccess.SCLExpressionElements getSCLExpressionAccess() {
		return gaSCL.getSCLExpressionAccess();
	}
	
	public ParserRule getSCLExpressionRule() {
		return getSCLExpressionAccess().getRule();
	}

	//Label:
	//
	//	"label:" name=ID;
	public SCLGrammarAccess.LabelElements getLabelAccess() {
		return gaSCL.getLabelAccess();
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}

	//Goto: //    {Label}
	//
	//	"goto" name=ID;
	public SCLGrammarAccess.GotoElements getGotoAccess() {
		return gaSCL.getGotoAccess();
	}
	
	public ParserRule getGotoRule() {
		return getGotoAccess().getRule();
	}

	//Pause: //    {Label}
	//
	//	"pause" {Pause};
	public SCLGrammarAccess.PauseElements getPauseAccess() {
		return gaSCL.getPauseAccess();
	}
	
	public ParserRule getPauseRule() {
		return getPauseAccess().getRule();
	}

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaSCL.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaSCL.getINTRule();
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaSCL.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaSCL.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaSCL.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaSCL.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaSCL.getANY_OTHERRule();
	} 
}
