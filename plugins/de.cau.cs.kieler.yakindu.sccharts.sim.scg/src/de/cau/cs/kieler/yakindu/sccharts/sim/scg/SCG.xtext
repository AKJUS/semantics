grammar de.cau.cs.kieler.yakindu.sccharts.sim.scg.SCG 
with de.cau.cs.kieler.yakindu.sccharts.sim.scl.SCL

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.cau.de/cs/kieler/yakindu/sccharts/sim/scl/scl" as scl

generate scg "http://www.cau.de/cs/kieler/yakindu/sccharts/sim/scg/scg"

Program :
    'module' name = ID
    ((variables+=VariableDeclaration)*)?
    '{'
        program = InstructionList
    '}' 
;

Instruction:
    ({Instruction} | Assignment | Conditional | Parallel)
//    (Assignment | Conditional | Goto | Parallel | Pause | Label | Scope)
    'priority' priority=INT 
;

Assignment:
    {Assignment}
//    assignment=STRING
    (dependencies += Dependency)*
;

Conditional:
    'if' expression = SCLExpression 'then'
        conditional = InstructionList
    'end' 
    (dependencies += Dependency)*
;


Dependency:
    'dependency' dependencies = [Assignment]
;

Annotation:
    comment = SL_COMMENT
;

Parallel:
//    {Label}
    'fork'
    (    threads += InstructionList
    ('par'
         threads += InstructionList)+)
    'join'
;