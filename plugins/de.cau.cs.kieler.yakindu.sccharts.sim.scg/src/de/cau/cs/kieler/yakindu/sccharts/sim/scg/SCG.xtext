grammar de.cau.cs.kieler.yakindu.sccharts.sim.scg.SCG 
with de.cau.cs.kieler.yakindu.sccharts.sim.scl.SCL

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate scg "http://www.cau.de/cs/kieler/yakindu/sccharts/sim/scg/scg"

Program :
    'module' name = ID
    ((variables+=Variable)*)?
    '{'
        program = InstructionSet
    '}' 
;

Instruction:
    ({Instruction} | Assignment | Conditional | Parallel | Scope)
//    (Assignment | Conditional | Goto | Parallel | Pause | Label | Scope)
    'priority' priority=INT 
;

InstructionSet:
  {InstructionSet}
  (
      (instructions += InstructionOrCommentSequence)+
      (instructions += Instruction)
      (instructions += Comment)?      
  ) |
  {InstructionSet}
  (
      (instructions += Comment)
      (instructions += Instruction)
  ) |
  (instructions += Comment) |
  {InstructionSet}
  (
      (instructions += Instruction)
      (instructions += Comment)
  ) |
  {InstructionSet}
  (instructions += Instruction) 
;

InstructionOrCommentSequence:
    (Instruction';') | Comment
;

Assignment:
    {Assignment}
//    assignment=STRING
    (dependencies += Dependency)*
;

Conditional:
    'if' expression = SCLExpression 'then'
        conditional = InstructionSet
    'end' 
    (dependencies += Dependency)*
;


Dependency:
    'dependency' dependencies = [Assignment]
;

Comment:
    comment = SL_COMMENT
;

Parallel:
//    {Label}
    'fork'
    (    threads += InstructionSet
    ('par'
         threads += InstructionSet)+)
    'join'
;

Scope:
//    (label = Label)?
    '{'
        (variables+=LocalVariable)*
        scope = InstructionSet 
    '}'
;