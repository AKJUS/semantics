/*
 * generated by Xtext
 */
package de.cau.cs.kieler.sccharts.text3.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import de.cau.cs.kieler.core.annotations.Annotation;
import de.cau.cs.kieler.core.annotations.AnnotationsPackage;
import de.cau.cs.kieler.core.annotations.CommentAnnotation;
import de.cau.cs.kieler.core.annotations.StringAnnotation;
import de.cau.cs.kieler.core.annotations.TypedStringAnnotation;
import de.cau.cs.kieler.core.kexpressions.BoolValue;
import de.cau.cs.kieler.core.kexpressions.FloatValue;
import de.cau.cs.kieler.core.kexpressions.FunctionCall;
import de.cau.cs.kieler.core.kexpressions.IntValue;
import de.cau.cs.kieler.core.kexpressions.KExpressionsPackage;
import de.cau.cs.kieler.core.kexpressions.OperatorExpression;
import de.cau.cs.kieler.core.kexpressions.Parameter;
import de.cau.cs.kieler.core.kexpressions.ReferenceDeclaration;
import de.cau.cs.kieler.core.kexpressions.StringValue;
import de.cau.cs.kieler.core.kexpressions.TextExpression;
import de.cau.cs.kieler.core.kexpressions.ValuedObject;
import de.cau.cs.kieler.core.kexpressions.ValuedObjectReference;
import de.cau.cs.kieler.core.kexpressions.VariableDeclaration;
import de.cau.cs.kieler.core.kexpressions.keffects.Assignment;
import de.cau.cs.kieler.core.kexpressions.keffects.Emission;
import de.cau.cs.kieler.core.kexpressions.keffects.FunctionCallEffect;
import de.cau.cs.kieler.core.kexpressions.keffects.HostcodeEffect;
import de.cau.cs.kieler.core.kexpressions.keffects.KEffectsPackage;
import de.cau.cs.kieler.core.kexpressions.text.kext.AnnotatedExpression;
import de.cau.cs.kieler.core.kexpressions.text.kext.Kext;
import de.cau.cs.kieler.core.kexpressions.text.kext.KextPackage;
import de.cau.cs.kieler.core.kexpressions.text.kext.TestEntity;
import de.cau.cs.kieler.sccharts.Binding;
import de.cau.cs.kieler.sccharts.ControlflowRegion;
import de.cau.cs.kieler.sccharts.DataflowRegion;
import de.cau.cs.kieler.sccharts.DuringAction;
import de.cau.cs.kieler.sccharts.EntryAction;
import de.cau.cs.kieler.sccharts.Equation;
import de.cau.cs.kieler.sccharts.ExitAction;
import de.cau.cs.kieler.sccharts.IterateAction;
import de.cau.cs.kieler.sccharts.SCCharts;
import de.cau.cs.kieler.sccharts.SCChartsPackage;
import de.cau.cs.kieler.sccharts.State;
import de.cau.cs.kieler.sccharts.SuspendAction;
import de.cau.cs.kieler.sccharts.Transition;
import de.cau.cs.kieler.sccharts.text.actions.serializer.ActionsSemanticSequencer;
import de.cau.cs.kieler.sccharts.text3.services.Sct3GrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;

@SuppressWarnings("all")
public abstract class AbstractSct3SemanticSequencer extends ActionsSemanticSequencer {

	@Inject
	private Sct3GrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == AnnotationsPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case AnnotationsPackage.ANNOTATION:
				sequence_TagAnnotation(context, (Annotation) semanticObject); 
				return; 
			case AnnotationsPackage.COMMENT_ANNOTATION:
				sequence_CommentAnnotation(context, (CommentAnnotation) semanticObject); 
				return; 
			case AnnotationsPackage.STRING_ANNOTATION:
				if(context == grammarAccess.getAnnotationRule() ||
				   context == grammarAccess.getKeyStringValueAnnotationRule() ||
				   context == grammarAccess.getRestrictedTypeAnnotationRule() ||
				   context == grammarAccess.getValuedAnnotationRule()) {
					sequence_KeyStringValueAnnotation(context, (StringAnnotation) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getQuotedKeyStringValueAnnotationRule() ||
				   context == grammarAccess.getQuotedStringAnnotationRule()) {
					sequence_QuotedKeyStringValueAnnotation(context, (StringAnnotation) semanticObject); 
					return; 
				}
				else break;
			case AnnotationsPackage.TYPED_STRING_ANNOTATION:
				if(context == grammarAccess.getQuotedStringAnnotationRule() ||
				   context == grammarAccess.getQuotedTypedKeyStringValueAnnotationRule()) {
					sequence_QuotedTypedKeyStringValueAnnotation(context, (TypedStringAnnotation) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getAnnotationRule() ||
				   context == grammarAccess.getTypedKeyStringValueAnnotationRule() ||
				   context == grammarAccess.getValuedAnnotationRule()) {
					sequence_TypedKeyStringValueAnnotation(context, (TypedStringAnnotation) semanticObject); 
					return; 
				}
				else break;
			}
		else if(semanticObject.eClass().getEPackage() == KEffectsPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case KEffectsPackage.ASSIGNMENT:
				if(context == grammarAccess.getAssignmentRule()) {
					sequence_Assignment(context, (Assignment) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getEffectRule()) {
					sequence_Assignment_Effect_PostfixEffect(context, (Assignment) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getPostfixEffectRule()) {
					sequence_PostfixEffect(context, (Assignment) semanticObject); 
					return; 
				}
				else break;
			case KEffectsPackage.EMISSION:
				sequence_Emission(context, (Emission) semanticObject); 
				return; 
			case KEffectsPackage.FUNCTION_CALL_EFFECT:
				sequence_FunctionCallEffect(context, (FunctionCallEffect) semanticObject); 
				return; 
			case KEffectsPackage.HOSTCODE_EFFECT:
				sequence_HostcodeEffect(context, (HostcodeEffect) semanticObject); 
				return; 
			}
		else if(semanticObject.eClass().getEPackage() == KExpressionsPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case KExpressionsPackage.BOOL_VALUE:
				sequence_BoolValue(context, (BoolValue) semanticObject); 
				return; 
			case KExpressionsPackage.FLOAT_VALUE:
				sequence_FloatValue(context, (FloatValue) semanticObject); 
				return; 
			case KExpressionsPackage.FUNCTION_CALL:
				sequence_FunctionCall(context, (FunctionCall) semanticObject); 
				return; 
			case KExpressionsPackage.INT_VALUE:
				sequence_IntValue(context, (IntValue) semanticObject); 
				return; 
			case KExpressionsPackage.OPERATOR_EXPRESSION:
				if(context == grammarAccess.getAddExpressionRule() ||
				   context == grammarAccess.getAddExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0() ||
				   context == grammarAccess.getAtomicExpressionRule() ||
				   context == grammarAccess.getAtomicValuedExpressionRule() ||
				   context == grammarAccess.getBitwiseAndExpressionRule() ||
				   context == grammarAccess.getBitwiseAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0() ||
				   context == grammarAccess.getBitwiseOrExpressionRule() ||
				   context == grammarAccess.getBitwiseOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0() ||
				   context == grammarAccess.getBoolExpressionRule() ||
				   context == grammarAccess.getCompareOperationRule() ||
				   context == grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_1_0() ||
				   context == grammarAccess.getDivExpressionRule() ||
				   context == grammarAccess.getDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0() ||
				   context == grammarAccess.getExpressionRule() ||
				   context == grammarAccess.getLogicalAndExpressionRule() ||
				   context == grammarAccess.getLogicalAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0() ||
				   context == grammarAccess.getLogicalOrExpressionRule() ||
				   context == grammarAccess.getLogicalOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0() ||
				   context == grammarAccess.getModExpressionRule() ||
				   context == grammarAccess.getModExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0() ||
				   context == grammarAccess.getMultExpressionRule() ||
				   context == grammarAccess.getMultExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0() ||
				   context == grammarAccess.getNegExpressionRule() ||
				   context == grammarAccess.getNotExpressionRule() ||
				   context == grammarAccess.getNotOrValuedExpressionRule() ||
				   context == grammarAccess.getRootRule() ||
				   context == grammarAccess.getSubExpressionRule() ||
				   context == grammarAccess.getSubExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0() ||
				   context == grammarAccess.getValuedExpressionRule()) {
					sequence_AddExpression_BitwiseAndExpression_BitwiseOrExpression_CompareOperation_DivExpression_LogicalAndExpression_LogicalOrExpression_ModExpression_MultExpression_NegExpression_NotExpression_NotOrValuedExpression_SubExpression_ValuedObjectTestExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getValuedObjectTestExpressionRule()) {
					sequence_ValuedObjectTestExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.PARAMETER:
				sequence_Parameter(context, (Parameter) semanticObject); 
				return; 
			case KExpressionsPackage.REFERENCE_DECLARATION:
				if(context == grammarAccess.getDeclarationWOSemicolonRule() ||
				   context == grammarAccess.getReferenceDeclarationWOSemicolonRule()) {
					sequence_ReferenceDeclarationWOSemicolon(context, (ReferenceDeclaration) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getDeclarationRule() ||
				   context == grammarAccess.getReferenceDeclarationRule()) {
					sequence_ReferenceDeclaration(context, (ReferenceDeclaration) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.STRING_VALUE:
				sequence_StringValue(context, (StringValue) semanticObject); 
				return; 
			case KExpressionsPackage.TEXT_EXPRESSION:
				sequence_TextExpression(context, (TextExpression) semanticObject); 
				return; 
			case KExpressionsPackage.VALUED_OBJECT:
				sequence_ValuedObject(context, (ValuedObject) semanticObject); 
				return; 
			case KExpressionsPackage.VALUED_OBJECT_REFERENCE:
				sequence_ValuedObjectReference(context, (ValuedObjectReference) semanticObject); 
				return; 
			case KExpressionsPackage.VARIABLE_DECLARATION:
				if(context == grammarAccess.getDeclarationWOSemicolonRule() ||
				   context == grammarAccess.getVariableDeclarationWOSemicolonRule()) {
					sequence_VariableDeclarationWOSemicolon(context, (VariableDeclaration) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getDeclarationRule() ||
				   context == grammarAccess.getVariableDeclarationRule()) {
					sequence_VariableDeclaration(context, (VariableDeclaration) semanticObject); 
					return; 
				}
				else break;
			}
		else if(semanticObject.eClass().getEPackage() == KextPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case KextPackage.ANNOTATED_EXPRESSION:
				sequence_AnnotatedExpression(context, (AnnotatedExpression) semanticObject); 
				return; 
			case KextPackage.KEXT:
				sequence_Kext(context, (Kext) semanticObject); 
				return; 
			case KextPackage.TEST_ENTITY:
				sequence_TestEntity(context, (TestEntity) semanticObject); 
				return; 
			}
		else if(semanticObject.eClass().getEPackage() == SCChartsPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case SCChartsPackage.BINDING:
				sequence_Binding(context, (Binding) semanticObject); 
				return; 
			case SCChartsPackage.CONTROLFLOW_REGION:
				if(context == grammarAccess.getControlflowRegionRule() ||
				   context == grammarAccess.getRegionRule()) {
					sequence_ControlflowRegion(context, (ControlflowRegion) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getSingleControlflowRegionRule()) {
					sequence_SingleControlflowRegion(context, (ControlflowRegion) semanticObject); 
					return; 
				}
				else break;
			case SCChartsPackage.DATAFLOW_REGION:
				if(context == grammarAccess.getDataflowRegionRule() ||
				   context == grammarAccess.getRegionRule()) {
					sequence_DataflowRegion(context, (DataflowRegion) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getSingleDataflowRegionRule()) {
					sequence_SingleDataflowRegion(context, (DataflowRegion) semanticObject); 
					return; 
				}
				else break;
			case SCChartsPackage.DURING_ACTION:
				sequence_DuringAction(context, (DuringAction) semanticObject); 
				return; 
			case SCChartsPackage.ENTRY_ACTION:
				sequence_EntryAction(context, (EntryAction) semanticObject); 
				return; 
			case SCChartsPackage.EQUATION:
				sequence_Equation(context, (Equation) semanticObject); 
				return; 
			case SCChartsPackage.EXIT_ACTION:
				sequence_ExitAction(context, (ExitAction) semanticObject); 
				return; 
			case SCChartsPackage.ITERATE_ACTION:
				sequence_IterateAction(context, (IterateAction) semanticObject); 
				return; 
			case SCChartsPackage.SC_CHARTS:
				sequence_SCCharts(context, (SCCharts) semanticObject); 
				return; 
			case SCChartsPackage.STATE:
				if(context == grammarAccess.getRootStateRule()) {
					sequence_RootState(context, (State) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getStateRule()) {
					sequence_State(context, (State) semanticObject); 
					return; 
				}
				else break;
			case SCChartsPackage.SUSPEND_ACTION:
				sequence_SuspendAction(context, (SuspendAction) semanticObject); 
				return; 
			case SCChartsPackage.TRANSITION:
				sequence_Transition(context, (Transition) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (annotations+=Annotation* formal=[ValuedObject|ID] actual=[ValuedObject|ID])
	 */
	protected void sequence_Binding(EObject context, Binding semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (annotations+=Annotation* id=ID? label=STRING? declarations+=DeclarationWOSemicolon* states+=State+)
	 */
	protected void sequence_ControlflowRegion(EObject context, ControlflowRegion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (annotations+=Annotation* id=ID? label=STRING? declarations+=DeclarationWOSemicolon* equations+=Equation+)
	 */
	protected void sequence_DataflowRegion(EObject context, DataflowRegion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (valuedObject=[ValuedObject|ID] expression=Expression)
	 */
	protected void sequence_Equation(EObject context, Equation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         id=ID 
	 *         label=STRING? 
	 *         (
	 *             expression=Expression | 
	 *             (
	 *                 (declarations+=DeclarationWOSemicolon | localActions+=LocalAction)* 
	 *                 ((regions+=SingleDataflowRegion | regions+=SingleControlflowRegion) regions+=Region*)?
	 *             )
	 *         )
	 *     )
	 */
	protected void sequence_RootState(EObject context, State semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     rootStates+=RootState*
	 */
	protected void sequence_SCCharts(EObject context, SCCharts semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((annotations+=Annotation* id=ID? label=STRING? declarations+=DeclarationWOSemicolon*)? states+=State*)
	 */
	protected void sequence_SingleControlflowRegion(EObject context, ControlflowRegion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (annotations+=Annotation* id=ID? label=STRING? declarations+=DeclarationWOSemicolon* equations+=Equation*)
	 */
	protected void sequence_SingleDataflowRegion(EObject context, DataflowRegion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         initial?='initial'? 
	 *         final?='final'? 
	 *         type=StateType? 
	 *         id=ID 
	 *         label=STRING? 
	 *         (
	 *             expression=Expression | 
	 *             (
	 *                 (declarations+=DeclarationWOSemicolon | localActions+=LocalAction)* 
	 *                 ((regions+=SingleDataflowRegion | regions+=SingleControlflowRegion) regions+=Region*)?
	 *             )
	 *         )? 
	 *         outgoingTransitions+=Transition*
	 *     )
	 */
	protected void sequence_State(EObject context, State semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         annotations+=Annotation* 
	 *         type=TransitionType 
	 *         targetState=[State|ID] 
	 *         immediate?='immediate'? 
	 *         deferred?='deferred'? 
	 *         history=HistoryType? 
	 *         (((delay=INT? trigger=BoolExpression)? (effects+=Effect effects+=Effect*)?) | label=STRING)?
	 *     )
	 */
	protected void sequence_Transition(EObject context, Transition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
