/*
 * generated by Xtext
 */
package de.cau.cs.kieler.sccharts.text3.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import de.cau.cs.kieler.sccharts.text.actions.services.ActionsGrammarAccess;
import de.cau.cs.kieler.core.kexpressions.text.services.KEXTGrammarAccess;
import de.cau.cs.kieler.core.kexpressions.keffects.services.KEffectsGrammarAccess;
import de.cau.cs.kieler.core.kexpressions.services.KExpressionsGrammarAccess;
import de.cau.cs.kieler.core.annotations.text.services.AnnotationsGrammarAccess;

@Singleton
public class Sct3GrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SCChartsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SCCharts");
		private final Assignment cRootStatesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRootStatesRootStateParserRuleCall_0 = (RuleCall)cRootStatesAssignment.eContents().get(0);
		
		////generate sct3 "http://kieler.cs.cau.de/sccharts/textual3/0.1.0"
		//
		//// ---------------------------------------------------------------------------------------------------
		// SCCharts
		//returns sccharts::SCCharts:
		//	rootStates+=RootState*;
		@Override public ParserRule getRule() { return rule; }

		//rootStates+=RootState*
		public Assignment getRootStatesAssignment() { return cRootStatesAssignment; }

		//RootState
		public RuleCall getRootStatesRootStateParserRuleCall_0() { return cRootStatesRootStateParserRuleCall_0; }
	}

	public class RootStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RootState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cScchartKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdIDTerminalRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		private final Assignment cLabelAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLabelSTRINGTerminalRuleCall_3_0 = (RuleCall)cLabelAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Keyword cIsKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Assignment cExpressionAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_4_0_1_0 = (RuleCall)cExpressionAssignment_4_0_1.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Alternatives cAlternatives_4_1_1 = (Alternatives)cGroup_4_1.eContents().get(1);
		private final Assignment cDeclarationsAssignment_4_1_1_0 = (Assignment)cAlternatives_4_1_1.eContents().get(0);
		private final RuleCall cDeclarationsDeclarationWOSemicolonParserRuleCall_4_1_1_0_0 = (RuleCall)cDeclarationsAssignment_4_1_1_0.eContents().get(0);
		private final Assignment cLocalActionsAssignment_4_1_1_1 = (Assignment)cAlternatives_4_1_1.eContents().get(1);
		private final RuleCall cLocalActionsLocalActionParserRuleCall_4_1_1_1_0 = (RuleCall)cLocalActionsAssignment_4_1_1_1.eContents().get(0);
		private final Group cGroup_4_1_2 = (Group)cGroup_4_1.eContents().get(2);
		private final Alternatives cAlternatives_4_1_2_0 = (Alternatives)cGroup_4_1_2.eContents().get(0);
		private final Assignment cRegionsAssignment_4_1_2_0_0 = (Assignment)cAlternatives_4_1_2_0.eContents().get(0);
		private final RuleCall cRegionsSingleDataflowRegionParserRuleCall_4_1_2_0_0_0 = (RuleCall)cRegionsAssignment_4_1_2_0_0.eContents().get(0);
		private final Assignment cRegionsAssignment_4_1_2_0_1 = (Assignment)cAlternatives_4_1_2_0.eContents().get(1);
		private final RuleCall cRegionsSingleControlflowRegionParserRuleCall_4_1_2_0_1_0 = (RuleCall)cRegionsAssignment_4_1_2_0_1.eContents().get(0);
		private final Assignment cRegionsAssignment_4_1_2_1 = (Assignment)cGroup_4_1_2.eContents().get(1);
		private final RuleCall cRegionsRegionParserRuleCall_4_1_2_1_0 = (RuleCall)cRegionsAssignment_4_1_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_1_3 = (Keyword)cGroup_4_1.eContents().get(3);
		
		//RootState returns sccharts::State:
		//	annotations+=Annotation* "scchart" id=ID label=STRING? ("is" expression=Expression | "{"
		//	(declarations+=DeclarationWOSemicolon | localActions+=LocalAction)* ((regions+=SingleDataflowRegion |
		//	regions+=SingleControlflowRegion) regions+=Region*)? "}");
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* "scchart" id=ID label=STRING? ("is" expression=Expression | "{"
		//(declarations+=DeclarationWOSemicolon | localActions+=LocalAction)* ((regions+=SingleDataflowRegion |
		//regions+=SingleControlflowRegion) regions+=Region*)? "}")
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//"scchart"
		public Keyword getScchartKeyword_1() { return cScchartKeyword_1; }

		//id=ID
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_2_0() { return cIdIDTerminalRuleCall_2_0; }

		//label=STRING?
		public Assignment getLabelAssignment_3() { return cLabelAssignment_3; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_3_0() { return cLabelSTRINGTerminalRuleCall_3_0; }

		//"is" expression=Expression | "{" (declarations+=DeclarationWOSemicolon | localActions+=LocalAction)*
		//((regions+=SingleDataflowRegion | regions+=SingleControlflowRegion) regions+=Region*)? "}"
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//"is" expression=Expression
		public Group getGroup_4_0() { return cGroup_4_0; }

		//"is"
		public Keyword getIsKeyword_4_0_0() { return cIsKeyword_4_0_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_4_0_1() { return cExpressionAssignment_4_0_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_4_0_1_0() { return cExpressionExpressionParserRuleCall_4_0_1_0; }

		//"{" (declarations+=DeclarationWOSemicolon | localActions+=LocalAction)* ((regions+=SingleDataflowRegion |
		//regions+=SingleControlflowRegion) regions+=Region*)? "}"
		public Group getGroup_4_1() { return cGroup_4_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_1_0() { return cLeftCurlyBracketKeyword_4_1_0; }

		//(declarations+=DeclarationWOSemicolon | localActions+=LocalAction)*
		public Alternatives getAlternatives_4_1_1() { return cAlternatives_4_1_1; }

		//declarations+=DeclarationWOSemicolon
		public Assignment getDeclarationsAssignment_4_1_1_0() { return cDeclarationsAssignment_4_1_1_0; }

		//DeclarationWOSemicolon
		public RuleCall getDeclarationsDeclarationWOSemicolonParserRuleCall_4_1_1_0_0() { return cDeclarationsDeclarationWOSemicolonParserRuleCall_4_1_1_0_0; }

		//localActions+=LocalAction
		public Assignment getLocalActionsAssignment_4_1_1_1() { return cLocalActionsAssignment_4_1_1_1; }

		//LocalAction
		public RuleCall getLocalActionsLocalActionParserRuleCall_4_1_1_1_0() { return cLocalActionsLocalActionParserRuleCall_4_1_1_1_0; }

		//((regions+=SingleDataflowRegion | regions+=SingleControlflowRegion) regions+=Region*)?
		public Group getGroup_4_1_2() { return cGroup_4_1_2; }

		//regions+=SingleDataflowRegion | regions+=SingleControlflowRegion
		public Alternatives getAlternatives_4_1_2_0() { return cAlternatives_4_1_2_0; }

		//regions+=SingleDataflowRegion
		public Assignment getRegionsAssignment_4_1_2_0_0() { return cRegionsAssignment_4_1_2_0_0; }

		//SingleDataflowRegion
		public RuleCall getRegionsSingleDataflowRegionParserRuleCall_4_1_2_0_0_0() { return cRegionsSingleDataflowRegionParserRuleCall_4_1_2_0_0_0; }

		//regions+=SingleControlflowRegion
		public Assignment getRegionsAssignment_4_1_2_0_1() { return cRegionsAssignment_4_1_2_0_1; }

		//SingleControlflowRegion
		public RuleCall getRegionsSingleControlflowRegionParserRuleCall_4_1_2_0_1_0() { return cRegionsSingleControlflowRegionParserRuleCall_4_1_2_0_1_0; }

		//regions+=Region*
		public Assignment getRegionsAssignment_4_1_2_1() { return cRegionsAssignment_4_1_2_1; }

		//Region
		public RuleCall getRegionsRegionParserRuleCall_4_1_2_1_0() { return cRegionsRegionParserRuleCall_4_1_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_1_3() { return cRightCurlyBracketKeyword_4_1_3; }
	}

	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cInitialAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cInitialInitialKeyword_1_0 = (Keyword)cInitialAssignment_1.eContents().get(0);
		private final Assignment cFinalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cFinalFinalKeyword_2_0 = (Keyword)cFinalAssignment_2.eContents().get(0);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeStateTypeEnumRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cStateKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cIdAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cIdIDTerminalRuleCall_5_0 = (RuleCall)cIdAssignment_5.eContents().get(0);
		private final Assignment cLabelAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cLabelSTRINGTerminalRuleCall_6_0 = (RuleCall)cLabelAssignment_6.eContents().get(0);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Group cGroup_7_0 = (Group)cAlternatives_7.eContents().get(0);
		private final Keyword cIsKeyword_7_0_0 = (Keyword)cGroup_7_0.eContents().get(0);
		private final Assignment cExpressionAssignment_7_0_1 = (Assignment)cGroup_7_0.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_7_0_1_0 = (RuleCall)cExpressionAssignment_7_0_1.eContents().get(0);
		private final Group cGroup_7_1 = (Group)cAlternatives_7.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_7_1_0 = (Keyword)cGroup_7_1.eContents().get(0);
		private final Alternatives cAlternatives_7_1_1 = (Alternatives)cGroup_7_1.eContents().get(1);
		private final Assignment cDeclarationsAssignment_7_1_1_0 = (Assignment)cAlternatives_7_1_1.eContents().get(0);
		private final RuleCall cDeclarationsDeclarationWOSemicolonParserRuleCall_7_1_1_0_0 = (RuleCall)cDeclarationsAssignment_7_1_1_0.eContents().get(0);
		private final Assignment cLocalActionsAssignment_7_1_1_1 = (Assignment)cAlternatives_7_1_1.eContents().get(1);
		private final RuleCall cLocalActionsLocalActionParserRuleCall_7_1_1_1_0 = (RuleCall)cLocalActionsAssignment_7_1_1_1.eContents().get(0);
		private final Group cGroup_7_1_2 = (Group)cGroup_7_1.eContents().get(2);
		private final Alternatives cAlternatives_7_1_2_0 = (Alternatives)cGroup_7_1_2.eContents().get(0);
		private final Assignment cRegionsAssignment_7_1_2_0_0 = (Assignment)cAlternatives_7_1_2_0.eContents().get(0);
		private final RuleCall cRegionsSingleDataflowRegionParserRuleCall_7_1_2_0_0_0 = (RuleCall)cRegionsAssignment_7_1_2_0_0.eContents().get(0);
		private final Assignment cRegionsAssignment_7_1_2_0_1 = (Assignment)cAlternatives_7_1_2_0.eContents().get(1);
		private final RuleCall cRegionsSingleControlflowRegionParserRuleCall_7_1_2_0_1_0 = (RuleCall)cRegionsAssignment_7_1_2_0_1.eContents().get(0);
		private final Assignment cRegionsAssignment_7_1_2_1 = (Assignment)cGroup_7_1_2.eContents().get(1);
		private final RuleCall cRegionsRegionParserRuleCall_7_1_2_1_0 = (RuleCall)cRegionsAssignment_7_1_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_1_3 = (Keyword)cGroup_7_1.eContents().get(3);
		private final Assignment cOutgoingTransitionsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cOutgoingTransitionsTransitionParserRuleCall_8_0 = (RuleCall)cOutgoingTransitionsAssignment_8.eContents().get(0);
		
		//State returns sccharts::State:
		//	annotations+=Annotation* initial?="initial"? final?="final"? type=StateType? "state" id=ID label=STRING? ("is"
		//	expression=Expression | "{" (declarations+=DeclarationWOSemicolon | localActions+=LocalAction)*
		//	((regions+=SingleDataflowRegion | regions+=SingleControlflowRegion) regions+=Region*)? "}")?
		//	// The semicolon is mandatory for backtracking!
		// outgoingTransitions+=Transition*;
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* initial?="initial"? final?="final"? type=StateType? "state" id=ID label=STRING? ("is"
		//expression=Expression | "{" (declarations+=DeclarationWOSemicolon | localActions+=LocalAction)*
		//((regions+=SingleDataflowRegion | regions+=SingleControlflowRegion) regions+=Region*)? "}")?
		//// The semicolon is mandatory for backtracking!
		// outgoingTransitions+=Transition*
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//initial?="initial"?
		public Assignment getInitialAssignment_1() { return cInitialAssignment_1; }

		//"initial"
		public Keyword getInitialInitialKeyword_1_0() { return cInitialInitialKeyword_1_0; }

		//final?="final"?
		public Assignment getFinalAssignment_2() { return cFinalAssignment_2; }

		//"final"
		public Keyword getFinalFinalKeyword_2_0() { return cFinalFinalKeyword_2_0; }

		//type=StateType?
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//StateType
		public RuleCall getTypeStateTypeEnumRuleCall_3_0() { return cTypeStateTypeEnumRuleCall_3_0; }

		//"state"
		public Keyword getStateKeyword_4() { return cStateKeyword_4; }

		//id=ID
		public Assignment getIdAssignment_5() { return cIdAssignment_5; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_5_0() { return cIdIDTerminalRuleCall_5_0; }

		//label=STRING?
		public Assignment getLabelAssignment_6() { return cLabelAssignment_6; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_6_0() { return cLabelSTRINGTerminalRuleCall_6_0; }

		//("is" expression=Expression | "{" (declarations+=DeclarationWOSemicolon | localActions+=LocalAction)*
		//((regions+=SingleDataflowRegion | regions+=SingleControlflowRegion) regions+=Region*)? "}")?
		public Alternatives getAlternatives_7() { return cAlternatives_7; }

		//"is" expression=Expression
		public Group getGroup_7_0() { return cGroup_7_0; }

		//"is"
		public Keyword getIsKeyword_7_0_0() { return cIsKeyword_7_0_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_7_0_1() { return cExpressionAssignment_7_0_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_7_0_1_0() { return cExpressionExpressionParserRuleCall_7_0_1_0; }

		//"{" (declarations+=DeclarationWOSemicolon | localActions+=LocalAction)* ((regions+=SingleDataflowRegion |
		//regions+=SingleControlflowRegion) regions+=Region*)? "}"
		public Group getGroup_7_1() { return cGroup_7_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7_1_0() { return cLeftCurlyBracketKeyword_7_1_0; }

		//(declarations+=DeclarationWOSemicolon | localActions+=LocalAction)*
		public Alternatives getAlternatives_7_1_1() { return cAlternatives_7_1_1; }

		//declarations+=DeclarationWOSemicolon
		public Assignment getDeclarationsAssignment_7_1_1_0() { return cDeclarationsAssignment_7_1_1_0; }

		//DeclarationWOSemicolon
		public RuleCall getDeclarationsDeclarationWOSemicolonParserRuleCall_7_1_1_0_0() { return cDeclarationsDeclarationWOSemicolonParserRuleCall_7_1_1_0_0; }

		//localActions+=LocalAction
		public Assignment getLocalActionsAssignment_7_1_1_1() { return cLocalActionsAssignment_7_1_1_1; }

		//LocalAction
		public RuleCall getLocalActionsLocalActionParserRuleCall_7_1_1_1_0() { return cLocalActionsLocalActionParserRuleCall_7_1_1_1_0; }

		//((regions+=SingleDataflowRegion | regions+=SingleControlflowRegion) regions+=Region*)?
		public Group getGroup_7_1_2() { return cGroup_7_1_2; }

		//regions+=SingleDataflowRegion | regions+=SingleControlflowRegion
		public Alternatives getAlternatives_7_1_2_0() { return cAlternatives_7_1_2_0; }

		//regions+=SingleDataflowRegion
		public Assignment getRegionsAssignment_7_1_2_0_0() { return cRegionsAssignment_7_1_2_0_0; }

		//SingleDataflowRegion
		public RuleCall getRegionsSingleDataflowRegionParserRuleCall_7_1_2_0_0_0() { return cRegionsSingleDataflowRegionParserRuleCall_7_1_2_0_0_0; }

		//regions+=SingleControlflowRegion
		public Assignment getRegionsAssignment_7_1_2_0_1() { return cRegionsAssignment_7_1_2_0_1; }

		//SingleControlflowRegion
		public RuleCall getRegionsSingleControlflowRegionParserRuleCall_7_1_2_0_1_0() { return cRegionsSingleControlflowRegionParserRuleCall_7_1_2_0_1_0; }

		//regions+=Region*
		public Assignment getRegionsAssignment_7_1_2_1() { return cRegionsAssignment_7_1_2_1; }

		//Region
		public RuleCall getRegionsRegionParserRuleCall_7_1_2_1_0() { return cRegionsRegionParserRuleCall_7_1_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7_1_3() { return cRightCurlyBracketKeyword_7_1_3; }

		//outgoingTransitions+=Transition*
		public Assignment getOutgoingTransitionsAssignment_8() { return cOutgoingTransitionsAssignment_8; }

		//Transition
		public RuleCall getOutgoingTransitionsTransitionParserRuleCall_8_0() { return cOutgoingTransitionsTransitionParserRuleCall_8_0; }
	}

	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTransitionTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cTargetStateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTargetStateStateCrossReference_2_0 = (CrossReference)cTargetStateAssignment_2.eContents().get(0);
		private final RuleCall cTargetStateStateIDTerminalRuleCall_2_0_1 = (RuleCall)cTargetStateStateCrossReference_2_0.eContents().get(1);
		private final Assignment cImmediateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cImmediateImmediateKeyword_3_0 = (Keyword)cImmediateAssignment_3.eContents().get(0);
		private final Assignment cDeferredAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cDeferredDeferredKeyword_4_0 = (Keyword)cDeferredAssignment_4.eContents().get(0);
		private final Assignment cHistoryAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cHistoryHistoryTypeEnumRuleCall_5_0 = (RuleCall)cHistoryAssignment_5.eContents().get(0);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Group cGroup_6_0 = (Group)cAlternatives_6.eContents().get(0);
		private final Keyword cIfKeyword_6_0_0 = (Keyword)cGroup_6_0.eContents().get(0);
		private final Group cGroup_6_0_1 = (Group)cGroup_6_0.eContents().get(1);
		private final Assignment cDelayAssignment_6_0_1_0 = (Assignment)cGroup_6_0_1.eContents().get(0);
		private final RuleCall cDelayINTTerminalRuleCall_6_0_1_0_0 = (RuleCall)cDelayAssignment_6_0_1_0.eContents().get(0);
		private final Assignment cTriggerAssignment_6_0_1_1 = (Assignment)cGroup_6_0_1.eContents().get(1);
		private final RuleCall cTriggerBoolExpressionParserRuleCall_6_0_1_1_0 = (RuleCall)cTriggerAssignment_6_0_1_1.eContents().get(0);
		private final Group cGroup_6_0_2 = (Group)cGroup_6_0.eContents().get(2);
		private final Keyword cThenKeyword_6_0_2_0 = (Keyword)cGroup_6_0_2.eContents().get(0);
		private final Assignment cEffectsAssignment_6_0_2_1 = (Assignment)cGroup_6_0_2.eContents().get(1);
		private final RuleCall cEffectsEffectParserRuleCall_6_0_2_1_0 = (RuleCall)cEffectsAssignment_6_0_2_1.eContents().get(0);
		private final Group cGroup_6_0_2_2 = (Group)cGroup_6_0_2.eContents().get(2);
		private final Keyword cSemicolonKeyword_6_0_2_2_0 = (Keyword)cGroup_6_0_2_2.eContents().get(0);
		private final Assignment cEffectsAssignment_6_0_2_2_1 = (Assignment)cGroup_6_0_2_2.eContents().get(1);
		private final RuleCall cEffectsEffectParserRuleCall_6_0_2_2_1_0 = (RuleCall)cEffectsAssignment_6_0_2_2_1.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cAlternatives_6.eContents().get(1);
		private final Keyword cIfKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cLabelAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cLabelSTRINGTerminalRuleCall_6_1_1_0 = (RuleCall)cLabelAssignment_6_1_1.eContents().get(0);
		
		//Transition returns sccharts::Transition:
		//	annotations+=Annotation* type=TransitionType targetState=[sccharts::State] immediate?="immediate"?
		//	deferred?="deferred"? history=HistoryType? ("if" (delay=INT? trigger=BoolExpression)? ("then" effects+=Effect (";"
		//	effects+=Effect)*)? | "if" label=STRING)?;
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* type=TransitionType targetState=[sccharts::State] immediate?="immediate"? deferred?="deferred"?
		//history=HistoryType? ("if" (delay=INT? trigger=BoolExpression)? ("then" effects+=Effect (";" effects+=Effect)*)? |
		//"if" label=STRING)?
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//type=TransitionType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//TransitionType
		public RuleCall getTypeTransitionTypeEnumRuleCall_1_0() { return cTypeTransitionTypeEnumRuleCall_1_0; }

		//targetState=[sccharts::State]
		public Assignment getTargetStateAssignment_2() { return cTargetStateAssignment_2; }

		//[sccharts::State]
		public CrossReference getTargetStateStateCrossReference_2_0() { return cTargetStateStateCrossReference_2_0; }

		//ID
		public RuleCall getTargetStateStateIDTerminalRuleCall_2_0_1() { return cTargetStateStateIDTerminalRuleCall_2_0_1; }

		//immediate?="immediate"?
		public Assignment getImmediateAssignment_3() { return cImmediateAssignment_3; }

		//"immediate"
		public Keyword getImmediateImmediateKeyword_3_0() { return cImmediateImmediateKeyword_3_0; }

		//deferred?="deferred"?
		public Assignment getDeferredAssignment_4() { return cDeferredAssignment_4; }

		//"deferred"
		public Keyword getDeferredDeferredKeyword_4_0() { return cDeferredDeferredKeyword_4_0; }

		//history=HistoryType?
		public Assignment getHistoryAssignment_5() { return cHistoryAssignment_5; }

		//HistoryType
		public RuleCall getHistoryHistoryTypeEnumRuleCall_5_0() { return cHistoryHistoryTypeEnumRuleCall_5_0; }

		//("if" (delay=INT? trigger=BoolExpression)? ("then" effects+=Effect (";" effects+=Effect)*)? | "if" label=STRING)?
		public Alternatives getAlternatives_6() { return cAlternatives_6; }

		//"if" (delay=INT? trigger=BoolExpression)? ("then" effects+=Effect (";" effects+=Effect)*)?
		public Group getGroup_6_0() { return cGroup_6_0; }

		//"if"
		public Keyword getIfKeyword_6_0_0() { return cIfKeyword_6_0_0; }

		//(delay=INT? trigger=BoolExpression)?
		public Group getGroup_6_0_1() { return cGroup_6_0_1; }

		//delay=INT?
		public Assignment getDelayAssignment_6_0_1_0() { return cDelayAssignment_6_0_1_0; }

		//INT
		public RuleCall getDelayINTTerminalRuleCall_6_0_1_0_0() { return cDelayINTTerminalRuleCall_6_0_1_0_0; }

		//trigger=BoolExpression
		public Assignment getTriggerAssignment_6_0_1_1() { return cTriggerAssignment_6_0_1_1; }

		//BoolExpression
		public RuleCall getTriggerBoolExpressionParserRuleCall_6_0_1_1_0() { return cTriggerBoolExpressionParserRuleCall_6_0_1_1_0; }

		//("then" effects+=Effect (";" effects+=Effect)*)?
		public Group getGroup_6_0_2() { return cGroup_6_0_2; }

		//"then"
		public Keyword getThenKeyword_6_0_2_0() { return cThenKeyword_6_0_2_0; }

		//effects+=Effect
		public Assignment getEffectsAssignment_6_0_2_1() { return cEffectsAssignment_6_0_2_1; }

		//Effect
		public RuleCall getEffectsEffectParserRuleCall_6_0_2_1_0() { return cEffectsEffectParserRuleCall_6_0_2_1_0; }

		//(";" effects+=Effect)*
		public Group getGroup_6_0_2_2() { return cGroup_6_0_2_2; }

		//";"
		public Keyword getSemicolonKeyword_6_0_2_2_0() { return cSemicolonKeyword_6_0_2_2_0; }

		//effects+=Effect
		public Assignment getEffectsAssignment_6_0_2_2_1() { return cEffectsAssignment_6_0_2_2_1; }

		//Effect
		public RuleCall getEffectsEffectParserRuleCall_6_0_2_2_1_0() { return cEffectsEffectParserRuleCall_6_0_2_2_1_0; }

		//"if" label=STRING
		public Group getGroup_6_1() { return cGroup_6_1; }

		//"if"
		public Keyword getIfKeyword_6_1_0() { return cIfKeyword_6_1_0; }

		//label=STRING
		public Assignment getLabelAssignment_6_1_1() { return cLabelAssignment_6_1_1; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_6_1_1_0() { return cLabelSTRINGTerminalRuleCall_6_1_1_0; }
	}

	public class SingleControlflowRegionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SingleControlflowRegion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cControlflowRegionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cAnnotationsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0_0 = (RuleCall)cAnnotationsAssignment_1_0.eContents().get(0);
		private final Keyword cRegionKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cIdAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cIdIDTerminalRuleCall_1_2_0 = (RuleCall)cIdAssignment_1_2.eContents().get(0);
		private final Assignment cLabelAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cLabelSTRINGTerminalRuleCall_1_3_0 = (RuleCall)cLabelAssignment_1_3.eContents().get(0);
		private final Keyword cColonKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cDeclarationsAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cDeclarationsDeclarationWOSemicolonParserRuleCall_1_5_0 = (RuleCall)cDeclarationsAssignment_1_5.eContents().get(0);
		private final Assignment cStatesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatesStateParserRuleCall_2_0 = (RuleCall)cStatesAssignment_2.eContents().get(0);
		
		//SingleControlflowRegion returns sccharts::ControlflowRegion:
		//	{sccharts::ControlflowRegion} (annotations+=Annotation* "region" id=ID? label=STRING? ":"
		//	declarations+=DeclarationWOSemicolon*)? states+=State*;
		@Override public ParserRule getRule() { return rule; }

		//{sccharts::ControlflowRegion} (annotations+=Annotation* "region" id=ID? label=STRING? ":"
		//declarations+=DeclarationWOSemicolon*)? states+=State*
		public Group getGroup() { return cGroup; }

		//{sccharts::ControlflowRegion}
		public Action getControlflowRegionAction_0() { return cControlflowRegionAction_0; }

		//(annotations+=Annotation* "region" id=ID? label=STRING? ":" declarations+=DeclarationWOSemicolon*)?
		public Group getGroup_1() { return cGroup_1; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_1_0() { return cAnnotationsAssignment_1_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0_0() { return cAnnotationsAnnotationParserRuleCall_1_0_0; }

		//"region"
		public Keyword getRegionKeyword_1_1() { return cRegionKeyword_1_1; }

		//id=ID?
		public Assignment getIdAssignment_1_2() { return cIdAssignment_1_2; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_1_2_0() { return cIdIDTerminalRuleCall_1_2_0; }

		//label=STRING?
		public Assignment getLabelAssignment_1_3() { return cLabelAssignment_1_3; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_1_3_0() { return cLabelSTRINGTerminalRuleCall_1_3_0; }

		//":"
		public Keyword getColonKeyword_1_4() { return cColonKeyword_1_4; }

		//declarations+=DeclarationWOSemicolon*
		public Assignment getDeclarationsAssignment_1_5() { return cDeclarationsAssignment_1_5; }

		//DeclarationWOSemicolon
		public RuleCall getDeclarationsDeclarationWOSemicolonParserRuleCall_1_5_0() { return cDeclarationsDeclarationWOSemicolonParserRuleCall_1_5_0; }

		//states+=State*
		public Assignment getStatesAssignment_2() { return cStatesAssignment_2; }

		//State
		public RuleCall getStatesStateParserRuleCall_2_0() { return cStatesStateParserRuleCall_2_0; }
	}

	public class SingleDataflowRegionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SingleDataflowRegion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDataflowRegionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cAnnotationsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0_0 = (RuleCall)cAnnotationsAssignment_1_0.eContents().get(0);
		private final Keyword cDataflowKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cIdAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cIdIDTerminalRuleCall_1_2_0 = (RuleCall)cIdAssignment_1_2.eContents().get(0);
		private final Assignment cLabelAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cLabelSTRINGTerminalRuleCall_1_3_0 = (RuleCall)cLabelAssignment_1_3.eContents().get(0);
		private final Keyword cColonKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cDeclarationsAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cDeclarationsDeclarationWOSemicolonParserRuleCall_1_5_0 = (RuleCall)cDeclarationsAssignment_1_5.eContents().get(0);
		private final Assignment cEquationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEquationsEquationParserRuleCall_2_0 = (RuleCall)cEquationsAssignment_2.eContents().get(0);
		
		//SingleDataflowRegion returns sccharts::DataflowRegion:
		//	{sccharts::DataflowRegion} (annotations+=Annotation* "dataflow" id=ID? label=STRING? ":"
		//	declarations+=DeclarationWOSemicolon*) equations+=Equation*;
		@Override public ParserRule getRule() { return rule; }

		//{sccharts::DataflowRegion} (annotations+=Annotation* "dataflow" id=ID? label=STRING? ":"
		//declarations+=DeclarationWOSemicolon*) equations+=Equation*
		public Group getGroup() { return cGroup; }

		//{sccharts::DataflowRegion}
		public Action getDataflowRegionAction_0() { return cDataflowRegionAction_0; }

		//annotations+=Annotation* "dataflow" id=ID? label=STRING? ":" declarations+=DeclarationWOSemicolon*
		public Group getGroup_1() { return cGroup_1; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_1_0() { return cAnnotationsAssignment_1_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0_0() { return cAnnotationsAnnotationParserRuleCall_1_0_0; }

		//"dataflow"
		public Keyword getDataflowKeyword_1_1() { return cDataflowKeyword_1_1; }

		//id=ID?
		public Assignment getIdAssignment_1_2() { return cIdAssignment_1_2; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_1_2_0() { return cIdIDTerminalRuleCall_1_2_0; }

		//label=STRING?
		public Assignment getLabelAssignment_1_3() { return cLabelAssignment_1_3; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_1_3_0() { return cLabelSTRINGTerminalRuleCall_1_3_0; }

		//":"
		public Keyword getColonKeyword_1_4() { return cColonKeyword_1_4; }

		//declarations+=DeclarationWOSemicolon*
		public Assignment getDeclarationsAssignment_1_5() { return cDeclarationsAssignment_1_5; }

		//DeclarationWOSemicolon
		public RuleCall getDeclarationsDeclarationWOSemicolonParserRuleCall_1_5_0() { return cDeclarationsDeclarationWOSemicolonParserRuleCall_1_5_0; }

		//equations+=Equation*
		public Assignment getEquationsAssignment_2() { return cEquationsAssignment_2; }

		//Equation
		public RuleCall getEquationsEquationParserRuleCall_2_0() { return cEquationsEquationParserRuleCall_2_0; }
	}

	public class RegionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Region");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cControlflowRegionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDataflowRegionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Region returns sccharts::Region:
		//	ControlflowRegion | DataflowRegion;
		@Override public ParserRule getRule() { return rule; }

		//ControlflowRegion | DataflowRegion
		public Alternatives getAlternatives() { return cAlternatives; }

		//ControlflowRegion
		public RuleCall getControlflowRegionParserRuleCall_0() { return cControlflowRegionParserRuleCall_0; }

		//DataflowRegion
		public RuleCall getDataflowRegionParserRuleCall_1() { return cDataflowRegionParserRuleCall_1; }
	}

	public class ControlflowRegionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ControlflowRegion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cControlflowRegionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Keyword cRegionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIdAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIdIDTerminalRuleCall_3_0 = (RuleCall)cIdAssignment_3.eContents().get(0);
		private final Assignment cLabelAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLabelSTRINGTerminalRuleCall_4_0 = (RuleCall)cLabelAssignment_4.eContents().get(0);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDeclarationsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDeclarationsDeclarationWOSemicolonParserRuleCall_6_0 = (RuleCall)cDeclarationsAssignment_6.eContents().get(0);
		private final Assignment cStatesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cStatesStateParserRuleCall_7_0 = (RuleCall)cStatesAssignment_7.eContents().get(0);
		
		//ControlflowRegion returns sccharts::ControlflowRegion:
		//	{sccharts::ControlflowRegion} annotations+=Annotation* "region" id=ID? label=STRING? ":"
		//	declarations+=DeclarationWOSemicolon* states+=State+;
		@Override public ParserRule getRule() { return rule; }

		//{sccharts::ControlflowRegion} annotations+=Annotation* "region" id=ID? label=STRING? ":"
		//declarations+=DeclarationWOSemicolon* states+=State+
		public Group getGroup() { return cGroup; }

		//{sccharts::ControlflowRegion}
		public Action getControlflowRegionAction_0() { return cControlflowRegionAction_0; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() { return cAnnotationsAnnotationParserRuleCall_1_0; }

		//"region"
		public Keyword getRegionKeyword_2() { return cRegionKeyword_2; }

		//id=ID?
		public Assignment getIdAssignment_3() { return cIdAssignment_3; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_3_0() { return cIdIDTerminalRuleCall_3_0; }

		//label=STRING?
		public Assignment getLabelAssignment_4() { return cLabelAssignment_4; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_4_0() { return cLabelSTRINGTerminalRuleCall_4_0; }

		//":"
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }

		//declarations+=DeclarationWOSemicolon*
		public Assignment getDeclarationsAssignment_6() { return cDeclarationsAssignment_6; }

		//DeclarationWOSemicolon
		public RuleCall getDeclarationsDeclarationWOSemicolonParserRuleCall_6_0() { return cDeclarationsDeclarationWOSemicolonParserRuleCall_6_0; }

		//states+=State+
		public Assignment getStatesAssignment_7() { return cStatesAssignment_7; }

		//State
		public RuleCall getStatesStateParserRuleCall_7_0() { return cStatesStateParserRuleCall_7_0; }
	}

	public class DataflowRegionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataflowRegion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDataflowRegionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Keyword cDataflowKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIdAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIdIDTerminalRuleCall_3_0 = (RuleCall)cIdAssignment_3.eContents().get(0);
		private final Assignment cLabelAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLabelSTRINGTerminalRuleCall_4_0 = (RuleCall)cLabelAssignment_4.eContents().get(0);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDeclarationsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDeclarationsDeclarationWOSemicolonParserRuleCall_6_0 = (RuleCall)cDeclarationsAssignment_6.eContents().get(0);
		private final Assignment cEquationsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cEquationsEquationParserRuleCall_7_0 = (RuleCall)cEquationsAssignment_7.eContents().get(0);
		
		//DataflowRegion returns sccharts::DataflowRegion:
		//	{sccharts::DataflowRegion} annotations+=Annotation* "dataflow" id=ID? label=STRING? ":"
		//	declarations+=DeclarationWOSemicolon* equations+=Equation+;
		@Override public ParserRule getRule() { return rule; }

		//{sccharts::DataflowRegion} annotations+=Annotation* "dataflow" id=ID? label=STRING? ":"
		//declarations+=DeclarationWOSemicolon* equations+=Equation+
		public Group getGroup() { return cGroup; }

		//{sccharts::DataflowRegion}
		public Action getDataflowRegionAction_0() { return cDataflowRegionAction_0; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_1_0() { return cAnnotationsAnnotationParserRuleCall_1_0; }

		//"dataflow"
		public Keyword getDataflowKeyword_2() { return cDataflowKeyword_2; }

		//id=ID?
		public Assignment getIdAssignment_3() { return cIdAssignment_3; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_3_0() { return cIdIDTerminalRuleCall_3_0; }

		//label=STRING?
		public Assignment getLabelAssignment_4() { return cLabelAssignment_4; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_4_0() { return cLabelSTRINGTerminalRuleCall_4_0; }

		//":"
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }

		//declarations+=DeclarationWOSemicolon*
		public Assignment getDeclarationsAssignment_6() { return cDeclarationsAssignment_6; }

		//DeclarationWOSemicolon
		public RuleCall getDeclarationsDeclarationWOSemicolonParserRuleCall_6_0() { return cDeclarationsDeclarationWOSemicolonParserRuleCall_6_0; }

		//equations+=Equation+
		public Assignment getEquationsAssignment_7() { return cEquationsAssignment_7; }

		//Equation
		public RuleCall getEquationsEquationParserRuleCall_7_0() { return cEquationsEquationParserRuleCall_7_0; }
	}

	public class EquationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Equation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEquationAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cValuedObjectAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final CrossReference cValuedObjectValuedObjectCrossReference_1_0_0 = (CrossReference)cValuedObjectAssignment_1_0.eContents().get(0);
		private final RuleCall cValuedObjectValuedObjectIDTerminalRuleCall_1_0_0_1 = (RuleCall)cValuedObjectValuedObjectCrossReference_1_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//Equation returns sccharts::Equation:
		//	{sccharts::Equation} (valuedObject=[kexpressions::ValuedObject] "=" expression=Expression ";");
		@Override public ParserRule getRule() { return rule; }

		//{sccharts::Equation} (valuedObject=[kexpressions::ValuedObject] "=" expression=Expression ";")
		public Group getGroup() { return cGroup; }

		//{sccharts::Equation}
		public Action getEquationAction_0() { return cEquationAction_0; }

		//valuedObject=[kexpressions::ValuedObject] "=" expression=Expression ";"
		public Group getGroup_1() { return cGroup_1; }

		//valuedObject=[kexpressions::ValuedObject]
		public Assignment getValuedObjectAssignment_1_0() { return cValuedObjectAssignment_1_0; }

		//[kexpressions::ValuedObject]
		public CrossReference getValuedObjectValuedObjectCrossReference_1_0_0() { return cValuedObjectValuedObjectCrossReference_1_0_0; }

		//ID
		public RuleCall getValuedObjectValuedObjectIDTerminalRuleCall_1_0_0_1() { return cValuedObjectValuedObjectIDTerminalRuleCall_1_0_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_2_0() { return cExpressionExpressionParserRuleCall_1_2_0; }

		//";"
		public Keyword getSemicolonKeyword_1_3() { return cSemicolonKeyword_1_3; }
	}

	public class LocalActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocalAction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEntryActionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDuringActionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExitActionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSuspendActionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cIterateActionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//LocalAction returns sccharts::LocalAction:
		//	EntryAction | DuringAction | ExitAction | SuspendAction | IterateAction;
		@Override public ParserRule getRule() { return rule; }

		//EntryAction | DuringAction | ExitAction | SuspendAction | IterateAction
		public Alternatives getAlternatives() { return cAlternatives; }

		//EntryAction
		public RuleCall getEntryActionParserRuleCall_0() { return cEntryActionParserRuleCall_0; }

		//DuringAction
		public RuleCall getDuringActionParserRuleCall_1() { return cDuringActionParserRuleCall_1; }

		//ExitAction
		public RuleCall getExitActionParserRuleCall_2() { return cExitActionParserRuleCall_2; }

		//SuspendAction
		public RuleCall getSuspendActionParserRuleCall_3() { return cSuspendActionParserRuleCall_3; }

		//IterateAction
		public RuleCall getIterateActionParserRuleCall_4() { return cIterateActionParserRuleCall_4; }
	}

	public class BindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Binding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cFormalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFormalValuedObjectCrossReference_1_0 = (CrossReference)cFormalAssignment_1.eContents().get(0);
		private final RuleCall cFormalValuedObjectIDTerminalRuleCall_1_0_1 = (RuleCall)cFormalValuedObjectCrossReference_1_0.eContents().get(1);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cActualAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cActualValuedObjectCrossReference_3_0 = (CrossReference)cActualAssignment_3.eContents().get(0);
		private final RuleCall cActualValuedObjectIDTerminalRuleCall_3_0_1 = (RuleCall)cActualValuedObjectCrossReference_3_0.eContents().get(1);
		
		////ScopeReference returns sccharts::ScopeReference:
		// //    scope=[sccharts::Scope|ID];
		// //
		//
		////ScopeCall returns sccharts::ScopeCall:
		// //    '[' scope=[sccharts::Scope|ID]
		//
		////    	(('(' parameters += Parameter (',' parameters += Parameter)* ')') | '()')? 
		// //    ']'
		//
		////    ('.' valuedObject = [kexpressions::ValuedObject])
		// //;
		// Binding returns sccharts::Binding:
		//	annotations+=Annotation* formal=[kexpressions::ValuedObject] "to" actual=[kexpressions::ValuedObject];
		@Override public ParserRule getRule() { return rule; }

		//annotations+=Annotation* formal=[kexpressions::ValuedObject] "to" actual=[kexpressions::ValuedObject]
		public Group getGroup() { return cGroup; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_0_0() { return cAnnotationsAnnotationParserRuleCall_0_0; }

		//formal=[kexpressions::ValuedObject]
		public Assignment getFormalAssignment_1() { return cFormalAssignment_1; }

		//[kexpressions::ValuedObject]
		public CrossReference getFormalValuedObjectCrossReference_1_0() { return cFormalValuedObjectCrossReference_1_0; }

		//ID
		public RuleCall getFormalValuedObjectIDTerminalRuleCall_1_0_1() { return cFormalValuedObjectIDTerminalRuleCall_1_0_1; }

		//"to"
		public Keyword getToKeyword_2() { return cToKeyword_2; }

		//actual=[kexpressions::ValuedObject]
		public Assignment getActualAssignment_3() { return cActualAssignment_3; }

		//[kexpressions::ValuedObject]
		public CrossReference getActualValuedObjectCrossReference_3_0() { return cActualValuedObjectCrossReference_3_0; }

		//ID
		public RuleCall getActualValuedObjectIDTerminalRuleCall_3_0_1() { return cActualValuedObjectIDTerminalRuleCall_3_0_1; }
	}

	public class AtomicExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AtomicExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBoolValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cValuedObjectTestExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cBoolExpressionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final RuleCall cFunctionCallParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTextExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//AtomicExpression returns kexpressions::Expression:
		//	BoolValue //    | ScopeCall
		// | ValuedObjectTestExpression | "(" BoolExpression ")" | FunctionCall | TextExpression;
		@Override public ParserRule getRule() { return rule; }

		//BoolValue //    | ScopeCall
		// | ValuedObjectTestExpression | "(" BoolExpression ")" | FunctionCall | TextExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//BoolValue
		public RuleCall getBoolValueParserRuleCall_0() { return cBoolValueParserRuleCall_0; }

		//ValuedObjectTestExpression
		public RuleCall getValuedObjectTestExpressionParserRuleCall_1() { return cValuedObjectTestExpressionParserRuleCall_1; }

		//"(" BoolExpression ")"
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//BoolExpression
		public RuleCall getBoolExpressionParserRuleCall_2_1() { return cBoolExpressionParserRuleCall_2_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }

		//FunctionCall
		public RuleCall getFunctionCallParserRuleCall_3() { return cFunctionCallParserRuleCall_3; }

		//TextExpression
		public RuleCall getTextExpressionParserRuleCall_4() { return cTextExpressionParserRuleCall_4; }
	}
	
	
	public class StateTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "StateType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNORMALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNORMALNormalKeyword_0_0 = (Keyword)cNORMALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCONNECTOREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCONNECTORConnectorKeyword_1_0 = (Keyword)cCONNECTOREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cREFERENCEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cREFERENCEReferenceKeyword_2_0 = (Keyword)cREFERENCEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cTEXTUALEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cTEXTUALTextualKeyword_3_0 = (Keyword)cTEXTUALEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum StateType returns sccharts::StateType:
		//	NORMAL="normal" | CONNECTOR="connector" | REFERENCE="reference" | TEXTUAL="textual";
		public EnumRule getRule() { return rule; }

		//NORMAL="normal" | CONNECTOR="connector" | REFERENCE="reference" | TEXTUAL="textual"
		public Alternatives getAlternatives() { return cAlternatives; }

		//NORMAL="normal"
		public EnumLiteralDeclaration getNORMALEnumLiteralDeclaration_0() { return cNORMALEnumLiteralDeclaration_0; }

		//"normal"
		public Keyword getNORMALNormalKeyword_0_0() { return cNORMALNormalKeyword_0_0; }

		//CONNECTOR="connector"
		public EnumLiteralDeclaration getCONNECTOREnumLiteralDeclaration_1() { return cCONNECTOREnumLiteralDeclaration_1; }

		//"connector"
		public Keyword getCONNECTORConnectorKeyword_1_0() { return cCONNECTORConnectorKeyword_1_0; }

		//REFERENCE="reference"
		public EnumLiteralDeclaration getREFERENCEEnumLiteralDeclaration_2() { return cREFERENCEEnumLiteralDeclaration_2; }

		//"reference"
		public Keyword getREFERENCEReferenceKeyword_2_0() { return cREFERENCEReferenceKeyword_2_0; }

		//TEXTUAL="textual"
		public EnumLiteralDeclaration getTEXTUALEnumLiteralDeclaration_3() { return cTEXTUALEnumLiteralDeclaration_3; }

		//"textual"
		public Keyword getTEXTUALTextualKeyword_3_0() { return cTEXTUALTextualKeyword_3_0; }
	}

	public class TransitionTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "TransitionType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cWEAKABORTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cWEAKABORTHyphenMinusHyphenMinusKeyword_0_0 = (Keyword)cWEAKABORTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSTRONGABORTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSTRONGABORTAbortKeyword_1_0 = (Keyword)cSTRONGABORTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cTERMINATIONEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cTERMINATIONJoinKeyword_2_0 = (Keyword)cTERMINATIONEnumLiteralDeclaration_2.eContents().get(0);
		
		////Node returns sccharts::Node:
		// //    ReferenceNode | CallNode | DefineNode;
		// //    
		// //
		//
		//////CallNode returns sccharts::CallNode:
		// ////    {sccharts::CallNode}
		//
		//////    (id=ID) '=' callReference = [sccharts::DefineNode|ID]
		//
		//////    '(' (parameters+=ValuedObjectReference)? (',' parameters+=ValuedObjectReference)* ')'
		// ////    ';';
		// ////    
		//
		//////
		// ////DefineNode returns sccharts::DefineNode:
		// ////    {sccharts::DefineNode}
		//
		//////    'node' (id=ID) '(' (inputs+=DeclarationWOSemicolon)* ')'
		//
		//////    'returns' '(' (outputs+=DeclarationWOSemicolon)* ')' '{'
		// ////    (
		//
		//////        ((valuedObjects += [kexpressions::ValuedObject]) '=' (expressions += Expression) ';')*
		//
		//////        | // keep that? yes, but do not allow to mix them
		// ////        (states+=State)*
		// ////    )
		// ////    '}';
		//
		//////    
		// ////
		// ////ReferenceNode returns sccharts::ReferenceNode:
		// ////    {sccharts::ReferenceNode}
		//
		//////    (id=ID) (label=STRING)? '=' 'ref' referencedScope = [sccharts::State|ID]
		//
		//////    '(' (parameters+=ValuedObjectReference)? (',' parameters+=ValuedObjectReference)* ')'
		// ////    ';';	
		// enum
		//TransitionType returns sccharts::TransitionType:
		//	WEAKABORT="--" | STRONGABORT="-- abort" | TERMINATION="-- join";
		public EnumRule getRule() { return rule; }

		//WEAKABORT="--" //Node returns sccharts::Node:
		// //    ReferenceNode | CallNode | DefineNode;
		// //    
		// //
		//
		//////CallNode returns sccharts::CallNode:
		// ////    {sccharts::CallNode}
		//
		//////    (id=ID) '=' callReference = [sccharts::DefineNode|ID]
		//
		//////    '(' (parameters+=ValuedObjectReference)? (',' parameters+=ValuedObjectReference)* ')'
		// ////    ';';
		// ////    
		//
		//////
		// ////DefineNode returns sccharts::DefineNode:
		// ////    {sccharts::DefineNode}
		//
		//////    'node' (id=ID) '(' (inputs+=DeclarationWOSemicolon)* ')'
		//
		//////    'returns' '(' (outputs+=DeclarationWOSemicolon)* ')' '{'
		// ////    (
		//
		//////        ((valuedObjects += [kexpressions::ValuedObject]) '=' (expressions += Expression) ';')*
		//
		//////        | // keep that? yes, but do not allow to mix them
		// ////        (states+=State)*
		// ////    )
		// ////    '}';
		//
		//////    
		// ////
		// ////ReferenceNode returns sccharts::ReferenceNode:
		// ////    {sccharts::ReferenceNode}
		//
		//////    (id=ID) (label=STRING)? '=' 'ref' referencedScope = [sccharts::State|ID]
		//
		//////    '(' (parameters+=ValuedObjectReference)? (',' parameters+=ValuedObjectReference)* ')'
		// ////    ';';	
		// |
		//STRONGABORT="-- abort" | TERMINATION="-- join"
		public Alternatives getAlternatives() { return cAlternatives; }

		//WEAKABORT="--"
		public EnumLiteralDeclaration getWEAKABORTEnumLiteralDeclaration_0() { return cWEAKABORTEnumLiteralDeclaration_0; }

		//"--"
		public Keyword getWEAKABORTHyphenMinusHyphenMinusKeyword_0_0() { return cWEAKABORTHyphenMinusHyphenMinusKeyword_0_0; }

		//STRONGABORT="-- abort"
		public EnumLiteralDeclaration getSTRONGABORTEnumLiteralDeclaration_1() { return cSTRONGABORTEnumLiteralDeclaration_1; }

		//"-- abort"
		public Keyword getSTRONGABORTAbortKeyword_1_0() { return cSTRONGABORTAbortKeyword_1_0; }

		////Node returns sccharts::Node:
		// //    ReferenceNode | CallNode | DefineNode;
		// //    
		// //
		//
		//////CallNode returns sccharts::CallNode:
		// ////    {sccharts::CallNode}
		//
		//////    (id=ID) '=' callReference = [sccharts::DefineNode|ID]
		//
		//////    '(' (parameters+=ValuedObjectReference)? (',' parameters+=ValuedObjectReference)* ')'
		// ////    ';';
		// ////    
		//
		//////
		// ////DefineNode returns sccharts::DefineNode:
		// ////    {sccharts::DefineNode}
		//
		//////    'node' (id=ID) '(' (inputs+=DeclarationWOSemicolon)* ')'
		//
		//////    'returns' '(' (outputs+=DeclarationWOSemicolon)* ')' '{'
		// ////    (
		//
		//////        ((valuedObjects += [kexpressions::ValuedObject]) '=' (expressions += Expression) ';')*
		//
		//////        | // keep that? yes, but do not allow to mix them
		// ////        (states+=State)*
		// ////    )
		// ////    '}';
		//
		//////    
		// ////
		// ////ReferenceNode returns sccharts::ReferenceNode:
		// ////    {sccharts::ReferenceNode}
		//
		//////    (id=ID) (label=STRING)? '=' 'ref' referencedScope = [sccharts::State|ID]
		//
		//////    '(' (parameters+=ValuedObjectReference)? (',' parameters+=ValuedObjectReference)* ')'
		// ////    ';';	
		//
		//TERMINATION="-- join"
		public EnumLiteralDeclaration getTERMINATIONEnumLiteralDeclaration_2() { return cTERMINATIONEnumLiteralDeclaration_2; }

		////Node returns sccharts::Node:
		// //    ReferenceNode | CallNode | DefineNode;
		// //    
		// //
		//
		//////CallNode returns sccharts::CallNode:
		// ////    {sccharts::CallNode}
		//
		//////    (id=ID) '=' callReference = [sccharts::DefineNode|ID]
		//
		//////    '(' (parameters+=ValuedObjectReference)? (',' parameters+=ValuedObjectReference)* ')'
		// ////    ';';
		// ////    
		//
		//////
		// ////DefineNode returns sccharts::DefineNode:
		// ////    {sccharts::DefineNode}
		//
		//////    'node' (id=ID) '(' (inputs+=DeclarationWOSemicolon)* ')'
		//
		//////    'returns' '(' (outputs+=DeclarationWOSemicolon)* ')' '{'
		// ////    (
		//
		//////        ((valuedObjects += [kexpressions::ValuedObject]) '=' (expressions += Expression) ';')*
		//
		//////        | // keep that? yes, but do not allow to mix them
		// ////        (states+=State)*
		// ////    )
		// ////    '}';
		//
		//////    
		// ////
		// ////ReferenceNode returns sccharts::ReferenceNode:
		// ////    {sccharts::ReferenceNode}
		//
		//////    (id=ID) (label=STRING)? '=' 'ref' referencedScope = [sccharts::State|ID]
		//
		//////    '(' (parameters+=ValuedObjectReference)? (',' parameters+=ValuedObjectReference)* ')'
		// ////    ';';	
		//
		//"-- join"
		public Keyword getTERMINATIONJoinKeyword_2_0() { return cTERMINATIONJoinKeyword_2_0; }
	}
	
	private final SCChartsElements pSCCharts;
	private final RootStateElements pRootState;
	private final StateElements pState;
	private final TransitionElements pTransition;
	private final SingleControlflowRegionElements pSingleControlflowRegion;
	private final SingleDataflowRegionElements pSingleDataflowRegion;
	private final RegionElements pRegion;
	private final ControlflowRegionElements pControlflowRegion;
	private final DataflowRegionElements pDataflowRegion;
	private final EquationElements pEquation;
	private final LocalActionElements pLocalAction;
	private final BindingElements pBinding;
	private final AtomicExpressionElements pAtomicExpression;
	private final StateTypeElements unknownRuleStateType;
	private final TransitionTypeElements unknownRuleTransitionType;
	
	private final Grammar grammar;

	private final ActionsGrammarAccess gaActions;

	@Inject
	public Sct3GrammarAccess(GrammarProvider grammarProvider,
		ActionsGrammarAccess gaActions) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaActions = gaActions;
		this.pSCCharts = new SCChartsElements();
		this.pRootState = new RootStateElements();
		this.pState = new StateElements();
		this.pTransition = new TransitionElements();
		this.pSingleControlflowRegion = new SingleControlflowRegionElements();
		this.pSingleDataflowRegion = new SingleDataflowRegionElements();
		this.pRegion = new RegionElements();
		this.pControlflowRegion = new ControlflowRegionElements();
		this.pDataflowRegion = new DataflowRegionElements();
		this.pEquation = new EquationElements();
		this.pLocalAction = new LocalActionElements();
		this.pBinding = new BindingElements();
		this.pAtomicExpression = new AtomicExpressionElements();
		this.unknownRuleStateType = new StateTypeElements();
		this.unknownRuleTransitionType = new TransitionTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.cau.cs.kieler.sccharts.text3.Sct3".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public ActionsGrammarAccess getActionsGrammarAccess() {
		return gaActions;
	}

	
	////generate sct3 "http://kieler.cs.cau.de/sccharts/textual3/0.1.0"
	//
	//// ---------------------------------------------------------------------------------------------------
	// SCCharts
	//returns sccharts::SCCharts:
	//	rootStates+=RootState*;
	public SCChartsElements getSCChartsAccess() {
		return pSCCharts;
	}
	
	public ParserRule getSCChartsRule() {
		return getSCChartsAccess().getRule();
	}

	//RootState returns sccharts::State:
	//	annotations+=Annotation* "scchart" id=ID label=STRING? ("is" expression=Expression | "{"
	//	(declarations+=DeclarationWOSemicolon | localActions+=LocalAction)* ((regions+=SingleDataflowRegion |
	//	regions+=SingleControlflowRegion) regions+=Region*)? "}");
	public RootStateElements getRootStateAccess() {
		return pRootState;
	}
	
	public ParserRule getRootStateRule() {
		return getRootStateAccess().getRule();
	}

	//State returns sccharts::State:
	//	annotations+=Annotation* initial?="initial"? final?="final"? type=StateType? "state" id=ID label=STRING? ("is"
	//	expression=Expression | "{" (declarations+=DeclarationWOSemicolon | localActions+=LocalAction)*
	//	((regions+=SingleDataflowRegion | regions+=SingleControlflowRegion) regions+=Region*)? "}")?
	//	// The semicolon is mandatory for backtracking!
	// outgoingTransitions+=Transition*;
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}

	//Transition returns sccharts::Transition:
	//	annotations+=Annotation* type=TransitionType targetState=[sccharts::State] immediate?="immediate"?
	//	deferred?="deferred"? history=HistoryType? ("if" (delay=INT? trigger=BoolExpression)? ("then" effects+=Effect (";"
	//	effects+=Effect)*)? | "if" label=STRING)?;
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}

	//SingleControlflowRegion returns sccharts::ControlflowRegion:
	//	{sccharts::ControlflowRegion} (annotations+=Annotation* "region" id=ID? label=STRING? ":"
	//	declarations+=DeclarationWOSemicolon*)? states+=State*;
	public SingleControlflowRegionElements getSingleControlflowRegionAccess() {
		return pSingleControlflowRegion;
	}
	
	public ParserRule getSingleControlflowRegionRule() {
		return getSingleControlflowRegionAccess().getRule();
	}

	//SingleDataflowRegion returns sccharts::DataflowRegion:
	//	{sccharts::DataflowRegion} (annotations+=Annotation* "dataflow" id=ID? label=STRING? ":"
	//	declarations+=DeclarationWOSemicolon*) equations+=Equation*;
	public SingleDataflowRegionElements getSingleDataflowRegionAccess() {
		return pSingleDataflowRegion;
	}
	
	public ParserRule getSingleDataflowRegionRule() {
		return getSingleDataflowRegionAccess().getRule();
	}

	//Region returns sccharts::Region:
	//	ControlflowRegion | DataflowRegion;
	public RegionElements getRegionAccess() {
		return pRegion;
	}
	
	public ParserRule getRegionRule() {
		return getRegionAccess().getRule();
	}

	//ControlflowRegion returns sccharts::ControlflowRegion:
	//	{sccharts::ControlflowRegion} annotations+=Annotation* "region" id=ID? label=STRING? ":"
	//	declarations+=DeclarationWOSemicolon* states+=State+;
	public ControlflowRegionElements getControlflowRegionAccess() {
		return pControlflowRegion;
	}
	
	public ParserRule getControlflowRegionRule() {
		return getControlflowRegionAccess().getRule();
	}

	//DataflowRegion returns sccharts::DataflowRegion:
	//	{sccharts::DataflowRegion} annotations+=Annotation* "dataflow" id=ID? label=STRING? ":"
	//	declarations+=DeclarationWOSemicolon* equations+=Equation+;
	public DataflowRegionElements getDataflowRegionAccess() {
		return pDataflowRegion;
	}
	
	public ParserRule getDataflowRegionRule() {
		return getDataflowRegionAccess().getRule();
	}

	//Equation returns sccharts::Equation:
	//	{sccharts::Equation} (valuedObject=[kexpressions::ValuedObject] "=" expression=Expression ";");
	public EquationElements getEquationAccess() {
		return pEquation;
	}
	
	public ParserRule getEquationRule() {
		return getEquationAccess().getRule();
	}

	//LocalAction returns sccharts::LocalAction:
	//	EntryAction | DuringAction | ExitAction | SuspendAction | IterateAction;
	public LocalActionElements getLocalActionAccess() {
		return pLocalAction;
	}
	
	public ParserRule getLocalActionRule() {
		return getLocalActionAccess().getRule();
	}

	////ScopeReference returns sccharts::ScopeReference:
	// //    scope=[sccharts::Scope|ID];
	// //
	//
	////ScopeCall returns sccharts::ScopeCall:
	// //    '[' scope=[sccharts::Scope|ID]
	//
	////    	(('(' parameters += Parameter (',' parameters += Parameter)* ')') | '()')? 
	// //    ']'
	//
	////    ('.' valuedObject = [kexpressions::ValuedObject])
	// //;
	// Binding returns sccharts::Binding:
	//	annotations+=Annotation* formal=[kexpressions::ValuedObject] "to" actual=[kexpressions::ValuedObject];
	public BindingElements getBindingAccess() {
		return pBinding;
	}
	
	public ParserRule getBindingRule() {
		return getBindingAccess().getRule();
	}

	//AtomicExpression returns kexpressions::Expression:
	//	BoolValue //    | ScopeCall
	// | ValuedObjectTestExpression | "(" BoolExpression ")" | FunctionCall | TextExpression;
	public AtomicExpressionElements getAtomicExpressionAccess() {
		return pAtomicExpression;
	}
	
	public ParserRule getAtomicExpressionRule() {
		return getAtomicExpressionAccess().getRule();
	}

	//enum StateType returns sccharts::StateType:
	//	NORMAL="normal" | CONNECTOR="connector" | REFERENCE="reference" | TEXTUAL="textual";
	public StateTypeElements getStateTypeAccess() {
		return unknownRuleStateType;
	}
	
	public EnumRule getStateTypeRule() {
		return getStateTypeAccess().getRule();
	}

	////Node returns sccharts::Node:
	// //    ReferenceNode | CallNode | DefineNode;
	// //    
	// //
	//
	//////CallNode returns sccharts::CallNode:
	// ////    {sccharts::CallNode}
	//
	//////    (id=ID) '=' callReference = [sccharts::DefineNode|ID]
	//
	//////    '(' (parameters+=ValuedObjectReference)? (',' parameters+=ValuedObjectReference)* ')'
	// ////    ';';
	// ////    
	//
	//////
	// ////DefineNode returns sccharts::DefineNode:
	// ////    {sccharts::DefineNode}
	//
	//////    'node' (id=ID) '(' (inputs+=DeclarationWOSemicolon)* ')'
	//
	//////    'returns' '(' (outputs+=DeclarationWOSemicolon)* ')' '{'
	// ////    (
	//
	//////        ((valuedObjects += [kexpressions::ValuedObject]) '=' (expressions += Expression) ';')*
	//
	//////        | // keep that? yes, but do not allow to mix them
	// ////        (states+=State)*
	// ////    )
	// ////    '}';
	//
	//////    
	// ////
	// ////ReferenceNode returns sccharts::ReferenceNode:
	// ////    {sccharts::ReferenceNode}
	//
	//////    (id=ID) (label=STRING)? '=' 'ref' referencedScope = [sccharts::State|ID]
	//
	//////    '(' (parameters+=ValuedObjectReference)? (',' parameters+=ValuedObjectReference)* ')'
	// ////    ';';	
	// enum
	//TransitionType returns sccharts::TransitionType:
	//	WEAKABORT="--" | STRONGABORT="-- abort" | TERMINATION="-- join";
	public TransitionTypeElements getTransitionTypeAccess() {
		return unknownRuleTransitionType;
	}
	
	public EnumRule getTransitionTypeRule() {
		return getTransitionTypeAccess().getRule();
	}

	////// chsch: The action rule is used in Kits.xtext for entry-, during-, exitActions, suspensionTrigger 
	//
	////Action returns sccharts::Action:
	// //    {sccharts::Action}
	// ////    (annotations += Annotation)*
	//
	////	(isImmediate?='#')? (delay=INT)? (trigger=BooleanExpression)? ("/" effects+=Effect ((';') effects+=Effect)*)?; 		
	//
	//EntryAction returns sccharts::EntryAction:
	//	{sccharts::EntryAction} //    (annotations += Annotation)*
	// "entry" trigger=BoolExpression? ("/" effects+=Effect (";"
	//	effects+=Effect)*)? ";"?;
	public ActionsGrammarAccess.EntryActionElements getEntryActionAccess() {
		return gaActions.getEntryActionAccess();
	}
	
	public ParserRule getEntryActionRule() {
		return getEntryActionAccess().getRule();
	}

	//DuringAction returns sccharts::DuringAction:
	//	{sccharts::DuringAction} //    (annotations += Annotation)*
	// immediate?="immediate"? "during" trigger=BoolExpression?
	//	("/" effects+=Effect (";" effects+=Effect)*)? ";"?;
	public ActionsGrammarAccess.DuringActionElements getDuringActionAccess() {
		return gaActions.getDuringActionAccess();
	}
	
	public ParserRule getDuringActionRule() {
		return getDuringActionAccess().getRule();
	}

	//ExitAction returns sccharts::ExitAction:
	//	{sccharts::ExitAction} //    (annotations += Annotation)*
	// "exit" trigger=BoolExpression? ("/" effects+=Effect (";"
	//	effects+=Effect)*)? ";"?;
	public ActionsGrammarAccess.ExitActionElements getExitActionAccess() {
		return gaActions.getExitActionAccess();
	}
	
	public ParserRule getExitActionRule() {
		return getExitActionAccess().getRule();
	}

	//SuspendAction returns sccharts::SuspendAction:
	//	{sccharts::SuspendAction} //    (annotations += Annotation)*
	// immediate?="immediate"? weak?="weak"? "suspend"
	//	trigger=BoolExpression? ";"?;
	public ActionsGrammarAccess.SuspendActionElements getSuspendActionAccess() {
		return gaActions.getSuspendActionAccess();
	}
	
	public ParserRule getSuspendActionRule() {
		return getSuspendActionAccess().getRule();
	}

	//IterateAction returns sccharts::IterateAction:
	//	{sccharts::IterateAction} immediate?="immediate"? "iterate" trigger=BoolExpression? ("/" effects+=Effect (";"
	//	effects+=Effect)*)? ";"?;
	public ActionsGrammarAccess.IterateActionElements getIterateActionAccess() {
		return gaActions.getIterateActionAccess();
	}
	
	public ParserRule getIterateActionRule() {
		return getIterateActionAccess().getRule();
	}

	//enum DivOperator returns kexpressions::OperatorType:
	//	DIV=":";
	public ActionsGrammarAccess.DivOperatorElements getDivOperatorAccess() {
		return gaActions.getDivOperatorAccess();
	}
	
	public EnumRule getDivOperatorRule() {
		return getDivOperatorAccess().getRule();
	}

	//enum HistoryType returns sccharts::HistoryType:
	//	RESET="reset" | SHALLOW="shallow history" | DEEP="history";
	public ActionsGrammarAccess.HistoryTypeElements getHistoryTypeAccess() {
		return gaActions.getHistoryTypeAccess();
	}
	
	public EnumRule getHistoryTypeRule() {
		return getHistoryTypeAccess().getRule();
	}

	/// **
	// * @author ssm
	// * @kieler.design 2015-08-23 proposed 
	// * @kieler.rating 2015-08-23 proposed yellow
	// * / / *
	// * KEXT (KText) provides a general stub for subsequent grammars that will use kexpressions, keffects
	// * and need some kind of declaration mechanism. It is also used to generate the textual KEXT language 
	// * that is used for testing kexpressions and keffects.  
	// * / // ------------ //
	////  KEXT Rules  // 
	//// ------------ //
	//// KEXT Rule
	//// The KEXT lagnuages starts with an optional declaration part. Then, an arbitrary number of 
	//// test entities may follow.
	//Kext returns kext::Kext:
	//	declarations+=Declaration* entities+=TestEntity*;
	public KEXTGrammarAccess.KextElements getKextAccess() {
		return gaActions.getKextAccess();
	}
	
	public ParserRule getKextRule() {
		return getKextAccess().getRule();
	}

	//// Test Entity Rule
	//// A test entity is either an annotation expression or an effect.
	//TestEntity returns kext::TestEntity:
	//	expression=AnnotatedExpression | effect=Effect;
	public KEXTGrammarAccess.TestEntityElements getTestEntityAccess() {
		return gaActions.getTestEntityAccess();
	}
	
	public ParserRule getTestEntityRule() {
		return getTestEntityAccess().getRule();
	}

	//// Annotated Expression Rule
	//// An annotated expression is declared with the keyword "expression". It may be preceded by a list
	//// of annotations. The expression itself follows the keyword.
	//AnnotatedExpression returns kext::AnnotatedExpression:
	//	annotations+=Annotation* "expression" expression=Expression;
	public KEXTGrammarAccess.AnnotatedExpressionElements getAnnotatedExpressionAccess() {
		return gaActions.getAnnotatedExpressionAccess();
	}
	
	public ParserRule getAnnotatedExpressionRule() {
		return getAnnotatedExpressionAccess().getRule();
	}

	//// Declaration Rule
	//// A declaration follows the general KIELER pattern for variable declaration. More specific:
	//// this centralized declaration rule should replace any other declaration in drived grammars.
	//// It may start with arbitrary many declarations followed by keywords affecting the type of the
	//// valued objects that follow.
	//// Examples: const float pi = 3.14, input signal I, output bool z  
	//Declaration returns kexpressions::Declaration:
	//	VariableDeclaration | ReferenceDeclaration;
	public KEXTGrammarAccess.DeclarationElements getDeclarationAccess() {
		return gaActions.getDeclarationAccess();
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}

	//DeclarationWOSemicolon returns kexpressions::Declaration:
	//	VariableDeclarationWOSemicolon | ReferenceDeclarationWOSemicolon;
	public KEXTGrammarAccess.DeclarationWOSemicolonElements getDeclarationWOSemicolonAccess() {
		return gaActions.getDeclarationWOSemicolonAccess();
	}
	
	public ParserRule getDeclarationWOSemicolonRule() {
		return getDeclarationWOSemicolonAccess().getRule();
	}

	//VariableDeclaration returns kexpressions::VariableDeclaration:
	//	annotations+=Annotation* const?="const"? input?="input"? output?="output"? static?="static"? (signal?="signal"?
	//	type=ValueType | signal?="signal") valuedObjects+=ValuedObject ("," valuedObjects+=ValuedObject)* ";";
	public KEXTGrammarAccess.VariableDeclarationElements getVariableDeclarationAccess() {
		return gaActions.getVariableDeclarationAccess();
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}

	//VariableDeclarationWOSemicolon returns kexpressions::VariableDeclaration:
	//	annotations+=Annotation* const?="const"? input?="input"? output?="output"? static?="static"? (signal?="signal"?
	//	type=ValueType | signal?="signal") valuedObjects+=ValuedObject ("," valuedObjects+=ValuedObject)*;
	public KEXTGrammarAccess.VariableDeclarationWOSemicolonElements getVariableDeclarationWOSemicolonAccess() {
		return gaActions.getVariableDeclarationWOSemicolonAccess();
	}
	
	public ParserRule getVariableDeclarationWOSemicolonRule() {
		return getVariableDeclarationWOSemicolonAccess().getRule();
	}

	//ReferenceDeclaration returns kexpressions::ReferenceDeclaration:
	//	annotations+=Annotation* "&" reference=[kext::Identifiable] valuedObjects+=ValuedObject (","
	//	valuedObjects+=ValuedObject)* ";";
	public KEXTGrammarAccess.ReferenceDeclarationElements getReferenceDeclarationAccess() {
		return gaActions.getReferenceDeclarationAccess();
	}
	
	public ParserRule getReferenceDeclarationRule() {
		return getReferenceDeclarationAccess().getRule();
	}

	//ReferenceDeclarationWOSemicolon returns kexpressions::ReferenceDeclaration:
	//	annotations+=Annotation* "&" reference=[kext::Identifiable] valuedObjects+=ValuedObject (","
	//	valuedObjects+=ValuedObject)*;
	public KEXTGrammarAccess.ReferenceDeclarationWOSemicolonElements getReferenceDeclarationWOSemicolonAccess() {
		return gaActions.getReferenceDeclarationWOSemicolonAccess();
	}
	
	public ParserRule getReferenceDeclarationWOSemicolonRule() {
		return getReferenceDeclarationWOSemicolonAccess().getRule();
	}

	//// Valued Object Rule
	//// A valued object is identified by its name. Then, a part for its cardinalities and an initial 
	//// expression may follow. Additionally, the declaration of the object may be finished by a combine part. 
	//// Examples: array[10], initial = false, z = 0 combine max
	//ValuedObject returns kexpressions::ValuedObject:
	//	name=ID ("[" cardinalities+=INT "]")* ("=" initialValue=Expression)? ("combine" combineOperator=CombineOperator)?;
	public KEXTGrammarAccess.ValuedObjectElements getValuedObjectAccess() {
		return gaActions.getValuedObjectAccess();
	}
	
	public ParserRule getValuedObjectRule() {
		return getValuedObjectAccess().getRule();
	}

	/// **
	// * @author ssm
	// * @kieler.design 2015-08-23 proposed 
	// * @kieler.rating 2015-08-23 proposed yellow
	// * / / *
	// * KEffects allow deriving grammars to use a range of different effects, namely assignments,
	// * postfix effects, esterel like emissions, host code and function call effects.
	// * Of course other grammars may extend this list.
	// * / // ---------------- //
	////  KEffects Rules  // 
	//// ---------------- //
	//// Effect Rule
	//// An effect is either an assignment, a postfix effect, an emission, a hostcode effect or a 
	//// function call effect.
	//Effect returns keffects::Effect:
	//	Assignment | PostfixEffect | Emission | HostcodeEffect | FunctionCallEffect;
	public KEffectsGrammarAccess.EffectElements getEffectAccess() {
		return gaActions.getEffectAccess();
	}
	
	public ParserRule getEffectRule() {
		return getEffectAccess().getRule();
	}

	//// Emission Rule
	//// An emission is a esterel like 'call' of a signal instance. A transition effect list may simply set
	//// an emission for a specific signal to emit it. Additionally, emission may include a parameter part for
	//// a new value in the case of valued signals. 
	//// Example: A, B(2)
	//// Important: To help the parser and to avoid ambiguities, emissions may only allow restricted 
	//// annotations defined in the annotations grammar.		
	//Emission returns keffects::Emission:
	//	annotations+=QuotedStringAnnotation* valuedObject=[kexpressions::ValuedObject] ("(" newValue=Expression ")")?;
	public KEffectsGrammarAccess.EmissionElements getEmissionAccess() {
		return gaActions.getEmissionAccess();
	}
	
	public ParserRule getEmissionRule() {
		return getEmissionAccess().getRule();
	}

	//// Assignment Rule
	//// An assignment may start with a list of arbitrary annotatations.
	//// Then, an arbitrary expression is assigned to a valued object. The object may be suffixed by an 
	//// indices part. The type of assignment is determined by the type of the operator.
	//// Example: A = true, I[0] = I[1], I += 1     
	//Assignment returns keffects::Assignment:
	//	annotations+=Annotation* valuedObject=[kexpressions::ValuedObject] ("[" indices+=Expression "]")*
	//	operator=AssignOperator expression=Expression;
	public KEffectsGrammarAccess.AssignmentElements getAssignmentAccess() {
		return gaActions.getAssignmentAccess();
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//// Postfix Effect
	//// A postfix effect is an assignment missing the part beyond the operator. In this case the operator type
	//// must be a postfix operator.
	//// Example: I++, I-- 
	//PostfixEffect returns keffects::Assignment:
	//	annotations+=Annotation* valuedObject=[kexpressions::ValuedObject] ("[" indices+=Expression "]")*
	//	operator=PostfixOperator;
	public KEffectsGrammarAccess.PostfixEffectElements getPostfixEffectAccess() {
		return gaActions.getPostfixEffectAccess();
	}
	
	public ParserRule getPostfixEffectRule() {
		return getPostfixEffectAccess().getRule();
	}

	//// Hostcode Effect Rule
	//// A hostcode effect is an effect that include hostcode. It may be preceded by a list of annotations.
	//HostcodeEffect returns keffects::HostcodeEffect:
	//	annotations+=Annotation* text=HOSTCODE;
	public KEffectsGrammarAccess.HostcodeEffectElements getHostcodeEffectAccess() {
		return gaActions.getHostcodeEffectAccess();
	}
	
	public ParserRule getHostcodeEffectRule() {
		return getHostcodeEffectAccess().getRule();
	}

	//// Function Call Effect Rule
	//// A function call effect works similar to the function call expression. Additionally, it may be
	//// preceded by a list of annotations.
	//FunctionCallEffect returns keffects::FunctionCallEffect:
	//	annotations+=Annotation* "<" functionName=ExtendedID ("(" parameters+=Parameter ("," parameters+=Parameter)* ")" |
	//	"()")? ">";
	public KEffectsGrammarAccess.FunctionCallEffectElements getFunctionCallEffectAccess() {
		return gaActions.getFunctionCallEffectAccess();
	}
	
	public ParserRule getFunctionCallEffectRule() {
		return getFunctionCallEffectAccess().getRule();
	}

	//// ---------------- //
	////  KEffects Enums  // 
	//// ---------------- //
	//// Assign Operator Enum    
	//enum AssignOperator returns keffects::AssignOperator:
	//	ASSIGN="=" | ASSIGNADD="+=" | ASSIGNSUB="-=" | ASSIGNMUL="*=" | ASSIGNDIV="/=";
	public KEffectsGrammarAccess.AssignOperatorElements getAssignOperatorAccess() {
		return gaActions.getAssignOperatorAccess();
	}
	
	public EnumRule getAssignOperatorRule() {
		return getAssignOperatorAccess().getRule();
	}

	//// Postfix Operator Enum    
	//enum PostfixOperator returns keffects::AssignOperator:
	//	POSTFIXADD="++" | POSTFIXSUB="--";
	public KEffectsGrammarAccess.PostfixOperatorElements getPostfixOperatorAccess() {
		return gaActions.getPostfixOperatorAccess();
	}
	
	public EnumRule getPostfixOperatorRule() {
		return getPostfixOperatorAccess().getRule();
	}

	/// **
	// * @author ssm
	// * @kieler.design 2015-08-21 proposed 
	// * @kieler.rating 2015-08-21 proposed yellow
	// * / // -------------------- //
	////  KExpressions Rules  // 
	//// -------------------- //
	/// * Expression rules are organized in a chain. They pass the actual instance to the next rule but may 
	// * consume tokens to create a specific expression element. Following this pattern, complex constructs
	// * can be created. This also implies an order of precedence.
	// *
	// * Expression
	// * + BooleanExpression
	// *   + LogicalOrExpression
	// *     + LogicalAndExpression
	// *       + BitwiseOrExpression
	// *         + BitwiseAndExpression
	// *           + CompareExpression
	// *             + NotOrValuedExpression
	// *               + ValuedExpression (see valued expression below)
	// *               + NotExpression *
	// *                 + AtomicExpression *
	// *                   + BoolValue
	// *                   + ValuedObjectTestExpression
	// *                     + ValuedObjectReference
	// *                   + FunctionCall
	// *                   + TextExpression
	// * + ValuedExpression
	// *   + AddExpression
	// *     + SubExpression
	// *       + MultExpression
	// *         + DivExpression
	// *           + ModExpression
	// *             + NegExpression *
	// *               + AtomicValuedExpression *
	// *                 + IntValue
	// *                 + FloatValue
	// *                 + StringValue
	// *                 + AtomicExpression
	// * / // Root Rule
	//// Always return an expression.
	//Root returns ecore::EObject:
	//	Expression;
	public KExpressionsGrammarAccess.RootElements getRootAccess() {
		return gaActions.getRootAccess();
	}
	
	public ParserRule getRootRule() {
		return getRootAccess().getRule();
	}

	//// Expression Rule
	//// An expression is either a boolean expression or a valued expression.
	//Expression:
	//	BoolExpression | ValuedExpression;
	public KExpressionsGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaActions.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//// Boolean Expression Rule
	//// Boolean expression directs to logical or expression and kept for overview (and legacy) reason. 
	//// One could skip directly to the next rule.
	//BoolExpression returns Expression:
	//	LogicalOrExpression;
	public KExpressionsGrammarAccess.BoolExpressionElements getBoolExpressionAccess() {
		return gaActions.getBoolExpressionAccess();
	}
	
	public ParserRule getBoolExpressionRule() {
		return getBoolExpressionAccess().getRule();
	}

	//// Logical Or Expression Rule
	//// Directs to the 'logical and' rule and may create an operator expression for 'logical or' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//LogicalOrExpression returns Expression:
	//	LogicalAndExpression ({OperatorExpression.subExpressions+=current} (operator=LogicalOrOperator
	//	subExpressions+=LogicalAndExpression)+)?;
	public KExpressionsGrammarAccess.LogicalOrExpressionElements getLogicalOrExpressionAccess() {
		return gaActions.getLogicalOrExpressionAccess();
	}
	
	public ParserRule getLogicalOrExpressionRule() {
		return getLogicalOrExpressionAccess().getRule();
	}

	//// Logical And Expression Rule
	//// Directs to the 'bitwise or' rule and may create an operator expression for 'logical and' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//LogicalAndExpression returns Expression:
	//	BitwiseOrExpression ({OperatorExpression.subExpressions+=current} (operator=LogicalAndOperator
	//	subExpressions+=BitwiseOrExpression)+)?;
	public KExpressionsGrammarAccess.LogicalAndExpressionElements getLogicalAndExpressionAccess() {
		return gaActions.getLogicalAndExpressionAccess();
	}
	
	public ParserRule getLogicalAndExpressionRule() {
		return getLogicalAndExpressionAccess().getRule();
	}

	//// Bitwiese Or Expression Rule
	//// Directs to the 'bitwise and' rule and may create an operator expression for 'bitwise or' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//BitwiseOrExpression returns Expression:
	//	BitwiseAndExpression ({OperatorExpression.subExpressions+=current} (operator=BitwiseOrOperator
	//	subExpressions+=BitwiseAndExpression)+)?;
	public KExpressionsGrammarAccess.BitwiseOrExpressionElements getBitwiseOrExpressionAccess() {
		return gaActions.getBitwiseOrExpressionAccess();
	}
	
	public ParserRule getBitwiseOrExpressionRule() {
		return getBitwiseOrExpressionAccess().getRule();
	}

	//// Bitwise And Expression Rule
	//// Directs to the compare rule and may create an operator expression for 'bitwise and' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//BitwiseAndExpression returns Expression:
	//	CompareOperation ({OperatorExpression.subExpressions+=current} (operator=BitwiseAndOperator
	//	subExpressions+=CompareOperation)+)?;
	public KExpressionsGrammarAccess.BitwiseAndExpressionElements getBitwiseAndExpressionAccess() {
		return gaActions.getBitwiseAndExpressionAccess();
	}
	
	public ParserRule getBitwiseAndExpressionRule() {
		return getBitwiseAndExpressionAccess().getRule();
	}

	//// Compare Operation Rule
	//// Directs to the 'not or valued expression' rule and may create an operator expression for compares. 
	//// Example: 42 <= val(A)
	//CompareOperation returns Expression:
	//	NotOrValuedExpression ({OperatorExpression.subExpressions+=current} operator=CompareOperator
	//	subExpressions+=NotOrValuedExpression)?;
	public KExpressionsGrammarAccess.CompareOperationElements getCompareOperationAccess() {
		return gaActions.getCompareOperationAccess();
	}
	
	public ParserRule getCompareOperationRule() {
		return getCompareOperationAccess().getRule();
	}

	//// 'Not or Valued Expression' Rule
	//// ORDER IS IMPORTANT!
	//NotOrValuedExpression returns Expression:
	//	ValuedExpression | NotExpression;
	public KExpressionsGrammarAccess.NotOrValuedExpressionElements getNotOrValuedExpressionAccess() {
		return gaActions.getNotOrValuedExpressionAccess();
	}
	
	public ParserRule getNotOrValuedExpressionRule() {
		return getNotOrValuedExpressionAccess().getRule();
	}

	//// Not Expression Rule
	//// Example: !A, !false, !(A or B)
	//// At the latter we need the parents to indicate the right binding.
	//// A 'not expression' can also redirect to an 'atomic expression' to maintain the rule chain.
	//NotExpression returns Expression:
	//	{OperatorExpression} operator=NotOperator subExpressions+=NotExpression | AtomicExpression;
	public KExpressionsGrammarAccess.NotExpressionElements getNotExpressionAccess() {
		return gaActions.getNotExpressionAccess();
	}
	
	public ParserRule getNotExpressionRule() {
		return getNotExpressionAccess().getRule();
	}

	//// Valued Expression Rule    
	//// Everything that evaluates to a primitive number value.
	//// Similar to the boolean rule this rule is there for overview reasons.
	//ValuedExpression returns Expression:
	//	AddExpression;
	public KExpressionsGrammarAccess.ValuedExpressionElements getValuedExpressionAccess() {
		return gaActions.getValuedExpressionAccess();
	}
	
	public ParserRule getValuedExpressionRule() {
		return getValuedExpressionAccess().getRule();
	}

	//// Add Expression Rule
	//// The rule directs the 'sub expression' rule and creates an operator expression for additions
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: 1 + 2
	//AddExpression returns Expression:
	//	SubExpression ({OperatorExpression.subExpressions+=current} (operator=AddOperator subExpressions+=SubExpression)+)?;
	public KExpressionsGrammarAccess.AddExpressionElements getAddExpressionAccess() {
		return gaActions.getAddExpressionAccess();
	}
	
	public ParserRule getAddExpressionRule() {
		return getAddExpressionAccess().getRule();
	}

	//// Sub Expression Rule
	//// The rule directs the 'mult expression' rule and creates an operator expression for subtractions
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: var(A) - i
	//SubExpression returns Expression:
	//	MultExpression ({OperatorExpression.subExpressions+=current} (operator=SubOperator
	//	subExpressions+=MultExpression)+)?;
	public KExpressionsGrammarAccess.SubExpressionElements getSubExpressionAccess() {
		return gaActions.getSubExpressionAccess();
	}
	
	public ParserRule getSubExpressionRule() {
		return getSubExpressionAccess().getRule();
	}

	//// Mult Expression Rule
	//// The rule directs the 'div expression' rule and creates an operator expression for multiplications
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: 2 * 4
	//MultExpression returns Expression:
	//	DivExpression ({OperatorExpression.subExpressions+=current} (operator=MultOperator subExpressions+=DivExpression)+)?;
	public KExpressionsGrammarAccess.MultExpressionElements getMultExpressionAccess() {
		return gaActions.getMultExpressionAccess();
	}
	
	public ParserRule getMultExpressionRule() {
		return getMultExpressionAccess().getRule();
	}

	//// Div Expression Rule
	//// The rule directs the 'mod expression' rule and creates an operator expression for divisions
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: 2 / 4
	//DivExpression returns Expression:
	//	ModExpression ({OperatorExpression.subExpressions+=current} (operator=DivOperator subExpressions+=ModExpression)+)?;
	public KExpressionsGrammarAccess.DivExpressionElements getDivExpressionAccess() {
		return gaActions.getDivExpressionAccess();
	}
	
	public ParserRule getDivExpressionRule() {
		return getDivExpressionAccess().getRule();
	}

	//// Mod Expression Rule
	//// The rule directs the 'neg expression' rule and creates an operator expression for modulo operations
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: i % j
	//ModExpression returns Expression:
	//	NegExpression ({OperatorExpression.subExpressions+=current} (operator=ModOperator
	//	subExpressions+=AtomicValuedExpression)+)?;
	public KExpressionsGrammarAccess.ModExpressionElements getModExpressionAccess() {
		return gaActions.getModExpressionAccess();
	}
	
	public ParserRule getModExpressionRule() {
		return getModExpressionAccess().getRule();
	}

	//// Neg Expression Rule
	//// The rule negates the actual instance or directs the atomic value expression rule if necessary. 
	//// Example: -i, -2
	//NegExpression returns Expression:
	//	{OperatorExpression} operator=SubOperator subExpressions+=NegExpression | AtomicValuedExpression;
	public KExpressionsGrammarAccess.NegExpressionElements getNegExpressionAccess() {
		return gaActions.getNegExpressionAccess();
	}
	
	public ParserRule getNegExpressionRule() {
		return getNegExpressionAccess().getRule();
	}

	//// Atomic Valued Expression Rule
	//// An atomic valued expression is either a simple int float or string literal, another valued expression
	//// encapsulated in braces, or a atomic expression.
	//// Basically, the rule chain may start over again at this point.     
	//AtomicValuedExpression returns Expression:
	//	IntValue | FloatValue | StringValue | "(" ValuedExpression ")" | AtomicExpression;
	public KExpressionsGrammarAccess.AtomicValuedExpressionElements getAtomicValuedExpressionAccess() {
		return gaActions.getAtomicValuedExpressionAccess();
	}
	
	public ParserRule getAtomicValuedExpressionRule() {
		return getAtomicValuedExpressionAccess().getRule();
	}

	//// Valued Object Test Expression Rule
	//// This rules creates an operator expression for pre or val tests. Alternatively, it directs to a
	//// valued object reference.
	//// Example: pre(pre(val(A))), pre(val(pre(A))), val(A)
	//ValuedObjectTestExpression returns Expression:
	//	{OperatorExpression} operator=(PreOperator | ValOperator) "(" subExpressions+=ValuedObjectTestExpression ")" |
	//	ValuedObjectReference;
	public KExpressionsGrammarAccess.ValuedObjectTestExpressionElements getValuedObjectTestExpressionAccess() {
		return gaActions.getValuedObjectTestExpressionAccess();
	}
	
	public ParserRule getValuedObjectTestExpressionRule() {
		return getValuedObjectTestExpressionAccess().getRule();
	}

	//// Valued Object Reference Rule
	//// References a valued object with arbitrary (including none) indices part.
	//// Example: A, B
	//ValuedObjectReference:
	//	valuedObject=[ValuedObject] ("[" indices+=Expression "]")*;
	public KExpressionsGrammarAccess.ValuedObjectReferenceElements getValuedObjectReferenceAccess() {
		return gaActions.getValuedObjectReferenceAccess();
	}
	
	public ParserRule getValuedObjectReferenceRule() {
		return getValuedObjectReferenceAccess().getRule();
	}

	//// Function Call Rule
	//// Calls to functions are indicated by angle brackets. They may include a parameter list. 
	//FunctionCall:
	//	"<" functionName=ExtendedID ("(" parameters+=Parameter ("," parameters+=Parameter)* ")" | "()")? ">";
	public KExpressionsGrammarAccess.FunctionCallElements getFunctionCallAccess() {
		return gaActions.getFunctionCallAccess();
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}

	//// Parameter Rule
	//// The parameter rule is used by the function call rule. Every expression may be a paramter.
	//// Additionally, a parameter may be preceded by an ampersand to indicate a call by reference.
	//// Analogously, an prefixed exclamation mark marks the parameter as pure output.
	//Parameter:
	//	(pureOutput?="!"? callByReference?="&")? expression=Expression;
	public KExpressionsGrammarAccess.ParameterElements getParameterAccess() {
		return gaActions.getParameterAccess();
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//// Text Expression Rule
	//// The text expression rule returns a text expression. Most times text expressions are used for host code.
	//// Example: 'printf(...)'
	//TextExpression:
	//	text=HOSTCODE;
	public KExpressionsGrammarAccess.TextExpressionElements getTextExpressionAccess() {
		return gaActions.getTextExpressionAccess();
	}
	
	public ParserRule getTextExpressionRule() {
		return getTextExpressionAccess().getRule();
	}

	//// Int Value Rule
	//IntValue:
	//	value=INT;
	public KExpressionsGrammarAccess.IntValueElements getIntValueAccess() {
		return gaActions.getIntValueAccess();
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}

	//// Float Value Rule
	//FloatValue:
	//	value=FLOAT;
	public KExpressionsGrammarAccess.FloatValueElements getFloatValueAccess() {
		return gaActions.getFloatValueAccess();
	}
	
	public ParserRule getFloatValueRule() {
		return getFloatValueAccess().getRule();
	}

	//// Bool Value Rule
	//BoolValue:
	//	value=BOOLEAN;
	public KExpressionsGrammarAccess.BoolValueElements getBoolValueAccess() {
		return gaActions.getBoolValueAccess();
	}
	
	public ParserRule getBoolValueRule() {
		return getBoolValueAccess().getRule();
	}

	//// String Value Rule	
	//StringValue:
	//	value=STRING;
	public KExpressionsGrammarAccess.StringValueElements getStringValueAccess() {
		return gaActions.getStringValueAccess();
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}

	//// Any Type Rule
	//// Data type rule allowing any kind of value to be accepted,
	//// e.g. as initialValues of valued objects used in Kits.xtext. 
	//AnyType returns ecore::EString:
	//	BOOLEAN | INT | FLOAT | ID | STRING;
	public KExpressionsGrammarAccess.AnyTypeElements getAnyTypeAccess() {
		return gaActions.getAnyTypeAccess();
	}
	
	public ParserRule getAnyTypeRule() {
		return getAnyTypeAccess().getRule();
	}

	//// -------------------- //
	////  KExpressions Enums  // 
	//// -------------------- //
	//// Compare Operator Enum 
	//enum CompareOperator returns OperatorType:
	//	EQ="==" | LT="<" | LEQ="<=" | GT=">" | GEQ=">=" | NE="!=";
	public KExpressionsGrammarAccess.CompareOperatorElements getCompareOperatorAccess() {
		return gaActions.getCompareOperatorAccess();
	}
	
	public EnumRule getCompareOperatorRule() {
		return getCompareOperatorAccess().getRule();
	}

	//// Pre Operator Enum
	//enum PreOperator returns OperatorType:
	//	PRE="pre";
	public KExpressionsGrammarAccess.PreOperatorElements getPreOperatorAccess() {
		return gaActions.getPreOperatorAccess();
	}
	
	public EnumRule getPreOperatorRule() {
		return getPreOperatorAccess().getRule();
	}

	//// Bitewise Or Operator Enum
	//enum BitwiseOrOperator returns OperatorType:
	//	BITWISE_OR="|";
	public KExpressionsGrammarAccess.BitwiseOrOperatorElements getBitwiseOrOperatorAccess() {
		return gaActions.getBitwiseOrOperatorAccess();
	}
	
	public EnumRule getBitwiseOrOperatorRule() {
		return getBitwiseOrOperatorAccess().getRule();
	}

	//// Bitwise And Operator Enum
	//enum BitwiseAndOperator returns OperatorType:
	//	BITWISE_AND="&";
	public KExpressionsGrammarAccess.BitwiseAndOperatorElements getBitwiseAndOperatorAccess() {
		return gaActions.getBitwiseAndOperatorAccess();
	}
	
	public EnumRule getBitwiseAndOperatorRule() {
		return getBitwiseAndOperatorAccess().getRule();
	}

	//// Not Operator Enum
	//enum NotOperator returns OperatorType:
	//	NOT="!";
	public KExpressionsGrammarAccess.NotOperatorElements getNotOperatorAccess() {
		return gaActions.getNotOperatorAccess();
	}
	
	public EnumRule getNotOperatorRule() {
		return getNotOperatorAccess().getRule();
	}

	//// Add Operator Enum
	//enum AddOperator returns OperatorType:
	//	ADD="+";
	public KExpressionsGrammarAccess.AddOperatorElements getAddOperatorAccess() {
		return gaActions.getAddOperatorAccess();
	}
	
	public EnumRule getAddOperatorRule() {
		return getAddOperatorAccess().getRule();
	}

	//// Sub Operator Enum
	//enum SubOperator returns OperatorType:
	//	SUB="-";
	public KExpressionsGrammarAccess.SubOperatorElements getSubOperatorAccess() {
		return gaActions.getSubOperatorAccess();
	}
	
	public EnumRule getSubOperatorRule() {
		return getSubOperatorAccess().getRule();
	}

	//// Mult Operator Enum
	//enum MultOperator returns OperatorType:
	//	MULT="*";
	public KExpressionsGrammarAccess.MultOperatorElements getMultOperatorAccess() {
		return gaActions.getMultOperatorAccess();
	}
	
	public EnumRule getMultOperatorRule() {
		return getMultOperatorAccess().getRule();
	}

	//// Mod Operator Enum
	//enum ModOperator returns OperatorType:
	//	MOD="%";
	public KExpressionsGrammarAccess.ModOperatorElements getModOperatorAccess() {
		return gaActions.getModOperatorAccess();
	}
	
	public EnumRule getModOperatorRule() {
		return getModOperatorAccess().getRule();
	}

	//// Val Operator Enum
	//enum ValOperator returns OperatorType:
	//	VAL="val";
	public KExpressionsGrammarAccess.ValOperatorElements getValOperatorAccess() {
		return gaActions.getValOperatorAccess();
	}
	
	public EnumRule getValOperatorRule() {
		return getValOperatorAccess().getRule();
	}

	//// Logical Or Operator Enum
	//enum LogicalOrOperator returns OperatorType:
	//	LOGICAL_OR="||";
	public KExpressionsGrammarAccess.LogicalOrOperatorElements getLogicalOrOperatorAccess() {
		return gaActions.getLogicalOrOperatorAccess();
	}
	
	public EnumRule getLogicalOrOperatorRule() {
		return getLogicalOrOperatorAccess().getRule();
	}

	//// Logical And Operator Enum
	//enum LogicalAndOperator returns OperatorType:
	//	LOGICAL_AND="&&";
	public KExpressionsGrammarAccess.LogicalAndOperatorElements getLogicalAndOperatorAccess() {
		return gaActions.getLogicalAndOperatorAccess();
	}
	
	public EnumRule getLogicalAndOperatorRule() {
		return getLogicalAndOperatorAccess().getRule();
	}

	//// Postfix Operator Enum
	//enum PostfixAdd returns OperatorType:
	//	POSTFIX_ADD="++";
	public KExpressionsGrammarAccess.PostfixAddElements getPostfixAddAccess() {
		return gaActions.getPostfixAddAccess();
	}
	
	public EnumRule getPostfixAddRule() {
		return getPostfixAddAccess().getRule();
	}

	//// Postfix Operator Enum
	//enum PostfixSub returns OperatorType:
	//	POSTFIX_SUB="--";
	public KExpressionsGrammarAccess.PostfixSubElements getPostfixSubAccess() {
		return gaActions.getPostfixSubAccess();
	}
	
	public EnumRule getPostfixSubRule() {
		return getPostfixSubAccess().getRule();
	}

	//// Value Type Enum
	//enum ValueType:
	//	PURE="pure" | BOOL="bool" | UNSIGNED="unsigned" | INT="int" | FLOAT="float" | STRING="string" | HOST="host";
	public KExpressionsGrammarAccess.ValueTypeElements getValueTypeAccess() {
		return gaActions.getValueTypeAccess();
	}
	
	public EnumRule getValueTypeRule() {
		return getValueTypeAccess().getRule();
	}

	//// Host Type Enum
	//enum HostType returns ValueType:
	//	HOST="host";
	public KExpressionsGrammarAccess.HostTypeElements getHostTypeAccess() {
		return gaActions.getHostTypeAccess();
	}
	
	public EnumRule getHostTypeRule() {
		return getHostTypeAccess().getRule();
	}

	//// Combine Operator Enum
	//enum CombineOperator:
	//	NONE="none" | ADD="+" | MULT="*" | MAX="max" | MIN="min" | OR="|" | AND="&" | HOST="host";
	public KExpressionsGrammarAccess.CombineOperatorElements getCombineOperatorAccess() {
		return gaActions.getCombineOperatorAccess();
	}
	
	public EnumRule getCombineOperatorRule() {
		return getCombineOperatorAccess().getRule();
	}

	//// ------------------------ //
	////  KExpressions Terminals  // 
	//// ------------------------ //
	//// Hostcode Terminals
	//// Custom terminal rule allowing to save transition label string as they are
	//terminal HOSTCODE:
	//	"\'" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getHOSTCODERule() {
		return gaActions.getHOSTCODERule();
	} 

	/// **
	// * @author ssm
	// * @kieler.design 2015-08-21 proposed 
	// * @kieler.rating 2015-08-21 proposed yellow
	// * /
	//// ------------------ //
	// //  Annotation Rules  // 
	// // ------------------ //
	// // General rule for annotations
	//
	//// The different annotation sub rules are tested in order. Hence, order matters! 
	// Annotation:
	//	CommentAnnotation | KeyBooleanValueAnnotation | KeyStringValueAnnotation | TypedKeyStringValueAnnotation |
	//	PropertyAnnotation | KeyIntValueAnnotation | KeyFloatValueAnnotation | TagAnnotation;
	public AnnotationsGrammarAccess.AnnotationElements getAnnotationAccess() {
		return gaActions.getAnnotationAccess();
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}

	//// Valued Annotation Rule
	// // Valued annotations must have a value. For instance, tag annotations are not allowed.
	//
	//// Derived grammars may use this rule if the general annotation rules compromises the grammar
	// // due to ambiguities.
	//
	//ValuedAnnotation returns Annotation:
	//	CommentAnnotation | KeyStringValueAnnotation | TypedKeyStringValueAnnotation | PropertyAnnotation |
	//	KeyBooleanValueAnnotation | KeyIntValueAnnotation | KeyFloatValueAnnotation;
	public AnnotationsGrammarAccess.ValuedAnnotationElements getValuedAnnotationAccess() {
		return gaActions.getValuedAnnotationAccess();
	}
	
	public ParserRule getValuedAnnotationRule() {
		return getValuedAnnotationAccess().getRule();
	}

	//// Restricted Type Annotation Rule
	// // The restricted type annotation rule does not allow typed string annotations. 
	//
	//// You can use this rule in derived grammars if you don't want to permit typed strings. 
	// RestrictedTypeAnnotation
	//returns Annotation:
	//	CommentAnnotation | KeyStringValueAnnotation | PropertyAnnotation | KeyBooleanValueAnnotation | KeyIntValueAnnotation
	//	| KeyFloatValueAnnotation | TagAnnotation;
	public AnnotationsGrammarAccess.RestrictedTypeAnnotationElements getRestrictedTypeAnnotationAccess() {
		return gaActions.getRestrictedTypeAnnotationAccess();
	}
	
	public ParserRule getRestrictedTypeAnnotationRule() {
		return getRestrictedTypeAnnotationAccess().getRule();
	}

	//// Restricted Property Annotation Rule
	// // The restricted type annotation rule does not allow property annotations. 
	//
	//// You can use this rule in derived grammars if you don't want to permit typed strings. 
	// RestrictedPropertyAnnotation
	//returns Annotation:
	//	CommentAnnotation | KeyStringValueAnnotation | TypedKeyStringValueAnnotation | KeyBooleanValueAnnotation |
	//	KeyIntValueAnnotation | KeyFloatValueAnnotation | TagAnnotation;
	public AnnotationsGrammarAccess.RestrictedPropertyAnnotationElements getRestrictedPropertyAnnotationAccess() {
		return gaActions.getRestrictedPropertyAnnotationAccess();
	}
	
	public ParserRule getRestrictedPropertyAnnotationRule() {
		return getRestrictedPropertyAnnotationAccess().getRule();
	}

	//// Quoted String Annotation Rule
	//
	//// The quoted string annotation rules uses quoted key string annotations. You can use this rule in 
	//
	//// derived grammars if you don't want to permit unquoted strings. 
	//
	//// (If you are looking for an example, the keffects grammar uses this rule for their emission
	//
	//// rule and to avoid grammar ambiguities.)  
	// QuotedStringAnnotation returns Annotation:
	//	CommentAnnotation | QuotedKeyStringValueAnnotation | QuotedTypedKeyStringValueAnnotation | QuotedPropertyAnnotation |
	//	KeyBooleanValueAnnotation | KeyIntValueAnnotation | KeyFloatValueAnnotation | TagAnnotation;
	public AnnotationsGrammarAccess.QuotedStringAnnotationElements getQuotedStringAnnotationAccess() {
		return gaActions.getQuotedStringAnnotationAccess();
	}
	
	public ParserRule getQuotedStringAnnotationRule() {
		return getQuotedStringAnnotationAccess().getRule();
	}

	//// CommentAnnotation
	// // e.g.: / ** semantic comment * /
	// CommentAnnotation:
	//	values+=COMMENT_ANNOTATION;
	public AnnotationsGrammarAccess.CommentAnnotationElements getCommentAnnotationAccess() {
		return gaActions.getCommentAnnotationAccess();
	}
	
	public ParserRule getCommentAnnotationRule() {
		return getCommentAnnotationAccess().getRule();
	}

	//// TagAnnotation
	// // e.g.: @HVlayout
	// TagAnnotation returns Annotation:
	//	"@" name=ExtendedID;
	public AnnotationsGrammarAccess.TagAnnotationElements getTagAnnotationAccess() {
		return gaActions.getTagAnnotationAccess();
	}
	
	public ParserRule getTagAnnotationRule() {
		return getTagAnnotationAccess().getRule();
	}

	//// KeyStringValueAnnotation
	// // e.g.: @layouter dot
	// // You may separate different values via comma.   
	//
	//KeyStringValueAnnotation returns StringAnnotation:
	//	"@" name=ExtendedID values+=EString ("," values+=EString)*;
	public AnnotationsGrammarAccess.KeyStringValueAnnotationElements getKeyStringValueAnnotationAccess() {
		return gaActions.getKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getKeyStringValueAnnotationRule() {
		return getKeyStringValueAnnotationAccess().getRule();
	}

	//// TypedKeyStringValueAnnotation
	// // e.g.: @position[de.cau.cs.kieler.core.math.KVector] "(3,2)"
	//
	//TypedKeyStringValueAnnotation returns TypedStringAnnotation:
	//	"@" name=ExtendedID "[" type=ExtendedID "]" values+=EStringBoolean ("," values+=EStringBoolean)*;
	public AnnotationsGrammarAccess.TypedKeyStringValueAnnotationElements getTypedKeyStringValueAnnotationAccess() {
		return gaActions.getTypedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getTypedKeyStringValueAnnotationRule() {
		return getTypedKeyStringValueAnnotationAccess().getRule();
	}

	//// PropertyValueAnnotation
	// // e.g.: @diagram name = true   
	// PropertyAnnotation:
	//	"@" name=ExtendedID property=EString ":=" value=EString;
	public AnnotationsGrammarAccess.PropertyAnnotationElements getPropertyAnnotationAccess() {
		return gaActions.getPropertyAnnotationAccess();
	}
	
	public ParserRule getPropertyAnnotationRule() {
		return getPropertyAnnotationAccess().getRule();
	}

	//// QuotedKeyStringValueAnnotation
	// // The quoted key string value annotation is a replacement derived grammars may use
	//
	//// if they want to disallow quote-less strings in a key string annotation. 
	// QuotedKeyStringValueAnnotation returns
	//StringAnnotation:
	//	"@" name=ExtendedID values+=STRING ("," values+=STRING)*;
	public AnnotationsGrammarAccess.QuotedKeyStringValueAnnotationElements getQuotedKeyStringValueAnnotationAccess() {
		return gaActions.getQuotedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getQuotedKeyStringValueAnnotationRule() {
		return getQuotedKeyStringValueAnnotationAccess().getRule();
	}

	//// QuotedTypedKeyStringValueAnnotation
	//
	//// The quoted typed key string value annotation is a replacement derived grammars may use
	//
	//// if they want to disallow quote-less strings in a key string annotation. 
	// QuotedTypedKeyStringValueAnnotation
	//returns TypedStringAnnotation:
	//	"@" name=ExtendedID "[" type=ExtendedID "]" values+=STRING ("," values+=STRING)*;
	public AnnotationsGrammarAccess.QuotedTypedKeyStringValueAnnotationElements getQuotedTypedKeyStringValueAnnotationAccess() {
		return gaActions.getQuotedTypedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getQuotedTypedKeyStringValueAnnotationRule() {
		return getQuotedTypedKeyStringValueAnnotationAccess().getRule();
	}

	//// QuotedPropertyValueAnnotation
	//
	//// The quoted typed key string value annotation is a replacement derived grammars may use
	//
	//// if they want to disallow quote-less strings in a key string annotation.   
	// QuotedPropertyAnnotation returns
	//PropertyAnnotation:
	//	"@" name=ExtendedID property=STRING ":=" value=STRING;
	public AnnotationsGrammarAccess.QuotedPropertyAnnotationElements getQuotedPropertyAnnotationAccess() {
		return gaActions.getQuotedPropertyAnnotationAccess();
	}
	
	public ParserRule getQuotedPropertyAnnotationRule() {
		return getQuotedPropertyAnnotationAccess().getRule();
	}

	//// KeyBooleanValueAnnotation    
	// // e.g.: @visible true;
	// KeyBooleanValueAnnotation returns BooleanAnnotation:
	//	"@" name=ExtendedID value=BOOLEAN;
	public AnnotationsGrammarAccess.KeyBooleanValueAnnotationElements getKeyBooleanValueAnnotationAccess() {
		return gaActions.getKeyBooleanValueAnnotationAccess();
	}
	
	public ParserRule getKeyBooleanValueAnnotationRule() {
		return getKeyBooleanValueAnnotationAccess().getRule();
	}

	//// KeyIntValueAnnotation
	// // e.g.: @minSpace 10;    
	// KeyIntValueAnnotation returns IntAnnotation:
	//	"@" name=ExtendedID value=Integer;
	public AnnotationsGrammarAccess.KeyIntValueAnnotationElements getKeyIntValueAnnotationAccess() {
		return gaActions.getKeyIntValueAnnotationAccess();
	}
	
	public ParserRule getKeyIntValueAnnotationRule() {
		return getKeyIntValueAnnotationAccess().getRule();
	}

	//// KeyFloatValueAnnotation
	// // e.g.: @minSpace 10.0;    
	// KeyFloatValueAnnotation returns FloatAnnotation:
	//	"@" name=ExtendedID value=Floateger;
	public AnnotationsGrammarAccess.KeyFloatValueAnnotationElements getKeyFloatValueAnnotationAccess() {
		return gaActions.getKeyFloatValueAnnotationAccess();
	}
	
	public ParserRule getKeyFloatValueAnnotationRule() {
		return getKeyFloatValueAnnotationAccess().getRule();
	}

	//// EString
	// // Allow strings without quotes if they don't contain spaces.
	//
	//// For quoteless strings the ExtendedID rule is used.
	// EString returns ecore::EString:
	//	STRING | ExtendedID;
	public AnnotationsGrammarAccess.EStringElements getEStringAccess() {
		return gaActions.getEStringAccess();
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//EStringBoolean returns ecore::EString:
	//	STRING | ExtendedID | BOOLEAN;
	public AnnotationsGrammarAccess.EStringBooleanElements getEStringBooleanAccess() {
		return gaActions.getEStringBooleanAccess();
	}
	
	public ParserRule getEStringBooleanRule() {
		return getEStringBooleanAccess().getRule();
	}

	//// ExtendedID
	// // ExtendedID extends the ID rule provided by the terminals grammar.
	//
	//// An ID may have dot separated parts and may close with a number separated by a hash mark.
	// ExtendedID returns
	//ecore::EString:
	//	ID ("." ID)* ("#" INT)?;
	public AnnotationsGrammarAccess.ExtendedIDElements getExtendedIDAccess() {
		return gaActions.getExtendedIDAccess();
	}
	
	public ParserRule getExtendedIDRule() {
		return getExtendedIDAccess().getRule();
	}

	//// Integer
	// // The integer rule extends the EInt terminal by an optional sign for negative numbers.
	// Integer returns
	//ecore::EInt:
	//	"-"? INT;
	public AnnotationsGrammarAccess.IntegerElements getIntegerAccess() {
		return gaActions.getIntegerAccess();
	}
	
	public ParserRule getIntegerRule() {
		return getIntegerAccess().getRule();
	}

	//// Floateger
	// // The floateger rule extends the EFloat terminal by an optional sign for negative numbers.
	// Floateger
	//returns ecore::EFloat:
	//	"-"? FLOAT;
	public AnnotationsGrammarAccess.FloategerElements getFloategerAccess() {
		return gaActions.getFloategerAccess();
	}
	
	public ParserRule getFloategerRule() {
		return getFloategerAccess().getRule();
	}

	//// ---------------------- //
	// //  Annotation Terminals  // 
	// // ---------------------- //
	//
	//// Comment Annotation Terminal
	// // Custom terminal rule introducing semantic comments.
	// terminal COMMENT_ANNOTATION:
	//	"/ **"->"* /";
	public TerminalRule getCOMMENT_ANNOTATIONRule() {
		return gaActions.getCOMMENT_ANNOTATIONRule();
	} 

	//// Multiline Comment Terminal
	// // Modified version of Terminals.ML_COMMENT as
	//
	//// COMMENT_ANNOTATION is not recognized correctly with original one.
	// terminal ML_COMMENT:
	//	"/ *" !"*"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaActions.getML_COMMENTRule();
	} 

	//// Number Terminal
	// terminal fragment NUMBER:
	//	"0".."9";
	public TerminalRule getNUMBERRule() {
		return gaActions.getNUMBERRule();
	} 

	//// Integer Terminal
	// // An INT is a list of numbers.   
	// terminal INT returns ecore::EInt:
	//	NUMBER+;
	public TerminalRule getINTRule() {
		return gaActions.getINTRule();
	} 

	//// Float Terminal    
	// // Make sure the Float rule does not shadow the INT rule
	// terminal FLOAT returns
	//ecore::EFloatObject:
	//	NUMBER+ ("." NUMBER*) (("e" | "E") ("+" | "-")? NUMBER+)? "f"? | NUMBER+ "f";
	public TerminalRule getFLOATRule() {
		return gaActions.getFLOATRule();
	} 

	//// Boolean Terminal   
	// // Introduce boolean values.
	// terminal BOOLEAN returns ecore::EBooleanObject:
	//	"true" | "false";
	public TerminalRule getBOOLEANRule() {
		return gaActions.getBOOLEANRule();
	} 

	//// String Terminal
	// // Custom terminal rule for strings, only use double quotes.
	// terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"";
	public TerminalRule getSTRINGRule() {
		return gaActions.getSTRINGRule();
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaActions.getIDRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaActions.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaActions.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaActions.getANY_OTHERRule();
	} 
}
