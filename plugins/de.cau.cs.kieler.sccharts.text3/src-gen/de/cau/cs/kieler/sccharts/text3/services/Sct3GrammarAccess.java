/*
 * generated by Xtext
 */
package de.cau.cs.kieler.sccharts.text3.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import de.cau.cs.kieler.sccharts.text.sct.services.SctGrammarAccess;
import de.cau.cs.kieler.sccharts.text.actions.services.ActionsGrammarAccess;
import de.cau.cs.kieler.core.kexpressions.text.services.KEXTGrammarAccess;
import de.cau.cs.kieler.core.kexpressions.keffects.services.KEffectsGrammarAccess;
import de.cau.cs.kieler.core.kexpressions.services.KExpressionsGrammarAccess;
import de.cau.cs.kieler.core.annotations.text.services.AnnotationsGrammarAccess;

@Singleton
public class Sct3GrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class RootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Root");
		private final RuleCall cSCChartParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////generate sct3 "http://kieler.cs.cau.de/sccharts/textual3/0.1.0"
		//
		//// ---------------------------------------------------------------------------------------------------
		//
		////// ---------------------------------------------------------------------------------------------------
		// //
		//
		////SingleControlflowRegion returns sccharts::ControlflowRegion:
		// //	{sccharts::ControlflowRegion}
		// //    (
		//
		////      (annotations += Annotation)*
		// //      'region' (id=ID)? (label=STRING)? ':'
		//
		////      (declarations+=Declaration)*
		// ////      (bodyText+=TextualCode)* 
		// //     )?
		// //    (states+=State)*;
		// //    
		//
		////
		// //// ---------------------------------------------------------------------------------------------------
		// //
		//
		////SingleDataflowRegion returns sccharts::DataflowRegion:
		// //    {sccharts::DataflowRegion}
		// //    (
		//
		////      (annotations += Annotation)*
		// //      'dataflow' (id=ID)? (label=STRING)? ':'
		//
		////      (declarations+=Declaration)*
		// //     )
		// //    (
		// //        (equations += Equation) 
		// //        |
		//
		////        (nodes += Node) // alt: + (nodes+=Node)+
		// //    )*
		// //;
		// //
		//
		////// ---------------------------------------------------------------------------------------------------
		// //
		//
		////ControlflowRegion returns sccharts::ControlflowRegion:
		// //	{sccharts::ControlflowRegion}
		//
		////    (annotations += Annotation)*
		// //    'region' (id=ID)? (label=STRING)? ':'
		// //      (declarations+=Declaration)*
		//
		////    (states+=State)+;
		// //
		// //
		//
		////// ---------------------------------------------------------------------------------------------------
		// //
		//
		////DataflowRegion returns sccharts::DataflowRegion:
		// //    {sccharts::DataflowRegion}
		//
		////    (annotations += Annotation)*
		// //    'dataflow' (id=ID)? (label=STRING)? ':'
		// //    (declarations+=Declaration)*
		//
		////    (
		// //        (equations += Equation) 
		// //        |
		// //        (nodes+=Node) // alt: + (nodes+=Node)+
		// //    )*
		//
		////;
		// //
		// //Equation returns sccharts::Equation:
		// //    {sccharts::Equation}
		// //    (
		//
		////        (valuedObject = [kexpressions::ValuedObject]) '=' (expression = Expression) ';'
		// //        |
		//
		////        (valuedObject = [kexpressions::ValuedObject]) '=' (node = [sccharts::Node|ID]) '.' (expression = ValuedObjectReference) ';'
		//
		////    )
		// //;
		// //
		// //
		//
		////// ---------------------------------------------------------------------------------------------------
		// //
		//
		////SCChart returns sccharts::State:
		// ////    ('package' name = QualifiedName)?
		// ////    imports += ImportDecl*
		//
		//////    
		// //    (annotations += Annotation)*
		// //    ('scchart') (id=ID) (label=STRING)?
		// //  
		// //    (
		//
		////      ('references' referencedScope = [sccharts::State|ID]
		//
		////        ('bind' bindings += Binding (',' bindings += Binding)*)?
		// //       )
		// //     | 
		// //      ('{'
		//
		////            (declarations+=Declaration |
		// //             localActions+=LocalAction)*
		// //            (
		//
		////				(regions+=SingleDataflowRegion|regions+=SingleControlflowRegion)(regions+=Region)*
		// //             )?
		//
		////          '}') 
		// //     )?
		// //;
		// //
		// //Region returns sccharts::Region:
		// //	ControlflowRegion | DataflowRegion	
		//
		////;
		// //
		// ////ImportDecl: 
		// ////    'import' 
		// ////        (importedType=[sccharts::State|QualifiedName] 
		//
		//////        | importedNamespace=QualifiedNameWithWildcard)
		// ////;
		// ////
		// ////QualifiedName:
		// ////  ID ('.' ID)*;
		//
		//////
		// ////QualifiedNameWithWildcard :
		// ////    QualifiedName  '.' '*';
		// //
		//
		////// ---------------------------------------------------------------------------------------------------
		// //
		//
		////State returns sccharts::State:
		// //    (annotations += Annotation)*
		// //    (
		//
		////      ((initial?='initial') (final?='final')?)
		// //     |
		// //      ((final?='final') (initial?='initial')?)
		//
		////     )?
		// //  
		// //    (type=StateType)? ('state') (id=ID) (label=STRING)?
		// //  
		// //    (
		//
		////      ('references' referencedScope = [sccharts::State|ID]
		//
		////        ('bind' bindings += Binding (',' bindings += Binding)*)?
		// //       )
		// //     | 
		// //      ('{'
		//
		////            (declarations+=Declaration | localActions+=LocalAction)*
		//
		////		    (regions+=SingleDataflowRegion|regions+=SingleControlflowRegion)(regions+=Region)*
		// //      '}') 
		// //      )?
		//
		////     // The semicolon is mandatory for backtracking!
		// //    (outgoingTransitions+=Transition)* ';';
		// //
		// //
		//
		////Node returns sccharts::Node:
		// //    ReferenceNode | CallNode | DefineNode
		// //;
		// //
		//
		////CallNode returns sccharts::CallNode:
		// //    {sccharts::CallNode}
		//
		////    (id=ID) '=' callReference = [sccharts::DefineNode|ID]
		//
		////    '(' (parameters+=ValuedObjectReference)? (',' parameters+=ValuedObjectReference)* ')'
		// //    ';'
		// //;
		// //
		//
		////DefineNode returns sccharts::DefineNode:
		// //    {sccharts::DefineNode}
		//
		////    'node' (id=ID) '(' (inputs+=Declaration)* ')'
		// //    'returns' '(' (outputs+=Declaration)* ')' '{'
		// //    (
		//
		////        ((valuedObjects += [kexpressions::ValuedObject]) '=' (expressions += Expression) ';')*
		//
		////        | // keep that? yes, but do not allow to mix them
		// //        (states+=State)*
		// //    )
		// //    '}'
		// //;
		// //
		//
		////ReferenceNode returns sccharts::ReferenceNode:
		// //    {sccharts::ReferenceNode}
		//
		////    (id=ID) (label=STRING)? '=' 'ref' referencedScope = [sccharts::State|ID]
		//
		////    '(' (parameters+=ValuedObjectReference)? (',' parameters+=ValuedObjectReference)* ')'
		// //    ';'
		// //;
		// //    
		//
		////// ---------------------------------------------------------------------------------------------------
		// //
		//
		////LocalAction returns sccharts::LocalAction:
		//
		////    EntryAction | DuringAction | ExitAction | SuspendAction | IterateAction
		// //;    
		// //    
		//
		////// ---------------------------------------------------------------------------------------------------
		// //
		//
		////Transition returns sccharts::Transition:
		// //    (annotations += Annotation)*
		//
		////    (type=TransitionTypeLegacy | type=TransitionType) 
		// //    targetState=[sccharts::State|ID] 
		//
		//////	type=TransitionType (priority=INT)? targetState=[sccharts::State|ID] 
		//
		////	( (immediate?='immediate')? (deferred?='deferred')? (history=HistoryType)?  (
		// //	 (
		//
		////	   ((('with' (delay=INT)? trigger=BoolExpression)|'with')? (('/'|'do') effects+=Effect (';'effects+=Effect)*)? )
		//
		////	  |
		// //	   ( 'with' label=STRING )
		// //	  )
		// //	 )?)? 	
		// //	;
		// //
		//
		////// ---------------------------------------------------------------------------------------------------
		// //
		//
		////Binding returns sccharts::Binding:
		// //    (annotations+=Annotation)*
		// //	formal = [kexpressions::ValuedObject|ID] 
		//
		////	'to' 
		// //	actual = [kexpressions::ValuedObject|ID]
		// //;
		// //
		//
		////// ---------------------------------------------------------------------------------------------------
		// //
		//
		////enum StateType returns sccharts::StateType:
		//
		////	NORMAL = 'normal' | CONNECTOR = 'connector' | REFERENCE = 'reference' | TEXTUAL = 'textual';
		// //
		//
		////enum TransitionType returns sccharts::TransitionType:
		//
		////	WEAKABORT = 'goto' | STRONGABORT = 'abort to' | TERMINATION = 'join to';
		// //	
		//
		////enum TransitionTypeLegacy returns sccharts::TransitionType:
		//
		////    WEAKABORT = '-->' | STRONGABORT = 'o->' | TERMINATION = '>->';
		// //	 Root returns sccharts::State:
		//	SCChart;
		@Override public ParserRule getRule() { return rule; }

		//SCChart
		public RuleCall getSCChartParserRuleCall() { return cSCChartParserRuleCall; }
	}
	
	
	private final RootElements pRoot;
	
	private final Grammar grammar;

	private final SctGrammarAccess gaSct;

	@Inject
	public Sct3GrammarAccess(GrammarProvider grammarProvider,
		SctGrammarAccess gaSct) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaSct = gaSct;
		this.pRoot = new RootElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.cau.cs.kieler.sccharts.text3.Sct3".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public SctGrammarAccess getSctGrammarAccess() {
		return gaSct;
	}

	
	////generate sct3 "http://kieler.cs.cau.de/sccharts/textual3/0.1.0"
	//
	//// ---------------------------------------------------------------------------------------------------
	//
	////// ---------------------------------------------------------------------------------------------------
	// //
	//
	////SingleControlflowRegion returns sccharts::ControlflowRegion:
	// //	{sccharts::ControlflowRegion}
	// //    (
	//
	////      (annotations += Annotation)*
	// //      'region' (id=ID)? (label=STRING)? ':'
	//
	////      (declarations+=Declaration)*
	// ////      (bodyText+=TextualCode)* 
	// //     )?
	// //    (states+=State)*;
	// //    
	//
	////
	// //// ---------------------------------------------------------------------------------------------------
	// //
	//
	////SingleDataflowRegion returns sccharts::DataflowRegion:
	// //    {sccharts::DataflowRegion}
	// //    (
	//
	////      (annotations += Annotation)*
	// //      'dataflow' (id=ID)? (label=STRING)? ':'
	//
	////      (declarations+=Declaration)*
	// //     )
	// //    (
	// //        (equations += Equation) 
	// //        |
	//
	////        (nodes += Node) // alt: + (nodes+=Node)+
	// //    )*
	// //;
	// //
	//
	////// ---------------------------------------------------------------------------------------------------
	// //
	//
	////ControlflowRegion returns sccharts::ControlflowRegion:
	// //	{sccharts::ControlflowRegion}
	//
	////    (annotations += Annotation)*
	// //    'region' (id=ID)? (label=STRING)? ':'
	// //      (declarations+=Declaration)*
	//
	////    (states+=State)+;
	// //
	// //
	//
	////// ---------------------------------------------------------------------------------------------------
	// //
	//
	////DataflowRegion returns sccharts::DataflowRegion:
	// //    {sccharts::DataflowRegion}
	//
	////    (annotations += Annotation)*
	// //    'dataflow' (id=ID)? (label=STRING)? ':'
	// //    (declarations+=Declaration)*
	//
	////    (
	// //        (equations += Equation) 
	// //        |
	// //        (nodes+=Node) // alt: + (nodes+=Node)+
	// //    )*
	//
	////;
	// //
	// //Equation returns sccharts::Equation:
	// //    {sccharts::Equation}
	// //    (
	//
	////        (valuedObject = [kexpressions::ValuedObject]) '=' (expression = Expression) ';'
	// //        |
	//
	////        (valuedObject = [kexpressions::ValuedObject]) '=' (node = [sccharts::Node|ID]) '.' (expression = ValuedObjectReference) ';'
	//
	////    )
	// //;
	// //
	// //
	//
	////// ---------------------------------------------------------------------------------------------------
	// //
	//
	////SCChart returns sccharts::State:
	// ////    ('package' name = QualifiedName)?
	// ////    imports += ImportDecl*
	//
	//////    
	// //    (annotations += Annotation)*
	// //    ('scchart') (id=ID) (label=STRING)?
	// //  
	// //    (
	//
	////      ('references' referencedScope = [sccharts::State|ID]
	//
	////        ('bind' bindings += Binding (',' bindings += Binding)*)?
	// //       )
	// //     | 
	// //      ('{'
	//
	////            (declarations+=Declaration |
	// //             localActions+=LocalAction)*
	// //            (
	//
	////				(regions+=SingleDataflowRegion|regions+=SingleControlflowRegion)(regions+=Region)*
	// //             )?
	//
	////          '}') 
	// //     )?
	// //;
	// //
	// //Region returns sccharts::Region:
	// //	ControlflowRegion | DataflowRegion	
	//
	////;
	// //
	// ////ImportDecl: 
	// ////    'import' 
	// ////        (importedType=[sccharts::State|QualifiedName] 
	//
	//////        | importedNamespace=QualifiedNameWithWildcard)
	// ////;
	// ////
	// ////QualifiedName:
	// ////  ID ('.' ID)*;
	//
	//////
	// ////QualifiedNameWithWildcard :
	// ////    QualifiedName  '.' '*';
	// //
	//
	////// ---------------------------------------------------------------------------------------------------
	// //
	//
	////State returns sccharts::State:
	// //    (annotations += Annotation)*
	// //    (
	//
	////      ((initial?='initial') (final?='final')?)
	// //     |
	// //      ((final?='final') (initial?='initial')?)
	//
	////     )?
	// //  
	// //    (type=StateType)? ('state') (id=ID) (label=STRING)?
	// //  
	// //    (
	//
	////      ('references' referencedScope = [sccharts::State|ID]
	//
	////        ('bind' bindings += Binding (',' bindings += Binding)*)?
	// //       )
	// //     | 
	// //      ('{'
	//
	////            (declarations+=Declaration | localActions+=LocalAction)*
	//
	////		    (regions+=SingleDataflowRegion|regions+=SingleControlflowRegion)(regions+=Region)*
	// //      '}') 
	// //      )?
	//
	////     // The semicolon is mandatory for backtracking!
	// //    (outgoingTransitions+=Transition)* ';';
	// //
	// //
	//
	////Node returns sccharts::Node:
	// //    ReferenceNode | CallNode | DefineNode
	// //;
	// //
	//
	////CallNode returns sccharts::CallNode:
	// //    {sccharts::CallNode}
	//
	////    (id=ID) '=' callReference = [sccharts::DefineNode|ID]
	//
	////    '(' (parameters+=ValuedObjectReference)? (',' parameters+=ValuedObjectReference)* ')'
	// //    ';'
	// //;
	// //
	//
	////DefineNode returns sccharts::DefineNode:
	// //    {sccharts::DefineNode}
	//
	////    'node' (id=ID) '(' (inputs+=Declaration)* ')'
	// //    'returns' '(' (outputs+=Declaration)* ')' '{'
	// //    (
	//
	////        ((valuedObjects += [kexpressions::ValuedObject]) '=' (expressions += Expression) ';')*
	//
	////        | // keep that? yes, but do not allow to mix them
	// //        (states+=State)*
	// //    )
	// //    '}'
	// //;
	// //
	//
	////ReferenceNode returns sccharts::ReferenceNode:
	// //    {sccharts::ReferenceNode}
	//
	////    (id=ID) (label=STRING)? '=' 'ref' referencedScope = [sccharts::State|ID]
	//
	////    '(' (parameters+=ValuedObjectReference)? (',' parameters+=ValuedObjectReference)* ')'
	// //    ';'
	// //;
	// //    
	//
	////// ---------------------------------------------------------------------------------------------------
	// //
	//
	////LocalAction returns sccharts::LocalAction:
	//
	////    EntryAction | DuringAction | ExitAction | SuspendAction | IterateAction
	// //;    
	// //    
	//
	////// ---------------------------------------------------------------------------------------------------
	// //
	//
	////Transition returns sccharts::Transition:
	// //    (annotations += Annotation)*
	//
	////    (type=TransitionTypeLegacy | type=TransitionType) 
	// //    targetState=[sccharts::State|ID] 
	//
	//////	type=TransitionType (priority=INT)? targetState=[sccharts::State|ID] 
	//
	////	( (immediate?='immediate')? (deferred?='deferred')? (history=HistoryType)?  (
	// //	 (
	//
	////	   ((('with' (delay=INT)? trigger=BoolExpression)|'with')? (('/'|'do') effects+=Effect (';'effects+=Effect)*)? )
	//
	////	  |
	// //	   ( 'with' label=STRING )
	// //	  )
	// //	 )?)? 	
	// //	;
	// //
	//
	////// ---------------------------------------------------------------------------------------------------
	// //
	//
	////Binding returns sccharts::Binding:
	// //    (annotations+=Annotation)*
	// //	formal = [kexpressions::ValuedObject|ID] 
	//
	////	'to' 
	// //	actual = [kexpressions::ValuedObject|ID]
	// //;
	// //
	//
	////// ---------------------------------------------------------------------------------------------------
	// //
	//
	////enum StateType returns sccharts::StateType:
	//
	////	NORMAL = 'normal' | CONNECTOR = 'connector' | REFERENCE = 'reference' | TEXTUAL = 'textual';
	// //
	//
	////enum TransitionType returns sccharts::TransitionType:
	//
	////	WEAKABORT = 'goto' | STRONGABORT = 'abort to' | TERMINATION = 'join to';
	// //	
	//
	////enum TransitionTypeLegacy returns sccharts::TransitionType:
	//
	////    WEAKABORT = '-->' | STRONGABORT = 'o->' | TERMINATION = '>->';
	// //	 Root returns sccharts::State:
	//	SCChart;
	public RootElements getRootAccess() {
		return pRoot;
	}
	
	public ParserRule getRootRule() {
		return getRootAccess().getRule();
	}

	//// ---------------------------------------------------------------------------------------------------
	//
	//SingleControlflowRegion returns sccharts::ControlflowRegion:
	//	{sccharts::ControlflowRegion} (annotations+=Annotation* "region" id=ID? label=STRING? ":"
	//	declarations+=Declaration*)? //      (bodyText+=TextualCode)* 
	// states+=State*;
	public SctGrammarAccess.SingleControlflowRegionElements getSingleControlflowRegionAccess() {
		return gaSct.getSingleControlflowRegionAccess();
	}
	
	public ParserRule getSingleControlflowRegionRule() {
		return getSingleControlflowRegionAccess().getRule();
	}

	//// ---------------------------------------------------------------------------------------------------
	//
	//SingleDataflowRegion returns sccharts::DataflowRegion:
	//	{sccharts::DataflowRegion} (annotations+=Annotation* "dataflow" id=ID? label=STRING? ":" declarations+=Declaration*)
	//	(equations+=Equation // alt: + (nodes+=Node)+
	// | nodes+=Node)*;
	public SctGrammarAccess.SingleDataflowRegionElements getSingleDataflowRegionAccess() {
		return gaSct.getSingleDataflowRegionAccess();
	}
	
	public ParserRule getSingleDataflowRegionRule() {
		return getSingleDataflowRegionAccess().getRule();
	}

	//// ---------------------------------------------------------------------------------------------------
	//
	//ControlflowRegion returns sccharts::ControlflowRegion:
	//	{sccharts::ControlflowRegion} annotations+=Annotation* "region" id=ID? label=STRING? ":" declarations+=Declaration*
	//	states+=State+;
	public SctGrammarAccess.ControlflowRegionElements getControlflowRegionAccess() {
		return gaSct.getControlflowRegionAccess();
	}
	
	public ParserRule getControlflowRegionRule() {
		return getControlflowRegionAccess().getRule();
	}

	//// ---------------------------------------------------------------------------------------------------
	// DataflowRegion
	//returns sccharts::DataflowRegion:
	//	{sccharts::DataflowRegion} annotations+=Annotation* "dataflow" id=ID? label=STRING? ":" declarations+=Declaration*
	//	(equations+=Equation // alt: + (nodes+=Node)+
	// | nodes+=Node)*;
	public SctGrammarAccess.DataflowRegionElements getDataflowRegionAccess() {
		return gaSct.getDataflowRegionAccess();
	}
	
	public ParserRule getDataflowRegionRule() {
		return getDataflowRegionAccess().getRule();
	}

	//Equation returns sccharts::Equation:
	//	{sccharts::Equation} (valuedObject=[kexpressions::ValuedObject] "=" expression=Expression ";" |
	//	valuedObject=[kexpressions::ValuedObject] "=" node=[sccharts::Node] "." expression=ValuedObjectReference ";");
	public SctGrammarAccess.EquationElements getEquationAccess() {
		return gaSct.getEquationAccess();
	}
	
	public ParserRule getEquationRule() {
		return getEquationAccess().getRule();
	}

	//// ---------------------------------------------------------------------------------------------------
	// SCChart returns
	//sccharts::State:
	//	annotations+=Annotation* //    ('package' name = QualifiedName)?
	// //    imports += ImportDecl*
	// //    
	// "scchart"
	//	id=ID label=STRING? ("references" referencedScope=[sccharts::State] ("bind" bindings+=Binding (","
	//	bindings+=Binding)*)? | "{" (declarations+=Declaration | localActions+=LocalAction)* ((regions+=SingleDataflowRegion
	//	| regions+=SingleControlflowRegion) regions+=Region*)? "}")?;
	public SctGrammarAccess.SCChartElements getSCChartAccess() {
		return gaSct.getSCChartAccess();
	}
	
	public ParserRule getSCChartRule() {
		return getSCChartAccess().getRule();
	}

	//Region returns sccharts::Region:
	//	ControlflowRegion | DataflowRegion;
	public SctGrammarAccess.RegionElements getRegionAccess() {
		return gaSct.getRegionAccess();
	}
	
	public ParserRule getRegionRule() {
		return getRegionAccess().getRule();
	}

	////ImportDecl: 
	// //    'import' 
	// //        (importedType=[sccharts::State|QualifiedName] 
	//
	////        | importedNamespace=QualifiedNameWithWildcard)
	// //;
	// //
	// //QualifiedName:
	// //  ID ('.' ID)*;
	// //
	//
	////QualifiedNameWithWildcard :
	// //    QualifiedName  '.' '*';
	//
	//// ---------------------------------------------------------------------------------------------------
	// State returns
	//sccharts::State:
	//	annotations+=Annotation* (initial?="initial" final?="final"? | final?="final" initial?="initial"?)? type=StateType?
	//	"state" id=ID label=STRING? ("references" referencedScope=[sccharts::State] ("bind" bindings+=Binding (","
	//	bindings+=Binding)*)? | "{" (declarations+=Declaration | localActions+=LocalAction)* (regions+=SingleDataflowRegion |
	//	regions+=SingleControlflowRegion) regions+=Region* "}")? // The semicolon is mandatory for backtracking!
	//
	//	outgoingTransitions+=Transition* ";";
	public SctGrammarAccess.StateElements getStateAccess() {
		return gaSct.getStateAccess();
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}

	//Node returns sccharts::Node:
	//	ReferenceNode | CallNode | DefineNode;
	public SctGrammarAccess.NodeElements getNodeAccess() {
		return gaSct.getNodeAccess();
	}
	
	public ParserRule getNodeRule() {
		return getNodeAccess().getRule();
	}

	//CallNode returns sccharts::CallNode:
	//	{sccharts::CallNode} id=ID "=" callReference=[sccharts::DefineNode] "(" parameters+=ValuedObjectReference? (","
	//	parameters+=ValuedObjectReference)* ")" ";";
	public SctGrammarAccess.CallNodeElements getCallNodeAccess() {
		return gaSct.getCallNodeAccess();
	}
	
	public ParserRule getCallNodeRule() {
		return getCallNodeAccess().getRule();
	}

	//DefineNode returns sccharts::DefineNode:
	//	{sccharts::DefineNode} "node" id=ID "(" inputs+=Declaration* ")" "returns" "(" outputs+=Declaration* ")" "{"
	//	((valuedObjects+=[kexpressions::ValuedObject] "=" expressions+=Expression ";")*
	//	// keep that? yes, but do not allow to mix them
	// | states+=State*) "}";
	public SctGrammarAccess.DefineNodeElements getDefineNodeAccess() {
		return gaSct.getDefineNodeAccess();
	}
	
	public ParserRule getDefineNodeRule() {
		return getDefineNodeAccess().getRule();
	}

	//ReferenceNode returns sccharts::ReferenceNode:
	//	{sccharts::ReferenceNode} id=ID label=STRING? "=" "ref" referencedScope=[sccharts::State] "("
	//	parameters+=ValuedObjectReference? ("," parameters+=ValuedObjectReference)* ")" ";";
	public SctGrammarAccess.ReferenceNodeElements getReferenceNodeAccess() {
		return gaSct.getReferenceNodeAccess();
	}
	
	public ParserRule getReferenceNodeRule() {
		return getReferenceNodeAccess().getRule();
	}

	//// ---------------------------------------------------------------------------------------------------
	// LocalAction
	//returns sccharts::LocalAction:
	//	EntryAction | DuringAction | ExitAction | SuspendAction | IterateAction;
	public SctGrammarAccess.LocalActionElements getLocalActionAccess() {
		return gaSct.getLocalActionAccess();
	}
	
	public ParserRule getLocalActionRule() {
		return getLocalActionAccess().getRule();
	}

	//// ---------------------------------------------------------------------------------------------------
	// Transition
	//returns sccharts::Transition:
	//	annotations+=Annotation* (type=TransitionTypeLegacy | type=TransitionType) targetState=[sccharts::State]
	//	//	type=TransitionType (priority=INT)? targetState=[sccharts::State|ID] 
	// (immediate?="immediate"?
	//	deferred?="deferred"? history=HistoryType? (("with" delay=INT? trigger=BoolExpression | "with")? (("/" | "do")
	//	effects+=Effect (";" effects+=Effect)*)? | "with" label=STRING)?)?;
	public SctGrammarAccess.TransitionElements getTransitionAccess() {
		return gaSct.getTransitionAccess();
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}

	//// ---------------------------------------------------------------------------------------------------
	// Binding returns
	//sccharts::Binding:
	//	annotations+=Annotation* formal=[kexpressions::ValuedObject] "to" actual=[kexpressions::ValuedObject];
	public SctGrammarAccess.BindingElements getBindingAccess() {
		return gaSct.getBindingAccess();
	}
	
	public ParserRule getBindingRule() {
		return getBindingAccess().getRule();
	}

	//// ---------------------------------------------------------------------------------------------------
	// enum StateType
	//returns sccharts::StateType:
	//	NORMAL="normal" | CONNECTOR="connector" | REFERENCE="reference" | TEXTUAL="textual";
	public SctGrammarAccess.StateTypeElements getStateTypeAccess() {
		return gaSct.getStateTypeAccess();
	}
	
	public EnumRule getStateTypeRule() {
		return getStateTypeAccess().getRule();
	}

	//enum TransitionType returns sccharts::TransitionType:
	//	WEAKABORT="goto" | STRONGABORT="abort to" | TERMINATION="join to";
	public SctGrammarAccess.TransitionTypeElements getTransitionTypeAccess() {
		return gaSct.getTransitionTypeAccess();
	}
	
	public EnumRule getTransitionTypeRule() {
		return getTransitionTypeAccess().getRule();
	}

	//enum TransitionTypeLegacy returns sccharts::TransitionType:
	//	WEAKABORT="-->" | STRONGABORT="o->" | TERMINATION=">->";
	public SctGrammarAccess.TransitionTypeLegacyElements getTransitionTypeLegacyAccess() {
		return gaSct.getTransitionTypeLegacyAccess();
	}
	
	public EnumRule getTransitionTypeLegacyRule() {
		return getTransitionTypeLegacyAccess().getRule();
	}

	////// chsch: The action rule is used in Kits.xtext for entry-, during-, exitActions, suspensionTrigger 
	//
	////Action returns sccharts::Action:
	// //    {sccharts::Action}
	// ////    (annotations += Annotation)*
	//
	////	(isImmediate?='#')? (delay=INT)? (trigger=BooleanExpression)? ("/" effects+=Effect ((';') effects+=Effect)*)?; 		
	//
	//EntryAction returns sccharts::EntryAction:
	//	{sccharts::EntryAction} //    (annotations += Annotation)*
	// "entry" trigger=BoolExpression? ("/" effects+=Effect (";"
	//	effects+=Effect)*)? ";"?;
	public ActionsGrammarAccess.EntryActionElements getEntryActionAccess() {
		return gaSct.getEntryActionAccess();
	}
	
	public ParserRule getEntryActionRule() {
		return getEntryActionAccess().getRule();
	}

	//DuringAction returns sccharts::DuringAction:
	//	{sccharts::DuringAction} //    (annotations += Annotation)*
	// immediate?="immediate"? "during" trigger=BoolExpression?
	//	("/" effects+=Effect (";" effects+=Effect)*)? ";"?;
	public ActionsGrammarAccess.DuringActionElements getDuringActionAccess() {
		return gaSct.getDuringActionAccess();
	}
	
	public ParserRule getDuringActionRule() {
		return getDuringActionAccess().getRule();
	}

	//ExitAction returns sccharts::ExitAction:
	//	{sccharts::ExitAction} //    (annotations += Annotation)*
	// "exit" trigger=BoolExpression? ("/" effects+=Effect (";"
	//	effects+=Effect)*)? ";"?;
	public ActionsGrammarAccess.ExitActionElements getExitActionAccess() {
		return gaSct.getExitActionAccess();
	}
	
	public ParserRule getExitActionRule() {
		return getExitActionAccess().getRule();
	}

	//SuspendAction returns sccharts::SuspendAction:
	//	{sccharts::SuspendAction} //    (annotations += Annotation)*
	// immediate?="immediate"? weak?="weak"? "suspend"
	//	trigger=BoolExpression? ";"?;
	public ActionsGrammarAccess.SuspendActionElements getSuspendActionAccess() {
		return gaSct.getSuspendActionAccess();
	}
	
	public ParserRule getSuspendActionRule() {
		return getSuspendActionAccess().getRule();
	}

	//IterateAction returns sccharts::IterateAction:
	//	{sccharts::IterateAction} immediate?="immediate"? "iterate" trigger=BoolExpression? ("/" effects+=Effect (";"
	//	effects+=Effect)*)? ";"?;
	public ActionsGrammarAccess.IterateActionElements getIterateActionAccess() {
		return gaSct.getIterateActionAccess();
	}
	
	public ParserRule getIterateActionRule() {
		return getIterateActionAccess().getRule();
	}

	//enum DivOperator returns kexpressions::OperatorType:
	//	DIV=":";
	public ActionsGrammarAccess.DivOperatorElements getDivOperatorAccess() {
		return gaSct.getDivOperatorAccess();
	}
	
	public EnumRule getDivOperatorRule() {
		return getDivOperatorAccess().getRule();
	}

	//enum HistoryType returns sccharts::HistoryType:
	//	RESET="reset" | SHALLOW="shallow history" | DEEP="history";
	public ActionsGrammarAccess.HistoryTypeElements getHistoryTypeAccess() {
		return gaSct.getHistoryTypeAccess();
	}
	
	public EnumRule getHistoryTypeRule() {
		return getHistoryTypeAccess().getRule();
	}

	/// **
	// * @author ssm
	// * @kieler.design 2015-08-23 proposed 
	// * @kieler.rating 2015-08-23 proposed yellow
	// * / / *
	// * KEXT (KText) provides a general stub for subsequent grammars that will use kexpressions, keffects
	// * and need some kind of declaration mechanism. It is also used to generate the textual KEXT language 
	// * that is used for testing kexpressions and keffects.  
	// * / // ------------ //
	////  KEXT Rules  // 
	//// ------------ //
	//// KEXT Rule
	//// The KEXT lagnuages starts with an optional declaration part. Then, an arbitrary number of 
	//// test entities may follow.
	//Kext returns kext::Kext:
	//	declarations+=Declaration* entities+=TestEntity*;
	public KEXTGrammarAccess.KextElements getKextAccess() {
		return gaSct.getKextAccess();
	}
	
	public ParserRule getKextRule() {
		return getKextAccess().getRule();
	}

	//// Test Entity Rule
	//// A test entity is either an annotation expression or an effect.
	//TestEntity returns kext::TestEntity:
	//	expression=AnnotatedExpression | effect=Effect;
	public KEXTGrammarAccess.TestEntityElements getTestEntityAccess() {
		return gaSct.getTestEntityAccess();
	}
	
	public ParserRule getTestEntityRule() {
		return getTestEntityAccess().getRule();
	}

	//// Annotated Expression Rule
	//// An annotated expression is declared with the keyword "expression". It may be preceded by a list
	//// of annotations. The expression itself follows the keyword.
	//AnnotatedExpression returns kext::AnnotatedExpression:
	//	annotations+=Annotation* "expression" expression=Expression;
	public KEXTGrammarAccess.AnnotatedExpressionElements getAnnotatedExpressionAccess() {
		return gaSct.getAnnotatedExpressionAccess();
	}
	
	public ParserRule getAnnotatedExpressionRule() {
		return getAnnotatedExpressionAccess().getRule();
	}

	//// Declaration Rule
	//// A declaration follows the general KIELER pattern for variable declaration. More specific:
	//// this centralized declaration rule should replace any other declaration in drived grammars.
	//// It may start with arbitrary many declarations followed by keywords affecting the type of the
	//// valued objects that follow.
	//// Examples: const float pi = 3.14, input signal I, output bool z  
	//Declaration returns kexpressions::Declaration:
	//	annotations+=Annotation* const?="const"? input?="input"? output?="output"? static?="static"? (signal?="signal"?
	//	type=ValueType | signal?="signal") valuedObjects+=ValuedObject ("," valuedObjects+=ValuedObject)* ";";
	public KEXTGrammarAccess.DeclarationElements getDeclarationAccess() {
		return gaSct.getDeclarationAccess();
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}

	//// Valued Object Rule
	//// A valued object is identified by its name. Then, a part for its cardinalities and an initial 
	//// expression may follow. Additionally, the declaration of the object may be finished by a combine part. 
	//// Examples: array[10], initial = false, z = 0 combine max
	//ValuedObject returns kexpressions::ValuedObject:
	//	name=ID ("[" cardinalities+=INT "]")* ("=" initialValue=Expression)? ("combine" combineOperator=CombineOperator)?;
	public KEXTGrammarAccess.ValuedObjectElements getValuedObjectAccess() {
		return gaSct.getValuedObjectAccess();
	}
	
	public ParserRule getValuedObjectRule() {
		return getValuedObjectAccess().getRule();
	}

	/// **
	// * @author ssm
	// * @kieler.design 2015-08-23 proposed 
	// * @kieler.rating 2015-08-23 proposed yellow
	// * / / *
	// * KEffects allow deriving grammars to use a range of different effects, namely assignments,
	// * postfix effects, esterel like emissions, host code and function call effects.
	// * Of course other grammars may extend this list.
	// * / // ---------------- //
	////  KEffects Rules  // 
	//// ---------------- //
	//// Effect Rule
	//// An effect is either an assignment, a postfix effect, an emission, a hostcode effect or a 
	//// function call effect.
	//Effect returns keffects::Effect:
	//	Assignment | PostfixEffect | Emission | HostcodeEffect | FunctionCallEffect;
	public KEffectsGrammarAccess.EffectElements getEffectAccess() {
		return gaSct.getEffectAccess();
	}
	
	public ParserRule getEffectRule() {
		return getEffectAccess().getRule();
	}

	//// Emission Rule
	//// An emission is a esterel like 'call' of a signal instance. A transition effect list may simply set
	//// an emission for a specific signal to emit it. Additionally, emission may include a parameter part for
	//// a new value in the case of valued signals. 
	//// Example: A, B(2)
	//// Important: To help the parser and to avoid ambiguities, emissions may only allow restricted 
	//// annotations defined in the annotations grammar.		
	//Emission returns keffects::Emission:
	//	annotations+=RestrictedAnnotation* valuedObject=[kexpressions::ValuedObject] ("(" newValue=Expression ")")?;
	public KEffectsGrammarAccess.EmissionElements getEmissionAccess() {
		return gaSct.getEmissionAccess();
	}
	
	public ParserRule getEmissionRule() {
		return getEmissionAccess().getRule();
	}

	//// Assignment Rule
	//// An assignment may start with a list of arbitrary annotatations.
	//// Then, an arbitrary expression is assigned to a valued object. The object may be suffixed by an 
	//// indices part. The type of assignment is determined by the type of the operator.
	//// Example: A = true, I[0] = I[1], I += 1     
	//Assignment returns keffects::Assignment:
	//	annotations+=Annotation* valuedObject=[kexpressions::ValuedObject] ("[" indices+=Expression "]")*
	//	operator=AssignOperator expression=Expression;
	public KEffectsGrammarAccess.AssignmentElements getAssignmentAccess() {
		return gaSct.getAssignmentAccess();
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//// Postfix Effect
	//// A postfix effect is an assignment missing the part beyond the operator. In this case the operator type
	//// must be a postfix operator.
	//// Example: I++, I-- 
	//PostfixEffect returns keffects::Assignment:
	//	annotations+=Annotation* valuedObject=[kexpressions::ValuedObject] ("[" indices+=Expression "]")*
	//	operator=PostfixOperator;
	public KEffectsGrammarAccess.PostfixEffectElements getPostfixEffectAccess() {
		return gaSct.getPostfixEffectAccess();
	}
	
	public ParserRule getPostfixEffectRule() {
		return getPostfixEffectAccess().getRule();
	}

	//// Hostcode Effect Rule
	//// A hostcode effect is an effect that include hostcode. It may be preceded by a list of annotations.
	//HostcodeEffect returns keffects::HostcodeEffect:
	//	annotations+=Annotation* text=HOSTCODE;
	public KEffectsGrammarAccess.HostcodeEffectElements getHostcodeEffectAccess() {
		return gaSct.getHostcodeEffectAccess();
	}
	
	public ParserRule getHostcodeEffectRule() {
		return getHostcodeEffectAccess().getRule();
	}

	//// Function Call Effect Rule
	//// A function call effect works similar to the function call expression. Additionally, it may be
	//// preceded by a list of annotations.
	//FunctionCallEffect returns keffects::FunctionCallEffect:
	//	annotations+=Annotation* "<" functionName=ExtendedID ("(" parameters+=Parameter ("," parameters+=Parameter)* ")" |
	//	"()")? ">";
	public KEffectsGrammarAccess.FunctionCallEffectElements getFunctionCallEffectAccess() {
		return gaSct.getFunctionCallEffectAccess();
	}
	
	public ParserRule getFunctionCallEffectRule() {
		return getFunctionCallEffectAccess().getRule();
	}

	//// ---------------- //
	////  KEffects Enums  // 
	//// ---------------- //
	//// Assign Operator Enum    
	//enum AssignOperator returns keffects::AssignOperator:
	//	ASSIGN="=" | ASSIGNADD="+=" | ASSIGNSUB="-=" | ASSIGNMUL="*=" | ASSIGNDIV="/=";
	public KEffectsGrammarAccess.AssignOperatorElements getAssignOperatorAccess() {
		return gaSct.getAssignOperatorAccess();
	}
	
	public EnumRule getAssignOperatorRule() {
		return getAssignOperatorAccess().getRule();
	}

	//// Postfix Operator Enum    
	//enum PostfixOperator returns keffects::AssignOperator:
	//	POSTFIXADD="++" | POSTFIXSUB="--";
	public KEffectsGrammarAccess.PostfixOperatorElements getPostfixOperatorAccess() {
		return gaSct.getPostfixOperatorAccess();
	}
	
	public EnumRule getPostfixOperatorRule() {
		return getPostfixOperatorAccess().getRule();
	}

	//// Expression Rule
	//// An expression is either a boolean expression or a valued expression.
	//Expression:
	//	BoolExpression | ValuedExpression;
	public KExpressionsGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaSct.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//// Boolean Expression Rule
	//// Boolean expression directs to logical or expression and kept for overview (and legacy) reason. 
	//// One could skip directly to the next rule.
	//BoolExpression returns Expression:
	//	LogicalOrExpression;
	public KExpressionsGrammarAccess.BoolExpressionElements getBoolExpressionAccess() {
		return gaSct.getBoolExpressionAccess();
	}
	
	public ParserRule getBoolExpressionRule() {
		return getBoolExpressionAccess().getRule();
	}

	//// Logical Or Expression Rule
	//// Directs to the 'logical and' rule and may create an operator expression for 'logical or' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//LogicalOrExpression returns Expression:
	//	LogicalAndExpression ({OperatorExpression.subExpressions+=current} (operator=LogicalOrOperator
	//	subExpressions+=LogicalAndExpression)+)?;
	public KExpressionsGrammarAccess.LogicalOrExpressionElements getLogicalOrExpressionAccess() {
		return gaSct.getLogicalOrExpressionAccess();
	}
	
	public ParserRule getLogicalOrExpressionRule() {
		return getLogicalOrExpressionAccess().getRule();
	}

	//// Logical And Expression Rule
	//// Directs to the 'bitwise or' rule and may create an operator expression for 'logical and' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//LogicalAndExpression returns Expression:
	//	BitwiseOrExpression ({OperatorExpression.subExpressions+=current} (operator=LogicalAndOperator
	//	subExpressions+=BitwiseOrExpression)+)?;
	public KExpressionsGrammarAccess.LogicalAndExpressionElements getLogicalAndExpressionAccess() {
		return gaSct.getLogicalAndExpressionAccess();
	}
	
	public ParserRule getLogicalAndExpressionRule() {
		return getLogicalAndExpressionAccess().getRule();
	}

	//// Bitwiese Or Expression Rule
	//// Directs to the 'bitwise and' rule and may create an operator expression for 'bitwise or' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//BitwiseOrExpression returns Expression:
	//	BitwiseAndExpression ({OperatorExpression.subExpressions+=current} (operator=BitwiseOrOperator
	//	subExpressions+=BitwiseAndExpression)+)?;
	public KExpressionsGrammarAccess.BitwiseOrExpressionElements getBitwiseOrExpressionAccess() {
		return gaSct.getBitwiseOrExpressionAccess();
	}
	
	public ParserRule getBitwiseOrExpressionRule() {
		return getBitwiseOrExpressionAccess().getRule();
	}

	//// Bitwise And Expression Rule
	//// Directs to the compare rule and may create an operator expression for 'bitwise and' operations
	//// if necessary. The warning can be ignored since the operator will only override itself in this loop.
	//BitwiseAndExpression returns Expression:
	//	CompareOperation ({OperatorExpression.subExpressions+=current} (operator=BitwiseAndOperator
	//	subExpressions+=CompareOperation)+)?;
	public KExpressionsGrammarAccess.BitwiseAndExpressionElements getBitwiseAndExpressionAccess() {
		return gaSct.getBitwiseAndExpressionAccess();
	}
	
	public ParserRule getBitwiseAndExpressionRule() {
		return getBitwiseAndExpressionAccess().getRule();
	}

	//// Compare Operation Rule
	//// Directs to the 'not or valued expression' rule and may create an operator expression for compares. 
	//// Example: 42 <= val(A)
	//CompareOperation returns Expression:
	//	NotOrValuedExpression ({OperatorExpression.subExpressions+=current} operator=CompareOperator
	//	subExpressions+=NotOrValuedExpression)?;
	public KExpressionsGrammarAccess.CompareOperationElements getCompareOperationAccess() {
		return gaSct.getCompareOperationAccess();
	}
	
	public ParserRule getCompareOperationRule() {
		return getCompareOperationAccess().getRule();
	}

	//// 'Not or Valued Expression' Rule
	//// ORDER IS IMPORTANT!
	//NotOrValuedExpression returns Expression:
	//	ValuedExpression | NotExpression;
	public KExpressionsGrammarAccess.NotOrValuedExpressionElements getNotOrValuedExpressionAccess() {
		return gaSct.getNotOrValuedExpressionAccess();
	}
	
	public ParserRule getNotOrValuedExpressionRule() {
		return getNotOrValuedExpressionAccess().getRule();
	}

	//// Not Expression Rule
	//// Example: !A, !false, !(A or B)
	//// At the latter we need the parents to indicate the right binding.
	//// A 'not expression' can also redirect to an 'atomic expression' to maintain the rule chain.
	//NotExpression returns Expression:
	//	{OperatorExpression} operator=NotOperator subExpressions+=NotExpression | AtomicExpression;
	public KExpressionsGrammarAccess.NotExpressionElements getNotExpressionAccess() {
		return gaSct.getNotExpressionAccess();
	}
	
	public ParserRule getNotExpressionRule() {
		return getNotExpressionAccess().getRule();
	}

	//// Valued Expression Rule    
	//// Everything that evaluates to a primitive number value.
	//// Similar to the boolean rule this rule is there for overview reasons.
	//ValuedExpression returns Expression:
	//	AddExpression;
	public KExpressionsGrammarAccess.ValuedExpressionElements getValuedExpressionAccess() {
		return gaSct.getValuedExpressionAccess();
	}
	
	public ParserRule getValuedExpressionRule() {
		return getValuedExpressionAccess().getRule();
	}

	//// Add Expression Rule
	//// The rule directs the 'sub expression' rule and creates an operator expression for additions
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: 1 + 2
	//AddExpression returns Expression:
	//	SubExpression ({OperatorExpression.subExpressions+=current} (operator=AddOperator subExpressions+=SubExpression)+)?;
	public KExpressionsGrammarAccess.AddExpressionElements getAddExpressionAccess() {
		return gaSct.getAddExpressionAccess();
	}
	
	public ParserRule getAddExpressionRule() {
		return getAddExpressionAccess().getRule();
	}

	//// Sub Expression Rule
	//// The rule directs the 'mult expression' rule and creates an operator expression for subtractions
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: var(A) - i
	//SubExpression returns Expression:
	//	MultExpression ({OperatorExpression.subExpressions+=current} (operator=SubOperator
	//	subExpressions+=MultExpression)+)?;
	public KExpressionsGrammarAccess.SubExpressionElements getSubExpressionAccess() {
		return gaSct.getSubExpressionAccess();
	}
	
	public ParserRule getSubExpressionRule() {
		return getSubExpressionAccess().getRule();
	}

	//// Mult Expression Rule
	//// The rule directs the 'div expression' rule and creates an operator expression for multiplications
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: 2 * 4
	//MultExpression returns Expression:
	//	DivExpression ({OperatorExpression.subExpressions+=current} (operator=MultOperator subExpressions+=DivExpression)+)?;
	public KExpressionsGrammarAccess.MultExpressionElements getMultExpressionAccess() {
		return gaSct.getMultExpressionAccess();
	}
	
	public ParserRule getMultExpressionRule() {
		return getMultExpressionAccess().getRule();
	}

	//// Div Expression Rule
	//// The rule directs the 'mod expression' rule and creates an operator expression for divisions
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: 2 / 4
	//DivExpression returns Expression:
	//	ModExpression ({OperatorExpression.subExpressions+=current} (operator=DivOperator subExpressions+=ModExpression)+)?;
	public KExpressionsGrammarAccess.DivExpressionElements getDivExpressionAccess() {
		return gaSct.getDivExpressionAccess();
	}
	
	public ParserRule getDivExpressionRule() {
		return getDivExpressionAccess().getRule();
	}

	//// Mod Expression Rule
	//// The rule directs the 'neg expression' rule and creates an operator expression for modulo operations
	//// if necessary.  The warning can be ignored since the operator will only override itself in this loop.
	//// Example: i % j
	//ModExpression returns Expression:
	//	NegExpression ({OperatorExpression.subExpressions+=current} (operator=ModOperator
	//	subExpressions+=AtomicValuedExpression)+)?;
	public KExpressionsGrammarAccess.ModExpressionElements getModExpressionAccess() {
		return gaSct.getModExpressionAccess();
	}
	
	public ParserRule getModExpressionRule() {
		return getModExpressionAccess().getRule();
	}

	//// Neg Expression Rule
	//// The rule negates the actual instance or directs the atomic value expression rule if necessary. 
	//// Example: -i, -2
	//NegExpression returns Expression:
	//	{OperatorExpression} operator=SubOperator subExpressions+=NegExpression | AtomicValuedExpression;
	public KExpressionsGrammarAccess.NegExpressionElements getNegExpressionAccess() {
		return gaSct.getNegExpressionAccess();
	}
	
	public ParserRule getNegExpressionRule() {
		return getNegExpressionAccess().getRule();
	}

	//// Atomic Expression Rule
	//// An atomic expression is either a simple boolean value, a test expression, another boolean expression
	//// encapsulated in braces, a function call or a text expression.
	//// Basically, the rule chain may start over again at this point.     
	//AtomicExpression returns Expression:
	//	BoolValue | ValuedObjectTestExpression | "(" BoolExpression ")" | FunctionCall | TextExpression;
	public KExpressionsGrammarAccess.AtomicExpressionElements getAtomicExpressionAccess() {
		return gaSct.getAtomicExpressionAccess();
	}
	
	public ParserRule getAtomicExpressionRule() {
		return getAtomicExpressionAccess().getRule();
	}

	//// Atomic Valued Expression Rule
	//// An atomic valued expression is either a simple int float or string literal, another valued expression
	//// encapsulated in braces, or a atomic expression.
	//// Basically, the rule chain may start over again at this point.     
	//AtomicValuedExpression returns Expression:
	//	IntValue | FloatValue | StringValue | "(" ValuedExpression ")" | AtomicExpression;
	public KExpressionsGrammarAccess.AtomicValuedExpressionElements getAtomicValuedExpressionAccess() {
		return gaSct.getAtomicValuedExpressionAccess();
	}
	
	public ParserRule getAtomicValuedExpressionRule() {
		return getAtomicValuedExpressionAccess().getRule();
	}

	//// Valued Object Test Expression Rule
	//// This rules creates an operator expression for pre or val tests. Alternatively, it directs to a
	//// valued object reference.
	//// Example: pre(pre(val(A))), pre(val(pre(A))), val(A)
	//ValuedObjectTestExpression returns Expression:
	//	{OperatorExpression} operator=(PreOperator | ValOperator) "(" subExpressions+=ValuedObjectTestExpression ")" |
	//	ValuedObjectReference;
	public KExpressionsGrammarAccess.ValuedObjectTestExpressionElements getValuedObjectTestExpressionAccess() {
		return gaSct.getValuedObjectTestExpressionAccess();
	}
	
	public ParserRule getValuedObjectTestExpressionRule() {
		return getValuedObjectTestExpressionAccess().getRule();
	}

	//// Valued Object Reference Rule
	//// References a valued object with arbitrary (including none) indices part.
	//// Example: A, B
	//ValuedObjectReference:
	//	valuedObject=[ValuedObject] ("[" indices+=Expression "]")*;
	public KExpressionsGrammarAccess.ValuedObjectReferenceElements getValuedObjectReferenceAccess() {
		return gaSct.getValuedObjectReferenceAccess();
	}
	
	public ParserRule getValuedObjectReferenceRule() {
		return getValuedObjectReferenceAccess().getRule();
	}

	//// Function Call Rule
	//// Calls to functions are indicated by angle brackets. They may include a parameter list. 
	//FunctionCall:
	//	"<" functionName=ExtendedID ("(" parameters+=Parameter ("," parameters+=Parameter)* ")" | "()")? ">";
	public KExpressionsGrammarAccess.FunctionCallElements getFunctionCallAccess() {
		return gaSct.getFunctionCallAccess();
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}

	//// Parameter Rule
	//// The parameter rule is used by the function call rule. Every expression may be a paramter.
	//// Additionally, a parameter may be preceded by an ampersand to indicate a call by reference.
	//// Analogously, an prefixed exclamation mark marks the parameter as pure output.
	//Parameter:
	//	(pureOutput?="!"? callByReference?="&")? expression=Expression;
	public KExpressionsGrammarAccess.ParameterElements getParameterAccess() {
		return gaSct.getParameterAccess();
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//// Text Expression Rule
	//// The text expression rule returns a text expression. Most times text expressions are used for host code.
	//// Example: 'printf(...)'
	//TextExpression:
	//	text=HOSTCODE;
	public KExpressionsGrammarAccess.TextExpressionElements getTextExpressionAccess() {
		return gaSct.getTextExpressionAccess();
	}
	
	public ParserRule getTextExpressionRule() {
		return getTextExpressionAccess().getRule();
	}

	//// Int Value Rule
	//IntValue:
	//	value=INT;
	public KExpressionsGrammarAccess.IntValueElements getIntValueAccess() {
		return gaSct.getIntValueAccess();
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}

	//// Float Value Rule
	//FloatValue:
	//	value=FLOAT;
	public KExpressionsGrammarAccess.FloatValueElements getFloatValueAccess() {
		return gaSct.getFloatValueAccess();
	}
	
	public ParserRule getFloatValueRule() {
		return getFloatValueAccess().getRule();
	}

	//// Bool Value Rule
	//BoolValue:
	//	value=BOOLEAN;
	public KExpressionsGrammarAccess.BoolValueElements getBoolValueAccess() {
		return gaSct.getBoolValueAccess();
	}
	
	public ParserRule getBoolValueRule() {
		return getBoolValueAccess().getRule();
	}

	//// String Value Rule	
	//StringValue:
	//	value=STRING;
	public KExpressionsGrammarAccess.StringValueElements getStringValueAccess() {
		return gaSct.getStringValueAccess();
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}

	//// Any Type Rule
	//// Data type rule allowing any kind of value to be accepted,
	//// e.g. as initialValues of valued objects used in Kits.xtext. 
	//AnyType returns ecore::EString:
	//	BOOLEAN | INT | FLOAT | ID | STRING;
	public KExpressionsGrammarAccess.AnyTypeElements getAnyTypeAccess() {
		return gaSct.getAnyTypeAccess();
	}
	
	public ParserRule getAnyTypeRule() {
		return getAnyTypeAccess().getRule();
	}

	//// -------------------- //
	////  KExpressions Enums  // 
	//// -------------------- //
	//// Compare Operator Enum 
	//enum CompareOperator returns OperatorType:
	//	EQ="==" | LT="<" | LEQ="<=" | GT=">" | GEQ=">=" | NE="!=";
	public KExpressionsGrammarAccess.CompareOperatorElements getCompareOperatorAccess() {
		return gaSct.getCompareOperatorAccess();
	}
	
	public EnumRule getCompareOperatorRule() {
		return getCompareOperatorAccess().getRule();
	}

	//// Pre Operator Enum
	//enum PreOperator returns OperatorType:
	//	PRE="pre";
	public KExpressionsGrammarAccess.PreOperatorElements getPreOperatorAccess() {
		return gaSct.getPreOperatorAccess();
	}
	
	public EnumRule getPreOperatorRule() {
		return getPreOperatorAccess().getRule();
	}

	//// Bitewise Or Operator Enum
	//enum BitwiseOrOperator returns OperatorType:
	//	BITWISE_OR="|";
	public KExpressionsGrammarAccess.BitwiseOrOperatorElements getBitwiseOrOperatorAccess() {
		return gaSct.getBitwiseOrOperatorAccess();
	}
	
	public EnumRule getBitwiseOrOperatorRule() {
		return getBitwiseOrOperatorAccess().getRule();
	}

	//// Bitwise And Operator Enum
	//enum BitwiseAndOperator returns OperatorType:
	//	BITWISE_AND="&";
	public KExpressionsGrammarAccess.BitwiseAndOperatorElements getBitwiseAndOperatorAccess() {
		return gaSct.getBitwiseAndOperatorAccess();
	}
	
	public EnumRule getBitwiseAndOperatorRule() {
		return getBitwiseAndOperatorAccess().getRule();
	}

	//// Not Operator Enum
	//enum NotOperator returns OperatorType:
	//	NOT="!";
	public KExpressionsGrammarAccess.NotOperatorElements getNotOperatorAccess() {
		return gaSct.getNotOperatorAccess();
	}
	
	public EnumRule getNotOperatorRule() {
		return getNotOperatorAccess().getRule();
	}

	//// Add Operator Enum
	//enum AddOperator returns OperatorType:
	//	ADD="+";
	public KExpressionsGrammarAccess.AddOperatorElements getAddOperatorAccess() {
		return gaSct.getAddOperatorAccess();
	}
	
	public EnumRule getAddOperatorRule() {
		return getAddOperatorAccess().getRule();
	}

	//// Sub Operator Enum
	//enum SubOperator returns OperatorType:
	//	SUB="-";
	public KExpressionsGrammarAccess.SubOperatorElements getSubOperatorAccess() {
		return gaSct.getSubOperatorAccess();
	}
	
	public EnumRule getSubOperatorRule() {
		return getSubOperatorAccess().getRule();
	}

	//// Mult Operator Enum
	//enum MultOperator returns OperatorType:
	//	MULT="*";
	public KExpressionsGrammarAccess.MultOperatorElements getMultOperatorAccess() {
		return gaSct.getMultOperatorAccess();
	}
	
	public EnumRule getMultOperatorRule() {
		return getMultOperatorAccess().getRule();
	}

	//// Mod Operator Enum
	//enum ModOperator returns OperatorType:
	//	MOD="%";
	public KExpressionsGrammarAccess.ModOperatorElements getModOperatorAccess() {
		return gaSct.getModOperatorAccess();
	}
	
	public EnumRule getModOperatorRule() {
		return getModOperatorAccess().getRule();
	}

	//// Val Operator Enum
	//enum ValOperator returns OperatorType:
	//	VAL="val";
	public KExpressionsGrammarAccess.ValOperatorElements getValOperatorAccess() {
		return gaSct.getValOperatorAccess();
	}
	
	public EnumRule getValOperatorRule() {
		return getValOperatorAccess().getRule();
	}

	//// Logical Or Operator Enum
	//enum LogicalOrOperator returns OperatorType:
	//	LOGICAL_OR="||";
	public KExpressionsGrammarAccess.LogicalOrOperatorElements getLogicalOrOperatorAccess() {
		return gaSct.getLogicalOrOperatorAccess();
	}
	
	public EnumRule getLogicalOrOperatorRule() {
		return getLogicalOrOperatorAccess().getRule();
	}

	//// Logical And Operator Enum
	//enum LogicalAndOperator returns OperatorType:
	//	LOGICAL_AND="&&";
	public KExpressionsGrammarAccess.LogicalAndOperatorElements getLogicalAndOperatorAccess() {
		return gaSct.getLogicalAndOperatorAccess();
	}
	
	public EnumRule getLogicalAndOperatorRule() {
		return getLogicalAndOperatorAccess().getRule();
	}

	//// Postfix Operator Enum
	//enum PostfixAdd returns OperatorType:
	//	POSTFIX_ADD="++";
	public KExpressionsGrammarAccess.PostfixAddElements getPostfixAddAccess() {
		return gaSct.getPostfixAddAccess();
	}
	
	public EnumRule getPostfixAddRule() {
		return getPostfixAddAccess().getRule();
	}

	//// Postfix Operator Enum
	//enum PostfixSub returns OperatorType:
	//	POSTFIX_SUB="--";
	public KExpressionsGrammarAccess.PostfixSubElements getPostfixSubAccess() {
		return gaSct.getPostfixSubAccess();
	}
	
	public EnumRule getPostfixSubRule() {
		return getPostfixSubAccess().getRule();
	}

	//// Value Type Enum
	//enum ValueType:
	//	PURE="pure" | BOOL="bool" | UNSIGNED="unsigned" | INT="int" | FLOAT="float" | STRING="string" | HOST="host";
	public KExpressionsGrammarAccess.ValueTypeElements getValueTypeAccess() {
		return gaSct.getValueTypeAccess();
	}
	
	public EnumRule getValueTypeRule() {
		return getValueTypeAccess().getRule();
	}

	//// Host Type Enum
	//enum HostType returns ValueType:
	//	HOST="host";
	public KExpressionsGrammarAccess.HostTypeElements getHostTypeAccess() {
		return gaSct.getHostTypeAccess();
	}
	
	public EnumRule getHostTypeRule() {
		return getHostTypeAccess().getRule();
	}

	//// Combine Operator Enum
	//enum CombineOperator:
	//	NONE="none" | ADD="+" | MULT="*" | MAX="max" | MIN="min" | OR="|" | AND="&" | HOST="host";
	public KExpressionsGrammarAccess.CombineOperatorElements getCombineOperatorAccess() {
		return gaSct.getCombineOperatorAccess();
	}
	
	public EnumRule getCombineOperatorRule() {
		return getCombineOperatorAccess().getRule();
	}

	//// ------------------------ //
	////  KExpressions Terminals  // 
	//// ------------------------ //
	//// Hostcode Terminals
	//// Custom terminal rule allowing to save transition label string as they are
	//terminal HOSTCODE:
	//	"\'" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getHOSTCODERule() {
		return gaSct.getHOSTCODERule();
	} 

	/// **
	// * @author ssm
	// * @kieler.design 2015-08-21 proposed 
	// * @kieler.rating 2015-08-21 proposed yellow
	// * /
	//// ------------------ //
	// //  Annotation Rules  // 
	// // ------------------ //
	// // General rule for annotations
	//
	//// The different annotation sub rules are tested in order. Hence, order matters! 
	// Annotation:
	//	CommentAnnotation | KeyBooleanValueAnnotation | KeyStringValueAnnotation | TypedKeyStringValueAnnotation |
	//	KeyIntValueAnnotation | KeyFloatValueAnnotation | TagAnnotation;
	public AnnotationsGrammarAccess.AnnotationElements getAnnotationAccess() {
		return gaSct.getAnnotationAccess();
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}

	//// Valued Annotation Rule
	// // Valued annotations must have a value. For instance, tag annotations are not allowed.
	//
	//// Derived grammars may use this rule if the general annotation rules compromises the grammar
	// // due to ambiguities.
	//
	//ValuedAnnotation returns Annotation:
	//	CommentAnnotation | KeyStringValueAnnotation | TypedKeyStringValueAnnotation | KeyBooleanValueAnnotation |
	//	KeyIntValueAnnotation | KeyFloatValueAnnotation;
	public AnnotationsGrammarAccess.ValuedAnnotationElements getValuedAnnotationAccess() {
		return gaSct.getValuedAnnotationAccess();
	}
	
	public ParserRule getValuedAnnotationRule() {
		return getValuedAnnotationAccess().getRule();
	}

	//// Restiricted Annotation Rule
	//
	//// The restricted annotation rules uses quoted key string annotations. You can use this rule in 
	//
	//// derived grammars if you don't want to permit unquoted strings. 
	//
	//// (If you are looking for an example, the keffects grammar uses this rule for their emission
	//
	//// rule and to avoid grammar ambiguities.)  
	// RestrictedAnnotation returns Annotation:
	//	CommentAnnotation | QuotedKeyStringValueAnnotation | QuotedTypedKeyStringValueAnnotation | KeyBooleanValueAnnotation
	//	| KeyIntValueAnnotation | KeyFloatValueAnnotation | TagAnnotation;
	public AnnotationsGrammarAccess.RestrictedAnnotationElements getRestrictedAnnotationAccess() {
		return gaSct.getRestrictedAnnotationAccess();
	}
	
	public ParserRule getRestrictedAnnotationRule() {
		return getRestrictedAnnotationAccess().getRule();
	}

	//// CommentAnnotation
	// // e.g.: / ** semantic comment * /
	// CommentAnnotation:
	//	values+=COMMENT_ANNOTATION;
	public AnnotationsGrammarAccess.CommentAnnotationElements getCommentAnnotationAccess() {
		return gaSct.getCommentAnnotationAccess();
	}
	
	public ParserRule getCommentAnnotationRule() {
		return getCommentAnnotationAccess().getRule();
	}

	//// TagAnnotation
	// // e.g.: @HVlayout
	// TagAnnotation returns Annotation:
	//	"@" name=ExtendedID;
	public AnnotationsGrammarAccess.TagAnnotationElements getTagAnnotationAccess() {
		return gaSct.getTagAnnotationAccess();
	}
	
	public ParserRule getTagAnnotationRule() {
		return getTagAnnotationAccess().getRule();
	}

	//// KeyStringValueAnnotation
	// // e.g.: @layouter dot
	// // You may separate different values via comma.   
	//
	//KeyStringValueAnnotation returns StringAnnotation:
	//	"@" name=ExtendedID values+=EString ("," values+=EString)*;
	public AnnotationsGrammarAccess.KeyStringValueAnnotationElements getKeyStringValueAnnotationAccess() {
		return gaSct.getKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getKeyStringValueAnnotationRule() {
		return getKeyStringValueAnnotationAccess().getRule();
	}

	//// TypedKeyStringValueAnnotation
	// // e.g.: @position[de.cau.cs.kieler.core.math.KVector] "(3,2)"
	//
	//TypedKeyStringValueAnnotation returns TypedStringAnnotation:
	//	"@" name=ExtendedID "[" type=ExtendedID "]" values+=EString ("," values+=EString)*;
	public AnnotationsGrammarAccess.TypedKeyStringValueAnnotationElements getTypedKeyStringValueAnnotationAccess() {
		return gaSct.getTypedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getTypedKeyStringValueAnnotationRule() {
		return getTypedKeyStringValueAnnotationAccess().getRule();
	}

	//// QuotedKeyStringValueAnnotation
	// // The quoted key string value annotation is a replacement derived grammars may use
	//
	//// if they want to disallow quote-less strings in a key string annotation. 
	// QuotedKeyStringValueAnnotation returns
	//StringAnnotation:
	//	"@" name=ExtendedID values+=STRING ("," values+=STRING)*;
	public AnnotationsGrammarAccess.QuotedKeyStringValueAnnotationElements getQuotedKeyStringValueAnnotationAccess() {
		return gaSct.getQuotedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getQuotedKeyStringValueAnnotationRule() {
		return getQuotedKeyStringValueAnnotationAccess().getRule();
	}

	//// QuotedTypedKeyStringValueAnnotation
	//
	//// The quoted typed key string value annotation is a replacement derived grammars may use
	//
	//// if they want to disallow quote-less strings in a key string annotation. 
	// QuotedTypedKeyStringValueAnnotation
	//returns TypedStringAnnotation:
	//	"@" name=ExtendedID "[" type=ExtendedID "]" values+=STRING ("," values+=STRING)*;
	public AnnotationsGrammarAccess.QuotedTypedKeyStringValueAnnotationElements getQuotedTypedKeyStringValueAnnotationAccess() {
		return gaSct.getQuotedTypedKeyStringValueAnnotationAccess();
	}
	
	public ParserRule getQuotedTypedKeyStringValueAnnotationRule() {
		return getQuotedTypedKeyStringValueAnnotationAccess().getRule();
	}

	//// KeyBooleanValueAnnotation    
	// // e.g.: @visible true;
	// KeyBooleanValueAnnotation returns BooleanAnnotation:
	//	"@" name=ExtendedID value=BOOLEAN;
	public AnnotationsGrammarAccess.KeyBooleanValueAnnotationElements getKeyBooleanValueAnnotationAccess() {
		return gaSct.getKeyBooleanValueAnnotationAccess();
	}
	
	public ParserRule getKeyBooleanValueAnnotationRule() {
		return getKeyBooleanValueAnnotationAccess().getRule();
	}

	//// KeyIntValueAnnotation
	// // e.g.: @minSpace 10;    
	// KeyIntValueAnnotation returns IntAnnotation:
	//	"@" name=ExtendedID value=Integer;
	public AnnotationsGrammarAccess.KeyIntValueAnnotationElements getKeyIntValueAnnotationAccess() {
		return gaSct.getKeyIntValueAnnotationAccess();
	}
	
	public ParserRule getKeyIntValueAnnotationRule() {
		return getKeyIntValueAnnotationAccess().getRule();
	}

	//// KeyFloatValueAnnotation
	// // e.g.: @minSpace 10.0;    
	// KeyFloatValueAnnotation returns FloatAnnotation:
	//	"@" name=ExtendedID value=Floateger;
	public AnnotationsGrammarAccess.KeyFloatValueAnnotationElements getKeyFloatValueAnnotationAccess() {
		return gaSct.getKeyFloatValueAnnotationAccess();
	}
	
	public ParserRule getKeyFloatValueAnnotationRule() {
		return getKeyFloatValueAnnotationAccess().getRule();
	}

	//// EString
	// // Allow strings without quotes if they don't contain spaces.
	//
	//// For quoteless strings the ExtendedID rule is used.
	// EString returns ecore::EString:
	//	STRING | ExtendedID;
	public AnnotationsGrammarAccess.EStringElements getEStringAccess() {
		return gaSct.getEStringAccess();
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//// ExtendedID
	// // ExtendedID extends the ID rule provided by the terminals grammar.
	//
	//// An ID may have dot separated parts and may close with a number separated by a hash mark.
	// ExtendedID returns
	//ecore::EString:
	//	ID ("." ID)* ("#" INT)?;
	public AnnotationsGrammarAccess.ExtendedIDElements getExtendedIDAccess() {
		return gaSct.getExtendedIDAccess();
	}
	
	public ParserRule getExtendedIDRule() {
		return getExtendedIDAccess().getRule();
	}

	//// Integer
	// // The integer rule extends the EInt terminal by an optional sign for negative numbers.
	// Integer returns
	//ecore::EInt:
	//	"-"? INT;
	public AnnotationsGrammarAccess.IntegerElements getIntegerAccess() {
		return gaSct.getIntegerAccess();
	}
	
	public ParserRule getIntegerRule() {
		return getIntegerAccess().getRule();
	}

	//// Floateger
	// // The floateger rule extends the EFloat terminal by an optional sign for negative numbers.
	// Floateger
	//returns ecore::EFloat:
	//	"-"? FLOAT;
	public AnnotationsGrammarAccess.FloategerElements getFloategerAccess() {
		return gaSct.getFloategerAccess();
	}
	
	public ParserRule getFloategerRule() {
		return getFloategerAccess().getRule();
	}

	//// ---------------------- //
	// //  Annotation Terminals  // 
	// // ---------------------- //
	//
	//// Comment Annotation Terminal
	// // Custom terminal rule introducing semantic comments.
	// terminal COMMENT_ANNOTATION:
	//	"/ **"->"* /";
	public TerminalRule getCOMMENT_ANNOTATIONRule() {
		return gaSct.getCOMMENT_ANNOTATIONRule();
	} 

	//// Multiline Comment Terminal
	// // Modified version of Terminals.ML_COMMENT as
	//
	//// COMMENT_ANNOTATION is not recognized correctly with original one.
	// terminal ML_COMMENT:
	//	"/ *" !"*"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaSct.getML_COMMENTRule();
	} 

	//// Number Terminal
	// terminal fragment NUMBER:
	//	"0".."9";
	public TerminalRule getNUMBERRule() {
		return gaSct.getNUMBERRule();
	} 

	//// Integer Terminal
	// // An INT is a list of numbers.   
	// terminal INT returns ecore::EInt:
	//	NUMBER+;
	public TerminalRule getINTRule() {
		return gaSct.getINTRule();
	} 

	//// Float Terminal    
	// // Make sure the Float rule does not shadow the INT rule
	// terminal FLOAT returns
	//ecore::EFloatObject:
	//	NUMBER+ ("." NUMBER*) (("e" | "E") ("+" | "-")? NUMBER+)? "f"? | NUMBER+ "f";
	public TerminalRule getFLOATRule() {
		return gaSct.getFLOATRule();
	} 

	//// Boolean Terminal   
	// // Introduce boolean values.
	// terminal BOOLEAN returns ecore::EBooleanObject:
	//	"true" | "false";
	public TerminalRule getBOOLEANRule() {
		return gaSct.getBOOLEANRule();
	} 

	//// String Terminal
	// // Custom terminal rule for strings, only use double quotes.
	// terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"";
	public TerminalRule getSTRINGRule() {
		return gaSct.getSTRINGRule();
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaSct.getIDRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaSct.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaSct.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaSct.getANY_OTHERRule();
	} 
}
