/*
 * generated by Xtext
 */
package de.cau.cs.kieler.simulation.formatting2

import com.google.inject.Inject
import de.cau.cs.kieler.prom.formatting2.KiBuildFormatter
import de.cau.cs.kieler.prom.kibuild.AttributeMapping
import de.cau.cs.kieler.simulation.kisim.DataHandlerConfiguration
import de.cau.cs.kieler.simulation.kisim.SimulationConfiguration
import de.cau.cs.kieler.simulation.services.KiSimGrammarAccess
import org.eclipse.xtext.formatting2.IFormattableDocument

class KiSimFormatter extends KiBuildFormatter {
	
	@Inject extension KiSimGrammarAccess

	def dispatch void format(SimulationConfiguration simulationConfiguration, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (AttributeMapping attributeMapping : simulationConfiguration.getAttributes()) {
			attributeMapping.format;
		}
		for (DataHandlerConfiguration dataHandlerConfiguration : simulationConfiguration.getHandlers()) {
			dataHandlerConfiguration.format;
		}
		simulationConfiguration.getInitialization.format;
		simulationConfiguration.getExecution.format;
	}

	def dispatch void format(DataHandlerConfiguration dataHandlerConfiguration, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (AttributeMapping attributeMapping : dataHandlerConfiguration.getAttributes()) {
			attributeMapping.format;
		}
	}
	
	// TODO: implement for Initialization, Execution
}
