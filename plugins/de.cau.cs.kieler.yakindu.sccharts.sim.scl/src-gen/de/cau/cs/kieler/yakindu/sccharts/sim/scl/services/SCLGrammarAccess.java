/*
* generated by Xtext
*/

package de.cau.cs.kieler.yakindu.sccharts.sim.scl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.yakindu.sct.model.stext.services.STextGrammarAccess;

@Singleton
public class SCLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cInterfaceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInterfaceVariableDeclarationParserRuleCall_2_0 = (RuleCall)cInterfaceAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cProgramAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cProgramInstructionListParserRuleCall_4_0 = (RuleCall)cProgramAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Program:
		//
		//	"module" name=ID interface+=VariableDeclaration* "{" program=InstructionList "}";
		public ParserRule getRule() { return rule; }

		//"module" name=ID interface+=VariableDeclaration* "{" program=InstructionList "}"
		public Group getGroup() { return cGroup; }

		//"module"
		public Keyword getModuleKeyword_0() { return cModuleKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//interface+=VariableDeclaration*
		public Assignment getInterfaceAssignment_2() { return cInterfaceAssignment_2; }

		//VariableDeclaration
		public RuleCall getInterfaceVariableDeclarationParserRuleCall_2_0() { return cInterfaceVariableDeclarationParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//program=InstructionList
		public Assignment getProgramAssignment_4() { return cProgramAssignment_4; }

		//InstructionList
		public RuleCall getProgramInstructionListParserRuleCall_4_0() { return cProgramInstructionListParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInputAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cInputInputKeyword_0_0 = (Keyword)cInputAssignment_0.eContents().get(0);
		private final Assignment cOutputAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cOutputOutputKeyword_1_0 = (Keyword)cOutputAssignment_1.eContents().get(0);
		private final Keyword cSignalKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameSTRINGTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cTypeTypeCrossReference_4_1_0 = (CrossReference)cTypeAssignment_4_1.eContents().get(0);
		private final RuleCall cTypeTypeIDTerminalRuleCall_4_1_0_1 = (RuleCall)cTypeTypeCrossReference_4_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//VariableDeclaration:
		//
		//	Input?="input"? Output?="output"? "signal" name=STRING (":" type=[types::Type])? ";";
		public ParserRule getRule() { return rule; }

		//Input?="input"? Output?="output"? "signal" name=STRING (":" type=[types::Type])? ";"
		public Group getGroup() { return cGroup; }

		//Input?="input"?
		public Assignment getInputAssignment_0() { return cInputAssignment_0; }

		//"input"
		public Keyword getInputInputKeyword_0_0() { return cInputInputKeyword_0_0; }

		//Output?="output"?
		public Assignment getOutputAssignment_1() { return cOutputAssignment_1; }

		//"output"
		public Keyword getOutputOutputKeyword_1_0() { return cOutputOutputKeyword_1_0; }

		//"signal"
		public Keyword getSignalKeyword_2() { return cSignalKeyword_2; }

		//name=STRING
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_3_0() { return cNameSTRINGTerminalRuleCall_3_0; }

		//(":" type=[types::Type])?
		public Group getGroup_4() { return cGroup_4; }

		//":"
		public Keyword getColonKeyword_4_0() { return cColonKeyword_4_0; }

		//type=[types::Type]
		public Assignment getTypeAssignment_4_1() { return cTypeAssignment_4_1; }

		//[types::Type]
		public CrossReference getTypeTypeCrossReference_4_1_0() { return cTypeTypeCrossReference_4_1_0; }

		//ID
		public RuleCall getTypeTypeIDTerminalRuleCall_4_1_0_1() { return cTypeTypeIDTerminalRuleCall_4_1_0_1; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Instruction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cAssignmentParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cConditionalParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cGotoParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cParallelParserRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final RuleCall cPauseParserRuleCall_0_4 = (RuleCall)cAlternatives_0.eContents().get(4);
		private final RuleCall cLabelParserRuleCall_0_5 = (RuleCall)cAlternatives_0.eContents().get(5);
		private final Assignment cPriorityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPriorityINTTerminalRuleCall_1_0 = (RuleCall)cPriorityAssignment_1.eContents().get(0);
		
		//Instruction:
		//
		//	(Assignment | Conditional | Goto | Parallel | Pause | Label) priority=INT?;
		public ParserRule getRule() { return rule; }

		//(Assignment | Conditional | Goto | Parallel | Pause | Label) priority=INT?
		public Group getGroup() { return cGroup; }

		//Assignment | Conditional | Goto | Parallel | Pause | Label
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//Assignment
		public RuleCall getAssignmentParserRuleCall_0_0() { return cAssignmentParserRuleCall_0_0; }

		//Conditional
		public RuleCall getConditionalParserRuleCall_0_1() { return cConditionalParserRuleCall_0_1; }

		//Goto
		public RuleCall getGotoParserRuleCall_0_2() { return cGotoParserRuleCall_0_2; }

		//Parallel
		public RuleCall getParallelParserRuleCall_0_3() { return cParallelParserRuleCall_0_3; }

		//Pause
		public RuleCall getPauseParserRuleCall_0_4() { return cPauseParserRuleCall_0_4; }

		//Label
		public RuleCall getLabelParserRuleCall_0_5() { return cLabelParserRuleCall_0_5; }

		//priority=INT?
		public Assignment getPriorityAssignment_1() { return cPriorityAssignment_1; }

		//INT
		public RuleCall getPriorityINTTerminalRuleCall_1_0() { return cPriorityINTTerminalRuleCall_1_0; }
	}

	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assignment");
		private final Assignment cAssignmentAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cAssignmentExpressionParserRuleCall_0 = (RuleCall)cAssignmentAssignment.eContents().get(0);
		
		//Assignment:
		//
		//	assignment=Expression;
		public ParserRule getRule() { return rule; }

		//assignment=Expression
		public Assignment getAssignmentAssignment() { return cAssignmentAssignment; }

		//Expression
		public RuleCall getAssignmentExpressionParserRuleCall_0() { return cAssignmentExpressionParserRuleCall_0; }
	}

	public class InstructionListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InstructionList");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cInstructionListAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Alternatives cAlternatives_0_1_0 = (Alternatives)cGroup_0_1.eContents().get(0);
		private final Group cGroup_0_1_0_0 = (Group)cAlternatives_0_1_0.eContents().get(0);
		private final Assignment cInstructionsAssignment_0_1_0_0_0 = (Assignment)cGroup_0_1_0_0.eContents().get(0);
		private final RuleCall cInstructionsInstructionParserRuleCall_0_1_0_0_0_0 = (RuleCall)cInstructionsAssignment_0_1_0_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1_0_0_1 = (Keyword)cGroup_0_1_0_0.eContents().get(1);
		private final Assignment cInstructionsAssignment_0_1_0_1 = (Assignment)cAlternatives_0_1_0.eContents().get(1);
		private final RuleCall cInstructionsAnnotationParserRuleCall_0_1_0_1_0 = (RuleCall)cInstructionsAssignment_0_1_0_1.eContents().get(0);
		private final Assignment cInstructionsAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cInstructionsInstructionParserRuleCall_0_1_1_0 = (RuleCall)cInstructionsAssignment_0_1_1.eContents().get(0);
		private final Assignment cInstructionsAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final RuleCall cInstructionsAnnotationParserRuleCall_0_1_2_0 = (RuleCall)cInstructionsAssignment_0_1_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cInstructionListAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cInstructionsAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cInstructionsAnnotationParserRuleCall_1_1_0_0 = (RuleCall)cInstructionsAssignment_1_1_0.eContents().get(0);
		private final Assignment cInstructionsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cInstructionsInstructionParserRuleCall_1_1_1_0 = (RuleCall)cInstructionsAssignment_1_1_1.eContents().get(0);
		private final Assignment cInstructionsAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cInstructionsAnnotationParserRuleCall_2_0 = (RuleCall)cInstructionsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cInstructionListAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Assignment cInstructionsAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cInstructionsInstructionParserRuleCall_3_1_0_0 = (RuleCall)cInstructionsAssignment_3_1_0.eContents().get(0);
		private final Assignment cInstructionsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cInstructionsAnnotationParserRuleCall_3_1_1_0 = (RuleCall)cInstructionsAssignment_3_1_1.eContents().get(0);
		private final Assignment cInstructionsAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cInstructionsInstructionParserRuleCall_4_0 = (RuleCall)cInstructionsAssignment_4.eContents().get(0);
		
		//InstructionList:
		//
		//	{InstructionList} ((instructions+=Instruction ";" | instructions+=Annotation)+ instructions+=Instruction
		//
		//	instructions+=Annotation?) | {InstructionList} (instructions+=Annotation instructions+=Instruction) |
		//
		//	instructions+=Annotation | {InstructionList} (instructions+=Instruction instructions+=Annotation) |
		//
		//	instructions+=Instruction;
		public ParserRule getRule() { return rule; }

		//{InstructionList} ((instructions+=Instruction ";" | instructions+=Annotation)+ instructions+=Instruction
		//
		//instructions+=Annotation?) | {InstructionList} (instructions+=Annotation instructions+=Instruction) |
		//
		//instructions+=Annotation | {InstructionList} (instructions+=Instruction instructions+=Annotation) |
		//
		//instructions+=Instruction
		public Alternatives getAlternatives() { return cAlternatives; }

		//{InstructionList} ((instructions+=Instruction ";" | instructions+=Annotation)+ instructions+=Instruction
		//
		//instructions+=Annotation?)
		public Group getGroup_0() { return cGroup_0; }

		//{InstructionList}
		public Action getInstructionListAction_0_0() { return cInstructionListAction_0_0; }

		//(instructions+=Instruction ";" | instructions+=Annotation)+ instructions+=Instruction instructions+=Annotation?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//(instructions+=Instruction ";" | instructions+=Annotation)+
		public Alternatives getAlternatives_0_1_0() { return cAlternatives_0_1_0; }

		//instructions+=Instruction ";"
		public Group getGroup_0_1_0_0() { return cGroup_0_1_0_0; }

		//instructions+=Instruction
		public Assignment getInstructionsAssignment_0_1_0_0_0() { return cInstructionsAssignment_0_1_0_0_0; }

		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_0_1_0_0_0_0() { return cInstructionsInstructionParserRuleCall_0_1_0_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_0_1_0_0_1() { return cSemicolonKeyword_0_1_0_0_1; }

		//instructions+=Annotation
		public Assignment getInstructionsAssignment_0_1_0_1() { return cInstructionsAssignment_0_1_0_1; }

		//Annotation
		public RuleCall getInstructionsAnnotationParserRuleCall_0_1_0_1_0() { return cInstructionsAnnotationParserRuleCall_0_1_0_1_0; }

		//instructions+=Instruction
		public Assignment getInstructionsAssignment_0_1_1() { return cInstructionsAssignment_0_1_1; }

		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_0_1_1_0() { return cInstructionsInstructionParserRuleCall_0_1_1_0; }

		//instructions+=Annotation?
		public Assignment getInstructionsAssignment_0_1_2() { return cInstructionsAssignment_0_1_2; }

		//Annotation
		public RuleCall getInstructionsAnnotationParserRuleCall_0_1_2_0() { return cInstructionsAnnotationParserRuleCall_0_1_2_0; }

		//{InstructionList} (instructions+=Annotation instructions+=Instruction)
		public Group getGroup_1() { return cGroup_1; }

		//{InstructionList}
		public Action getInstructionListAction_1_0() { return cInstructionListAction_1_0; }

		//instructions+=Annotation instructions+=Instruction
		public Group getGroup_1_1() { return cGroup_1_1; }

		//instructions+=Annotation
		public Assignment getInstructionsAssignment_1_1_0() { return cInstructionsAssignment_1_1_0; }

		//Annotation
		public RuleCall getInstructionsAnnotationParserRuleCall_1_1_0_0() { return cInstructionsAnnotationParserRuleCall_1_1_0_0; }

		//instructions+=Instruction
		public Assignment getInstructionsAssignment_1_1_1() { return cInstructionsAssignment_1_1_1; }

		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_1_1_1_0() { return cInstructionsInstructionParserRuleCall_1_1_1_0; }

		//instructions+=Annotation
		public Assignment getInstructionsAssignment_2() { return cInstructionsAssignment_2; }

		//Annotation
		public RuleCall getInstructionsAnnotationParserRuleCall_2_0() { return cInstructionsAnnotationParserRuleCall_2_0; }

		//{InstructionList} (instructions+=Instruction instructions+=Annotation)
		public Group getGroup_3() { return cGroup_3; }

		//{InstructionList}
		public Action getInstructionListAction_3_0() { return cInstructionListAction_3_0; }

		//instructions+=Instruction instructions+=Annotation
		public Group getGroup_3_1() { return cGroup_3_1; }

		//instructions+=Instruction
		public Assignment getInstructionsAssignment_3_1_0() { return cInstructionsAssignment_3_1_0; }

		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_3_1_0_0() { return cInstructionsInstructionParserRuleCall_3_1_0_0; }

		//instructions+=Annotation
		public Assignment getInstructionsAssignment_3_1_1() { return cInstructionsAssignment_3_1_1; }

		//Annotation
		public RuleCall getInstructionsAnnotationParserRuleCall_3_1_1_0() { return cInstructionsAnnotationParserRuleCall_3_1_1_0; }

		//instructions+=Instruction
		public Assignment getInstructionsAssignment_4() { return cInstructionsAssignment_4; }

		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_4_0() { return cInstructionsInstructionParserRuleCall_4_0; }
	}

	public class ScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Scope");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInstructionListAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cDeclarationsAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cDeclarationsVariableDeclarationParserRuleCall_1_0_1_0 = (RuleCall)cDeclarationsAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_0_2 = (Group)cGroup_1_0.eContents().get(2);
		private final Alternatives cAlternatives_1_0_2_0 = (Alternatives)cGroup_1_0_2.eContents().get(0);
		private final Group cGroup_1_0_2_0_0 = (Group)cAlternatives_1_0_2_0.eContents().get(0);
		private final Assignment cInstructionsAssignment_1_0_2_0_0_0 = (Assignment)cGroup_1_0_2_0_0.eContents().get(0);
		private final RuleCall cInstructionsInstructionParserRuleCall_1_0_2_0_0_0_0 = (RuleCall)cInstructionsAssignment_1_0_2_0_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_0_2_0_0_1 = (Keyword)cGroup_1_0_2_0_0.eContents().get(1);
		private final Assignment cInstructionsAssignment_1_0_2_0_1 = (Assignment)cAlternatives_1_0_2_0.eContents().get(1);
		private final RuleCall cInstructionsAnnotationParserRuleCall_1_0_2_0_1_0 = (RuleCall)cInstructionsAssignment_1_0_2_0_1.eContents().get(0);
		private final Assignment cInstructionsAssignment_1_0_2_1 = (Assignment)cGroup_1_0_2.eContents().get(1);
		private final RuleCall cInstructionsInstructionParserRuleCall_1_0_2_1_0 = (RuleCall)cInstructionsAssignment_1_0_2_1.eContents().get(0);
		private final Assignment cInstructionsAssignment_1_0_2_2 = (Assignment)cGroup_1_0_2.eContents().get(2);
		private final RuleCall cInstructionsAnnotationParserRuleCall_1_0_2_2_0 = (RuleCall)cInstructionsAssignment_1_0_2_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cInstructionsAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cInstructionsAnnotationParserRuleCall_1_1_0_0 = (RuleCall)cInstructionsAssignment_1_1_0.eContents().get(0);
		private final Assignment cInstructionsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cInstructionsInstructionParserRuleCall_1_1_1_0 = (RuleCall)cInstructionsAssignment_1_1_1.eContents().get(0);
		private final Assignment cInstructionsAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cInstructionsAnnotationParserRuleCall_1_2_0 = (RuleCall)cInstructionsAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Assignment cInstructionsAssignment_1_3_0 = (Assignment)cGroup_1_3.eContents().get(0);
		private final RuleCall cInstructionsInstructionParserRuleCall_1_3_0_0 = (RuleCall)cInstructionsAssignment_1_3_0.eContents().get(0);
		private final Assignment cInstructionsAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cInstructionsAnnotationParserRuleCall_1_3_1_0 = (RuleCall)cInstructionsAssignment_1_3_1.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cAlternatives_1.eContents().get(4);
		private final Assignment cInstructionsAssignment_1_4_0 = (Assignment)cGroup_1_4.eContents().get(0);
		private final RuleCall cInstructionsInstructionParserRuleCall_1_4_0_0 = (RuleCall)cInstructionsAssignment_1_4_0.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_4_1 = (Keyword)cGroup_1_4.eContents().get(1);
		
		//Scope:
		//
		//	{InstructionList} ("{" declarations+=VariableDeclaration* ((instructions+=Instruction ";" |
		//
		//	instructions+=Annotation)+ instructions+=Instruction instructions+=Annotation?) | instructions+=Annotation
		//
		//	instructions+=Instruction | instructions+=Annotation | instructions+=Instruction instructions+=Annotation |
		//
		//	instructions+=Instruction "}");
		public ParserRule getRule() { return rule; }

		//{InstructionList} ("{" declarations+=VariableDeclaration* ((instructions+=Instruction ";" | instructions+=Annotation)+
		//
		//instructions+=Instruction instructions+=Annotation?) | instructions+=Annotation instructions+=Instruction |
		//
		//instructions+=Annotation | instructions+=Instruction instructions+=Annotation | instructions+=Instruction "}")
		public Group getGroup() { return cGroup; }

		//{InstructionList}
		public Action getInstructionListAction_0() { return cInstructionListAction_0; }

		//"{" declarations+=VariableDeclaration* ((instructions+=Instruction ";" | instructions+=Annotation)+
		//
		//instructions+=Instruction instructions+=Annotation?) | instructions+=Annotation instructions+=Instruction |
		//
		//instructions+=Annotation | instructions+=Instruction instructions+=Annotation | instructions+=Instruction "}"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"{" declarations+=VariableDeclaration* ((instructions+=Instruction ";" | instructions+=Annotation)+
		//
		//instructions+=Instruction instructions+=Annotation?)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_0_0() { return cLeftCurlyBracketKeyword_1_0_0; }

		//declarations+=VariableDeclaration*
		public Assignment getDeclarationsAssignment_1_0_1() { return cDeclarationsAssignment_1_0_1; }

		//VariableDeclaration
		public RuleCall getDeclarationsVariableDeclarationParserRuleCall_1_0_1_0() { return cDeclarationsVariableDeclarationParserRuleCall_1_0_1_0; }

		//(instructions+=Instruction ";" | instructions+=Annotation)+ instructions+=Instruction instructions+=Annotation?
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }

		//(instructions+=Instruction ";" | instructions+=Annotation)+
		public Alternatives getAlternatives_1_0_2_0() { return cAlternatives_1_0_2_0; }

		//instructions+=Instruction ";"
		public Group getGroup_1_0_2_0_0() { return cGroup_1_0_2_0_0; }

		//instructions+=Instruction
		public Assignment getInstructionsAssignment_1_0_2_0_0_0() { return cInstructionsAssignment_1_0_2_0_0_0; }

		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_1_0_2_0_0_0_0() { return cInstructionsInstructionParserRuleCall_1_0_2_0_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1_0_2_0_0_1() { return cSemicolonKeyword_1_0_2_0_0_1; }

		//instructions+=Annotation
		public Assignment getInstructionsAssignment_1_0_2_0_1() { return cInstructionsAssignment_1_0_2_0_1; }

		//Annotation
		public RuleCall getInstructionsAnnotationParserRuleCall_1_0_2_0_1_0() { return cInstructionsAnnotationParserRuleCall_1_0_2_0_1_0; }

		//instructions+=Instruction
		public Assignment getInstructionsAssignment_1_0_2_1() { return cInstructionsAssignment_1_0_2_1; }

		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_1_0_2_1_0() { return cInstructionsInstructionParserRuleCall_1_0_2_1_0; }

		//instructions+=Annotation?
		public Assignment getInstructionsAssignment_1_0_2_2() { return cInstructionsAssignment_1_0_2_2; }

		//Annotation
		public RuleCall getInstructionsAnnotationParserRuleCall_1_0_2_2_0() { return cInstructionsAnnotationParserRuleCall_1_0_2_2_0; }

		//instructions+=Annotation instructions+=Instruction
		public Group getGroup_1_1() { return cGroup_1_1; }

		//instructions+=Annotation
		public Assignment getInstructionsAssignment_1_1_0() { return cInstructionsAssignment_1_1_0; }

		//Annotation
		public RuleCall getInstructionsAnnotationParserRuleCall_1_1_0_0() { return cInstructionsAnnotationParserRuleCall_1_1_0_0; }

		//instructions+=Instruction
		public Assignment getInstructionsAssignment_1_1_1() { return cInstructionsAssignment_1_1_1; }

		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_1_1_1_0() { return cInstructionsInstructionParserRuleCall_1_1_1_0; }

		//instructions+=Annotation
		public Assignment getInstructionsAssignment_1_2() { return cInstructionsAssignment_1_2; }

		//Annotation
		public RuleCall getInstructionsAnnotationParserRuleCall_1_2_0() { return cInstructionsAnnotationParserRuleCall_1_2_0; }

		//instructions+=Instruction instructions+=Annotation
		public Group getGroup_1_3() { return cGroup_1_3; }

		//instructions+=Instruction
		public Assignment getInstructionsAssignment_1_3_0() { return cInstructionsAssignment_1_3_0; }

		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_1_3_0_0() { return cInstructionsInstructionParserRuleCall_1_3_0_0; }

		//instructions+=Annotation
		public Assignment getInstructionsAssignment_1_3_1() { return cInstructionsAssignment_1_3_1; }

		//Annotation
		public RuleCall getInstructionsAnnotationParserRuleCall_1_3_1_0() { return cInstructionsAnnotationParserRuleCall_1_3_1_0; }

		//instructions+=Instruction "}"
		public Group getGroup_1_4() { return cGroup_1_4; }

		//instructions+=Instruction
		public Assignment getInstructionsAssignment_1_4_0() { return cInstructionsAssignment_1_4_0; }

		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_1_4_0_0() { return cInstructionsInstructionParserRuleCall_1_4_0_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_4_1() { return cRightCurlyBracketKeyword_1_4_1; }
	}

	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Label");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLabelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Label:
		//
		//	"label:" name=ID;
		public ParserRule getRule() { return rule; }

		//"label:" name=ID
		public Group getGroup() { return cGroup; }

		//"label:"
		public Keyword getLabelKeyword_0() { return cLabelKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class ConditionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Conditional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConditionalAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionalInstructionListParserRuleCall_3_0 = (RuleCall)cConditionalAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Conditional:
		//
		//	"if" expression=Expression "then" conditional=InstructionList "end";
		public ParserRule getRule() { return rule; }

		//"if" expression=Expression "then" conditional=InstructionList "end"
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }

		//"then"
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }

		//conditional=InstructionList
		public Assignment getConditionalAssignment_3() { return cConditionalAssignment_3; }

		//InstructionList
		public RuleCall getConditionalInstructionListParserRuleCall_3_0() { return cConditionalInstructionListParserRuleCall_3_0; }

		//"end"
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}

	public class GotoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Goto");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGotoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Goto:
		//
		//	"goto" name=ID;
		public ParserRule getRule() { return rule; }

		//"goto" name=ID
		public Group getGroup() { return cGroup; }

		//"goto"
		public Keyword getGotoKeyword_0() { return cGotoKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class ParallelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parallel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cThreadsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cThreadsInstructionListParserRuleCall_1_0_0 = (RuleCall)cThreadsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cParKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cThreadsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cThreadsInstructionListParserRuleCall_1_1_1_0 = (RuleCall)cThreadsAssignment_1_1_1.eContents().get(0);
		private final Keyword cJoinKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Parallel:
		//
		//	"fork" (threads+=InstructionList ("par" threads+=InstructionList)+) "join";
		public ParserRule getRule() { return rule; }

		//"fork" (threads+=InstructionList ("par" threads+=InstructionList)+) "join"
		public Group getGroup() { return cGroup; }

		//"fork"
		public Keyword getForkKeyword_0() { return cForkKeyword_0; }

		//threads+=InstructionList ("par" threads+=InstructionList)+
		public Group getGroup_1() { return cGroup_1; }

		//threads+=InstructionList
		public Assignment getThreadsAssignment_1_0() { return cThreadsAssignment_1_0; }

		//InstructionList
		public RuleCall getThreadsInstructionListParserRuleCall_1_0_0() { return cThreadsInstructionListParserRuleCall_1_0_0; }

		//("par" threads+=InstructionList)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"par"
		public Keyword getParKeyword_1_1_0() { return cParKeyword_1_1_0; }

		//threads+=InstructionList
		public Assignment getThreadsAssignment_1_1_1() { return cThreadsAssignment_1_1_1; }

		//InstructionList
		public RuleCall getThreadsInstructionListParserRuleCall_1_1_1_0() { return cThreadsInstructionListParserRuleCall_1_1_1_0; }

		//"join"
		public Keyword getJoinKeyword_2() { return cJoinKeyword_2; }
	}

	public class PauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Pause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPauseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cPauseAction_1 = (Action)cGroup.eContents().get(1);
		
		//Pause:
		//
		//	"pause" {Pause};
		public ParserRule getRule() { return rule; }

		//"pause" {Pause}
		public Group getGroup() { return cGroup; }

		//"pause"
		public Keyword getPauseKeyword_0() { return cPauseKeyword_0; }

		//{Pause}
		public Action getPauseAction_1() { return cPauseAction_1; }
	}

	public class AnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Annotation");
		private final Assignment cCommentAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCommentSL_COMMENTTerminalRuleCall_0 = (RuleCall)cCommentAssignment.eContents().get(0);
		
		//Annotation:
		//
		//	comment=SL_COMMENT;
		public ParserRule getRule() { return rule; }

		//comment=SL_COMMENT
		public Assignment getCommentAssignment() { return cCommentAssignment; }

		//SL_COMMENT
		public RuleCall getCommentSL_COMMENTTerminalRuleCall_0() { return cCommentSL_COMMENTTerminalRuleCall_0; }
	}
	
	
	private ProgramElements pProgram;
	private VariableDeclarationElements pVariableDeclaration;
	private InstructionElements pInstruction;
	private AssignmentElements pAssignment;
	private InstructionListElements pInstructionList;
	private ScopeElements pScope;
	private LabelElements pLabel;
	private ConditionalElements pConditional;
	private GotoElements pGoto;
	private ParallelElements pParallel;
	private PauseElements pPause;
	private AnnotationElements pAnnotation;
	
	private final Grammar grammar;

	private STextGrammarAccess gaSText;

	@Inject
	public SCLGrammarAccess(GrammarProvider grammarProvider,
		STextGrammarAccess gaSText) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaSText = gaSText;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.cau.cs.kieler.yakindu.sccharts.sim.scl.SCL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public STextGrammarAccess getSTextGrammarAccess() {
		return gaSText;
	}

	
	//Program:
	//
	//	"module" name=ID interface+=VariableDeclaration* "{" program=InstructionList "}";
	public ProgramElements getProgramAccess() {
		return (pProgram != null) ? pProgram : (pProgram = new ProgramElements());
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}

	//VariableDeclaration:
	//
	//	Input?="input"? Output?="output"? "signal" name=STRING (":" type=[types::Type])? ";";
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return (pVariableDeclaration != null) ? pVariableDeclaration : (pVariableDeclaration = new VariableDeclarationElements());
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}

	//Instruction:
	//
	//	(Assignment | Conditional | Goto | Parallel | Pause | Label) priority=INT?;
	public InstructionElements getInstructionAccess() {
		return (pInstruction != null) ? pInstruction : (pInstruction = new InstructionElements());
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}

	//Assignment:
	//
	//	assignment=Expression;
	public AssignmentElements getAssignmentAccess() {
		return (pAssignment != null) ? pAssignment : (pAssignment = new AssignmentElements());
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//InstructionList:
	//
	//	{InstructionList} ((instructions+=Instruction ";" | instructions+=Annotation)+ instructions+=Instruction
	//
	//	instructions+=Annotation?) | {InstructionList} (instructions+=Annotation instructions+=Instruction) |
	//
	//	instructions+=Annotation | {InstructionList} (instructions+=Instruction instructions+=Annotation) |
	//
	//	instructions+=Instruction;
	public InstructionListElements getInstructionListAccess() {
		return (pInstructionList != null) ? pInstructionList : (pInstructionList = new InstructionListElements());
	}
	
	public ParserRule getInstructionListRule() {
		return getInstructionListAccess().getRule();
	}

	//Scope:
	//
	//	{InstructionList} ("{" declarations+=VariableDeclaration* ((instructions+=Instruction ";" |
	//
	//	instructions+=Annotation)+ instructions+=Instruction instructions+=Annotation?) | instructions+=Annotation
	//
	//	instructions+=Instruction | instructions+=Annotation | instructions+=Instruction instructions+=Annotation |
	//
	//	instructions+=Instruction "}");
	public ScopeElements getScopeAccess() {
		return (pScope != null) ? pScope : (pScope = new ScopeElements());
	}
	
	public ParserRule getScopeRule() {
		return getScopeAccess().getRule();
	}

	//Label:
	//
	//	"label:" name=ID;
	public LabelElements getLabelAccess() {
		return (pLabel != null) ? pLabel : (pLabel = new LabelElements());
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}

	//Conditional:
	//
	//	"if" expression=Expression "then" conditional=InstructionList "end";
	public ConditionalElements getConditionalAccess() {
		return (pConditional != null) ? pConditional : (pConditional = new ConditionalElements());
	}
	
	public ParserRule getConditionalRule() {
		return getConditionalAccess().getRule();
	}

	//Goto:
	//
	//	"goto" name=ID;
	public GotoElements getGotoAccess() {
		return (pGoto != null) ? pGoto : (pGoto = new GotoElements());
	}
	
	public ParserRule getGotoRule() {
		return getGotoAccess().getRule();
	}

	//Parallel:
	//
	//	"fork" (threads+=InstructionList ("par" threads+=InstructionList)+) "join";
	public ParallelElements getParallelAccess() {
		return (pParallel != null) ? pParallel : (pParallel = new ParallelElements());
	}
	
	public ParserRule getParallelRule() {
		return getParallelAccess().getRule();
	}

	//Pause:
	//
	//	"pause" {Pause};
	public PauseElements getPauseAccess() {
		return (pPause != null) ? pPause : (pPause = new PauseElements());
	}
	
	public ParserRule getPauseRule() {
		return getPauseAccess().getRule();
	}

	//Annotation:
	//
	//	comment=SL_COMMENT;
	public AnnotationElements getAnnotationAccess() {
		return (pAnnotation != null) ? pAnnotation : (pAnnotation = new AnnotationElements());
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}

	/// * ---- root rules ----
	//These root rules are not relevant for the grammar integration in the statechart. They just integrate the different start rules consistently 
	//into a single grammar. 
	// * /
	//
	//Root:
	//
	//	roots+=DefRoot*;
	public STextGrammarAccess.RootElements getRootAccess() {
		return gaSText.getRootAccess();
	}
	
	public ParserRule getRootRule() {
		return getRootAccess().getRule();
	}

	//DefRoot:
	//
	//	StatechartRoot | StateRoot | TransitionRoot;
	public STextGrammarAccess.DefRootElements getDefRootAccess() {
		return gaSText.getDefRootAccess();
	}
	
	public ParserRule getDefRootRule() {
		return getDefRootAccess().getRule();
	}

	//StatechartRoot:
	//
	//	"@@statechart@@" def=StatechartSpecification;
	public STextGrammarAccess.StatechartRootElements getStatechartRootAccess() {
		return gaSText.getStatechartRootAccess();
	}
	
	public ParserRule getStatechartRootRule() {
		return getStatechartRootAccess().getRule();
	}

	//StateRoot:
	//
	//	"@@state@@" def=StateSpecification;
	public STextGrammarAccess.StateRootElements getStateRootAccess() {
		return gaSText.getStateRootAccess();
	}
	
	public ParserRule getStateRootRule() {
		return getStateRootAccess().getRule();
	}

	//TransitionRoot:
	//
	//	"@@transition@@" def=TransitionSpecification;
	public STextGrammarAccess.TransitionRootElements getTransitionRootAccess() {
		return gaSText.getTransitionRootAccess();
	}
	
	public ParserRule getTransitionRootRule() {
		return getTransitionRootAccess().getRule();
	}

	/// * ---- start rules ----
	//Define the starting points used by the statechart integration. These rules hook in the concrete rules of the specific grammar.
	// * /
	//
	//ScopedElement returns sgraph::ScopedElement:
	//
	//	StatechartSpecification;
	public STextGrammarAccess.ScopedElementElements getScopedElementAccess() {
		return gaSText.getScopedElementAccess();
	}
	
	public ParserRule getScopedElementRule() {
		return getScopedElementAccess().getRule();
	}

	//StatechartSpecification:
	//
	//	{StatechartSpecification} ("namespace" namespace=FQN)? scopes+=StatechartScope*;
	public STextGrammarAccess.StatechartSpecificationElements getStatechartSpecificationAccess() {
		return gaSText.getStatechartSpecificationAccess();
	}
	
	public ParserRule getStatechartSpecificationRule() {
		return getStatechartSpecificationAccess().getRule();
	}

	//StateSpecification:
	//
	//	scope=StateScope;
	public STextGrammarAccess.StateSpecificationElements getStateSpecificationAccess() {
		return gaSText.getStateSpecificationAccess();
	}
	
	public ParserRule getStateSpecificationRule() {
		return getStateSpecificationAccess().getRule();
	}

	//TransitionSpecification:
	//
	//	reaction=TransitionReaction;
	public STextGrammarAccess.TransitionSpecificationElements getTransitionSpecificationAccess() {
		return gaSText.getTransitionSpecificationAccess();
	}
	
	public ParserRule getTransitionSpecificationRule() {
		return getTransitionSpecificationAccess().getRule();
	}

	//// a SimpleScope is used for states and regions
	// StateScope returns sgraph::Scope:
	//
	//	{SimpleScope} / * | Entrypoint | Exitpoint * / declarations+=LocalReaction*;
	public STextGrammarAccess.StateScopeElements getStateScopeAccess() {
		return gaSText.getStateScopeAccess();
	}
	
	public ParserRule getStateScopeRule() {
		return getStateScopeAccess().getRule();
	}

	//// defines the poosible scopes for statecharts
	// StatechartScope:
	//
	//	InterfaceScope | InternalScope;
	public STextGrammarAccess.StatechartScopeElements getStatechartScopeAccess() {
		return gaSText.getStatechartScopeAccess();
	}
	
	public ParserRule getStatechartScopeRule() {
		return getStatechartScopeAccess().getRule();
	}

	//NamedInterfaceScope returns base::NamedElement:
	//
	//	InterfaceScope;
	public STextGrammarAccess.NamedInterfaceScopeElements getNamedInterfaceScopeAccess() {
		return gaSText.getNamedInterfaceScopeAccess();
	}
	
	public ParserRule getNamedInterfaceScopeRule() {
		return getNamedInterfaceScopeAccess().getRule();
	}

	//InterfaceScope:
	//
	//	{InterfaceScope} "interface" name=XID? ":" declarations+=(EventDeclarartion //		| Entrypoint 
	// //		| Exitpoint
	// |
	//
	//	VariableDeclaration | OperationDeclaration)*;
	public STextGrammarAccess.InterfaceScopeElements getInterfaceScopeAccess() {
		return gaSText.getInterfaceScopeAccess();
	}
	
	public ParserRule getInterfaceScopeRule() {
		return getInterfaceScopeAccess().getRule();
	}

	//InternalScope:
	//
	//	{InternalScope} "internal" ":" declarations+=(EventDeclarartion | VariableDeclaration | OperationDeclaration |
	//
	//	LocalReaction)*;
	public STextGrammarAccess.InternalScopeElements getInternalScopeAccess() {
		return gaSText.getInternalScopeAccess();
	}
	
	public ParserRule getInternalScopeRule() {
		return getInternalScopeAccess().getRule();
	}

	/// * ---- declarations ----
	//a definition is a top level element of a definition scope. * / //		| Entrypoint 
	//
	//
	////		| Exitpoint
	// Declaration returns sgraph::Declaration:
	//
	//	EventDeclarartion | VariableDeclaration | OperationDeclaration | LocalReaction;
	public STextGrammarAccess.DeclarationElements getDeclarationAccess() {
		return gaSText.getDeclarationAccess();
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}

	/// * ---- event definition ---- * / EventDeclarartion returns sgraph::Event:
	//
	//	EventDefinition;
	public STextGrammarAccess.EventDeclarartionElements getEventDeclarartionAccess() {
		return gaSText.getEventDeclarartionAccess();
	}
	
	public ParserRule getEventDeclarartionRule() {
		return getEventDeclarartionAccess().getRule();
	}

	//EventFeature returns types::Event:
	//
	//	EventDefinition;
	public STextGrammarAccess.EventFeatureElements getEventFeatureAccess() {
		return gaSText.getEventFeatureAccess();
	}
	
	public ParserRule getEventFeatureRule() {
		return getEventFeatureAccess().getRule();
	}

	//// (derivation=EventDerivation)?;
	// EventDefinition:
	//
	//	direction=Direction? "event" name=XID (":" type=[types::Type|FQN])?;
	public STextGrammarAccess.EventDefinitionElements getEventDefinitionAccess() {
		return gaSText.getEventDefinitionAccess();
	}
	
	public ParserRule getEventDefinitionRule() {
		return getEventDefinitionAccess().getRule();
	}

	////EventDerivation:
	// //	 (':' value=Expression)?;
	// enum Direction:
	//
	//	LOCAL="local" | IN="in" | OUT="out";
	public STextGrammarAccess.DirectionElements getDirectionAccess() {
		return gaSText.getDirectionAccess();
	}
	
	public EnumRule getDirectionRule() {
		return getDirectionAccess().getRule();
	}

	//VariableFeature returns types::Property:
	//
	//	VariableDefinition;
	public STextGrammarAccess.VariableFeatureElements getVariableFeatureAccess() {
		return gaSText.getVariableFeatureAccess();
	}
	
	public ParserRule getVariableFeatureRule() {
		return getVariableFeatureAccess().getRule();
	}

	//VariableDefinition:
	//
	//	{VariableDefinition} "var" (readonly?="readonly"? & external?="external"?) name=XID ":" type=[types::Type|FQN] ("="
	//
	//	initialValue=Expression)?;
	public STextGrammarAccess.VariableDefinitionElements getVariableDefinitionAccess() {
		return gaSText.getVariableDefinitionAccess();
	}
	
	public ParserRule getVariableDefinitionRule() {
		return getVariableDefinitionAccess().getRule();
	}

	/// * ---- operation definition ---- * / OperationDeclaration returns sgraph::Declaration:
	//
	//	OperationDefinition;
	public STextGrammarAccess.OperationDeclarationElements getOperationDeclarationAccess() {
		return gaSText.getOperationDeclarationAccess();
	}
	
	public ParserRule getOperationDeclarationRule() {
		return getOperationDeclarationAccess().getRule();
	}

	//OperationFeature returns types::Operation:
	//
	//	OperationDefinition;
	public STextGrammarAccess.OperationFeatureElements getOperationFeatureAccess() {
		return gaSText.getOperationFeatureAccess();
	}
	
	public ParserRule getOperationFeatureRule() {
		return getOperationFeatureAccess().getRule();
	}

	//OperationDefinition:
	//
	//	{OperationDefinition} "operation" name=XID "(" (parameters+=Parameter ("," parameters+=Parameter)*)? ")" (":"
	//
	//	type=[types::Type|FQN])?;
	public STextGrammarAccess.OperationDefinitionElements getOperationDefinitionAccess() {
		return gaSText.getOperationDefinitionAccess();
	}
	
	public ParserRule getOperationDefinitionRule() {
		return getOperationDefinitionAccess().getRule();
	}

	//Parameter returns types::Parameter:
	//
	//	name=XID ":" type=[types::Type|FQN];
	public STextGrammarAccess.ParameterElements getParameterAccess() {
		return gaSText.getParameterAccess();
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	/// * ---- entrypoint definition ---- * / //Entrypoint returns sgraph::Declaration:
	// //	{Entrypoint} 'entrypoint' name=XID;
	//
	//
	/// * ---- exitpoint definition ---- * / //Exitpoint returns sgraph::Declaration:
	// //	{Exitpoint} 'exitpoint' name=XID;
	//
	//
	/// * ---- Datatype rules ---- * / XID:
	//
	//	ID | "namespace" | "interface" | "internal" | "event" | "local" | "in" | "out" | "var" | "readonly" | "external" |
	//
	//	"operation" | "default" | "else" | "entry" | "exit" | "always" | "oncycle" | "raise" | "valueof" | "active";
	public STextGrammarAccess.XIDElements getXIDAccess() {
		return gaSText.getXIDAccess();
	}
	
	public ParserRule getXIDRule() {
		return getXIDAccess().getRule();
	}

	//FQN:
	//
	//	XID ("." XID)*;
	public STextGrammarAccess.FQNElements getFQNAccess() {
		return gaSText.getFQNAccess();
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}

	/// * ---- reaction rules ----
	//Define the structure of reactions that are central for describing the statecharts behavior. 
	// * /
	//
	//Reaction returns sgraph::Reaction:
	//
	//	LocalReaction | TransitionReaction;
	public STextGrammarAccess.ReactionElements getReactionAccess() {
		return gaSText.getReactionAccess();
	}
	
	public ParserRule getReactionRule() {
		return getReactionAccess().getRule();
	}

	//LocalReaction:
	//
	//	trigger=ReactionTrigger => ("/" effect=ReactionEffect);
	public STextGrammarAccess.LocalReactionElements getLocalReactionAccess() {
		return gaSText.getLocalReactionAccess();
	}
	
	public ParserRule getLocalReactionRule() {
		return getLocalReactionAccess().getRule();
	}

	//TransitionReaction:
	//
	//	{TransitionReaction} trigger=StextTrigger? ("/" effect=ReactionEffect)? ("#" properties+=TransitionProperty*)?;
	public STextGrammarAccess.TransitionReactionElements getTransitionReactionAccess() {
		return gaSText.getTransitionReactionAccess();
	}
	
	public ParserRule getTransitionReactionRule() {
		return getTransitionReactionAccess().getRule();
	}

	//StextTrigger returns sgraph::Trigger:
	//
	//	ReactionTrigger | DefaultTrigger;
	public STextGrammarAccess.StextTriggerElements getStextTriggerAccess() {
		return gaSText.getStextTriggerAccess();
	}
	
	public ParserRule getStextTriggerRule() {
		return getStextTriggerAccess().getRule();
	}

	//ReactionTrigger returns sgraph::Trigger:
	//
	//	{ReactionTrigger} (triggers+=EventSpec ("," triggers+=EventSpec)* ("[" guardExpression=Expression "]")? | "["
	//
	//	guardExpression=Expression "]");
	public STextGrammarAccess.ReactionTriggerElements getReactionTriggerAccess() {
		return gaSText.getReactionTriggerAccess();
	}
	
	public ParserRule getReactionTriggerRule() {
		return getReactionTriggerAccess().getRule();
	}

	//DefaultTrigger returns sgraph::Trigger:
	//
	//	{DefaultTrigger} ("default" | "else");
	public STextGrammarAccess.DefaultTriggerElements getDefaultTriggerAccess() {
		return gaSText.getDefaultTriggerAccess();
	}
	
	public ParserRule getDefaultTriggerRule() {
		return getDefaultTriggerAccess().getRule();
	}

	//ReactionEffect returns sgraph::Effect:
	//
	//	{ReactionEffect} actions+=(Expression | EventRaisingExpression) (";" actions+=(Expression |
	//
	//	EventRaisingExpression))*;
	public STextGrammarAccess.ReactionEffectElements getReactionEffectAccess() {
		return gaSText.getReactionEffectAccess();
	}
	
	public ParserRule getReactionEffectRule() {
		return getReactionEffectAccess().getRule();
	}

	//TransitionProperty returns sgraph::ReactionProperty:
	//
	//	EntryPointSpec | ExitPointSpec;
	public STextGrammarAccess.TransitionPropertyElements getTransitionPropertyAccess() {
		return gaSText.getTransitionPropertyAccess();
	}
	
	public ParserRule getTransitionPropertyRule() {
		return getTransitionPropertyAccess().getRule();
	}

	//EntryPointSpec:
	//
	//	">" entrypoint=ID;
	public STextGrammarAccess.EntryPointSpecElements getEntryPointSpecAccess() {
		return gaSText.getEntryPointSpecAccess();
	}
	
	public ParserRule getEntryPointSpecRule() {
		return getEntryPointSpecAccess().getRule();
	}

	//ExitPointSpec:
	//
	//	exitpoint=ID ">";
	public STextGrammarAccess.ExitPointSpecElements getExitPointSpecAccess() {
		return gaSText.getExitPointSpecAccess();
	}
	
	public ParserRule getExitPointSpecRule() {
		return getExitPointSpecAccess().getRule();
	}

	//EventSpec:
	//
	//	RegularEventSpec | TimeEventSpec | BuiltinEventSpec;
	public STextGrammarAccess.EventSpecElements getEventSpecAccess() {
		return gaSText.getEventSpecAccess();
	}
	
	public ParserRule getEventSpecRule() {
		return getEventSpecAccess().getRule();
	}

	//RegularEventSpec:
	//
	//	event=FeatureCall;
	public STextGrammarAccess.RegularEventSpecElements getRegularEventSpecAccess() {
		return gaSText.getRegularEventSpecAccess();
	}
	
	public ParserRule getRegularEventSpecRule() {
		return getRegularEventSpecAccess().getRule();
	}

	//// TODO: redefine after trigger - we need to use it with clocks
	// TimeEventSpec:
	//
	//	type=TimeEventType value=ConditionalExpression unit=TimeUnit;
	public STextGrammarAccess.TimeEventSpecElements getTimeEventSpecAccess() {
		return gaSText.getTimeEventSpecAccess();
	}
	
	public ParserRule getTimeEventSpecRule() {
		return getTimeEventSpecAccess().getRule();
	}

	//enum TimeEventType:
	//
	//	after | every;
	public STextGrammarAccess.TimeEventTypeElements getTimeEventTypeAccess() {
		return gaSText.getTimeEventTypeAccess();
	}
	
	public EnumRule getTimeEventTypeRule() {
		return getTimeEventTypeAccess().getRule();
	}

	//BuiltinEventSpec:
	//
	//	EntryEvent | ExitEvent | AlwaysEvent;
	public STextGrammarAccess.BuiltinEventSpecElements getBuiltinEventSpecAccess() {
		return gaSText.getBuiltinEventSpecAccess();
	}
	
	public ParserRule getBuiltinEventSpecRule() {
		return getBuiltinEventSpecAccess().getRule();
	}

	//EntryEvent:
	//
	//	{EntryEvent} "entry";
	public STextGrammarAccess.EntryEventElements getEntryEventAccess() {
		return gaSText.getEntryEventAccess();
	}
	
	public ParserRule getEntryEventRule() {
		return getEntryEventAccess().getRule();
	}

	//ExitEvent:
	//
	//	{ExitEvent} "exit";
	public STextGrammarAccess.ExitEventElements getExitEventAccess() {
		return gaSText.getExitEventAccess();
	}
	
	public ParserRule getExitEventRule() {
		return getExitEventAccess().getRule();
	}

	//AlwaysEvent:
	//
	//	{AlwaysEvent} ("always" | "oncycle");
	public STextGrammarAccess.AlwaysEventElements getAlwaysEventAccess() {
		return gaSText.getAlwaysEventAccess();
	}
	
	public ParserRule getAlwaysEventRule() {
		return getAlwaysEventAccess().getRule();
	}

	//// ****************
	// // Expression Grammar
	// // ****************
	// EventRaisingExpression returns Expression:
	//
	//	{EventRaisingExpression} "raise" event=FeatureCall (":" value=Expression)?;
	public STextGrammarAccess.EventRaisingExpressionElements getEventRaisingExpressionAccess() {
		return gaSText.getEventRaisingExpressionAccess();
	}
	
	public ParserRule getEventRaisingExpressionRule() {
		return getEventRaisingExpressionAccess().getRule();
	}

	//StatementExpression returns sgraph::Statement:
	//
	//	Expression;
	public STextGrammarAccess.StatementExpressionElements getStatementExpressionAccess() {
		return gaSText.getStatementExpressionAccess();
	}
	
	public ParserRule getStatementExpressionRule() {
		return getStatementExpressionAccess().getRule();
	}

	//Expression:
	//
	//	AssignmentExpression;
	public STextGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaSText.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//AssignmentExpression returns Expression:
	//
	//	ConditionalExpression ({AssignmentExpression.varRef=current} operator=AssignmentOperator
	//
	//	expression=ConditionalExpression)*;
	public STextGrammarAccess.AssignmentExpressionElements getAssignmentExpressionAccess() {
		return gaSText.getAssignmentExpressionAccess();
	}
	
	public ParserRule getAssignmentExpressionRule() {
		return getAssignmentExpressionAccess().getRule();
	}

	//ConditionalExpression returns Expression:
	//
	//	LogicalOrExpression ({ConditionalExpression.condition=current} "?" trueCase=LogicalOrExpression ":"
	//
	//	falseCase=LogicalOrExpression)?;
	public STextGrammarAccess.ConditionalExpressionElements getConditionalExpressionAccess() {
		return gaSText.getConditionalExpressionAccess();
	}
	
	public ParserRule getConditionalExpressionRule() {
		return getConditionalExpressionAccess().getRule();
	}

	//LogicalOrExpression returns Expression:
	//
	//	LogicalAndExpression ({LogicalOrExpression.leftOperand=current} "||" rightOperand=LogicalAndExpression)*;
	public STextGrammarAccess.LogicalOrExpressionElements getLogicalOrExpressionAccess() {
		return gaSText.getLogicalOrExpressionAccess();
	}
	
	public ParserRule getLogicalOrExpressionRule() {
		return getLogicalOrExpressionAccess().getRule();
	}

	//LogicalAndExpression returns Expression:
	//
	//	LogicalNotExpression ({LogicalAndExpression.leftOperand=current} "&&" rightOperand=LogicalNotExpression)*;
	public STextGrammarAccess.LogicalAndExpressionElements getLogicalAndExpressionAccess() {
		return gaSText.getLogicalAndExpressionAccess();
	}
	
	public ParserRule getLogicalAndExpressionRule() {
		return getLogicalAndExpressionAccess().getRule();
	}

	//LogicalNotExpression returns Expression:
	//
	//	BitwiseXorExpression | {LogicalNotExpression} "!" operand=BitwiseXorExpression;
	public STextGrammarAccess.LogicalNotExpressionElements getLogicalNotExpressionAccess() {
		return gaSText.getLogicalNotExpressionAccess();
	}
	
	public ParserRule getLogicalNotExpressionRule() {
		return getLogicalNotExpressionAccess().getRule();
	}

	//BitwiseXorExpression returns Expression:
	//
	//	BitwiseOrExpression ({BitwiseXorExpression.leftOperand=current} "^" rightOperand=BitwiseOrExpression)*;
	public STextGrammarAccess.BitwiseXorExpressionElements getBitwiseXorExpressionAccess() {
		return gaSText.getBitwiseXorExpressionAccess();
	}
	
	public ParserRule getBitwiseXorExpressionRule() {
		return getBitwiseXorExpressionAccess().getRule();
	}

	//BitwiseOrExpression returns Expression:
	//
	//	BitwiseAndExpression ({BitwiseOrExpression.leftOperand=current} "|" rightOperand=BitwiseAndExpression)*;
	public STextGrammarAccess.BitwiseOrExpressionElements getBitwiseOrExpressionAccess() {
		return gaSText.getBitwiseOrExpressionAccess();
	}
	
	public ParserRule getBitwiseOrExpressionRule() {
		return getBitwiseOrExpressionAccess().getRule();
	}

	//BitwiseAndExpression returns Expression:
	//
	//	LogicalRelationExpression ({BitwiseAndExpression.leftOperand=current} "&" rightOperand=LogicalRelationExpression)*;
	public STextGrammarAccess.BitwiseAndExpressionElements getBitwiseAndExpressionAccess() {
		return gaSText.getBitwiseAndExpressionAccess();
	}
	
	public ParserRule getBitwiseAndExpressionRule() {
		return getBitwiseAndExpressionAccess().getRule();
	}

	//LogicalRelationExpression returns Expression:
	//
	//	ShiftExpression ({LogicalRelationExpression.leftOperand=current} operator=RelationalOperator
	//
	//	rightOperand=ShiftExpression)*;
	public STextGrammarAccess.LogicalRelationExpressionElements getLogicalRelationExpressionAccess() {
		return gaSText.getLogicalRelationExpressionAccess();
	}
	
	public ParserRule getLogicalRelationExpressionRule() {
		return getLogicalRelationExpressionAccess().getRule();
	}

	//ShiftExpression returns Expression:
	//
	//	NumericalAddSubtractExpression ({ShiftExpression.leftOperand=current} operator=ShiftOperator
	//
	//	rightOperand=NumericalAddSubtractExpression)*;
	public STextGrammarAccess.ShiftExpressionElements getShiftExpressionAccess() {
		return gaSText.getShiftExpressionAccess();
	}
	
	public ParserRule getShiftExpressionRule() {
		return getShiftExpressionAccess().getRule();
	}

	//NumericalAddSubtractExpression returns Expression:
	//
	//	NumericalMultiplyDivideExpression ({NumericalAddSubtractExpression.leftOperand=current} operator=AdditiveOperator
	//
	//	rightOperand=NumericalMultiplyDivideExpression)*;
	public STextGrammarAccess.NumericalAddSubtractExpressionElements getNumericalAddSubtractExpressionAccess() {
		return gaSText.getNumericalAddSubtractExpressionAccess();
	}
	
	public ParserRule getNumericalAddSubtractExpressionRule() {
		return getNumericalAddSubtractExpressionAccess().getRule();
	}

	//NumericalMultiplyDivideExpression returns Expression:
	//
	//	NumericalUnaryExpression ({NumericalMultiplyDivideExpression.leftOperand=current} operator=MultiplicativeOperator
	//
	//	rightOperand=NumericalUnaryExpression)*;
	public STextGrammarAccess.NumericalMultiplyDivideExpressionElements getNumericalMultiplyDivideExpressionAccess() {
		return gaSText.getNumericalMultiplyDivideExpressionAccess();
	}
	
	public ParserRule getNumericalMultiplyDivideExpressionRule() {
		return getNumericalMultiplyDivideExpressionAccess().getRule();
	}

	//NumericalUnaryExpression returns Expression:
	//
	//	PrimaryExpression | {NumericalUnaryExpression} operator=UnaryOperator operand=PrimaryExpression;
	public STextGrammarAccess.NumericalUnaryExpressionElements getNumericalUnaryExpressionAccess() {
		return gaSText.getNumericalUnaryExpressionAccess();
	}
	
	public ParserRule getNumericalUnaryExpressionRule() {
		return getNumericalUnaryExpressionAccess().getRule();
	}

	////	| '(' Expression ')'
	// PrimaryExpression returns Expression:
	//
	//	PrimitiveValueExpression | FeatureCall | ActiveStateReferenceExpression | EventValueReferenceExpression |
	//
	//	ParenthesizedExpression;
	public STextGrammarAccess.PrimaryExpressionElements getPrimaryExpressionAccess() {
		return gaSText.getPrimaryExpressionAccess();
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//PrimitiveValueExpression returns Expression:
	//
	//	{PrimitiveValueExpression} value=Literal;
	public STextGrammarAccess.PrimitiveValueExpressionElements getPrimitiveValueExpressionAccess() {
		return gaSText.getPrimitiveValueExpressionAccess();
	}
	
	public ParserRule getPrimitiveValueExpressionRule() {
		return getPrimitiveValueExpressionAccess().getRule();
	}

	//FeatureCall returns Expression:
	//
	//	ElementReferenceExpression ({FeatureCall.owner=current} "." feature=[ecore::EObject] (=> operationCall?="("
	//
	//	(args+=Expression ("," args+=Expression)*)? ")")?)*;
	public STextGrammarAccess.FeatureCallElements getFeatureCallAccess() {
		return gaSText.getFeatureCallAccess();
	}
	
	public ParserRule getFeatureCallRule() {
		return getFeatureCallAccess().getRule();
	}

	//ElementReferenceExpression returns Expression:
	//
	//	{ElementReferenceExpression} reference=[ecore::EObject] (=> operationCall?="(" (args+=Expression (","
	//
	//	args+=Expression)*)? ")")?;
	public STextGrammarAccess.ElementReferenceExpressionElements getElementReferenceExpressionAccess() {
		return gaSText.getElementReferenceExpressionAccess();
	}
	
	public ParserRule getElementReferenceExpressionRule() {
		return getElementReferenceExpressionAccess().getRule();
	}

	//EventValueReferenceExpression returns Expression:
	//
	//	{EventValueReferenceExpression} "valueof" "(" value=FeatureCall ")";
	public STextGrammarAccess.EventValueReferenceExpressionElements getEventValueReferenceExpressionAccess() {
		return gaSText.getEventValueReferenceExpressionAccess();
	}
	
	public ParserRule getEventValueReferenceExpressionRule() {
		return getEventValueReferenceExpressionAccess().getRule();
	}

	//ActiveStateReferenceExpression returns Expression:
	//
	//	{ActiveStateReferenceExpression} "active" "(" value=[sgraph::State|FQN] ")";
	public STextGrammarAccess.ActiveStateReferenceExpressionElements getActiveStateReferenceExpressionAccess() {
		return gaSText.getActiveStateReferenceExpressionAccess();
	}
	
	public ParserRule getActiveStateReferenceExpressionRule() {
		return getActiveStateReferenceExpressionAccess().getRule();
	}

	//ParenthesizedExpression returns Expression:
	//
	//	{ParenthesizedExpression} "(" expression=Expression ")";
	public STextGrammarAccess.ParenthesizedExpressionElements getParenthesizedExpressionAccess() {
		return gaSText.getParenthesizedExpressionAccess();
	}
	
	public ParserRule getParenthesizedExpressionRule() {
		return getParenthesizedExpressionAccess().getRule();
	}

	//Literal:
	//
	//	BoolLiteral | IntLiteral | HexLiteral | RealLiteral | StringLiteral;
	public STextGrammarAccess.LiteralElements getLiteralAccess() {
		return gaSText.getLiteralAccess();
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//BoolLiteral:
	//
	//	{BoolLiteral} value=BOOL;
	public STextGrammarAccess.BoolLiteralElements getBoolLiteralAccess() {
		return gaSText.getBoolLiteralAccess();
	}
	
	public ParserRule getBoolLiteralRule() {
		return getBoolLiteralAccess().getRule();
	}

	//IntLiteral:
	//
	//	{IntLiteral} value=INT;
	public STextGrammarAccess.IntLiteralElements getIntLiteralAccess() {
		return gaSText.getIntLiteralAccess();
	}
	
	public ParserRule getIntLiteralRule() {
		return getIntLiteralAccess().getRule();
	}

	//RealLiteral:
	//
	//	{RealLiteral} value=FLOAT;
	public STextGrammarAccess.RealLiteralElements getRealLiteralAccess() {
		return gaSText.getRealLiteralAccess();
	}
	
	public ParserRule getRealLiteralRule() {
		return getRealLiteralAccess().getRule();
	}

	//HexLiteral:
	//
	//	{HexLiteral} value=HEX;
	public STextGrammarAccess.HexLiteralElements getHexLiteralAccess() {
		return gaSText.getHexLiteralAccess();
	}
	
	public ParserRule getHexLiteralRule() {
		return getHexLiteralAccess().getRule();
	}

	//StringLiteral:
	//
	//	{StringLiteral} value=STRING;
	public STextGrammarAccess.StringLiteralElements getStringLiteralAccess() {
		return gaSText.getStringLiteralAccess();
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//enum AssignmentOperator:
	//
	//	assign="=" | multAssign="*=" | divAssign="/=" | modAssign="%=" | addAssign="+=" | subAssign="-=" |
	//
	//	leftShiftAssign="<<=" | rightShiftAssign=">>=" | andAssign="&=" | xorAssign="^=" | orAssign="|=";
	public STextGrammarAccess.AssignmentOperatorElements getAssignmentOperatorAccess() {
		return gaSText.getAssignmentOperatorAccess();
	}
	
	public EnumRule getAssignmentOperatorRule() {
		return getAssignmentOperatorAccess().getRule();
	}

	//enum ShiftOperator:
	//
	//	left="<<" | right=">>";
	public STextGrammarAccess.ShiftOperatorElements getShiftOperatorAccess() {
		return gaSText.getShiftOperatorAccess();
	}
	
	public EnumRule getShiftOperatorRule() {
		return getShiftOperatorAccess().getRule();
	}

	//enum AdditiveOperator:
	//
	//	plus="+" | minus="-";
	public STextGrammarAccess.AdditiveOperatorElements getAdditiveOperatorAccess() {
		return gaSText.getAdditiveOperatorAccess();
	}
	
	public EnumRule getAdditiveOperatorRule() {
		return getAdditiveOperatorAccess().getRule();
	}

	//enum MultiplicativeOperator:
	//
	//	mul="*" | div="/" | mod="%";
	public STextGrammarAccess.MultiplicativeOperatorElements getMultiplicativeOperatorAccess() {
		return gaSText.getMultiplicativeOperatorAccess();
	}
	
	public EnumRule getMultiplicativeOperatorRule() {
		return getMultiplicativeOperatorAccess().getRule();
	}

	//enum UnaryOperator:
	//
	//	positive="+" | negative="-" | complement="~";
	public STextGrammarAccess.UnaryOperatorElements getUnaryOperatorAccess() {
		return gaSText.getUnaryOperatorAccess();
	}
	
	public EnumRule getUnaryOperatorRule() {
		return getUnaryOperatorAccess().getRule();
	}

	//enum RelationalOperator:
	//
	//	smaller="<" | smallerEqual="<=" | greater=">" | greaterEqual=">=" | equals="==" | notEquals="!=";
	public STextGrammarAccess.RelationalOperatorElements getRelationalOperatorAccess() {
		return gaSText.getRelationalOperatorAccess();
	}
	
	public EnumRule getRelationalOperatorRule() {
		return getRelationalOperatorAccess().getRule();
	}

	//enum TimeUnit:
	//
	//	second="s" | millisecond="ms" | microsecond="us" | nanosecond="ns";
	public STextGrammarAccess.TimeUnitElements getTimeUnitAccess() {
		return gaSText.getTimeUnitAccess();
	}
	
	public EnumRule getTimeUnitRule() {
		return getTimeUnitAccess().getRule();
	}

	//terminal BOOL returns ecore::EBoolean:
	//
	//	"true" | "false" | "yes" | "no";
	public TerminalRule getBOOLRule() {
		return gaSText.getBOOLRule();
	} 

	//terminal HEX returns ecore::EInt:
	//
	//	"0" ("x" | "X") ("0".."9" | "a".."f" | "A".."F")+;
	public TerminalRule getHEXRule() {
		return gaSText.getHEXRule();
	} 

	//terminal FLOAT returns ecore::EFloat:
	//
	//	(INT "." INT) ("e" ("-" | "+") INT)? ("f" | "F" | "d" | "D")?;
	public TerminalRule getFLOATRule() {
		return gaSText.getFLOATRule();
	} 

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaSText.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaSText.getINTRule();
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaSText.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaSText.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaSText.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaSText.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaSText.getANY_OTHERRule();
	} 
}
