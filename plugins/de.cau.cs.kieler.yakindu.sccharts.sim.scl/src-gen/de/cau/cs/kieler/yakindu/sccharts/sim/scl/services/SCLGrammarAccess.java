/*
* generated by Xtext
*/

package de.cau.cs.kieler.yakindu.sccharts.sim.scl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SCLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cVariablesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariablesVariableParserRuleCall_2_0 = (RuleCall)cVariablesAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cInstructionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInstructionInstructionParserRuleCall_4_0 = (RuleCall)cInstructionAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Program:
		//
		//	"module" name=ID variables+=Variable? "{" instruction=Instruction "}";
		public ParserRule getRule() { return rule; }

		//"module" name=ID variables+=Variable? "{" instruction=Instruction "}"
		public Group getGroup() { return cGroup; }

		//"module"
		public Keyword getModuleKeyword_0() { return cModuleKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//variables+=Variable?
		public Assignment getVariablesAssignment_2() { return cVariablesAssignment_2; }

		//Variable
		public RuleCall getVariablesVariableParserRuleCall_2_0() { return cVariablesVariableParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//instruction=Instruction
		public Assignment getInstructionAssignment_4() { return cInstructionAssignment_4; }

		//Instruction
		public RuleCall getInstructionInstructionParserRuleCall_4_0() { return cInstructionInstructionParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cInputKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cOutputKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeTypeCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeTypeIDTerminalRuleCall_1_0_1 = (RuleCall)cTypeTypeCrossReference_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Variable returns stext::VariableDefinition:
		//
		//	("input" | "output") type=[types::Type] name=STRING;
		public ParserRule getRule() { return rule; }

		//("input" | "output") type=[types::Type] name=STRING
		public Group getGroup() { return cGroup; }

		//"input" | "output"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"input"
		public Keyword getInputKeyword_0_0() { return cInputKeyword_0_0; }

		//"output"
		public Keyword getOutputKeyword_0_1() { return cOutputKeyword_0_1; }

		//type=[types::Type]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//[types::Type]
		public CrossReference getTypeTypeCrossReference_1_0() { return cTypeTypeCrossReference_1_0; }

		//ID
		public RuleCall getTypeTypeIDTerminalRuleCall_1_0_1() { return cTypeTypeIDTerminalRuleCall_1_0_1; }

		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }
	}

	public class SCLExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SCLExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSCLExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//SCLExpression returns stext::Expression:
		//
		//	{SCLExpression} STRING;
		public ParserRule getRule() { return rule; }

		//{SCLExpression} STRING
		public Group getGroup() { return cGroup; }

		//{SCLExpression}
		public Action getSCLExpressionAction_0() { return cSCLExpressionAction_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
	}

	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Instruction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cInstructionAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cInstructionAssignmentParserRuleCall_0_0 = (RuleCall)cInstructionAssignment_0.eContents().get(0);
		private final RuleCall cConditionalParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLabelParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cGotoParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cParallelParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final RuleCall cPauseParserRuleCall_5_0 = (RuleCall)cGroup_5.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cSemicolonKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cSecondinstructionsAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cSecondinstructionsInstructionParserRuleCall_5_1_1_0 = (RuleCall)cSecondinstructionsAssignment_5_1_1.eContents().get(0);
		
		//Instruction:
		//
		//	instruction=Assignment | Conditional | Label | Goto | Parallel | Pause (";" secondinstructions=Instruction)?;
		public ParserRule getRule() { return rule; }

		//instruction=Assignment | Conditional | Label | Goto | Parallel | Pause (";" secondinstructions=Instruction)?
		public Alternatives getAlternatives() { return cAlternatives; }

		//instruction=Assignment
		public Assignment getInstructionAssignment_0() { return cInstructionAssignment_0; }

		//Assignment
		public RuleCall getInstructionAssignmentParserRuleCall_0_0() { return cInstructionAssignmentParserRuleCall_0_0; }

		//Conditional
		public RuleCall getConditionalParserRuleCall_1() { return cConditionalParserRuleCall_1; }

		//Label
		public RuleCall getLabelParserRuleCall_2() { return cLabelParserRuleCall_2; }

		//Goto
		public RuleCall getGotoParserRuleCall_3() { return cGotoParserRuleCall_3; }

		//Parallel
		public RuleCall getParallelParserRuleCall_4() { return cParallelParserRuleCall_4; }

		//Pause (";" secondinstructions=Instruction)?
		public Group getGroup_5() { return cGroup_5; }

		//Pause
		public RuleCall getPauseParserRuleCall_5_0() { return cPauseParserRuleCall_5_0; }

		//(";" secondinstructions=Instruction)?
		public Group getGroup_5_1() { return cGroup_5_1; }

		//";"
		public Keyword getSemicolonKeyword_5_1_0() { return cSemicolonKeyword_5_1_0; }

		//secondinstructions=Instruction
		public Assignment getSecondinstructionsAssignment_5_1_1() { return cSecondinstructionsAssignment_5_1_1; }

		//Instruction
		public RuleCall getSecondinstructionsInstructionParserRuleCall_5_1_1_0() { return cSecondinstructionsInstructionParserRuleCall_5_1_1_0; }
	}

	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assignment");
		private final Assignment cAssignmentAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cAssignmentSTRINGTerminalRuleCall_0 = (RuleCall)cAssignmentAssignment.eContents().get(0);
		
		//Assignment returns SCLExpression:
		//
		//	assignment=STRING;
		public ParserRule getRule() { return rule; }

		//assignment=STRING
		public Assignment getAssignmentAssignment() { return cAssignmentAssignment; }

		//STRING
		public RuleCall getAssignmentSTRINGTerminalRuleCall_0() { return cAssignmentSTRINGTerminalRuleCall_0; }
	}

	public class ConditionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Conditional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionSCLExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInstructionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInstructionsInstructionParserRuleCall_3_0 = (RuleCall)cInstructionsAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Conditional:
		//
		//	"if" expression=SCLExpression "then" instructions=Instruction "end";
		public ParserRule getRule() { return rule; }

		//"if" expression=SCLExpression "then" instructions=Instruction "end"
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//expression=SCLExpression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//SCLExpression
		public RuleCall getExpressionSCLExpressionParserRuleCall_1_0() { return cExpressionSCLExpressionParserRuleCall_1_0; }

		//"then"
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }

		//instructions=Instruction
		public Assignment getInstructionsAssignment_3() { return cInstructionsAssignment_3; }

		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_3_0() { return cInstructionsInstructionParserRuleCall_3_0; }

		//"end"
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}

	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Label");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLabelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInstructionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInstructionInstructionParserRuleCall_1_0 = (RuleCall)cInstructionAssignment_1.eContents().get(0);
		
		//Label:
		//
		//	"label:" instruction=Instruction;
		public ParserRule getRule() { return rule; }

		//"label:" instruction=Instruction
		public Group getGroup() { return cGroup; }

		//"label:"
		public Keyword getLabelKeyword_0() { return cLabelKeyword_0; }

		//instruction=Instruction
		public Assignment getInstructionAssignment_1() { return cInstructionAssignment_1; }

		//Instruction
		public RuleCall getInstructionInstructionParserRuleCall_1_0() { return cInstructionInstructionParserRuleCall_1_0; }
	}

	public class GotoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Goto");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGotoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Goto:
		//
		//	"goto" name=ID;
		public ParserRule getRule() { return rule; }

		//"goto" name=ID
		public Group getGroup() { return cGroup; }

		//"goto"
		public Keyword getGotoKeyword_0() { return cGotoKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class ParallelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parallel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFirstinstructionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFirstinstructionInstructionParserRuleCall_1_0 = (RuleCall)cFirstinstructionAssignment_1.eContents().get(0);
		private final Keyword cParKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSecondinstructionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSecondinstructionInstructionParserRuleCall_3_0 = (RuleCall)cSecondinstructionAssignment_3.eContents().get(0);
		private final Keyword cJoinKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Parallel:
		//
		//	"fork" firstinstruction=Instruction "par" secondinstruction=Instruction "join";
		public ParserRule getRule() { return rule; }

		//"fork" firstinstruction=Instruction "par" secondinstruction=Instruction "join"
		public Group getGroup() { return cGroup; }

		//"fork"
		public Keyword getForkKeyword_0() { return cForkKeyword_0; }

		//firstinstruction=Instruction
		public Assignment getFirstinstructionAssignment_1() { return cFirstinstructionAssignment_1; }

		//Instruction
		public RuleCall getFirstinstructionInstructionParserRuleCall_1_0() { return cFirstinstructionInstructionParserRuleCall_1_0; }

		//"par"
		public Keyword getParKeyword_2() { return cParKeyword_2; }

		//secondinstruction=Instruction
		public Assignment getSecondinstructionAssignment_3() { return cSecondinstructionAssignment_3; }

		//Instruction
		public RuleCall getSecondinstructionInstructionParserRuleCall_3_0() { return cSecondinstructionInstructionParserRuleCall_3_0; }

		//"join"
		public Keyword getJoinKeyword_4() { return cJoinKeyword_4; }
	}

	public class PauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Pause");
		private final Keyword cPauseKeyword = (Keyword)rule.eContents().get(1);
		
		//Pause:
		//
		//	"pause";
		public ParserRule getRule() { return rule; }

		//"pause"
		public Keyword getPauseKeyword() { return cPauseKeyword; }
	}
	
	
	private ProgramElements pProgram;
	private VariableElements pVariable;
	private SCLExpressionElements pSCLExpression;
	private InstructionElements pInstruction;
	private AssignmentElements pAssignment;
	private ConditionalElements pConditional;
	private LabelElements pLabel;
	private GotoElements pGoto;
	private ParallelElements pParallel;
	private PauseElements pPause;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public SCLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.cau.cs.kieler.yakindu.sccharts.sim.scl.SCL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//
	//	"module" name=ID variables+=Variable? "{" instruction=Instruction "}";
	public ProgramElements getProgramAccess() {
		return (pProgram != null) ? pProgram : (pProgram = new ProgramElements());
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}

	//Variable returns stext::VariableDefinition:
	//
	//	("input" | "output") type=[types::Type] name=STRING;
	public VariableElements getVariableAccess() {
		return (pVariable != null) ? pVariable : (pVariable = new VariableElements());
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//SCLExpression returns stext::Expression:
	//
	//	{SCLExpression} STRING;
	public SCLExpressionElements getSCLExpressionAccess() {
		return (pSCLExpression != null) ? pSCLExpression : (pSCLExpression = new SCLExpressionElements());
	}
	
	public ParserRule getSCLExpressionRule() {
		return getSCLExpressionAccess().getRule();
	}

	//Instruction:
	//
	//	instruction=Assignment | Conditional | Label | Goto | Parallel | Pause (";" secondinstructions=Instruction)?;
	public InstructionElements getInstructionAccess() {
		return (pInstruction != null) ? pInstruction : (pInstruction = new InstructionElements());
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}

	//Assignment returns SCLExpression:
	//
	//	assignment=STRING;
	public AssignmentElements getAssignmentAccess() {
		return (pAssignment != null) ? pAssignment : (pAssignment = new AssignmentElements());
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//Conditional:
	//
	//	"if" expression=SCLExpression "then" instructions=Instruction "end";
	public ConditionalElements getConditionalAccess() {
		return (pConditional != null) ? pConditional : (pConditional = new ConditionalElements());
	}
	
	public ParserRule getConditionalRule() {
		return getConditionalAccess().getRule();
	}

	//Label:
	//
	//	"label:" instruction=Instruction;
	public LabelElements getLabelAccess() {
		return (pLabel != null) ? pLabel : (pLabel = new LabelElements());
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}

	//Goto:
	//
	//	"goto" name=ID;
	public GotoElements getGotoAccess() {
		return (pGoto != null) ? pGoto : (pGoto = new GotoElements());
	}
	
	public ParserRule getGotoRule() {
		return getGotoAccess().getRule();
	}

	//Parallel:
	//
	//	"fork" firstinstruction=Instruction "par" secondinstruction=Instruction "join";
	public ParallelElements getParallelAccess() {
		return (pParallel != null) ? pParallel : (pParallel = new ParallelElements());
	}
	
	public ParserRule getParallelRule() {
		return getParallelAccess().getRule();
	}

	//Pause:
	//
	//	"pause";
	public PauseElements getPauseAccess() {
		return (pPause != null) ? pPause : (pPause = new PauseElements());
	}
	
	public ParserRule getPauseRule() {
		return getPauseAccess().getRule();
	}

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
