/*
* generated by Xtext
*/

package de.cau.kieler.synccharts.yakindu.model.reqtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.yakindu.sct.model.stext.services.STextGrammarAccess;

@Singleton
public class KidsexpGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class RootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Root");
		private final Assignment cRootsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRootsDefRootParserRuleCall_0 = (RuleCall)cRootsAssignment.eContents().get(0);
		
		/// * ---- root rules ----
		//
		//These root rules are not relevant for the grammar integration in the statechart. They
		//
		//just integrate the different start rules consistently
		//
		//into a single grammar.
		//
		// * / Root:
		//
		//	roots+=DefRoot*;
		public ParserRule getRule() { return rule; }

		//roots+=DefRoot*
		public Assignment getRootsAssignment() { return cRootsAssignment; }

		//DefRoot
		public RuleCall getRootsDefRootParserRuleCall_0() { return cRootsDefRootParserRuleCall_0; }
	}

	public class DefRootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DefRoot");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStatechartRootParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStateRootParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTransitionRootParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//DefRoot:
		//
		//	StatechartRoot | StateRoot | TransitionRoot;
		public ParserRule getRule() { return rule; }

		//StatechartRoot | StateRoot | TransitionRoot
		public Alternatives getAlternatives() { return cAlternatives; }

		//StatechartRoot
		public RuleCall getStatechartRootParserRuleCall_0() { return cStatechartRootParserRuleCall_0; }

		//StateRoot
		public RuleCall getStateRootParserRuleCall_1() { return cStateRootParserRuleCall_1; }

		//TransitionRoot
		public RuleCall getTransitionRootParserRuleCall_2() { return cTransitionRootParserRuleCall_2; }
	}

	public class StatechartRootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StatechartRoot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStatechartKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDefStatechartSpecificationParserRuleCall_1_0 = (RuleCall)cDefAssignment_1.eContents().get(0);
		
		//StatechartRoot:
		//
		//	"@@statechart@@" def=StatechartSpecification;
		public ParserRule getRule() { return rule; }

		//"@@statechart@@" def=StatechartSpecification
		public Group getGroup() { return cGroup; }

		//"@@statechart@@"
		public Keyword getStatechartKeyword_0() { return cStatechartKeyword_0; }

		//def=StatechartSpecification
		public Assignment getDefAssignment_1() { return cDefAssignment_1; }

		//StatechartSpecification
		public RuleCall getDefStatechartSpecificationParserRuleCall_1_0() { return cDefStatechartSpecificationParserRuleCall_1_0; }
	}

	public class StateRootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateRoot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDefStateSpecificationParserRuleCall_1_0 = (RuleCall)cDefAssignment_1.eContents().get(0);
		
		//StateRoot:
		//
		//	"@@state@@" def=StateSpecification;
		public ParserRule getRule() { return rule; }

		//"@@state@@" def=StateSpecification
		public Group getGroup() { return cGroup; }

		//"@@state@@"
		public Keyword getStateKeyword_0() { return cStateKeyword_0; }

		//def=StateSpecification
		public Assignment getDefAssignment_1() { return cDefAssignment_1; }

		//StateSpecification
		public RuleCall getDefStateSpecificationParserRuleCall_1_0() { return cDefStateSpecificationParserRuleCall_1_0; }
	}

	public class TransitionRootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TransitionRoot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransitionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDefTransitionSpecificationParserRuleCall_1_0 = (RuleCall)cDefAssignment_1.eContents().get(0);
		
		//TransitionRoot:
		//
		//	"@@transition@@" def=TransitionSpecification;
		public ParserRule getRule() { return rule; }

		//"@@transition@@" def=TransitionSpecification
		public Group getGroup() { return cGroup; }

		//"@@transition@@"
		public Keyword getTransitionKeyword_0() { return cTransitionKeyword_0; }

		//def=TransitionSpecification
		public Assignment getDefAssignment_1() { return cDefAssignment_1; }

		//TransitionSpecification
		public RuleCall getDefTransitionSpecificationParserRuleCall_1_0() { return cDefTransitionSpecificationParserRuleCall_1_0; }
	}

	public class TransitionSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TransitionSpecification");
		private final Assignment cReactionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cReactionTransitionReactionParserRuleCall_0 = (RuleCall)cReactionAssignment.eContents().get(0);
		
		//TransitionSpecification:
		//
		//	reaction=TransitionReaction;
		public ParserRule getRule() { return rule; }

		//reaction=TransitionReaction
		public Assignment getReactionAssignment() { return cReactionAssignment; }

		//TransitionReaction
		public RuleCall getReactionTransitionReactionParserRuleCall_0() { return cReactionTransitionReactionParserRuleCall_0; }
	}

	public class StatechartSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StatechartSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStatechartSpecificationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStatechartKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//StatechartSpecification:
		//
		//	{StatechartSpecification} "statechart";
		public ParserRule getRule() { return rule; }

		//{StatechartSpecification} "statechart"
		public Group getGroup() { return cGroup; }

		//{StatechartSpecification}
		public Action getStatechartSpecificationAction_0() { return cStatechartSpecificationAction_0; }

		//"statechart"
		public Keyword getStatechartKeyword_1() { return cStatechartKeyword_1; }
	}

	public class StateSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStateSpecificationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//StateSpecification:
		//
		//	{StateSpecification} "state";
		public ParserRule getRule() { return rule; }

		//{StateSpecification} "state"
		public Group getGroup() { return cGroup; }

		//{StateSpecification}
		public Action getStateSpecificationAction_0() { return cStateSpecificationAction_0; }

		//"state"
		public Keyword getStateKeyword_1() { return cStateKeyword_1; }
	}

	public class TransitionReactionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TransitionReaction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTransitionReactionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTriggerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTriggerMyTriggerParserRuleCall_1_0 = (RuleCall)cTriggerAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSolidusKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cEffectAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cEffectReactionEffectParserRuleCall_2_1_0 = (RuleCall)cEffectAssignment_2_1.eContents().get(0);
		
		/// * Overriding transition grammar * / TransitionReaction:
		//
		//	{TransitionReaction} trigger=MyTrigger? ("/" effect=ReactionEffect)?;
		public ParserRule getRule() { return rule; }

		//{TransitionReaction} trigger=MyTrigger? ("/" effect=ReactionEffect)?
		public Group getGroup() { return cGroup; }

		//{TransitionReaction}
		public Action getTransitionReactionAction_0() { return cTransitionReactionAction_0; }

		//trigger=MyTrigger?
		public Assignment getTriggerAssignment_1() { return cTriggerAssignment_1; }

		//MyTrigger
		public RuleCall getTriggerMyTriggerParserRuleCall_1_0() { return cTriggerMyTriggerParserRuleCall_1_0; }

		//("/" effect=ReactionEffect)?
		public Group getGroup_2() { return cGroup_2; }

		//"/"
		public Keyword getSolidusKeyword_2_0() { return cSolidusKeyword_2_0; }

		//effect=ReactionEffect
		public Assignment getEffectAssignment_2_1() { return cEffectAssignment_2_1; }

		//ReactionEffect
		public RuleCall getEffectReactionEffectParserRuleCall_2_1_0() { return cEffectReactionEffectParserRuleCall_2_1_0; }
	}

	public class MyTriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MyTrigger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReactionTriggerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTriggerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//MyTrigger returns sgraph::Trigger:
		//
		//	{ReactionTrigger} "trigger";
		public ParserRule getRule() { return rule; }

		//{ReactionTrigger} "trigger"
		public Group getGroup() { return cGroup; }

		//{ReactionTrigger}
		public Action getReactionTriggerAction_0() { return cReactionTriggerAction_0; }

		//"trigger"
		public Keyword getTriggerKeyword_1() { return cTriggerKeyword_1; }
	}

	public class ReactionEffectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReactionEffect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReactionEffectAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEffectKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ReactionEffect returns sgraph::Effect:
		//
		//	{ReactionEffect} "effect";
		public ParserRule getRule() { return rule; }

		//{ReactionEffect} "effect"
		public Group getGroup() { return cGroup; }

		//{ReactionEffect}
		public Action getReactionEffectAction_0() { return cReactionEffectAction_0; }

		//"effect"
		public Keyword getEffectKeyword_1() { return cEffectKeyword_1; }
	}
	
	
	private RootElements pRoot;
	private DefRootElements pDefRoot;
	private StatechartRootElements pStatechartRoot;
	private StateRootElements pStateRoot;
	private TransitionRootElements pTransitionRoot;
	private TransitionSpecificationElements pTransitionSpecification;
	private StatechartSpecificationElements pStatechartSpecification;
	private StateSpecificationElements pStateSpecification;
	private TransitionReactionElements pTransitionReaction;
	private MyTriggerElements pMyTrigger;
	private ReactionEffectElements pReactionEffect;
	
	private final Grammar grammar;

	private STextGrammarAccess gaSText;

	@Inject
	public KidsexpGrammarAccess(GrammarProvider grammarProvider,
		STextGrammarAccess gaSText) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaSText = gaSText;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.cau.kieler.synccharts.yakindu.model.reqtext.Kidsexp".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public STextGrammarAccess getSTextGrammarAccess() {
		return gaSText;
	}

	
	/// * ---- root rules ----
	//
	//These root rules are not relevant for the grammar integration in the statechart. They
	//
	//just integrate the different start rules consistently
	//
	//into a single grammar.
	//
	// * / Root:
	//
	//	roots+=DefRoot*;
	public RootElements getRootAccess() {
		return (pRoot != null) ? pRoot : (pRoot = new RootElements());
	}
	
	public ParserRule getRootRule() {
		return getRootAccess().getRule();
	}

	//DefRoot:
	//
	//	StatechartRoot | StateRoot | TransitionRoot;
	public DefRootElements getDefRootAccess() {
		return (pDefRoot != null) ? pDefRoot : (pDefRoot = new DefRootElements());
	}
	
	public ParserRule getDefRootRule() {
		return getDefRootAccess().getRule();
	}

	//StatechartRoot:
	//
	//	"@@statechart@@" def=StatechartSpecification;
	public StatechartRootElements getStatechartRootAccess() {
		return (pStatechartRoot != null) ? pStatechartRoot : (pStatechartRoot = new StatechartRootElements());
	}
	
	public ParserRule getStatechartRootRule() {
		return getStatechartRootAccess().getRule();
	}

	//StateRoot:
	//
	//	"@@state@@" def=StateSpecification;
	public StateRootElements getStateRootAccess() {
		return (pStateRoot != null) ? pStateRoot : (pStateRoot = new StateRootElements());
	}
	
	public ParserRule getStateRootRule() {
		return getStateRootAccess().getRule();
	}

	//TransitionRoot:
	//
	//	"@@transition@@" def=TransitionSpecification;
	public TransitionRootElements getTransitionRootAccess() {
		return (pTransitionRoot != null) ? pTransitionRoot : (pTransitionRoot = new TransitionRootElements());
	}
	
	public ParserRule getTransitionRootRule() {
		return getTransitionRootAccess().getRule();
	}

	//TransitionSpecification:
	//
	//	reaction=TransitionReaction;
	public TransitionSpecificationElements getTransitionSpecificationAccess() {
		return (pTransitionSpecification != null) ? pTransitionSpecification : (pTransitionSpecification = new TransitionSpecificationElements());
	}
	
	public ParserRule getTransitionSpecificationRule() {
		return getTransitionSpecificationAccess().getRule();
	}

	//StatechartSpecification:
	//
	//	{StatechartSpecification} "statechart";
	public StatechartSpecificationElements getStatechartSpecificationAccess() {
		return (pStatechartSpecification != null) ? pStatechartSpecification : (pStatechartSpecification = new StatechartSpecificationElements());
	}
	
	public ParserRule getStatechartSpecificationRule() {
		return getStatechartSpecificationAccess().getRule();
	}

	//StateSpecification:
	//
	//	{StateSpecification} "state";
	public StateSpecificationElements getStateSpecificationAccess() {
		return (pStateSpecification != null) ? pStateSpecification : (pStateSpecification = new StateSpecificationElements());
	}
	
	public ParserRule getStateSpecificationRule() {
		return getStateSpecificationAccess().getRule();
	}

	/// * Overriding transition grammar * / TransitionReaction:
	//
	//	{TransitionReaction} trigger=MyTrigger? ("/" effect=ReactionEffect)?;
	public TransitionReactionElements getTransitionReactionAccess() {
		return (pTransitionReaction != null) ? pTransitionReaction : (pTransitionReaction = new TransitionReactionElements());
	}
	
	public ParserRule getTransitionReactionRule() {
		return getTransitionReactionAccess().getRule();
	}

	//MyTrigger returns sgraph::Trigger:
	//
	//	{ReactionTrigger} "trigger";
	public MyTriggerElements getMyTriggerAccess() {
		return (pMyTrigger != null) ? pMyTrigger : (pMyTrigger = new MyTriggerElements());
	}
	
	public ParserRule getMyTriggerRule() {
		return getMyTriggerAccess().getRule();
	}

	//ReactionEffect returns sgraph::Effect:
	//
	//	{ReactionEffect} "effect";
	public ReactionEffectElements getReactionEffectAccess() {
		return (pReactionEffect != null) ? pReactionEffect : (pReactionEffect = new ReactionEffectElements());
	}
	
	public ParserRule getReactionEffectRule() {
		return getReactionEffectAccess().getRule();
	}

	/// * ---- start rules ----
	//Define the starting points used by the statechart integration. These rules hook in the concrete rules of the specific grammar.
	// * /
	//
	//ScopedElement returns sgraph::ScopedElement:
	//
	//	StatechartSpecification;
	public STextGrammarAccess.ScopedElementElements getScopedElementAccess() {
		return gaSText.getScopedElementAccess();
	}
	
	public ParserRule getScopedElementRule() {
		return getScopedElementAccess().getRule();
	}

	/// * ---- scope rules ----
	//Defines different kinds of scopes that contain element definitions. Scopes are used for element definitions in statechart, regions, and state 
	// * /
	//
	//Scope returns sgraph::Scope:
	//
	//	StateScope | StatechartScope;
	public STextGrammarAccess.ScopeElements getScopeAccess() {
		return gaSText.getScopeAccess();
	}
	
	public ParserRule getScopeRule() {
		return getScopeAccess().getRule();
	}

	//// a SimpleScope is used for states and regions
	// StateScope returns sgraph::Scope:
	//
	//	{SimpleScope} declarations+=(LocalReaction | Entrypoint | Exitpoint)*;
	public STextGrammarAccess.StateScopeElements getStateScopeAccess() {
		return gaSText.getStateScopeAccess();
	}
	
	public ParserRule getStateScopeRule() {
		return getStateScopeAccess().getRule();
	}

	//// defines the poosible scopes for statecharts
	// StatechartScope:
	//
	//	InterfaceScope | InternalScope;
	public STextGrammarAccess.StatechartScopeElements getStatechartScopeAccess() {
		return gaSText.getStatechartScopeAccess();
	}
	
	public ParserRule getStatechartScopeRule() {
		return getStatechartScopeAccess().getRule();
	}

	//NamedInterfaceScope returns base::NamedElement:
	//
	//	InterfaceScope;
	public STextGrammarAccess.NamedInterfaceScopeElements getNamedInterfaceScopeAccess() {
		return gaSText.getNamedInterfaceScopeAccess();
	}
	
	public ParserRule getNamedInterfaceScopeRule() {
		return getNamedInterfaceScopeAccess().getRule();
	}

	//InterfaceScope:
	//
	//	{InterfaceScope} "interface" name=ID? ":" declarations+=(EventDeclarartion | VariableDeclaration |
	//
	//	OperationDeclaration | Entrypoint | Exitpoint)*;
	public STextGrammarAccess.InterfaceScopeElements getInterfaceScopeAccess() {
		return gaSText.getInterfaceScopeAccess();
	}
	
	public ParserRule getInterfaceScopeRule() {
		return getInterfaceScopeAccess().getRule();
	}

	//InternalScope:
	//
	//	{InternalScope} "internal" ":" declarations+=(EventDeclarartion | VariableDeclaration | OperationDeclaration |
	//
	//	LocalReaction)*;
	public STextGrammarAccess.InternalScopeElements getInternalScopeAccess() {
		return gaSText.getInternalScopeAccess();
	}
	
	public ParserRule getInternalScopeRule() {
		return getInternalScopeAccess().getRule();
	}

	/// * ---- declarations ----
	//a definition is a top level element of a definition scope. * / Declaration returns
	//
	//sgraph::Declaration:
	//
	//	EventDeclarartion | VariableDeclaration | OperationDeclaration | LocalReaction | Entrypoint | Exitpoint;
	public STextGrammarAccess.DeclarationElements getDeclarationAccess() {
		return gaSText.getDeclarationAccess();
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}

	/// * ---- event definition ---- * / EventDeclarartion returns sgraph::Event:
	//
	//	EventDefinition;
	public STextGrammarAccess.EventDeclarartionElements getEventDeclarartionAccess() {
		return gaSText.getEventDeclarartionAccess();
	}
	
	public ParserRule getEventDeclarartionRule() {
		return getEventDeclarartionAccess().getRule();
	}

	//EventFeature returns types::Event:
	//
	//	EventDefinition;
	public STextGrammarAccess.EventFeatureElements getEventFeatureAccess() {
		return gaSText.getEventFeatureAccess();
	}
	
	public ParserRule getEventFeatureRule() {
		return getEventFeatureAccess().getRule();
	}

	//// (derivation=EventDerivation)?;
	// EventDefinition:
	//
	//	direction=Direction? "event" name=ID (":" type=[types::Type|FQN])?;
	public STextGrammarAccess.EventDefinitionElements getEventDefinitionAccess() {
		return gaSText.getEventDefinitionAccess();
	}
	
	public ParserRule getEventDefinitionRule() {
		return getEventDefinitionAccess().getRule();
	}

	////EventDerivation:
	// //	 (':' value=Expression)?;
	// enum Direction:
	//
	//	LOCAL="local" | IN="in" | OUT="out";
	public STextGrammarAccess.DirectionElements getDirectionAccess() {
		return gaSText.getDirectionAccess();
	}
	
	public EnumRule getDirectionRule() {
		return getDirectionAccess().getRule();
	}

	/// * ---- variable definition ---- * / VariableDeclaration returns sgraph::Variable:
	//
	//	VariableDefinition;
	public STextGrammarAccess.VariableDeclarationElements getVariableDeclarationAccess() {
		return gaSText.getVariableDeclarationAccess();
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}

	//VariableFeature returns types::Property:
	//
	//	VariableDefinition;
	public STextGrammarAccess.VariableFeatureElements getVariableFeatureAccess() {
		return gaSText.getVariableFeatureAccess();
	}
	
	public ParserRule getVariableFeatureRule() {
		return getVariableFeatureAccess().getRule();
	}

	//VariableDefinition:
	//
	//	{VariableDefinition} "var" (readonly?="readonly"? & external?="external"?) name=ID ":" type=[types::Type|FQN] ("="
	//
	//	initialValue=Expression)?;
	public STextGrammarAccess.VariableDefinitionElements getVariableDefinitionAccess() {
		return gaSText.getVariableDefinitionAccess();
	}
	
	public ParserRule getVariableDefinitionRule() {
		return getVariableDefinitionAccess().getRule();
	}

	/// * ---- operation definition ---- * / OperationDeclaration returns sgraph::Declaration:
	//
	//	OperationDefinition;
	public STextGrammarAccess.OperationDeclarationElements getOperationDeclarationAccess() {
		return gaSText.getOperationDeclarationAccess();
	}
	
	public ParserRule getOperationDeclarationRule() {
		return getOperationDeclarationAccess().getRule();
	}

	//OperationFeature returns types::Operation:
	//
	//	OperationDefinition;
	public STextGrammarAccess.OperationFeatureElements getOperationFeatureAccess() {
		return gaSText.getOperationFeatureAccess();
	}
	
	public ParserRule getOperationFeatureRule() {
		return getOperationFeatureAccess().getRule();
	}

	//OperationDefinition:
	//
	//	{OperationDefinition} "operation" name=ID "(" (parameters+=Parameter ("," parameters+=Parameter)*)? ")" (":"
	//
	//	type=[types::Type|FQN])?;
	public STextGrammarAccess.OperationDefinitionElements getOperationDefinitionAccess() {
		return gaSText.getOperationDefinitionAccess();
	}
	
	public ParserRule getOperationDefinitionRule() {
		return getOperationDefinitionAccess().getRule();
	}

	//Parameter returns types::Parameter:
	//
	//	name=ID ":" type=[types::Type|FQN];
	public STextGrammarAccess.ParameterElements getParameterAccess() {
		return gaSText.getParameterAccess();
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	/// * ---- entrypoint definition ---- * / Entrypoint returns sgraph::Declaration:
	//
	//	{Entrypoint} "entrypoint" name=ID;
	public STextGrammarAccess.EntrypointElements getEntrypointAccess() {
		return gaSText.getEntrypointAccess();
	}
	
	public ParserRule getEntrypointRule() {
		return getEntrypointAccess().getRule();
	}

	/// * ---- exitpoint definition ---- * / Exitpoint returns sgraph::Declaration:
	//
	//	{Exitpoint} "exitpoint" name=ID;
	public STextGrammarAccess.ExitpointElements getExitpointAccess() {
		return gaSText.getExitpointAccess();
	}
	
	public ParserRule getExitpointRule() {
		return getExitpointAccess().getRule();
	}

	/// * ---- Datatype rules ---- * / FQN:
	//
	//	ID ("." ID)*;
	public STextGrammarAccess.FQNElements getFQNAccess() {
		return gaSText.getFQNAccess();
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}

	/// * ---- reaction rules ----
	//Define the structure of reactions that are central for describing the statecharts behavior. 
	// * /
	//
	//Reaction returns sgraph::Reaction:
	//
	//	LocalReaction | TransitionReaction;
	public STextGrammarAccess.ReactionElements getReactionAccess() {
		return gaSText.getReactionAccess();
	}
	
	public ParserRule getReactionRule() {
		return getReactionAccess().getRule();
	}

	////('#' properties=ReactionProperties)?;
	// LocalReaction:
	//
	//	trigger=ReactionTrigger => ("/" effect=ReactionEffect);
	public STextGrammarAccess.LocalReactionElements getLocalReactionAccess() {
		return gaSText.getLocalReactionAccess();
	}
	
	public ParserRule getLocalReactionRule() {
		return getLocalReactionAccess().getRule();
	}

	//ReactionTrigger returns sgraph::Trigger:
	//
	//	{ReactionTrigger} (triggers+=EventSpec ("," triggers+=EventSpec)* ("[" guardExpression=Expression "]")? | "["
	//
	//	guardExpression=Expression "]");
	public STextGrammarAccess.ReactionTriggerElements getReactionTriggerAccess() {
		return gaSText.getReactionTriggerAccess();
	}
	
	public ParserRule getReactionTriggerRule() {
		return getReactionTriggerAccess().getRule();
	}

	//ReactionProperties:
	//
	//	{ReactionProperties} properties+=ReactionProperty*;
	public STextGrammarAccess.ReactionPropertiesElements getReactionPropertiesAccess() {
		return gaSText.getReactionPropertiesAccess();
	}
	
	public ParserRule getReactionPropertiesRule() {
		return getReactionPropertiesAccess().getRule();
	}

	//ReactionProperty:
	//
	//	EntryPointSpec | ExitPointSpec;
	public STextGrammarAccess.ReactionPropertyElements getReactionPropertyAccess() {
		return gaSText.getReactionPropertyAccess();
	}
	
	public ParserRule getReactionPropertyRule() {
		return getReactionPropertyAccess().getRule();
	}

	//EntryPointSpec:
	//
	//	">" entrypoint=[Entrypoint|FQN];
	public STextGrammarAccess.EntryPointSpecElements getEntryPointSpecAccess() {
		return gaSText.getEntryPointSpecAccess();
	}
	
	public ParserRule getEntryPointSpecRule() {
		return getEntryPointSpecAccess().getRule();
	}

	//ExitPointSpec:
	//
	//	exitpoint=[Exitpoint|FQN] ">";
	public STextGrammarAccess.ExitPointSpecElements getExitPointSpecAccess() {
		return gaSText.getExitPointSpecAccess();
	}
	
	public ParserRule getExitPointSpecRule() {
		return getExitPointSpecAccess().getRule();
	}

	//EventSpec:
	//
	//	RegularEventSpec | TimeEventSpec | BuiltinEventSpec;
	public STextGrammarAccess.EventSpecElements getEventSpecAccess() {
		return gaSText.getEventSpecAccess();
	}
	
	public ParserRule getEventSpecRule() {
		return getEventSpecAccess().getRule();
	}

	//RegularEventSpec:
	//
	//	event=FeatureCall;
	public STextGrammarAccess.RegularEventSpecElements getRegularEventSpecAccess() {
		return gaSText.getRegularEventSpecAccess();
	}
	
	public ParserRule getRegularEventSpecRule() {
		return getRegularEventSpecAccess().getRule();
	}

	//// TODO: redefine after trigger - we need to use it with clocks
	// TimeEventSpec:
	//
	//	type=TimeEventType value=INT unit=TimeUnit?;
	public STextGrammarAccess.TimeEventSpecElements getTimeEventSpecAccess() {
		return gaSText.getTimeEventSpecAccess();
	}
	
	public ParserRule getTimeEventSpecRule() {
		return getTimeEventSpecAccess().getRule();
	}

	//enum TimeEventType:
	//
	//	after | every;
	public STextGrammarAccess.TimeEventTypeElements getTimeEventTypeAccess() {
		return gaSText.getTimeEventTypeAccess();
	}
	
	public EnumRule getTimeEventTypeRule() {
		return getTimeEventTypeAccess().getRule();
	}

	////TODO: Group OnCycleEvent and AlwaysEvent, maybe replace it by a DoEvent
	// BuiltinEventSpec:
	//
	//	EntryEvent | ExitEvent | OnCycleEvent | AlwaysEvent | DefaultEvent;
	public STextGrammarAccess.BuiltinEventSpecElements getBuiltinEventSpecAccess() {
		return gaSText.getBuiltinEventSpecAccess();
	}
	
	public ParserRule getBuiltinEventSpecRule() {
		return getBuiltinEventSpecAccess().getRule();
	}

	//EntryEvent:
	//
	//	{EntryEvent} "entry";
	public STextGrammarAccess.EntryEventElements getEntryEventAccess() {
		return gaSText.getEntryEventAccess();
	}
	
	public ParserRule getEntryEventRule() {
		return getEntryEventAccess().getRule();
	}

	//ExitEvent:
	//
	//	{ExitEvent} "exit";
	public STextGrammarAccess.ExitEventElements getExitEventAccess() {
		return gaSText.getExitEventAccess();
	}
	
	public ParserRule getExitEventRule() {
		return getExitEventAccess().getRule();
	}

	//OnCycleEvent:
	//
	//	{OnCycleEvent} "oncycle";
	public STextGrammarAccess.OnCycleEventElements getOnCycleEventAccess() {
		return gaSText.getOnCycleEventAccess();
	}
	
	public ParserRule getOnCycleEventRule() {
		return getOnCycleEventAccess().getRule();
	}

	//AlwaysEvent:
	//
	//	{AlwaysEvent} "always";
	public STextGrammarAccess.AlwaysEventElements getAlwaysEventAccess() {
		return gaSText.getAlwaysEventAccess();
	}
	
	public ParserRule getAlwaysEventRule() {
		return getAlwaysEventAccess().getRule();
	}

	//DefaultEvent:
	//
	//	{DefaultEvent} ("default" | "else");
	public STextGrammarAccess.DefaultEventElements getDefaultEventAccess() {
		return gaSText.getDefaultEventAccess();
	}
	
	public ParserRule getDefaultEventRule() {
		return getDefaultEventAccess().getRule();
	}

	//// ****************
	// // Expression Grammar
	// // ****************
	// EventRaisingExpression returns Expression:
	//
	//	{EventRaisingExpression} "raise" event=FeatureCall (":" value=Expression)?;
	public STextGrammarAccess.EventRaisingExpressionElements getEventRaisingExpressionAccess() {
		return gaSText.getEventRaisingExpressionAccess();
	}
	
	public ParserRule getEventRaisingExpressionRule() {
		return getEventRaisingExpressionAccess().getRule();
	}

	//StatementExpression returns sgraph::Statement:
	//
	//	Expression;
	public STextGrammarAccess.StatementExpressionElements getStatementExpressionAccess() {
		return gaSText.getStatementExpressionAccess();
	}
	
	public ParserRule getStatementExpressionRule() {
		return getStatementExpressionAccess().getRule();
	}

	//Expression:
	//
	//	AssignmentExpression;
	public STextGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaSText.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//AssignmentExpression returns Expression:
	//
	//	ConditionalExpression ({AssignmentExpression.varRef=current} operator=AssignmentOperator
	//
	//	expression=ConditionalExpression)*;
	public STextGrammarAccess.AssignmentExpressionElements getAssignmentExpressionAccess() {
		return gaSText.getAssignmentExpressionAccess();
	}
	
	public ParserRule getAssignmentExpressionRule() {
		return getAssignmentExpressionAccess().getRule();
	}

	//ConditionalExpression returns Expression:
	//
	//	LogicalOrExpression ({ConditionalExpression.condition=current} "?" trueCase=LogicalOrExpression ":"
	//
	//	falseCase=LogicalOrExpression)?;
	public STextGrammarAccess.ConditionalExpressionElements getConditionalExpressionAccess() {
		return gaSText.getConditionalExpressionAccess();
	}
	
	public ParserRule getConditionalExpressionRule() {
		return getConditionalExpressionAccess().getRule();
	}

	//LogicalOrExpression returns Expression:
	//
	//	LogicalAndExpression ({LogicalOrExpression.leftOperand=current} "||" rightOperand=LogicalAndExpression)*;
	public STextGrammarAccess.LogicalOrExpressionElements getLogicalOrExpressionAccess() {
		return gaSText.getLogicalOrExpressionAccess();
	}
	
	public ParserRule getLogicalOrExpressionRule() {
		return getLogicalOrExpressionAccess().getRule();
	}

	//LogicalAndExpression returns Expression:
	//
	//	LogicalNotExpression ({LogicalAndExpression.leftOperand=current} "&&" rightOperand=LogicalNotExpression)*;
	public STextGrammarAccess.LogicalAndExpressionElements getLogicalAndExpressionAccess() {
		return gaSText.getLogicalAndExpressionAccess();
	}
	
	public ParserRule getLogicalAndExpressionRule() {
		return getLogicalAndExpressionAccess().getRule();
	}

	//LogicalNotExpression returns Expression:
	//
	//	BitwiseXorExpression | {LogicalNotExpression} "!" operand=BitwiseXorExpression;
	public STextGrammarAccess.LogicalNotExpressionElements getLogicalNotExpressionAccess() {
		return gaSText.getLogicalNotExpressionAccess();
	}
	
	public ParserRule getLogicalNotExpressionRule() {
		return getLogicalNotExpressionAccess().getRule();
	}

	//BitwiseXorExpression returns Expression:
	//
	//	BitwiseOrExpression ({BitwiseXorExpression.leftOperand=current} "^" rightOperand=BitwiseOrExpression)*;
	public STextGrammarAccess.BitwiseXorExpressionElements getBitwiseXorExpressionAccess() {
		return gaSText.getBitwiseXorExpressionAccess();
	}
	
	public ParserRule getBitwiseXorExpressionRule() {
		return getBitwiseXorExpressionAccess().getRule();
	}

	//BitwiseOrExpression returns Expression:
	//
	//	BitwiseAndExpression ({BitwiseOrExpression.leftOperand=current} "|" rightOperand=BitwiseAndExpression)*;
	public STextGrammarAccess.BitwiseOrExpressionElements getBitwiseOrExpressionAccess() {
		return gaSText.getBitwiseOrExpressionAccess();
	}
	
	public ParserRule getBitwiseOrExpressionRule() {
		return getBitwiseOrExpressionAccess().getRule();
	}

	//BitwiseAndExpression returns Expression:
	//
	//	LogicalRelationExpression ({BitwiseAndExpression.leftOperand=current} "&" rightOperand=LogicalRelationExpression)*;
	public STextGrammarAccess.BitwiseAndExpressionElements getBitwiseAndExpressionAccess() {
		return gaSText.getBitwiseAndExpressionAccess();
	}
	
	public ParserRule getBitwiseAndExpressionRule() {
		return getBitwiseAndExpressionAccess().getRule();
	}

	//LogicalRelationExpression returns Expression:
	//
	//	ShiftExpression ({LogicalRelationExpression.leftOperand=current} operator=RelationalOperator
	//
	//	rightOperand=ShiftExpression)*;
	public STextGrammarAccess.LogicalRelationExpressionElements getLogicalRelationExpressionAccess() {
		return gaSText.getLogicalRelationExpressionAccess();
	}
	
	public ParserRule getLogicalRelationExpressionRule() {
		return getLogicalRelationExpressionAccess().getRule();
	}

	//ShiftExpression returns Expression:
	//
	//	NumericalAddSubtractExpression ({ShiftExpression.leftOperand=current} operator=ShiftOperator
	//
	//	rightOperand=NumericalAddSubtractExpression)*;
	public STextGrammarAccess.ShiftExpressionElements getShiftExpressionAccess() {
		return gaSText.getShiftExpressionAccess();
	}
	
	public ParserRule getShiftExpressionRule() {
		return getShiftExpressionAccess().getRule();
	}

	//NumericalAddSubtractExpression returns Expression:
	//
	//	NumericalMultiplyDivideExpression ({NumericalAddSubtractExpression.leftOperand=current} operator=AdditiveOperator
	//
	//	rightOperand=NumericalMultiplyDivideExpression)*;
	public STextGrammarAccess.NumericalAddSubtractExpressionElements getNumericalAddSubtractExpressionAccess() {
		return gaSText.getNumericalAddSubtractExpressionAccess();
	}
	
	public ParserRule getNumericalAddSubtractExpressionRule() {
		return getNumericalAddSubtractExpressionAccess().getRule();
	}

	//NumericalMultiplyDivideExpression returns Expression:
	//
	//	NumericalUnaryExpression ({NumericalMultiplyDivideExpression.leftOperand=current} operator=MultiplicativeOperator
	//
	//	rightOperand=NumericalUnaryExpression)*;
	public STextGrammarAccess.NumericalMultiplyDivideExpressionElements getNumericalMultiplyDivideExpressionAccess() {
		return gaSText.getNumericalMultiplyDivideExpressionAccess();
	}
	
	public ParserRule getNumericalMultiplyDivideExpressionRule() {
		return getNumericalMultiplyDivideExpressionAccess().getRule();
	}

	//NumericalUnaryExpression returns Expression:
	//
	//	PrimaryExpression | {NumericalUnaryExpression} operator=UnaryOperator operand=PrimaryExpression;
	public STextGrammarAccess.NumericalUnaryExpressionElements getNumericalUnaryExpressionAccess() {
		return gaSText.getNumericalUnaryExpressionAccess();
	}
	
	public ParserRule getNumericalUnaryExpressionRule() {
		return getNumericalUnaryExpressionAccess().getRule();
	}

	//PrimaryExpression returns Expression:
	//
	//	PrimitiveValueExpression | FeatureCall | ActiveStateReferenceExpression | EventValueReferenceExpression | "("
	//
	//	Expression ")";
	public STextGrammarAccess.PrimaryExpressionElements getPrimaryExpressionAccess() {
		return gaSText.getPrimaryExpressionAccess();
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//PrimitiveValueExpression returns Expression:
	//
	//	{PrimitiveValueExpression} value=Literal;
	public STextGrammarAccess.PrimitiveValueExpressionElements getPrimitiveValueExpressionAccess() {
		return gaSText.getPrimitiveValueExpressionAccess();
	}
	
	public ParserRule getPrimitiveValueExpressionRule() {
		return getPrimitiveValueExpressionAccess().getRule();
	}

	//FeatureCall returns Expression:
	//
	//	ElementReferenceExpression ({FeatureCall.owner=current} "." feature=[ecore::EObject] (=> operationCall?="("
	//
	//	(args+=Expression ("," args+=Expression)*)? ")")?)*;
	public STextGrammarAccess.FeatureCallElements getFeatureCallAccess() {
		return gaSText.getFeatureCallAccess();
	}
	
	public ParserRule getFeatureCallRule() {
		return getFeatureCallAccess().getRule();
	}

	//ElementReferenceExpression returns Expression:
	//
	//	{ElementReferenceExpression} reference=[ecore::EObject] (=> operationCall?="(" (args+=Expression (","
	//
	//	args+=Expression)*)? ")")?;
	public STextGrammarAccess.ElementReferenceExpressionElements getElementReferenceExpressionAccess() {
		return gaSText.getElementReferenceExpressionAccess();
	}
	
	public ParserRule getElementReferenceExpressionRule() {
		return getElementReferenceExpressionAccess().getRule();
	}

	//EventValueReferenceExpression returns Expression:
	//
	//	{EventValueReferenceExpression} "valueof" "(" value=FeatureCall ")";
	public STextGrammarAccess.EventValueReferenceExpressionElements getEventValueReferenceExpressionAccess() {
		return gaSText.getEventValueReferenceExpressionAccess();
	}
	
	public ParserRule getEventValueReferenceExpressionRule() {
		return getEventValueReferenceExpressionAccess().getRule();
	}

	//ActiveStateReferenceExpression returns Expression:
	//
	//	{ActiveStateReferenceExpression} "active" "(" value=[sgraph::State|FQN] ")";
	public STextGrammarAccess.ActiveStateReferenceExpressionElements getActiveStateReferenceExpressionAccess() {
		return gaSText.getActiveStateReferenceExpressionAccess();
	}
	
	public ParserRule getActiveStateReferenceExpressionRule() {
		return getActiveStateReferenceExpressionAccess().getRule();
	}

	//Literal:
	//
	//	BoolLiteral | IntLiteral | HexLiteral | RealLiteral | StringLiteral;
	public STextGrammarAccess.LiteralElements getLiteralAccess() {
		return gaSText.getLiteralAccess();
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//BoolLiteral:
	//
	//	{BoolLiteral} value=BOOL;
	public STextGrammarAccess.BoolLiteralElements getBoolLiteralAccess() {
		return gaSText.getBoolLiteralAccess();
	}
	
	public ParserRule getBoolLiteralRule() {
		return getBoolLiteralAccess().getRule();
	}

	//IntLiteral:
	//
	//	{IntLiteral} value=INT;
	public STextGrammarAccess.IntLiteralElements getIntLiteralAccess() {
		return gaSText.getIntLiteralAccess();
	}
	
	public ParserRule getIntLiteralRule() {
		return getIntLiteralAccess().getRule();
	}

	//RealLiteral:
	//
	//	{RealLiteral} value=FLOAT;
	public STextGrammarAccess.RealLiteralElements getRealLiteralAccess() {
		return gaSText.getRealLiteralAccess();
	}
	
	public ParserRule getRealLiteralRule() {
		return getRealLiteralAccess().getRule();
	}

	//HexLiteral:
	//
	//	{HexLiteral} value=HEX;
	public STextGrammarAccess.HexLiteralElements getHexLiteralAccess() {
		return gaSText.getHexLiteralAccess();
	}
	
	public ParserRule getHexLiteralRule() {
		return getHexLiteralAccess().getRule();
	}

	//StringLiteral:
	//
	//	{StringLiteral} value=STRING;
	public STextGrammarAccess.StringLiteralElements getStringLiteralAccess() {
		return gaSText.getStringLiteralAccess();
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//enum AssignmentOperator:
	//
	//	assign="=" | multAssign="*=" | divAssign="/=" | modAssign="%=" | addAssign="+=" | subAssign="-=" |
	//
	//	leftShiftAssign="<<=" | rightShiftAssign=">>=" | andAssign="&=" | xorAssign="^=" | orAssign="|=";
	public STextGrammarAccess.AssignmentOperatorElements getAssignmentOperatorAccess() {
		return gaSText.getAssignmentOperatorAccess();
	}
	
	public EnumRule getAssignmentOperatorRule() {
		return getAssignmentOperatorAccess().getRule();
	}

	//enum ShiftOperator:
	//
	//	left="<<" | right=">>";
	public STextGrammarAccess.ShiftOperatorElements getShiftOperatorAccess() {
		return gaSText.getShiftOperatorAccess();
	}
	
	public EnumRule getShiftOperatorRule() {
		return getShiftOperatorAccess().getRule();
	}

	//enum AdditiveOperator:
	//
	//	plus="+" | minus="-";
	public STextGrammarAccess.AdditiveOperatorElements getAdditiveOperatorAccess() {
		return gaSText.getAdditiveOperatorAccess();
	}
	
	public EnumRule getAdditiveOperatorRule() {
		return getAdditiveOperatorAccess().getRule();
	}

	//enum MultiplicativeOperator:
	//
	//	mul="*" | div="/" | mod="%";
	public STextGrammarAccess.MultiplicativeOperatorElements getMultiplicativeOperatorAccess() {
		return gaSText.getMultiplicativeOperatorAccess();
	}
	
	public EnumRule getMultiplicativeOperatorRule() {
		return getMultiplicativeOperatorAccess().getRule();
	}

	//enum UnaryOperator:
	//
	//	positive="+" | negative="-" | complement="~";
	public STextGrammarAccess.UnaryOperatorElements getUnaryOperatorAccess() {
		return gaSText.getUnaryOperatorAccess();
	}
	
	public EnumRule getUnaryOperatorRule() {
		return getUnaryOperatorAccess().getRule();
	}

	//enum RelationalOperator:
	//
	//	smaller="<" | smallerEqual="<=" | greater=">" | greaterEqual=">=" | equals="==" | notEquals="!=";
	public STextGrammarAccess.RelationalOperatorElements getRelationalOperatorAccess() {
		return gaSText.getRelationalOperatorAccess();
	}
	
	public EnumRule getRelationalOperatorRule() {
		return getRelationalOperatorAccess().getRule();
	}

	//enum TimeUnit:
	//
	//	second="s" | millisecond="ms" | microsecond="us" | nanosecond="ns";
	public STextGrammarAccess.TimeUnitElements getTimeUnitAccess() {
		return gaSText.getTimeUnitAccess();
	}
	
	public EnumRule getTimeUnitRule() {
		return getTimeUnitAccess().getRule();
	}

	//terminal BOOL returns ecore::EBoolean:
	//
	//	"true" | "false" | "yes" | "no";
	public TerminalRule getBOOLRule() {
		return gaSText.getBOOLRule();
	} 

	//terminal HEX returns ecore::EInt:
	//
	//	"0" ("x" | "X") ("0".."9" | "a".."f" | "A".."F")+;
	public TerminalRule getHEXRule() {
		return gaSText.getHEXRule();
	} 

	//terminal FLOAT returns ecore::EFloat:
	//
	//	(INT "." INT) ("e" ("-" | "+") INT)? ("f" | "F" | "d" | "D")?;
	public TerminalRule getFLOATRule() {
		return gaSText.getFLOATRule();
	} 

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaSText.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaSText.getINTRule();
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaSText.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaSText.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaSText.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaSText.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaSText.getANY_OTHERRule();
	} 
}
