/*
 * generated by Xtext
 */
package de.cau.cs.kieler.lustre.serializer;

import com.google.inject.Inject;
import de.cau.cs.kieler.annotations.AnnotationsPackage;
import de.cau.cs.kieler.annotations.CommentAnnotation;
import de.cau.cs.kieler.annotations.Pragma;
import de.cau.cs.kieler.annotations.StringAnnotation;
import de.cau.cs.kieler.annotations.StringPragma;
import de.cau.cs.kieler.annotations.TagAnnotation;
import de.cau.cs.kieler.annotations.TypedStringAnnotation;
import de.cau.cs.kieler.kexpressions.BoolValue;
import de.cau.cs.kieler.kexpressions.ExternString;
import de.cau.cs.kieler.kexpressions.FloatValue;
import de.cau.cs.kieler.kexpressions.FunctionCall;
import de.cau.cs.kieler.kexpressions.IgnoreValue;
import de.cau.cs.kieler.kexpressions.IntValue;
import de.cau.cs.kieler.kexpressions.JsonArrayValue;
import de.cau.cs.kieler.kexpressions.JsonObjectMember;
import de.cau.cs.kieler.kexpressions.JsonObjectValue;
import de.cau.cs.kieler.kexpressions.KExpressionsPackage;
import de.cau.cs.kieler.kexpressions.NullValue;
import de.cau.cs.kieler.kexpressions.OperatorExpression;
import de.cau.cs.kieler.kexpressions.RandomCall;
import de.cau.cs.kieler.kexpressions.RandomizeCall;
import de.cau.cs.kieler.kexpressions.ReferenceCall;
import de.cau.cs.kieler.kexpressions.ReferenceDeclaration;
import de.cau.cs.kieler.kexpressions.ScheduleDeclaration;
import de.cau.cs.kieler.kexpressions.ScheduleObjectReference;
import de.cau.cs.kieler.kexpressions.StringValue;
import de.cau.cs.kieler.kexpressions.TextExpression;
import de.cau.cs.kieler.kexpressions.ValuedObject;
import de.cau.cs.kieler.kexpressions.ValuedObjectReference;
import de.cau.cs.kieler.kexpressions.VariableDeclaration;
import de.cau.cs.kieler.kexpressions.VectorValue;
import de.cau.cs.kieler.kexpressions.keffects.Assignment;
import de.cau.cs.kieler.kexpressions.keffects.Emission;
import de.cau.cs.kieler.kexpressions.keffects.FunctionCallEffect;
import de.cau.cs.kieler.kexpressions.keffects.HostcodeEffect;
import de.cau.cs.kieler.kexpressions.keffects.KEffectsPackage;
import de.cau.cs.kieler.kexpressions.keffects.PrintCallEffect;
import de.cau.cs.kieler.kexpressions.keffects.RandomizeCallEffect;
import de.cau.cs.kieler.kexpressions.keffects.ReferenceCallEffect;
import de.cau.cs.kieler.kexpressions.kext.AnnotatedExpression;
import de.cau.cs.kieler.kexpressions.kext.KExtPackage;
import de.cau.cs.kieler.kexpressions.kext.KExtScope;
import de.cau.cs.kieler.kexpressions.kext.Kext;
import de.cau.cs.kieler.kexpressions.kext.StructDeclaration;
import de.cau.cs.kieler.kexpressions.kext.TestEntity;
import de.cau.cs.kieler.kexpressions.kext.serializer.KExtSemanticSequencer;
import de.cau.cs.kieler.lustre.lustre.AState;
import de.cau.cs.kieler.lustre.lustre.ATransition;
import de.cau.cs.kieler.lustre.lustre.Automaton;
import de.cau.cs.kieler.lustre.lustre.ByNameStaticArg;
import de.cau.cs.kieler.lustre.lustre.ClockedVariableDeclaration;
import de.cau.cs.kieler.lustre.lustre.ExternalNodeDeclaration;
import de.cau.cs.kieler.lustre.lustre.LustrePackage;
import de.cau.cs.kieler.lustre.lustre.LustreProgram;
import de.cau.cs.kieler.lustre.lustre.ModelDeclaration;
import de.cau.cs.kieler.lustre.lustre.NodeDeclaration;
import de.cau.cs.kieler.lustre.lustre.PackBody;
import de.cau.cs.kieler.lustre.lustre.PackList;
import de.cau.cs.kieler.lustre.lustre.PackageDeclaration;
import de.cau.cs.kieler.lustre.lustre.PackageEquation;
import de.cau.cs.kieler.lustre.lustre.Params;
import de.cau.cs.kieler.lustre.lustre.Provide;
import de.cau.cs.kieler.lustre.lustre.StaticArg;
import de.cau.cs.kieler.lustre.lustre.StaticParam;
import de.cau.cs.kieler.lustre.lustre.TypeDeclaration;
import de.cau.cs.kieler.lustre.services.LustreGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public abstract class AbstractLustreSemanticSequencer extends KExtSemanticSequencer {

	@Inject
	private LustreGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == AnnotationsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case AnnotationsPackage.COMMENT_ANNOTATION:
				if (rule == grammarAccess.getAnnotationRule()
						|| rule == grammarAccess.getValuedAnnotationRule()
						|| rule == grammarAccess.getRestrictedTypeAnnotationRule()
						|| rule == grammarAccess.getQuotedStringAnnotationRule()
						|| rule == grammarAccess.getCommentAnnotationRule()) {
					sequence_CommentAnnotation(context, (CommentAnnotation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getCommentAnnotatonSLRule()) {
					sequence_CommentAnnotatonSL(context, (CommentAnnotation) semanticObject); 
					return; 
				}
				else break;
			case AnnotationsPackage.PRAGMA:
				sequence_PragmaTag(context, (Pragma) semanticObject); 
				return; 
			case AnnotationsPackage.STRING_ANNOTATION:
				if (rule == grammarAccess.getAnnotationRule()
						|| rule == grammarAccess.getValuedAnnotationRule()
						|| rule == grammarAccess.getKeyStringValueAnnotationRule()) {
					sequence_KeyStringValueAnnotation(context, (StringAnnotation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getQuotedStringAnnotationRule()
						|| rule == grammarAccess.getQuotedKeyStringValueAnnotationRule()) {
					sequence_QuotedKeyStringValueAnnotation(context, (StringAnnotation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRestrictedTypeAnnotationRule()
						|| rule == grammarAccess.getRestrictedKeyStringValueAnnotationRule()) {
					sequence_RestrictedKeyStringValueAnnotation(context, (StringAnnotation) semanticObject); 
					return; 
				}
				else break;
			case AnnotationsPackage.STRING_PRAGMA:
				sequence_StringPragma(context, (StringPragma) semanticObject); 
				return; 
			case AnnotationsPackage.TAG_ANNOTATION:
				sequence_TagAnnotation(context, (TagAnnotation) semanticObject); 
				return; 
			case AnnotationsPackage.TYPED_STRING_ANNOTATION:
				if (rule == grammarAccess.getQuotedStringAnnotationRule()
						|| rule == grammarAccess.getQuotedTypedKeyStringValueAnnotationRule()) {
					sequence_QuotedTypedKeyStringValueAnnotation(context, (TypedStringAnnotation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRestrictedTypeAnnotationRule()
						|| rule == grammarAccess.getRestrictedTypedKeyStringValueAnnotationRule()) {
					sequence_RestrictedTypedKeyStringValueAnnotation(context, (TypedStringAnnotation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAnnotationRule()
						|| rule == grammarAccess.getValuedAnnotationRule()
						|| rule == grammarAccess.getTypedKeyStringValueAnnotationRule()) {
					sequence_TypedKeyStringValueAnnotation(context, (TypedStringAnnotation) semanticObject); 
					return; 
				}
				else break;
			}
		else if (epackage == KEffectsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case KEffectsPackage.ASSIGNMENT:
				if (rule == grammarAccess.getAssignmentRule()) {
					sequence_Assignment(context, (Assignment) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEffectRule()) {
					sequence_Assignment_PostfixEffect(context, (Assignment) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getEquationRule()) {
					sequence_Equation(context, (Assignment) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPostfixEffectRule()) {
					sequence_PostfixEffect(context, (Assignment) semanticObject); 
					return; 
				}
				else break;
			case KEffectsPackage.EMISSION:
				sequence_Emission(context, (Emission) semanticObject); 
				return; 
			case KEffectsPackage.FUNCTION_CALL_EFFECT:
				sequence_FunctionCallEffect(context, (FunctionCallEffect) semanticObject); 
				return; 
			case KEffectsPackage.HOSTCODE_EFFECT:
				sequence_HostcodeEffect(context, (HostcodeEffect) semanticObject); 
				return; 
			case KEffectsPackage.PRINT_CALL_EFFECT:
				sequence_PrintCallEffect(context, (PrintCallEffect) semanticObject); 
				return; 
			case KEffectsPackage.RANDOMIZE_CALL_EFFECT:
				sequence_RandomizeCallEffect(context, (RandomizeCallEffect) semanticObject); 
				return; 
			case KEffectsPackage.REFERENCE_CALL_EFFECT:
				sequence_ReferenceCallEffect(context, (ReferenceCallEffect) semanticObject); 
				return; 
			}
		else if (epackage == KExpressionsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case KExpressionsPackage.BOOL_VALUE:
				sequence_BoolValue(context, (BoolValue) semanticObject); 
				return; 
			case KExpressionsPackage.EXTERN_STRING:
				sequence_ExternString(context, (ExternString) semanticObject); 
				return; 
			case KExpressionsPackage.FLOAT_VALUE:
				sequence_FloatValue(context, (FloatValue) semanticObject); 
				return; 
			case KExpressionsPackage.FUNCTION_CALL:
				sequence_FunctionCall(context, (FunctionCall) semanticObject); 
				return; 
			case KExpressionsPackage.IGNORE_VALUE:
				sequence_IgnoreValue(context, (IgnoreValue) semanticObject); 
				return; 
			case KExpressionsPackage.INT_VALUE:
				sequence_IntValue(context, (IntValue) semanticObject); 
				return; 
			case KExpressionsPackage.JSON_ARRAY_VALUE:
				sequence_JsonArrayValue(context, (JsonArrayValue) semanticObject); 
				return; 
			case KExpressionsPackage.JSON_OBJECT_MEMBER:
				sequence_JsonObjectMember(context, (JsonObjectMember) semanticObject); 
				return; 
			case KExpressionsPackage.JSON_OBJECT_VALUE:
				sequence_JsonObjectValue(context, (JsonObjectValue) semanticObject); 
				return; 
			case KExpressionsPackage.NULL_VALUE:
				sequence_NullValue(context, (NullValue) semanticObject); 
				return; 
			case KExpressionsPackage.OPERATOR_EXPRESSION:
				if (rule == grammarAccess.getAssertionRule()
						|| rule == grammarAccess.getModExpressionRule()
						|| action == grammarAccess.getModExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getIntDivExpressionRule()
						|| rule == grammarAccess.getNegExpressionRule()
						|| rule == grammarAccess.getFBYExpressionRule()
						|| rule == grammarAccess.getWhenExpressionRule()
						|| rule == grammarAccess.getCurrentExpressionRule()
						|| rule == grammarAccess.getPreExpressionRule()
						|| rule == grammarAccess.getBoolExpressionRule()
						|| rule == grammarAccess.getInitExpressionRule()
						|| rule == grammarAccess.getTernaryOperationRule()
						|| rule == grammarAccess.getImpliesExpressionRule()
						|| action == grammarAccess.getImpliesExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalXorExpressionRule()
						|| action == grammarAccess.getLogicalXorExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getRootRule()
						|| rule == grammarAccess.getExpressionRule()
						|| rule == grammarAccess.getLogicalOrExpressionRule()
						|| action == grammarAccess.getLogicalOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getLogicalAndExpressionRule()
						|| action == grammarAccess.getLogicalAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseOrExpressionRule()
						|| action == grammarAccess.getBitwiseOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseXOrExpressionRule()
						|| action == grammarAccess.getBitwiseXOrExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getBitwiseAndExpressionRule()
						|| action == grammarAccess.getBitwiseAndExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getCompareOperationRule()
						|| action == grammarAccess.getCompareOperationAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getNotOrValuedExpressionRule()
						|| rule == grammarAccess.getBitwiseNotExpressionRule()
						|| rule == grammarAccess.getNotExpressionRule()
						|| rule == grammarAccess.getValuedExpressionRule()
						|| rule == grammarAccess.getShiftLeftExpressionRule()
						|| action == grammarAccess.getShiftLeftExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightExpressionRule()
						|| action == grammarAccess.getShiftRightExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getShiftRightUnsignedExpressionRule()
						|| action == grammarAccess.getShiftRightUnsignedExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getAddExpressionRule()
						|| action == grammarAccess.getAddExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getSubExpressionRule()
						|| action == grammarAccess.getSubExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getMultExpressionRule()
						|| action == grammarAccess.getMultExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getDivExpressionRule()
						|| action == grammarAccess.getDivExpressionAccess().getOperatorExpressionSubExpressionsAction_1_0()
						|| rule == grammarAccess.getAtomicExpressionRule()
						|| rule == grammarAccess.getAtomicValuedExpressionRule()
						|| rule == grammarAccess.getVectorValueMemberRule()) {
					sequence_AddExpression_BitwiseAndExpression_BitwiseNotExpression_BitwiseOrExpression_BitwiseXOrExpression_CompareOperation_DivExpression_LogicalAndExpression_LogicalOrExpression_MultExpression_NotExpression_ShiftLeftExpression_ShiftRightExpression_ShiftRightUnsignedExpression_SubExpression_ValuedObjectTestExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getValuedObjectTestExpressionRule()) {
					sequence_ValuedObjectTestExpression(context, (OperatorExpression) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.PARAMETER:
				sequence_Parameter(context, (de.cau.cs.kieler.kexpressions.Parameter) semanticObject); 
				return; 
			case KExpressionsPackage.RANDOM_CALL:
				sequence_RandomCall(context, (RandomCall) semanticObject); 
				return; 
			case KExpressionsPackage.RANDOMIZE_CALL:
				sequence_RandomizeCall(context, (RandomizeCall) semanticObject); 
				return; 
			case KExpressionsPackage.REFERENCE_CALL:
				sequence_ReferenceCall(context, (ReferenceCall) semanticObject); 
				return; 
			case KExpressionsPackage.REFERENCE_DECLARATION:
				if (rule == grammarAccess.getDeclarationWOSemicolonRule()
						|| rule == grammarAccess.getReferenceDeclarationWOSemicolonRule()) {
					sequence_ReferenceDeclarationWOSemicolon(context, (ReferenceDeclaration) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getDeclarationRule()
						|| rule == grammarAccess.getReferenceDeclarationRule()) {
					sequence_ReferenceDeclaration(context, (ReferenceDeclaration) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.SCHEDULE_DECLARATION:
				if (rule == grammarAccess.getDeclarationWOSemicolonRule()
						|| rule == grammarAccess.getScheduleDeclarationWOSemicolonRule()) {
					sequence_ScheduleDeclarationWOSemicolon(context, (ScheduleDeclaration) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getDeclarationRule()
						|| rule == grammarAccess.getScheduleDeclarationRule()) {
					sequence_ScheduleDeclaration(context, (ScheduleDeclaration) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.SCHEDULE_OBJECT_REFERENCE:
				sequence_ScheduleObjectReference(context, (ScheduleObjectReference) semanticObject); 
				return; 
			case KExpressionsPackage.STRING_VALUE:
				sequence_StringValue(context, (StringValue) semanticObject); 
				return; 
			case KExpressionsPackage.TEXT_EXPRESSION:
				sequence_TextExpression(context, (TextExpression) semanticObject); 
				return; 
			case KExpressionsPackage.VALUED_OBJECT:
				sequence_ValuedObject(context, (ValuedObject) semanticObject); 
				return; 
			case KExpressionsPackage.VALUED_OBJECT_REFERENCE:
				sequence_ValuedObjectReference(context, (ValuedObjectReference) semanticObject); 
				return; 
			case KExpressionsPackage.VARIABLE_DECLARATION:
				if (rule == grammarAccess.getDeclarationWOSemicolonRule()
						|| rule == grammarAccess.getVariableDeclarationWOSemicolonRule()) {
					sequence_VariableDeclarationWOSemicolon(context, (VariableDeclaration) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getVariableDeclarationRule()
						|| rule == grammarAccess.getDeclarationRule()) {
					sequence_VariableDeclaration(context, (VariableDeclaration) semanticObject); 
					return; 
				}
				else break;
			case KExpressionsPackage.VECTOR_VALUE:
				sequence_VectorValue(context, (VectorValue) semanticObject); 
				return; 
			}
		else if (epackage == KExtPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case KExtPackage.ANNOTATED_EXPRESSION:
				sequence_AnnotatedExpression(context, (AnnotatedExpression) semanticObject); 
				return; 
			case KExtPackage.KEXT_SCOPE:
				if (rule == grammarAccess.getRootScopeRule()) {
					sequence_RootScope(context, (KExtScope) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getScopeRule()) {
					sequence_Scope(context, (KExtScope) semanticObject); 
					return; 
				}
				else break;
			case KExtPackage.KEXT:
				sequence_Kext(context, (Kext) semanticObject); 
				return; 
			case KExtPackage.STRUCT_DECLARATION:
				if (rule == grammarAccess.getDeclarationWOSemicolonRule()
						|| rule == grammarAccess.getStructDeclarationWOSemicolonRule()) {
					sequence_StructDeclarationWOSemicolon(context, (StructDeclaration) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getDeclarationRule()
						|| rule == grammarAccess.getStructDeclarationRule()) {
					sequence_StructDeclaration(context, (StructDeclaration) semanticObject); 
					return; 
				}
				else break;
			case KExtPackage.TEST_ENTITY:
				sequence_TestEntity(context, (TestEntity) semanticObject); 
				return; 
			}
		else if (epackage == LustrePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case LustrePackage.ASTATE:
				sequence_AState(context, (AState) semanticObject); 
				return; 
			case LustrePackage.ATRANSITION:
				sequence_ATransition(context, (ATransition) semanticObject); 
				return; 
			case LustrePackage.AUTOMATON:
				sequence_Automaton(context, (Automaton) semanticObject); 
				return; 
			case LustrePackage.BY_NAME_STATIC_ARG:
				sequence_ByNameStaticArg(context, (ByNameStaticArg) semanticObject); 
				return; 
			case LustrePackage.CLOCKED_VARIABLE_DECLARATION:
				sequence_ClockedVariableDeclaration(context, (ClockedVariableDeclaration) semanticObject); 
				return; 
			case LustrePackage.EXTERNAL_NODE_DECLARATION:
				sequence_ExternalNodeDeclaration(context, (ExternalNodeDeclaration) semanticObject); 
				return; 
			case LustrePackage.LUSTRE_PROGRAM:
				sequence_LustreProgram(context, (LustreProgram) semanticObject); 
				return; 
			case LustrePackage.MODEL_DECLARATION:
				sequence_ModelDeclaration(context, (ModelDeclaration) semanticObject); 
				return; 
			case LustrePackage.NODE_DECLARATION:
				sequence_NodeDeclaration(context, (NodeDeclaration) semanticObject); 
				return; 
			case LustrePackage.OPERATOR_EXPRESSION:
				sequence_CurrentExpression_FBYExpression_ImpliesExpression_InitExpression_IntDivExpression_LogicalXorExpression_ModExpression_NegExpression_PreExpression_TernaryOperation_WhenExpression(context, (de.cau.cs.kieler.lustre.lustre.OperatorExpression) semanticObject); 
				return; 
			case LustrePackage.PACK_BODY:
				sequence_PackBody(context, (PackBody) semanticObject); 
				return; 
			case LustrePackage.PACK_LIST:
				sequence_PackList(context, (PackList) semanticObject); 
				return; 
			case LustrePackage.PACKAGE_DECLARATION:
				sequence_PackageDeclaration(context, (PackageDeclaration) semanticObject); 
				return; 
			case LustrePackage.PACKAGE_EQUATION:
				sequence_PackageEquation(context, (PackageEquation) semanticObject); 
				return; 
			case LustrePackage.PARAMS:
				sequence_Params(context, (Params) semanticObject); 
				return; 
			case LustrePackage.PROVIDE:
				sequence_Provide(context, (Provide) semanticObject); 
				return; 
			case LustrePackage.STATIC_ARG:
				sequence_StaticArg(context, (StaticArg) semanticObject); 
				return; 
			case LustrePackage.STATIC_PARAM:
				sequence_StaticParam(context, (StaticParam) semanticObject); 
				return; 
			case LustrePackage.TYPE_DECLARATION:
				sequence_TypeDeclaration(context, (TypeDeclaration) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     AState returns AState
	 *
	 * Constraint:
	 *     (name=ID (equations+=Equation | assertions+=Assertion | automatons+=Automaton)* transitions+=ATransition+)
	 */
	protected void sequence_AState(ISerializationContext context, AState semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ATransition returns ATransition
	 *
	 * Constraint:
	 *     (strong?='unless'? condition=Expression history?='continue'? nextState=[AState|ID])
	 */
	protected void sequence_ATransition(ISerializationContext context, ATransition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Assertion returns OperatorExpression
	 *     ModExpression returns OperatorExpression
	 *     ModExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     IntDivExpression returns OperatorExpression
	 *     NegExpression returns OperatorExpression
	 *     FBYExpression returns OperatorExpression
	 *     WhenExpression returns OperatorExpression
	 *     CurrentExpression returns OperatorExpression
	 *     PreExpression returns OperatorExpression
	 *     BoolExpression returns OperatorExpression
	 *     InitExpression returns OperatorExpression
	 *     TernaryOperation returns OperatorExpression
	 *     ImpliesExpression returns OperatorExpression
	 *     ImpliesExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     LogicalXorExpression returns OperatorExpression
	 *     LogicalXorExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     Root returns OperatorExpression
	 *     Expression returns OperatorExpression
	 *     LogicalOrExpression returns OperatorExpression
	 *     LogicalOrExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     LogicalAndExpression returns OperatorExpression
	 *     LogicalAndExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     BitwiseOrExpression returns OperatorExpression
	 *     BitwiseOrExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     BitwiseXOrExpression returns OperatorExpression
	 *     BitwiseXOrExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     BitwiseAndExpression returns OperatorExpression
	 *     BitwiseAndExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     CompareOperation returns OperatorExpression
	 *     CompareOperation.OperatorExpression_1_0 returns OperatorExpression
	 *     NotOrValuedExpression returns OperatorExpression
	 *     BitwiseNotExpression returns OperatorExpression
	 *     NotExpression returns OperatorExpression
	 *     ValuedExpression returns OperatorExpression
	 *     ShiftLeftExpression returns OperatorExpression
	 *     ShiftLeftExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     ShiftRightExpression returns OperatorExpression
	 *     ShiftRightExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     ShiftRightUnsignedExpression returns OperatorExpression
	 *     ShiftRightUnsignedExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     AddExpression returns OperatorExpression
	 *     AddExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     SubExpression returns OperatorExpression
	 *     SubExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     MultExpression returns OperatorExpression
	 *     MultExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     DivExpression returns OperatorExpression
	 *     DivExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     AtomicExpression returns OperatorExpression
	 *     AtomicValuedExpression returns OperatorExpression
	 *     VectorValueMember returns OperatorExpression
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             subExpressions+=LogicalOrExpression_OperatorExpression_1_0 
	 *             operator=LogicalOrOperator 
	 *             subExpressions+=LogicalAndExpression 
	 *             subExpressions+=LogicalAndExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=LogicalAndExpression_OperatorExpression_1_0 
	 *             operator=LogicalAndOperator 
	 *             subExpressions+=BitwiseOrExpression 
	 *             subExpressions+=BitwiseOrExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=BitwiseOrExpression_OperatorExpression_1_0 
	 *             operator=BitwiseOrOperator 
	 *             subExpressions+=BitwiseXOrExpression 
	 *             subExpressions+=BitwiseXOrExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=BitwiseXOrExpression_OperatorExpression_1_0 
	 *             operator=BitwiseXOrOperator 
	 *             subExpressions+=BitwiseAndExpression 
	 *             subExpressions+=BitwiseAndExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=BitwiseAndExpression_OperatorExpression_1_0 
	 *             operator=BitwiseAndOperator 
	 *             subExpressions+=CompareOperation 
	 *             subExpressions+=CompareOperation*
	 *         ) | 
	 *         (subExpressions+=CompareOperation_OperatorExpression_1_0 operator=CompareOperator subExpressions+=NotOrValuedExpression) | 
	 *         (operator=BitwiseNotOperator subExpressions+=BitwiseNotExpression) | 
	 *         (operator=NotOperator subExpressions+=NotExpression) | 
	 *         (
	 *             subExpressions+=ShiftLeftExpression_OperatorExpression_1_0 
	 *             operator=ShiftLeftOperator 
	 *             subExpressions+=ShiftRightExpression 
	 *             subExpressions+=ShiftRightExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=ShiftRightExpression_OperatorExpression_1_0 
	 *             operator=ShiftRightOperator 
	 *             subExpressions+=ShiftRightUnsignedExpression 
	 *             subExpressions+=ShiftRightUnsignedExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=ShiftRightUnsignedExpression_OperatorExpression_1_0 
	 *             operator=ShiftRightUnsignedOperator 
	 *             subExpressions+=AddExpression 
	 *             subExpressions+=AddExpression*
	 *         ) | 
	 *         (subExpressions+=AddExpression_OperatorExpression_1_0 operator=AddOperator subExpressions+=SubExpression subExpressions+=SubExpression*) | 
	 *         (subExpressions+=SubExpression_OperatorExpression_1_0 operator=SubOperator subExpressions+=MultExpression subExpressions+=MultExpression*) | 
	 *         (subExpressions+=MultExpression_OperatorExpression_1_0 operator=MultOperator subExpressions+=DivExpression subExpressions+=DivExpression*) | 
	 *         (subExpressions+=DivExpression_OperatorExpression_1_0 operator=DivOperator subExpressions+=ModExpression subExpressions+=ModExpression*) | 
	 *         ((operator=PreOperator | operator=ValOperator) subExpressions+=ValuedObjectTestExpression)
	 *     )
	 */
	protected void sequence_AddExpression_BitwiseAndExpression_BitwiseNotExpression_BitwiseOrExpression_BitwiseXOrExpression_CompareOperation_DivExpression_LogicalAndExpression_LogicalOrExpression_MultExpression_NotExpression_ShiftLeftExpression_ShiftRightExpression_ShiftRightUnsignedExpression_SubExpression_ValuedObjectTestExpression(ISerializationContext context, OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Automaton returns Automaton
	 *
	 * Constraint:
	 *     (states+=AState states+=AState*)
	 */
	protected void sequence_Automaton(ISerializationContext context, Automaton semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ByNameStaticArg returns ByNameStaticArg
	 *
	 * Constraint:
	 *     ((name=ID type=ValueType) | (name=ID expr=Expression) | (name=ID nodeRef=NodeReference (staticArgs+=StaticArg staticArgs+=StaticArg*)?) | name=ID)
	 */
	protected void sequence_ByNameStaticArg(ISerializationContext context, ByNameStaticArg semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ClockedVariableDeclaration returns ClockedVariableDeclaration
	 *
	 * Constraint:
	 *     (vardecl=VariableDeclaration clockExpr=BoolExpression?)
	 */
	protected void sequence_ClockedVariableDeclaration(ISerializationContext context, ClockedVariableDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Assertion returns OperatorExpression
	 *     ModExpression returns OperatorExpression
	 *     ModExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     IntDivExpression returns OperatorExpression
	 *     NegExpression returns OperatorExpression
	 *     FBYExpression returns OperatorExpression
	 *     WhenExpression returns OperatorExpression
	 *     CurrentExpression returns OperatorExpression
	 *     PreExpression returns OperatorExpression
	 *     BoolExpression returns OperatorExpression
	 *     InitExpression returns OperatorExpression
	 *     TernaryOperation returns OperatorExpression
	 *     ImpliesExpression returns OperatorExpression
	 *     ImpliesExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     LogicalXorExpression returns OperatorExpression
	 *     LogicalXorExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     Root returns OperatorExpression
	 *     Expression returns OperatorExpression
	 *     LogicalOrExpression returns OperatorExpression
	 *     LogicalOrExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     LogicalAndExpression returns OperatorExpression
	 *     LogicalAndExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     BitwiseOrExpression returns OperatorExpression
	 *     BitwiseOrExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     BitwiseXOrExpression returns OperatorExpression
	 *     BitwiseXOrExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     BitwiseAndExpression returns OperatorExpression
	 *     BitwiseAndExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     CompareOperation returns OperatorExpression
	 *     CompareOperation.OperatorExpression_1_0 returns OperatorExpression
	 *     NotOrValuedExpression returns OperatorExpression
	 *     BitwiseNotExpression returns OperatorExpression
	 *     NotExpression returns OperatorExpression
	 *     ValuedExpression returns OperatorExpression
	 *     ShiftLeftExpression returns OperatorExpression
	 *     ShiftLeftExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     ShiftRightExpression returns OperatorExpression
	 *     ShiftRightExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     ShiftRightUnsignedExpression returns OperatorExpression
	 *     ShiftRightUnsignedExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     AddExpression returns OperatorExpression
	 *     AddExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     SubExpression returns OperatorExpression
	 *     SubExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     MultExpression returns OperatorExpression
	 *     MultExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     DivExpression returns OperatorExpression
	 *     DivExpression.OperatorExpression_1_0 returns OperatorExpression
	 *     AtomicExpression returns OperatorExpression
	 *     AtomicValuedExpression returns OperatorExpression
	 *     VectorValueMember returns OperatorExpression
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             subExpressions+=ModExpression_OperatorExpression_1_0 
	 *             operator=ModOperator 
	 *             subExpressions+=AtomicValuedExpression 
	 *             subExpressions+=AtomicValuedExpression*
	 *         ) | 
	 *         (subExpressions+=NegExpression operator=IntDivOperator subExpressions+=NegExpression) | 
	 *         (operator=SubOperator subExpressions+=NegExpression) | 
	 *         (subExpressions+=AtomicValuedExpression operator=FBYOperator subExpressions+=AtomicValuedExpression) | 
	 *         (subExpressions+=AtomicValuedExpression operator=WhenOperator subExpressions+=AtomicValuedExpression) | 
	 *         (operator=CurrentOperator subExpressions+=AtomicValuedExpression) | 
	 *         (operator=PreOperator subExpressions+=AtomicValuedExpression) | 
	 *         (subExpressions+=TernaryOperation operator=InitOperator subExpressions+=TernaryOperation) | 
	 *         (operator=ConditionalOperator subExpressions+=BoolExpression subExpressions+=ImpliesExpression subExpressions+=ImpliesExpression) | 
	 *         (
	 *             subExpressions+=ImpliesExpression_OperatorExpression_1_0 
	 *             operator=LogicalXorOperator 
	 *             subExpressions+=LogicalXorExpression 
	 *             subExpressions+=LogicalXorExpression*
	 *         ) | 
	 *         (
	 *             subExpressions+=LogicalXorExpression_OperatorExpression_1_0 
	 *             operator=LogicalXorOperator 
	 *             subExpressions+=LogicalOrExpression 
	 *             subExpressions+=LogicalOrExpression*
	 *         )
	 *     )
	 */
	protected void sequence_CurrentExpression_FBYExpression_ImpliesExpression_InitExpression_IntDivExpression_LogicalXorExpression_ModExpression_NegExpression_PreExpression_TernaryOperation_WhenExpression(ISerializationContext context, de.cau.cs.kieler.lustre.lustre.OperatorExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Equation returns Assignment
	 *
	 * Constraint:
	 *     (reference=ValuedObjectReference operator=AssignOperator expression=Expression)
	 */
	protected void sequence_Equation(ISerializationContext context, Assignment semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, KEffectsPackage.Literals.ASSIGNMENT__REFERENCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KEffectsPackage.Literals.ASSIGNMENT__REFERENCE));
			if (transientValues.isValueTransient(semanticObject, KEffectsPackage.Literals.ASSIGNMENT__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KEffectsPackage.Literals.ASSIGNMENT__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, KEffectsPackage.Literals.ASSIGNMENT__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KEffectsPackage.Literals.ASSIGNMENT__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEquationAccess().getReferenceValuedObjectReferenceParserRuleCall_0_0(), semanticObject.getReference());
		feeder.accept(grammarAccess.getEquationAccess().getOperatorAssignOperatorEnumRuleCall_1_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getEquationAccess().getExpressionExpressionParserRuleCall_2_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ExternalNodeDeclaration returns ExternalNodeDeclaration
	 *
	 * Constraint:
	 *     (isUnsafe?='unsafe'? hasState?='node'? name=ID input=Params output=Params)
	 */
	protected void sequence_ExternalNodeDeclaration(ISerializationContext context, ExternalNodeDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LustreProgram returns LustreProgram
	 *
	 * Constraint:
	 *     (includes+=Include* (packBody=PackBody | packList=PackList))
	 */
	protected void sequence_LustreProgram(ISerializationContext context, LustreProgram semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ModelDeclaration returns ModelDeclaration
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         (usesIds+=ID usesIds+=ID*)? 
	 *         needsParams+=StaticParam 
	 *         needsParams+=StaticParam* 
	 *         (provisions+=Provide provisions+=Provide*)? 
	 *         body=PackBody
	 *     )
	 */
	protected void sequence_ModelDeclaration(ISerializationContext context, ModelDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NodeDeclaration returns NodeDeclaration
	 *
	 * Constraint:
	 *     (
	 *         isUnsafe?='unsafe'? 
	 *         hasState?='node'? 
	 *         name=ID 
	 *         (staticParams+=StaticParam staticParams+=StaticParam*)? 
	 *         (
	 *             (
	 *                 input=Params 
	 *                 output=Params 
	 *                 (
	 *                     (effectiveNode=NodeReference (staticArgs+=StaticArg staticArgs+=StaticArg*)?) | 
	 *                     (
	 *                         (
	 *                             (constants+=VariableDeclaration constants+=VariableDeclaration*) | 
	 *                             (variables+=ClockedVariableDeclaration variables+=ClockedVariableDeclaration*)
	 *                         )* 
	 *                         (equations+=Equation | assertions+=Assertion | automatons+=Automaton)*
	 *                     )
	 *                 )
	 *             ) | 
	 *             (effectiveNode=NodeReference (staticArgs+=StaticArg staticArgs+=StaticArg*)?)
	 *         )
	 *     )
	 */
	protected void sequence_NodeDeclaration(ISerializationContext context, NodeDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PackBody returns PackBody
	 *
	 * Constraint:
	 *     ((constants+=VariableDeclaration constants+=VariableDeclaration*) | externals+=ExternalNodeDeclaration | nodes+=NodeDeclaration)+
	 */
	protected void sequence_PackBody(ISerializationContext context, PackBody semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PackList returns PackList
	 *
	 * Constraint:
	 *     (modelDeclarations+=ModelDeclaration | packageDeclarations+=PackageDeclaration | packageEquations+=PackageEquation)+
	 */
	protected void sequence_PackList(ISerializationContext context, PackList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PackageDeclaration returns PackageDeclaration
	 *
	 * Constraint:
	 *     (name=ID (usesIds+=ID usesIds+=ID*)? (provisions+=Provide provisions+=Provide*)? body=PackBody)
	 */
	protected void sequence_PackageDeclaration(ISerializationContext context, PackageDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PackageEquation returns PackageEquation
	 *
	 * Constraint:
	 *     (name=ID eqOrIs=ID byNameStaticArgs+=ByNameStaticArg byNameStaticArgs+=ByNameStaticArg*)
	 */
	protected void sequence_PackageEquation(ISerializationContext context, PackageEquation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Params returns Params
	 *
	 * Constraint:
	 *     (parameter+=ClockedVariableDeclaration parameter+=ClockedVariableDeclaration*)?
	 */
	protected void sequence_Params(ISerializationContext context, Params semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Provide returns Provide
	 *
	 * Constraint:
	 *     (
	 *         (name=ID type=ValueType value=Expression?) | 
	 *         types=TypeDeclaration | 
	 *         (name=ID (staticParams+=StaticParam staticParams+=StaticParam*)? input=Params output=Params)
	 *     )
	 */
	protected void sequence_Provide(ISerializationContext context, Provide semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StaticArg returns StaticArg
	 *
	 * Constraint:
	 *     (type=ValueType | expr=Expression | (name=NodeReference (staticArgs+=StaticArg staticArgs+=StaticArg*)?))
	 */
	protected void sequence_StaticArg(ISerializationContext context, StaticArg semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StaticParam returns StaticParam
	 *
	 * Constraint:
	 *     (name=ID | (name=ID type=ValueType) | (name=ID nodeInput=Params nodeOutput=Params))
	 */
	protected void sequence_StaticParam(ISerializationContext context, StaticParam semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypeDeclaration returns TypeDeclaration
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         (types=ValueType | (type=EnumType enums+=PrimeID enums+=PrimeID*) | (type=StructType variables=VariableDeclaration values+=VariableDeclaration*))?
	 *     )
	 */
	protected void sequence_TypeDeclaration(ISerializationContext context, TypeDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VariableDeclaration returns VariableDeclaration
	 *     Declaration returns VariableDeclaration
	 *
	 * Constraint:
	 *     (valuedObjects+=ValuedObject valuedObjects+=ValuedObject* type=ValueType)
	 */
	protected void sequence_VariableDeclaration(ISerializationContext context, VariableDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
