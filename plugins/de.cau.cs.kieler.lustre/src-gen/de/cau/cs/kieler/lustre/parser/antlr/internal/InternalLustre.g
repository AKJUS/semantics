/*
 * generated by Xtext
 */
grammar InternalLustre;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
}

@lexer::header {
package de.cau.cs.kieler.lustre.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.cau.cs.kieler.lustre.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.cau.cs.kieler.lustre.services.LustreGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/

 	private LustreGrammarAccess grammarAccess;

    public InternalLustreParser(TokenStream input, LustreGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "LustreProgram";
   	}

   	@Override
   	protected LustreGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleLustreProgram
entryRuleLustreProgram returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_LUSTRE_COMMENT");
}:
	{ newCompositeNode(grammarAccess.getLustreProgramRule()); }
	iv_ruleLustreProgram=ruleLustreProgram
	{ $current=$iv_ruleLustreProgram.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule LustreProgram
ruleLustreProgram returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_LUSTRE_COMMENT");
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getLustreProgramAccess().getIncludesIncludeParserRuleCall_0_0());
				}
				lv_includes_0_0=ruleInclude
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLustreProgramRule());
					}
					add(
						$current,
						"includes",
						lv_includes_0_0,
						"de.cau.cs.kieler.lustre.Lustre.Include");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getLustreProgramAccess().getPackBodyPackBodyParserRuleCall_1_0_0());
					}
					lv_packBody_1_0=rulePackBody
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLustreProgramRule());
						}
						set(
							$current,
							"packBody",
							lv_packBody_1_0,
							"de.cau.cs.kieler.lustre.Lustre.PackBody");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getLustreProgramAccess().getPackListPackListParserRuleCall_1_1_0());
					}
					lv_packList_2_0=rulePackList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLustreProgramRule());
						}
						set(
							$current,
							"packList",
							lv_packList_2_0,
							"de.cau.cs.kieler.lustre.Lustre.PackList");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleInclude
entryRuleInclude returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIncludeRule()); }
	iv_ruleInclude=ruleInclude
	{ $current=$iv_ruleInclude.current.getText(); }
	EOF;

// Rule Include
ruleInclude returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='include'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getIncludeAccess().getIncludeKeyword_0());
		}
		this_STRING_CONSTANT_1=RULE_STRING_CONSTANT
		{
			$current.merge(this_STRING_CONSTANT_1);
		}
		{
			newLeafNode(this_STRING_CONSTANT_1, grammarAccess.getIncludeAccess().getSTRING_CONSTANTTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRulePackBody
entryRulePackBody returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPackBodyRule()); }
	iv_rulePackBody=rulePackBody
	{ $current=$iv_rulePackBody.current; }
	EOF;

// Rule PackBody
rulePackBody returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPackBodyAccess().getConstantsConstantsDeclarationParserRuleCall_0_0());
				}
				lv_constants_0_0=ruleConstantsDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPackBodyRule());
					}
					add(
						$current,
						"constants",
						lv_constants_0_0,
						"de.cau.cs.kieler.lustre.Lustre.ConstantsDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			otherlv_1='type'
			{
				newLeafNode(otherlv_1, grammarAccess.getPackBodyAccess().getTypeKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPackBodyAccess().getTypesTypeDeclarationParserRuleCall_1_1_0());
					}
					lv_types_2_0=ruleTypeDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPackBodyRule());
						}
						add(
							$current,
							"types",
							lv_types_2_0,
							"de.cau.cs.kieler.lustre.Lustre.TypeDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)+
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPackBodyAccess().getExternalsExternalNodeDeclarationParserRuleCall_2_0());
				}
				lv_externals_3_0=ruleExternalNodeDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPackBodyRule());
					}
					add(
						$current,
						"externals",
						lv_externals_3_0,
						"de.cau.cs.kieler.lustre.Lustre.ExternalNodeDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPackBodyAccess().getNodesNodeDeclarationParserRuleCall_3_0());
				}
				lv_nodes_4_0=ruleNodeDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPackBodyRule());
					}
					add(
						$current,
						"nodes",
						lv_nodes_4_0,
						"de.cau.cs.kieler.lustre.Lustre.NodeDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)+
;

// Entry rule entryRuleConstantsDeclaration
entryRuleConstantsDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstantsDeclarationRule()); }
	iv_ruleConstantsDeclaration=ruleConstantsDeclaration
	{ $current=$iv_ruleConstantsDeclaration.current; }
	EOF;

// Rule ConstantsDeclaration
ruleConstantsDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='const'
		{
			newLeafNode(otherlv_0, grammarAccess.getConstantsDeclarationAccess().getConstKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConstantsDeclarationAccess().getConstantsLustreTypedValuedIdsParserRuleCall_1_0());
				}
				lv_constants_1_0=ruleLustreTypedValuedIds
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstantsDeclarationRule());
					}
					add(
						$current,
						"constants",
						lv_constants_1_0,
						"de.cau.cs.kieler.lustre.Lustre.LustreTypedValuedIds");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getConstantsDeclarationAccess().getSemicolonKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getConstantsDeclarationAccess().getConstantsLustreTypedValuedIdsParserRuleCall_3_0_0());
					}
					lv_constants_3_0=ruleLustreTypedValuedIds
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConstantsDeclarationRule());
						}
						add(
							$current,
							"constants",
							lv_constants_3_0,
							"de.cau.cs.kieler.lustre.Lustre.LustreTypedValuedIds");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=';'
			{
				newLeafNode(otherlv_4, grammarAccess.getConstantsDeclarationAccess().getSemicolonKeyword_3_1());
			}
		)*
	)
;

// Entry rule entryRuleTypeDeclaration
entryRuleTypeDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeDeclarationRule()); }
	iv_ruleTypeDeclaration=ruleTypeDeclaration
	{ $current=$iv_ruleTypeDeclaration.current; }
	EOF;

// Rule TypeDeclaration
ruleTypeDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_IDENT
				{
					newLeafNode(lv_name_0_0, grammarAccess.getTypeDeclarationAccess().getNameIDENTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTypeDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"de.cau.cs.kieler.lustre.Lustre.IDENT");
				}
			)
		)
		(
			otherlv_1='='
			{
				newLeafNode(otherlv_1, grammarAccess.getTypeDeclarationAccess().getEqualsSignKeyword_1_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getTypeDeclarationAccess().getTypesTypeParserRuleCall_1_1_0_0());
						}
						lv_types_2_0=ruleType
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTypeDeclarationRule());
							}
							set(
								$current,
								"types",
								lv_types_2_0,
								"de.cau.cs.kieler.lustre.Lustre.Type");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getTypeDeclarationAccess().getEnumsEnumTypeParserRuleCall_1_1_1_0());
						}
						lv_enums_3_0=ruleEnumType
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTypeDeclarationRule());
							}
							set(
								$current,
								"enums",
								lv_enums_3_0,
								"de.cau.cs.kieler.lustre.Lustre.EnumType");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getTypeDeclarationAccess().getStructStructTypeParserRuleCall_1_1_2_0());
						}
						lv_struct_4_0=ruleStructType
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTypeDeclarationRule());
							}
							set(
								$current,
								"struct",
								lv_struct_4_0,
								"de.cau.cs.kieler.lustre.Lustre.StructType");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)?
		otherlv_5=';'
		{
			newLeafNode(otherlv_5, grammarAccess.getTypeDeclarationAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleType
entryRuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current; }
	EOF;

// Rule Type
ruleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_name_0_0='bool'
					{
						newLeafNode(lv_name_0_0, grammarAccess.getTypeAccess().getNameBoolKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTypeRule());
						}
						setWithLastConsumed($current, "name", lv_name_0_0, "bool");
					}
				)
			)
			    |
			(
				(
					lv_name_1_0='int'
					{
						newLeafNode(lv_name_1_0, grammarAccess.getTypeAccess().getNameIntKeyword_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTypeRule());
						}
						setWithLastConsumed($current, "name", lv_name_1_0, "int");
					}
				)
			)
			    |
			(
				(
					lv_name_2_0='real'
					{
						newLeafNode(lv_name_2_0, grammarAccess.getTypeAccess().getNameRealKeyword_0_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTypeRule());
						}
						setWithLastConsumed($current, "name", lv_name_2_0, "real");
					}
				)
			)
			    |
			(
				(
					lv_name_3_0=RULE_IDENT
					{
						newLeafNode(lv_name_3_0, grammarAccess.getTypeAccess().getNameIDENTTerminalRuleCall_0_3_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTypeRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_3_0,
							"de.cau.cs.kieler.lustre.Lustre.IDENT");
					}
				)
			)
		)
		(
			otherlv_4='^'
			{
				newLeafNode(otherlv_4, grammarAccess.getTypeAccess().getCircumflexAccentKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTypeAccess().getArraySizeLustreExpressionParserRuleCall_1_1_0());
					}
					lv_arraySize_5_0=ruleLustreExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypeRule());
						}
						add(
							$current,
							"arraySize",
							lv_arraySize_5_0,
							"de.cau.cs.kieler.lustre.Lustre.LustreExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleEnumType
entryRuleEnumType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnumTypeRule()); }
	iv_ruleEnumType=ruleEnumType
	{ $current=$iv_ruleEnumType.current; }
	EOF;

// Rule EnumType
ruleEnumType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='enum'
		{
			newLeafNode(otherlv_0, grammarAccess.getEnumTypeAccess().getEnumKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getEnumTypeAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				lv_values_2_0=RULE_IDENT
				{
					newLeafNode(lv_values_2_0, grammarAccess.getEnumTypeAccess().getValuesIDENTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEnumTypeRule());
					}
					addWithLastConsumed(
						$current,
						"values",
						lv_values_2_0,
						"de.cau.cs.kieler.lustre.Lustre.IDENT");
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getEnumTypeAccess().getCommaKeyword_3_0());
			}
			(
				(
					lv_values_4_0=RULE_IDENT
					{
						newLeafNode(lv_values_4_0, grammarAccess.getEnumTypeAccess().getValuesIDENTTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEnumTypeRule());
						}
						addWithLastConsumed(
							$current,
							"values",
							lv_values_4_0,
							"de.cau.cs.kieler.lustre.Lustre.IDENT");
					}
				)
			)
		)*
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getEnumTypeAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleStructType
entryRuleStructType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStructTypeRule()); }
	iv_ruleStructType=ruleStructType
	{ $current=$iv_ruleStructType.current; }
	EOF;

// Rule StructType
ruleStructType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='struct'
			{
				newLeafNode(otherlv_0, grammarAccess.getStructTypeAccess().getStructKeyword_0());
			}
		)?
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getStructTypeAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStructTypeAccess().getElementsLustreTypedValuedIdsParserRuleCall_2_0());
				}
				lv_elements_2_0=ruleLustreTypedValuedIds
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStructTypeRule());
					}
					add(
						$current,
						"elements",
						lv_elements_2_0,
						"de.cau.cs.kieler.lustre.Lustre.LustreTypedValuedIds");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=';'
			{
				newLeafNode(otherlv_3, grammarAccess.getStructTypeAccess().getSemicolonKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStructTypeAccess().getElementsLustreTypedValuedIdsParserRuleCall_3_1_0());
					}
					lv_elements_4_0=ruleLustreTypedValuedIds
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStructTypeRule());
						}
						add(
							$current,
							"elements",
							lv_elements_4_0,
							"de.cau.cs.kieler.lustre.Lustre.LustreTypedValuedIds");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			otherlv_5=';'
			{
				newLeafNode(otherlv_5, grammarAccess.getStructTypeAccess().getSemicolonKeyword_4());
			}
		)?
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getStructTypeAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleExternalNodeDeclaration
entryRuleExternalNodeDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExternalNodeDeclarationRule()); }
	iv_ruleExternalNodeDeclaration=ruleExternalNodeDeclaration
	{ $current=$iv_ruleExternalNodeDeclaration.current; }
	EOF;

// Rule ExternalNodeDeclaration
ruleExternalNodeDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_isUnsafe_0_0='unsafe'
				{
					newLeafNode(lv_isUnsafe_0_0, grammarAccess.getExternalNodeDeclarationAccess().getIsUnsafeUnsafeKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExternalNodeDeclarationRule());
					}
					setWithLastConsumed($current, "isUnsafe", true, "unsafe");
				}
			)
		)?
		otherlv_1='extern'
		{
			newLeafNode(otherlv_1, grammarAccess.getExternalNodeDeclarationAccess().getExternKeyword_1());
		}
		(
			otherlv_2='function'
			{
				newLeafNode(otherlv_2, grammarAccess.getExternalNodeDeclarationAccess().getFunctionKeyword_2_0());
			}
			    |
			(
				(
					lv_hasState_3_0='node'
					{
						newLeafNode(lv_hasState_3_0, grammarAccess.getExternalNodeDeclarationAccess().getHasStateNodeKeyword_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getExternalNodeDeclarationRule());
						}
						setWithLastConsumed($current, "hasState", true, "node");
					}
				)
			)
		)
		(
			(
				lv_name_4_0=RULE_IDENT
				{
					newLeafNode(lv_name_4_0, grammarAccess.getExternalNodeDeclarationAccess().getNameIDENTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExternalNodeDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_4_0,
						"de.cau.cs.kieler.lustre.Lustre.IDENT");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getExternalNodeDeclarationAccess().getInputParamsParserRuleCall_4_0());
				}
				lv_input_5_0=ruleParams
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExternalNodeDeclarationRule());
					}
					set(
						$current,
						"input",
						lv_input_5_0,
						"de.cau.cs.kieler.lustre.Lustre.Params");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='returns'
		{
			newLeafNode(otherlv_6, grammarAccess.getExternalNodeDeclarationAccess().getReturnsKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExternalNodeDeclarationAccess().getOutputParamsParserRuleCall_6_0());
				}
				lv_output_7_0=ruleParams
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExternalNodeDeclarationRule());
					}
					set(
						$current,
						"output",
						lv_output_7_0,
						"de.cau.cs.kieler.lustre.Lustre.Params");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_8=';'
			{
				newLeafNode(otherlv_8, grammarAccess.getExternalNodeDeclarationAccess().getSemicolonKeyword_7());
			}
		)?
	)
;

// Entry rule entryRuleNodeDeclaration
entryRuleNodeDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNodeDeclarationRule()); }
	iv_ruleNodeDeclaration=ruleNodeDeclaration
	{ $current=$iv_ruleNodeDeclaration.current; }
	EOF;

// Rule NodeDeclaration
ruleNodeDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_isUnsafe_0_0='unsafe'
				{
					newLeafNode(lv_isUnsafe_0_0, grammarAccess.getNodeDeclarationAccess().getIsUnsafeUnsafeKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNodeDeclarationRule());
					}
					setWithLastConsumed($current, "isUnsafe", true, "unsafe");
				}
			)
		)?
		(
			otherlv_1='function'
			{
				newLeafNode(otherlv_1, grammarAccess.getNodeDeclarationAccess().getFunctionKeyword_1_0());
			}
			    |
			(
				(
					lv_hasState_2_0='node'
					{
						newLeafNode(lv_hasState_2_0, grammarAccess.getNodeDeclarationAccess().getHasStateNodeKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNodeDeclarationRule());
						}
						setWithLastConsumed($current, "hasState", true, "node");
					}
				)
			)
		)
		(
			(
				lv_name_3_0=RULE_IDENT
				{
					newLeafNode(lv_name_3_0, grammarAccess.getNodeDeclarationAccess().getNameIDENTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNodeDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"de.cau.cs.kieler.lustre.Lustre.IDENT");
				}
			)
		)
		(
			otherlv_4='<<'
			{
				newLeafNode(otherlv_4, grammarAccess.getNodeDeclarationAccess().getLessThanSignLessThanSignKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getNodeDeclarationAccess().getStaticParamsStaticParamParserRuleCall_3_1_0());
					}
					lv_staticParams_5_0=ruleStaticParam
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNodeDeclarationRule());
						}
						add(
							$current,
							"staticParams",
							lv_staticParams_5_0,
							"de.cau.cs.kieler.lustre.Lustre.StaticParam");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_6=';'
				{
					newLeafNode(otherlv_6, grammarAccess.getNodeDeclarationAccess().getSemicolonKeyword_3_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getNodeDeclarationAccess().getStaticParamsStaticParamParserRuleCall_3_2_1_0());
						}
						lv_staticParams_7_0=ruleStaticParam
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getNodeDeclarationRule());
							}
							add(
								$current,
								"staticParams",
								lv_staticParams_7_0,
								"de.cau.cs.kieler.lustre.Lustre.StaticParam");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_8='>>'
			{
				newLeafNode(otherlv_8, grammarAccess.getNodeDeclarationAccess().getGreaterThanSignGreaterThanSignKeyword_3_3());
			}
		)?
		(
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getNodeDeclarationAccess().getInputParamsParserRuleCall_4_0_0_0());
						}
						lv_input_9_0=ruleParams
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getNodeDeclarationRule());
							}
							set(
								$current,
								"input",
								lv_input_9_0,
								"de.cau.cs.kieler.lustre.Lustre.Params");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_10='returns'
				{
					newLeafNode(otherlv_10, grammarAccess.getNodeDeclarationAccess().getReturnsKeyword_4_0_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getNodeDeclarationAccess().getOutputParamsParserRuleCall_4_0_2_0());
						}
						lv_output_11_0=ruleParams
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getNodeDeclarationRule());
							}
							set(
								$current,
								"output",
								lv_output_11_0,
								"de.cau.cs.kieler.lustre.Lustre.Params");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						otherlv_12='='
						{
							newLeafNode(otherlv_12, grammarAccess.getNodeDeclarationAccess().getEqualsSignKeyword_4_0_3_0_0());
						}
						(
							(
								{
									newCompositeNode(grammarAccess.getNodeDeclarationAccess().getEffectiveNodeIdentRefParserRuleCall_4_0_3_0_1_0());
								}
								lv_effectiveNode_13_0=ruleIdentRef
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getNodeDeclarationRule());
									}
									set(
										$current,
										"effectiveNode",
										lv_effectiveNode_13_0,
										"de.cau.cs.kieler.lustre.Lustre.IdentRef");
									afterParserOrEnumRuleCall();
								}
							)
						)
						(
							otherlv_14='<<'
							{
								newLeafNode(otherlv_14, grammarAccess.getNodeDeclarationAccess().getLessThanSignLessThanSignKeyword_4_0_3_0_2_0());
							}
							(
								(
									{
										newCompositeNode(grammarAccess.getNodeDeclarationAccess().getStaticArgsStaticArgParserRuleCall_4_0_3_0_2_1_0());
									}
									lv_staticArgs_15_0=ruleStaticArg
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getNodeDeclarationRule());
										}
										add(
											$current,
											"staticArgs",
											lv_staticArgs_15_0,
											"de.cau.cs.kieler.lustre.Lustre.StaticArg");
										afterParserOrEnumRuleCall();
									}
								)
							)
							(
								otherlv_16=';'
								{
									newLeafNode(otherlv_16, grammarAccess.getNodeDeclarationAccess().getSemicolonKeyword_4_0_3_0_2_2_0());
								}
								(
									(
										{
											newCompositeNode(grammarAccess.getNodeDeclarationAccess().getStaticArgsStaticArgParserRuleCall_4_0_3_0_2_2_1_0());
										}
										lv_staticArgs_17_0=ruleStaticArg
										{
											if ($current==null) {
												$current = createModelElementForParent(grammarAccess.getNodeDeclarationRule());
											}
											add(
												$current,
												"staticArgs",
												lv_staticArgs_17_0,
												"de.cau.cs.kieler.lustre.Lustre.StaticArg");
											afterParserOrEnumRuleCall();
										}
									)
								)
							)*
							otherlv_18='>>'
							{
								newLeafNode(otherlv_18, grammarAccess.getNodeDeclarationAccess().getGreaterThanSignGreaterThanSignKeyword_4_0_3_0_2_3());
							}
						)?
					)
					    |
					(
						(
							otherlv_19=';'
							{
								newLeafNode(otherlv_19, grammarAccess.getNodeDeclarationAccess().getSemicolonKeyword_4_0_3_1_0());
							}
						)?
						(
							(
								(
									{
										newCompositeNode(grammarAccess.getNodeDeclarationAccess().getConstantsConstantsDeclarationParserRuleCall_4_0_3_1_1_0_0());
									}
									lv_constants_20_0=ruleConstantsDeclaration
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getNodeDeclarationRule());
										}
										add(
											$current,
											"constants",
											lv_constants_20_0,
											"de.cau.cs.kieler.lustre.Lustre.ConstantsDeclaration");
										afterParserOrEnumRuleCall();
									}
								)
							)
							    |
							(
								otherlv_21='var'
								{
									newLeafNode(otherlv_21, grammarAccess.getNodeDeclarationAccess().getVarKeyword_4_0_3_1_1_1_0());
								}
								(
									(
										{
											newCompositeNode(grammarAccess.getNodeDeclarationAccess().getVariablesLustreClockedIdDeclarationParserRuleCall_4_0_3_1_1_1_1_0());
										}
										lv_variables_22_0=ruleLustreClockedIdDeclaration
										{
											if ($current==null) {
												$current = createModelElementForParent(grammarAccess.getNodeDeclarationRule());
											}
											add(
												$current,
												"variables",
												lv_variables_22_0,
												"de.cau.cs.kieler.lustre.Lustre.LustreClockedIdDeclaration");
											afterParserOrEnumRuleCall();
										}
									)
								)
								(
									otherlv_23=';'
									{
										newLeafNode(otherlv_23, grammarAccess.getNodeDeclarationAccess().getSemicolonKeyword_4_0_3_1_1_1_2_0());
									}
									(
										(
											{
												newCompositeNode(grammarAccess.getNodeDeclarationAccess().getVariablesLustreClockedIdDeclarationParserRuleCall_4_0_3_1_1_1_2_1_0());
											}
											lv_variables_24_0=ruleLustreClockedIdDeclaration
											{
												if ($current==null) {
													$current = createModelElementForParent(grammarAccess.getNodeDeclarationRule());
												}
												add(
													$current,
													"variables",
													lv_variables_24_0,
													"de.cau.cs.kieler.lustre.Lustre.LustreClockedIdDeclaration");
												afterParserOrEnumRuleCall();
											}
										)
									)
								)*
								otherlv_25=';'
								{
									newLeafNode(otherlv_25, grammarAccess.getNodeDeclarationAccess().getSemicolonKeyword_4_0_3_1_1_1_3());
								}
							)
						)*
						otherlv_26='let'
						{
							newLeafNode(otherlv_26, grammarAccess.getNodeDeclarationAccess().getLetKeyword_4_0_3_1_2());
						}
						(
							(
								(
									{
										newCompositeNode(grammarAccess.getNodeDeclarationAccess().getEquationsEquationParserRuleCall_4_0_3_1_3_0_0());
									}
									lv_equations_27_0=ruleEquation
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getNodeDeclarationRule());
										}
										add(
											$current,
											"equations",
											lv_equations_27_0,
											"de.cau.cs.kieler.lustre.Lustre.Equation");
										afterParserOrEnumRuleCall();
									}
								)
							)
							    |
							(
								(
									{
										newCompositeNode(grammarAccess.getNodeDeclarationAccess().getAssertionsAssertionParserRuleCall_4_0_3_1_3_1_0());
									}
									lv_assertions_28_0=ruleAssertion
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getNodeDeclarationRule());
										}
										add(
											$current,
											"assertions",
											lv_assertions_28_0,
											"de.cau.cs.kieler.lustre.Lustre.Assertion");
										afterParserOrEnumRuleCall();
									}
								)
							)
							    |
							(
								(
									{
										newCompositeNode(grammarAccess.getNodeDeclarationAccess().getAutomatonsAutomatonParserRuleCall_4_0_3_1_3_2_0());
									}
									lv_automatons_29_0=ruleAutomaton
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getNodeDeclarationRule());
										}
										add(
											$current,
											"automatons",
											lv_automatons_29_0,
											"de.cau.cs.kieler.lustre.Lustre.Automaton");
										afterParserOrEnumRuleCall();
									}
								)
							)
						)*
						otherlv_30='tel'
						{
							newLeafNode(otherlv_30, grammarAccess.getNodeDeclarationAccess().getTelKeyword_4_0_3_1_4());
						}
						(
							otherlv_31='.'
							{
								newLeafNode(otherlv_31, grammarAccess.getNodeDeclarationAccess().getFullStopKeyword_4_0_3_1_5_0());
							}
							    |
							(
								otherlv_32=';'
								{
									newLeafNode(otherlv_32, grammarAccess.getNodeDeclarationAccess().getSemicolonKeyword_4_0_3_1_5_1());
								}
							)?
						)
					)
				)
			)
			    |
			(
				otherlv_33='='
				{
					newLeafNode(otherlv_33, grammarAccess.getNodeDeclarationAccess().getEqualsSignKeyword_4_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getNodeDeclarationAccess().getEffectiveNodeIdentRefParserRuleCall_4_1_1_0());
						}
						lv_effectiveNode_34_0=ruleIdentRef
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getNodeDeclarationRule());
							}
							set(
								$current,
								"effectiveNode",
								lv_effectiveNode_34_0,
								"de.cau.cs.kieler.lustre.Lustre.IdentRef");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_35='<<'
					{
						newLeafNode(otherlv_35, grammarAccess.getNodeDeclarationAccess().getLessThanSignLessThanSignKeyword_4_1_2_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getNodeDeclarationAccess().getStaticArgsStaticArgParserRuleCall_4_1_2_1_0());
							}
							lv_staticArgs_36_0=ruleStaticArg
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getNodeDeclarationRule());
								}
								add(
									$current,
									"staticArgs",
									lv_staticArgs_36_0,
									"de.cau.cs.kieler.lustre.Lustre.StaticArg");
								afterParserOrEnumRuleCall();
							}
						)
					)
					(
						otherlv_37=';'
						{
							newLeafNode(otherlv_37, grammarAccess.getNodeDeclarationAccess().getSemicolonKeyword_4_1_2_2_0());
						}
						(
							(
								{
									newCompositeNode(grammarAccess.getNodeDeclarationAccess().getStaticArgsStaticArgParserRuleCall_4_1_2_2_1_0());
								}
								lv_staticArgs_38_0=ruleStaticArg
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getNodeDeclarationRule());
									}
									add(
										$current,
										"staticArgs",
										lv_staticArgs_38_0,
										"de.cau.cs.kieler.lustre.Lustre.StaticArg");
									afterParserOrEnumRuleCall();
								}
							)
						)
					)*
					otherlv_39='>>'
					{
						newLeafNode(otherlv_39, grammarAccess.getNodeDeclarationAccess().getGreaterThanSignGreaterThanSignKeyword_4_1_2_3());
					}
				)?
			)
		)
	)
;

// Entry rule entryRuleParams
entryRuleParams returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParamsRule()); }
	iv_ruleParams=ruleParams
	{ $current=$iv_ruleParams.current; }
	EOF;

// Rule Params
ruleParams returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getParamsAccess().getParamsAction_0(),
					$current);
			}
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getParamsAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getParamsAccess().getParameterLustreClockedIdDeclarationParserRuleCall_2_0_0());
					}
					lv_parameter_2_0=ruleLustreClockedIdDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getParamsRule());
						}
						add(
							$current,
							"parameter",
							lv_parameter_2_0,
							"de.cau.cs.kieler.lustre.Lustre.LustreClockedIdDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=';'
				{
					newLeafNode(otherlv_3, grammarAccess.getParamsAccess().getSemicolonKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getParamsAccess().getParameterLustreClockedIdDeclarationParserRuleCall_2_1_1_0());
						}
						lv_parameter_4_0=ruleLustreClockedIdDeclaration
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getParamsRule());
							}
							add(
								$current,
								"parameter",
								lv_parameter_4_0,
								"de.cau.cs.kieler.lustre.Lustre.LustreClockedIdDeclaration");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getParamsAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleStaticParam
entryRuleStaticParam returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStaticParamRule()); }
	iv_ruleStaticParam=ruleStaticParam
	{ $current=$iv_ruleStaticParam.current; }
	EOF;

// Rule StaticParam
ruleStaticParam returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='type'
			{
				newLeafNode(otherlv_0, grammarAccess.getStaticParamAccess().getTypeKeyword_0_0());
			}
			(
				(
					lv_name_1_0=RULE_IDENT
					{
						newLeafNode(lv_name_1_0, grammarAccess.getStaticParamAccess().getNameIDENTTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getStaticParamRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_1_0,
							"de.cau.cs.kieler.lustre.Lustre.IDENT");
					}
				)
			)
		)
		    |
		(
			otherlv_2='const'
			{
				newLeafNode(otherlv_2, grammarAccess.getStaticParamAccess().getConstKeyword_1_0());
			}
			(
				(
					lv_name_3_0=RULE_IDENT
					{
						newLeafNode(lv_name_3_0, grammarAccess.getStaticParamAccess().getNameIDENTTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getStaticParamRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_3_0,
							"de.cau.cs.kieler.lustre.Lustre.IDENT");
					}
				)
			)
			otherlv_4=':'
			{
				newLeafNode(otherlv_4, grammarAccess.getStaticParamAccess().getColonKeyword_1_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStaticParamAccess().getTypeTypeParserRuleCall_1_3_0());
					}
					lv_type_5_0=ruleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStaticParamRule());
						}
						set(
							$current,
							"type",
							lv_type_5_0,
							"de.cau.cs.kieler.lustre.Lustre.Type");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				otherlv_6='unsafe'
				{
					newLeafNode(otherlv_6, grammarAccess.getStaticParamAccess().getUnsafeKeyword_2_0());
				}
			)?
			(
				otherlv_7='node'
				{
					newLeafNode(otherlv_7, grammarAccess.getStaticParamAccess().getNodeKeyword_2_1_0());
				}
				    |
				otherlv_8='function'
				{
					newLeafNode(otherlv_8, grammarAccess.getStaticParamAccess().getFunctionKeyword_2_1_1());
				}
			)
			(
				(
					lv_name_9_0=RULE_IDENT
					{
						newLeafNode(lv_name_9_0, grammarAccess.getStaticParamAccess().getNameIDENTTerminalRuleCall_2_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getStaticParamRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_9_0,
							"de.cau.cs.kieler.lustre.Lustre.IDENT");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getStaticParamAccess().getNodeInputParamsParserRuleCall_2_3_0());
					}
					lv_nodeInput_10_0=ruleParams
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStaticParamRule());
						}
						set(
							$current,
							"nodeInput",
							lv_nodeInput_10_0,
							"de.cau.cs.kieler.lustre.Lustre.Params");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_11='returns'
			{
				newLeafNode(otherlv_11, grammarAccess.getStaticParamAccess().getReturnsKeyword_2_4());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStaticParamAccess().getNodeOutputParamsParserRuleCall_2_5_0());
					}
					lv_nodeOutput_12_0=ruleParams
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStaticParamRule());
						}
						set(
							$current,
							"nodeOutput",
							lv_nodeOutput_12_0,
							"de.cau.cs.kieler.lustre.Lustre.Params");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleStaticArg
entryRuleStaticArg returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStaticArgRule()); }
	iv_ruleStaticArg=ruleStaticArg
	{ $current=$iv_ruleStaticArg.current; }
	EOF;

// Rule StaticArg
ruleStaticArg returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='type'
			{
				newLeafNode(otherlv_0, grammarAccess.getStaticArgAccess().getTypeKeyword_0_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStaticArgAccess().getTypeTypeParserRuleCall_0_1_0());
					}
					lv_type_1_0=ruleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStaticArgRule());
						}
						set(
							$current,
							"type",
							lv_type_1_0,
							"de.cau.cs.kieler.lustre.Lustre.Type");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			otherlv_2='const'
			{
				newLeafNode(otherlv_2, grammarAccess.getStaticArgAccess().getConstKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStaticArgAccess().getExprLustreExpressionParserRuleCall_1_1_0());
					}
					lv_expr_3_0=ruleLustreExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStaticArgRule());
						}
						set(
							$current,
							"expr",
							lv_expr_3_0,
							"de.cau.cs.kieler.lustre.Lustre.LustreExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				otherlv_4='node'
				{
					newLeafNode(otherlv_4, grammarAccess.getStaticArgAccess().getNodeKeyword_2_0_0());
				}
				    |
				otherlv_5='function'
				{
					newLeafNode(otherlv_5, grammarAccess.getStaticArgAccess().getFunctionKeyword_2_0_1());
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getStaticArgAccess().getNameIdentRefParserRuleCall_2_1_0());
					}
					lv_name_6_0=ruleIdentRef
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStaticArgRule());
						}
						set(
							$current,
							"name",
							lv_name_6_0,
							"de.cau.cs.kieler.lustre.Lustre.IdentRef");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_7='<<'
				{
					newLeafNode(otherlv_7, grammarAccess.getStaticArgAccess().getLessThanSignLessThanSignKeyword_2_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getStaticArgAccess().getStaticArgsStaticArgParserRuleCall_2_2_1_0());
						}
						lv_staticArgs_8_0=ruleStaticArg
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getStaticArgRule());
							}
							add(
								$current,
								"staticArgs",
								lv_staticArgs_8_0,
								"de.cau.cs.kieler.lustre.Lustre.StaticArg");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						otherlv_9=';'
						{
							newLeafNode(otherlv_9, grammarAccess.getStaticArgAccess().getSemicolonKeyword_2_2_2_0_0());
						}
						    |
						otherlv_10=','
						{
							newLeafNode(otherlv_10, grammarAccess.getStaticArgAccess().getCommaKeyword_2_2_2_0_1());
						}
					)
					(
						(
							{
								newCompositeNode(grammarAccess.getStaticArgAccess().getStaticArgsStaticArgParserRuleCall_2_2_2_1_0());
							}
							lv_staticArgs_11_0=ruleStaticArg
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getStaticArgRule());
								}
								add(
									$current,
									"staticArgs",
									lv_staticArgs_11_0,
									"de.cau.cs.kieler.lustre.Lustre.StaticArg");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
				otherlv_12='>>'
				{
					newLeafNode(otherlv_12, grammarAccess.getStaticArgAccess().getGreaterThanSignGreaterThanSignKeyword_2_2_3());
				}
			)?
		)
	)
;

// Entry rule entryRuleByNameStaticArg
entryRuleByNameStaticArg returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getByNameStaticArgRule()); }
	iv_ruleByNameStaticArg=ruleByNameStaticArg
	{ $current=$iv_ruleByNameStaticArg.current; }
	EOF;

// Rule ByNameStaticArg
ruleByNameStaticArg returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='type'
			{
				newLeafNode(otherlv_0, grammarAccess.getByNameStaticArgAccess().getTypeKeyword_0_0());
			}
			(
				(
					lv_name_1_0=RULE_IDENT
					{
						newLeafNode(lv_name_1_0, grammarAccess.getByNameStaticArgAccess().getNameIDENTTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getByNameStaticArgRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_1_0,
							"de.cau.cs.kieler.lustre.Lustre.IDENT");
					}
				)
			)
			otherlv_2='='
			{
				newLeafNode(otherlv_2, grammarAccess.getByNameStaticArgAccess().getEqualsSignKeyword_0_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getByNameStaticArgAccess().getTypeTypeParserRuleCall_0_3_0());
					}
					lv_type_3_0=ruleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getByNameStaticArgRule());
						}
						set(
							$current,
							"type",
							lv_type_3_0,
							"de.cau.cs.kieler.lustre.Lustre.Type");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			otherlv_4='const'
			{
				newLeafNode(otherlv_4, grammarAccess.getByNameStaticArgAccess().getConstKeyword_1_0());
			}
			(
				(
					lv_name_5_0=RULE_IDENT
					{
						newLeafNode(lv_name_5_0, grammarAccess.getByNameStaticArgAccess().getNameIDENTTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getByNameStaticArgRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_5_0,
							"de.cau.cs.kieler.lustre.Lustre.IDENT");
					}
				)
			)
			otherlv_6='='
			{
				newLeafNode(otherlv_6, grammarAccess.getByNameStaticArgAccess().getEqualsSignKeyword_1_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getByNameStaticArgAccess().getExprLustreExpressionParserRuleCall_1_3_0());
					}
					lv_expr_7_0=ruleLustreExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getByNameStaticArgRule());
						}
						set(
							$current,
							"expr",
							lv_expr_7_0,
							"de.cau.cs.kieler.lustre.Lustre.LustreExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				otherlv_8='function'
				{
					newLeafNode(otherlv_8, grammarAccess.getByNameStaticArgAccess().getFunctionKeyword_2_0_0());
				}
				    |
				otherlv_9='node'
				{
					newLeafNode(otherlv_9, grammarAccess.getByNameStaticArgAccess().getNodeKeyword_2_0_1());
				}
			)
			(
				(
					lv_name_10_0=RULE_IDENT
					{
						newLeafNode(lv_name_10_0, grammarAccess.getByNameStaticArgAccess().getNameIDENTTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getByNameStaticArgRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_10_0,
							"de.cau.cs.kieler.lustre.Lustre.IDENT");
					}
				)
			)
			otherlv_11='='
			{
				newLeafNode(otherlv_11, grammarAccess.getByNameStaticArgAccess().getEqualsSignKeyword_2_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getByNameStaticArgAccess().getNodeRefIdentRefParserRuleCall_2_3_0());
					}
					lv_nodeRef_12_0=ruleIdentRef
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getByNameStaticArgRule());
						}
						set(
							$current,
							"nodeRef",
							lv_nodeRef_12_0,
							"de.cau.cs.kieler.lustre.Lustre.IdentRef");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_13='<<'
				{
					newLeafNode(otherlv_13, grammarAccess.getByNameStaticArgAccess().getLessThanSignLessThanSignKeyword_2_4_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getByNameStaticArgAccess().getStaticArgsStaticArgParserRuleCall_2_4_1_0());
						}
						lv_staticArgs_14_0=ruleStaticArg
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getByNameStaticArgRule());
							}
							add(
								$current,
								"staticArgs",
								lv_staticArgs_14_0,
								"de.cau.cs.kieler.lustre.Lustre.StaticArg");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						otherlv_15=';'
						{
							newLeafNode(otherlv_15, grammarAccess.getByNameStaticArgAccess().getSemicolonKeyword_2_4_2_0_0());
						}
						    |
						otherlv_16=','
						{
							newLeafNode(otherlv_16, grammarAccess.getByNameStaticArgAccess().getCommaKeyword_2_4_2_0_1());
						}
					)
					(
						(
							{
								newCompositeNode(grammarAccess.getByNameStaticArgAccess().getStaticArgsStaticArgParserRuleCall_2_4_2_1_0());
							}
							lv_staticArgs_17_0=ruleStaticArg
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getByNameStaticArgRule());
								}
								add(
									$current,
									"staticArgs",
									lv_staticArgs_17_0,
									"de.cau.cs.kieler.lustre.Lustre.StaticArg");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
				otherlv_18='>>'
				{
					newLeafNode(otherlv_18, grammarAccess.getByNameStaticArgAccess().getGreaterThanSignGreaterThanSignKeyword_2_4_3());
				}
			)?
		)
		    |
		(
			(
				(
					lv_name_19_0=RULE_IDENT
					{
						newLeafNode(lv_name_19_0, grammarAccess.getByNameStaticArgAccess().getNameIDENTTerminalRuleCall_3_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getByNameStaticArgRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_19_0,
							"de.cau.cs.kieler.lustre.Lustre.IDENT");
					}
				)
			)
			otherlv_20='='
			{
				newLeafNode(otherlv_20, grammarAccess.getByNameStaticArgAccess().getEqualsSignKeyword_3_1());
			}
		)
	)
;

// Entry rule entryRuleLustreTypedId
entryRuleLustreTypedId returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLustreTypedIdRule()); }
	iv_ruleLustreTypedId=ruleLustreTypedId
	{ $current=$iv_ruleLustreTypedId.current; }
	EOF;

// Rule LustreTypedId
ruleLustreTypedId returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_variableNames_0_0=RULE_IDENT
				{
					newLeafNode(lv_variableNames_0_0, grammarAccess.getLustreTypedIdAccess().getVariableNamesIDENTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLustreTypedIdRule());
					}
					addWithLastConsumed(
						$current,
						"variableNames",
						lv_variableNames_0_0,
						"de.cau.cs.kieler.lustre.Lustre.IDENT");
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getLustreTypedIdAccess().getCommaKeyword_1_0());
			}
			(
				(
					lv_variableNames_2_0=RULE_IDENT
					{
						newLeafNode(lv_variableNames_2_0, grammarAccess.getLustreTypedIdAccess().getVariableNamesIDENTTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLustreTypedIdRule());
						}
						addWithLastConsumed(
							$current,
							"variableNames",
							lv_variableNames_2_0,
							"de.cau.cs.kieler.lustre.Lustre.IDENT");
					}
				)
			)
		)*
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getLustreTypedIdAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLustreTypedIdAccess().getTypeTypeParserRuleCall_3_0());
				}
				lv_type_4_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLustreTypedIdRule());
					}
					set(
						$current,
						"type",
						lv_type_4_0,
						"de.cau.cs.kieler.lustre.Lustre.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleLustreTypedValuedIds
entryRuleLustreTypedValuedIds returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLustreTypedValuedIdsRule()); }
	iv_ruleLustreTypedValuedIds=ruleLustreTypedValuedIds
	{ $current=$iv_ruleLustreTypedValuedIds.current; }
	EOF;

// Rule LustreTypedValuedIds
ruleLustreTypedValuedIds returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_variableNames_0_0=RULE_IDENT
				{
					newLeafNode(lv_variableNames_0_0, grammarAccess.getLustreTypedValuedIdsAccess().getVariableNamesIDENTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLustreTypedValuedIdsRule());
					}
					addWithLastConsumed(
						$current,
						"variableNames",
						lv_variableNames_0_0,
						"de.cau.cs.kieler.lustre.Lustre.IDENT");
				}
			)
		)
		(
			(
				(
					otherlv_1=','
					{
						newLeafNode(otherlv_1, grammarAccess.getLustreTypedValuedIdsAccess().getCommaKeyword_1_0_0_0());
					}
					(
						(
							lv_variableNames_2_0=RULE_IDENT
							{
								newLeafNode(lv_variableNames_2_0, grammarAccess.getLustreTypedValuedIdsAccess().getVariableNamesIDENTTerminalRuleCall_1_0_0_1_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getLustreTypedValuedIdsRule());
								}
								addWithLastConsumed(
									$current,
									"variableNames",
									lv_variableNames_2_0,
									"de.cau.cs.kieler.lustre.Lustre.IDENT");
							}
						)
					)
				)*
				otherlv_3=':'
				{
					newLeafNode(otherlv_3, grammarAccess.getLustreTypedValuedIdsAccess().getColonKeyword_1_0_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getLustreTypedValuedIdsAccess().getTypeTypeParserRuleCall_1_0_2_0());
						}
						lv_type_4_0=ruleType
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getLustreTypedValuedIdsRule());
							}
							set(
								$current,
								"type",
								lv_type_4_0,
								"de.cau.cs.kieler.lustre.Lustre.Type");
							afterParserOrEnumRuleCall();
						}
					)
				)?
				(
					otherlv_5='='
					{
						newLeafNode(otherlv_5, grammarAccess.getLustreTypedValuedIdsAccess().getEqualsSignKeyword_1_0_3_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getLustreTypedValuedIdsAccess().getValueLustreExpressionParserRuleCall_1_0_3_1_0());
							}
							lv_value_6_0=ruleLustreExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getLustreTypedValuedIdsRule());
								}
								set(
									$current,
									"value",
									lv_value_6_0,
									"de.cau.cs.kieler.lustre.Lustre.LustreExpression");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)?
			)
			    |
			(
				otherlv_7='='
				{
					newLeafNode(otherlv_7, grammarAccess.getLustreTypedValuedIdsAccess().getEqualsSignKeyword_1_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getLustreTypedValuedIdsAccess().getValueLustreExpressionParserRuleCall_1_1_1_0());
						}
						lv_value_8_0=ruleLustreExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getLustreTypedValuedIdsRule());
							}
							set(
								$current,
								"value",
								lv_value_8_0,
								"de.cau.cs.kieler.lustre.Lustre.LustreExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)
	)
;

// Entry rule entryRuleLustreClockedIdDeclaration
entryRuleLustreClockedIdDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLustreClockedIdDeclarationRule()); }
	iv_ruleLustreClockedIdDeclaration=ruleLustreClockedIdDeclaration
	{ $current=$iv_ruleLustreClockedIdDeclaration.current; }
	EOF;

// Rule LustreClockedIdDeclaration
ruleLustreClockedIdDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getLustreClockedIdDeclarationAccess().getTypedIdsLustreTypedIdParserRuleCall_0_0_0());
					}
					lv_typedIds_0_0=ruleLustreTypedId
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLustreClockedIdDeclarationRule());
						}
						add(
							$current,
							"typedIds",
							lv_typedIds_0_0,
							"de.cau.cs.kieler.lustre.Lustre.LustreTypedId");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_1='when'
				{
					newLeafNode(otherlv_1, grammarAccess.getLustreClockedIdDeclarationAccess().getWhenKeyword_0_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getLustreClockedIdDeclarationAccess().getClockExprClockExpressionParserRuleCall_0_1_1_0());
						}
						lv_clockExpr_2_0=ruleClockExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getLustreClockedIdDeclarationRule());
							}
							set(
								$current,
								"clockExpr",
								lv_clockExpr_2_0,
								"de.cau.cs.kieler.lustre.Lustre.ClockExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)?
		)
		    |
		(
			otherlv_3='('
			{
				newLeafNode(otherlv_3, grammarAccess.getLustreClockedIdDeclarationAccess().getLeftParenthesisKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLustreClockedIdDeclarationAccess().getTypedIdsLustreTypedIdParserRuleCall_1_1_0());
					}
					lv_typedIds_4_0=ruleLustreTypedId
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLustreClockedIdDeclarationRule());
						}
						add(
							$current,
							"typedIds",
							lv_typedIds_4_0,
							"de.cau.cs.kieler.lustre.Lustre.LustreTypedId");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_5=';'
				{
					newLeafNode(otherlv_5, grammarAccess.getLustreClockedIdDeclarationAccess().getSemicolonKeyword_1_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getLustreClockedIdDeclarationAccess().getTypedIdsLustreTypedIdParserRuleCall_1_2_1_0());
						}
						lv_typedIds_6_0=ruleLustreTypedId
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getLustreClockedIdDeclarationRule());
							}
							add(
								$current,
								"typedIds",
								lv_typedIds_6_0,
								"de.cau.cs.kieler.lustre.Lustre.LustreTypedId");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_7=')'
			{
				newLeafNode(otherlv_7, grammarAccess.getLustreClockedIdDeclarationAccess().getRightParenthesisKeyword_1_3());
			}
			otherlv_8='when'
			{
				newLeafNode(otherlv_8, grammarAccess.getLustreClockedIdDeclarationAccess().getWhenKeyword_1_4());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLustreClockedIdDeclarationAccess().getClockExprClockExpressionParserRuleCall_1_5_0());
					}
					lv_clockExpr_9_0=ruleClockExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLustreClockedIdDeclarationRule());
						}
						set(
							$current,
							"clockExpr",
							lv_clockExpr_9_0,
							"de.cau.cs.kieler.lustre.Lustre.ClockExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleLustreExpression
entryRuleLustreExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLustreExpressionRule()); }
	iv_ruleLustreExpression=ruleLustreExpression
	{ $current=$iv_ruleLustreExpression.current; }
	EOF;

// Rule LustreExpression
ruleLustreExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		/* */
	}
	{
		newCompositeNode(grammarAccess.getLustreExpressionAccess().getExpressionParserRuleCall());
	}
	this_Expression_0=ruleExpression
	{
		$current = $this_Expression_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleClockExpression
entryRuleClockExpression returns [String current=null]:
	{ newCompositeNode(grammarAccess.getClockExpressionRule()); }
	iv_ruleClockExpression=ruleClockExpression
	{ $current=$iv_ruleClockExpression.current.getText(); }
	EOF;

// Rule ClockExpression
ruleClockExpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getClockExpressionAccess().getIdentRefParserRuleCall_0_0());
			}
			this_IdentRef_0=ruleIdentRef
			{
				$current.merge(this_IdentRef_0);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getClockExpressionAccess().getLeftParenthesisKeyword_0_1());
			}
			this_IDENT_2=RULE_IDENT
			{
				$current.merge(this_IDENT_2);
			}
			{
				newLeafNode(this_IDENT_2, grammarAccess.getClockExpressionAccess().getIDENTTerminalRuleCall_0_2());
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getClockExpressionAccess().getRightParenthesisKeyword_0_3());
			}
		)
		    |
		this_IDENT_4=RULE_IDENT
		{
			$current.merge(this_IDENT_4);
		}
		{
			newLeafNode(this_IDENT_4, grammarAccess.getClockExpressionAccess().getIDENTTerminalRuleCall_1());
		}
		    |
		(
			kw='not'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getClockExpressionAccess().getNotKeyword_2_0());
			}
			this_IDENT_6=RULE_IDENT
			{
				$current.merge(this_IDENT_6);
			}
			{
				newLeafNode(this_IDENT_6, grammarAccess.getClockExpressionAccess().getIDENTTerminalRuleCall_2_1());
			}
		)
		    |
		(
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getClockExpressionAccess().getLeftParenthesisKeyword_3_0());
			}
			kw='not'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getClockExpressionAccess().getNotKeyword_3_1());
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getClockExpressionAccess().getRightParenthesisKeyword_3_2());
			}
			this_IDENT_10=RULE_IDENT
			{
				$current.merge(this_IDENT_10);
			}
			{
				newLeafNode(this_IDENT_10, grammarAccess.getClockExpressionAccess().getIDENTTerminalRuleCall_3_3());
			}
		)
	)
;

// Entry rule entryRulePackList
entryRulePackList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPackListRule()); }
	iv_rulePackList=rulePackList
	{ $current=$iv_rulePackList.current; }
	EOF;

// Rule PackList
rulePackList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPackListAccess().getModelDeclarationsModelDeclarationParserRuleCall_0_0());
				}
				lv_modelDeclarations_0_0=ruleModelDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPackListRule());
					}
					add(
						$current,
						"modelDeclarations",
						lv_modelDeclarations_0_0,
						"de.cau.cs.kieler.lustre.Lustre.ModelDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPackListAccess().getPackageDeclarationsPackageDeclarationParserRuleCall_1_0());
				}
				lv_packageDeclarations_1_0=rulePackageDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPackListRule());
					}
					add(
						$current,
						"packageDeclarations",
						lv_packageDeclarations_1_0,
						"de.cau.cs.kieler.lustre.Lustre.PackageDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPackListAccess().getPackageEquationsPackageEquationParserRuleCall_2_0());
				}
				lv_packageEquations_2_0=rulePackageEquation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPackListRule());
					}
					add(
						$current,
						"packageEquations",
						lv_packageEquations_2_0,
						"de.cau.cs.kieler.lustre.Lustre.PackageEquation");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)+
;

// Entry rule entryRuleModelDeclaration
entryRuleModelDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelDeclarationRule()); }
	iv_ruleModelDeclaration=ruleModelDeclaration
	{ $current=$iv_ruleModelDeclaration.current; }
	EOF;

// Rule ModelDeclaration
ruleModelDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='model'
		{
			newLeafNode(otherlv_0, grammarAccess.getModelDeclarationAccess().getModelKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_IDENT
				{
					newLeafNode(lv_name_1_0, grammarAccess.getModelDeclarationAccess().getNameIDENTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getModelDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"de.cau.cs.kieler.lustre.Lustre.IDENT");
				}
			)
		)
		(
			otherlv_2='uses'
			{
				newLeafNode(otherlv_2, grammarAccess.getModelDeclarationAccess().getUsesKeyword_2_0());
			}
			(
				(
					lv_usesIds_3_0=RULE_IDENT
					{
						newLeafNode(lv_usesIds_3_0, grammarAccess.getModelDeclarationAccess().getUsesIdsIDENTTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getModelDeclarationRule());
						}
						addWithLastConsumed(
							$current,
							"usesIds",
							lv_usesIds_3_0,
							"de.cau.cs.kieler.lustre.Lustre.IDENT");
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getModelDeclarationAccess().getCommaKeyword_2_2_0());
				}
				(
					(
						lv_usesIds_5_0=RULE_IDENT
						{
							newLeafNode(lv_usesIds_5_0, grammarAccess.getModelDeclarationAccess().getUsesIdsIDENTTerminalRuleCall_2_2_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getModelDeclarationRule());
							}
							addWithLastConsumed(
								$current,
								"usesIds",
								lv_usesIds_5_0,
								"de.cau.cs.kieler.lustre.Lustre.IDENT");
						}
					)
				)
			)*
			otherlv_6=';'
			{
				newLeafNode(otherlv_6, grammarAccess.getModelDeclarationAccess().getSemicolonKeyword_2_3());
			}
		)?
		otherlv_7='needs'
		{
			newLeafNode(otherlv_7, grammarAccess.getModelDeclarationAccess().getNeedsKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getModelDeclarationAccess().getNeedsParamsStaticParamParserRuleCall_4_0());
				}
				lv_needsParams_8_0=ruleStaticParam
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelDeclarationRule());
					}
					add(
						$current,
						"needsParams",
						lv_needsParams_8_0,
						"de.cau.cs.kieler.lustre.Lustre.StaticParam");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_9=';'
			{
				newLeafNode(otherlv_9, grammarAccess.getModelDeclarationAccess().getSemicolonKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getModelDeclarationAccess().getNeedsParamsStaticParamParserRuleCall_5_1_0());
					}
					lv_needsParams_10_0=ruleStaticParam
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModelDeclarationRule());
						}
						add(
							$current,
							"needsParams",
							lv_needsParams_10_0,
							"de.cau.cs.kieler.lustre.Lustre.StaticParam");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_11=';'
		{
			newLeafNode(otherlv_11, grammarAccess.getModelDeclarationAccess().getSemicolonKeyword_6());
		}
		(
			otherlv_12='provides'
			{
				newLeafNode(otherlv_12, grammarAccess.getModelDeclarationAccess().getProvidesKeyword_7_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getModelDeclarationAccess().getProvisionsProvideParserRuleCall_7_1_0());
					}
					lv_provisions_13_0=ruleProvide
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModelDeclarationRule());
						}
						add(
							$current,
							"provisions",
							lv_provisions_13_0,
							"de.cau.cs.kieler.lustre.Lustre.Provide");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_14=';'
			{
				newLeafNode(otherlv_14, grammarAccess.getModelDeclarationAccess().getSemicolonKeyword_7_2());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getModelDeclarationAccess().getProvisionsProvideParserRuleCall_7_3_0_0());
						}
						lv_provisions_15_0=ruleProvide
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getModelDeclarationRule());
							}
							add(
								$current,
								"provisions",
								lv_provisions_15_0,
								"de.cau.cs.kieler.lustre.Lustre.Provide");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_16=';'
				{
					newLeafNode(otherlv_16, grammarAccess.getModelDeclarationAccess().getSemicolonKeyword_7_3_1());
				}
			)*
		)?
		otherlv_17='body'
		{
			newLeafNode(otherlv_17, grammarAccess.getModelDeclarationAccess().getBodyKeyword_8());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getModelDeclarationAccess().getBodyPackBodyParserRuleCall_9_0());
				}
				lv_body_18_0=rulePackBody
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelDeclarationRule());
					}
					set(
						$current,
						"body",
						lv_body_18_0,
						"de.cau.cs.kieler.lustre.Lustre.PackBody");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_19='end'
		{
			newLeafNode(otherlv_19, grammarAccess.getModelDeclarationAccess().getEndKeyword_10());
		}
	)
;

// Entry rule entryRuleProvide
entryRuleProvide returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProvideRule()); }
	iv_ruleProvide=ruleProvide
	{ $current=$iv_ruleProvide.current; }
	EOF;

// Rule Provide
ruleProvide returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='const'
			{
				newLeafNode(otherlv_0, grammarAccess.getProvideAccess().getConstKeyword_0_0());
			}
			(
				(
					lv_name_1_0=RULE_IDENT
					{
						newLeafNode(lv_name_1_0, grammarAccess.getProvideAccess().getNameIDENTTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getProvideRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_1_0,
							"de.cau.cs.kieler.lustre.Lustre.IDENT");
					}
				)
			)
			otherlv_2=':'
			{
				newLeafNode(otherlv_2, grammarAccess.getProvideAccess().getColonKeyword_0_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getProvideAccess().getTypeTypeParserRuleCall_0_3_0());
					}
					lv_type_3_0=ruleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProvideRule());
						}
						set(
							$current,
							"type",
							lv_type_3_0,
							"de.cau.cs.kieler.lustre.Lustre.Type");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4='='
				{
					newLeafNode(otherlv_4, grammarAccess.getProvideAccess().getEqualsSignKeyword_0_4_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getProvideAccess().getValueLustreExpressionParserRuleCall_0_4_1_0());
						}
						lv_value_5_0=ruleLustreExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getProvideRule());
							}
							set(
								$current,
								"value",
								lv_value_5_0,
								"de.cau.cs.kieler.lustre.Lustre.LustreExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)?
		)
		    |
		(
			otherlv_6='type'
			{
				newLeafNode(otherlv_6, grammarAccess.getProvideAccess().getTypeKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getProvideAccess().getTypesTypeDeclarationParserRuleCall_1_1_0());
					}
					lv_types_7_0=ruleTypeDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProvideRule());
						}
						set(
							$current,
							"types",
							lv_types_7_0,
							"de.cau.cs.kieler.lustre.Lustre.TypeDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				otherlv_8='unsafe'
				{
					newLeafNode(otherlv_8, grammarAccess.getProvideAccess().getUnsafeKeyword_2_0());
				}
			)?
			(
				otherlv_9='node'
				{
					newLeafNode(otherlv_9, grammarAccess.getProvideAccess().getNodeKeyword_2_1_0());
				}
				    |
				otherlv_10='function'
				{
					newLeafNode(otherlv_10, grammarAccess.getProvideAccess().getFunctionKeyword_2_1_1());
				}
			)
			(
				(
					lv_name_11_0=RULE_IDENT
					{
						newLeafNode(lv_name_11_0, grammarAccess.getProvideAccess().getNameIDENTTerminalRuleCall_2_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getProvideRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_11_0,
							"de.cau.cs.kieler.lustre.Lustre.IDENT");
					}
				)
			)
			(
				otherlv_12='<<'
				{
					newLeafNode(otherlv_12, grammarAccess.getProvideAccess().getLessThanSignLessThanSignKeyword_2_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getProvideAccess().getStaticParamsStaticParamParserRuleCall_2_3_1_0());
						}
						lv_staticParams_13_0=ruleStaticParam
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getProvideRule());
							}
							add(
								$current,
								"staticParams",
								lv_staticParams_13_0,
								"de.cau.cs.kieler.lustre.Lustre.StaticParam");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_14=';'
					{
						newLeafNode(otherlv_14, grammarAccess.getProvideAccess().getSemicolonKeyword_2_3_2_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getProvideAccess().getStaticParamsStaticParamParserRuleCall_2_3_2_1_0());
							}
							lv_staticParams_15_0=ruleStaticParam
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getProvideRule());
								}
								add(
									$current,
									"staticParams",
									lv_staticParams_15_0,
									"de.cau.cs.kieler.lustre.Lustre.StaticParam");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
				otherlv_16='>>'
				{
					newLeafNode(otherlv_16, grammarAccess.getProvideAccess().getGreaterThanSignGreaterThanSignKeyword_2_3_3());
				}
			)?
			(
				(
					{
						newCompositeNode(grammarAccess.getProvideAccess().getInputParamsParserRuleCall_2_4_0());
					}
					lv_input_17_0=ruleParams
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProvideRule());
						}
						set(
							$current,
							"input",
							lv_input_17_0,
							"de.cau.cs.kieler.lustre.Lustre.Params");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_18='returns'
			{
				newLeafNode(otherlv_18, grammarAccess.getProvideAccess().getReturnsKeyword_2_5());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getProvideAccess().getOutputParamsParserRuleCall_2_6_0());
					}
					lv_output_19_0=ruleParams
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProvideRule());
						}
						set(
							$current,
							"output",
							lv_output_19_0,
							"de.cau.cs.kieler.lustre.Lustre.Params");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRulePackageDeclaration
entryRulePackageDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPackageDeclarationRule()); }
	iv_rulePackageDeclaration=rulePackageDeclaration
	{ $current=$iv_rulePackageDeclaration.current; }
	EOF;

// Rule PackageDeclaration
rulePackageDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='package'
		{
			newLeafNode(otherlv_0, grammarAccess.getPackageDeclarationAccess().getPackageKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_IDENT
				{
					newLeafNode(lv_name_1_0, grammarAccess.getPackageDeclarationAccess().getNameIDENTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPackageDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"de.cau.cs.kieler.lustre.Lustre.IDENT");
				}
			)
		)
		(
			otherlv_2='uses'
			{
				newLeafNode(otherlv_2, grammarAccess.getPackageDeclarationAccess().getUsesKeyword_2_0());
			}
			(
				(
					lv_usesIds_3_0=RULE_IDENT
					{
						newLeafNode(lv_usesIds_3_0, grammarAccess.getPackageDeclarationAccess().getUsesIdsIDENTTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPackageDeclarationRule());
						}
						addWithLastConsumed(
							$current,
							"usesIds",
							lv_usesIds_3_0,
							"de.cau.cs.kieler.lustre.Lustre.IDENT");
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getPackageDeclarationAccess().getCommaKeyword_2_2_0());
				}
				(
					(
						lv_usesIds_5_0=RULE_IDENT
						{
							newLeafNode(lv_usesIds_5_0, grammarAccess.getPackageDeclarationAccess().getUsesIdsIDENTTerminalRuleCall_2_2_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getPackageDeclarationRule());
							}
							addWithLastConsumed(
								$current,
								"usesIds",
								lv_usesIds_5_0,
								"de.cau.cs.kieler.lustre.Lustre.IDENT");
						}
					)
				)
			)*
			otherlv_6=';'
			{
				newLeafNode(otherlv_6, grammarAccess.getPackageDeclarationAccess().getSemicolonKeyword_2_3());
			}
		)?
		(
			otherlv_7='provides'
			{
				newLeafNode(otherlv_7, grammarAccess.getPackageDeclarationAccess().getProvidesKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPackageDeclarationAccess().getProvisionsProvideParserRuleCall_3_1_0());
					}
					lv_provisions_8_0=ruleProvide
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPackageDeclarationRule());
						}
						add(
							$current,
							"provisions",
							lv_provisions_8_0,
							"de.cau.cs.kieler.lustre.Lustre.Provide");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_9=';'
			{
				newLeafNode(otherlv_9, grammarAccess.getPackageDeclarationAccess().getSemicolonKeyword_3_2());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getPackageDeclarationAccess().getProvisionsProvideParserRuleCall_3_3_0_0());
						}
						lv_provisions_10_0=ruleProvide
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPackageDeclarationRule());
							}
							add(
								$current,
								"provisions",
								lv_provisions_10_0,
								"de.cau.cs.kieler.lustre.Lustre.Provide");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_11=';'
				{
					newLeafNode(otherlv_11, grammarAccess.getPackageDeclarationAccess().getSemicolonKeyword_3_3_1());
				}
			)*
		)?
		otherlv_12='body'
		{
			newLeafNode(otherlv_12, grammarAccess.getPackageDeclarationAccess().getBodyKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPackageDeclarationAccess().getBodyPackBodyParserRuleCall_5_0());
				}
				lv_body_13_0=rulePackBody
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPackageDeclarationRule());
					}
					set(
						$current,
						"body",
						lv_body_13_0,
						"de.cau.cs.kieler.lustre.Lustre.PackBody");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_14='end'
		{
			newLeafNode(otherlv_14, grammarAccess.getPackageDeclarationAccess().getEndKeyword_6());
		}
	)
;

// Entry rule entryRulePackageEquation
entryRulePackageEquation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPackageEquationRule()); }
	iv_rulePackageEquation=rulePackageEquation
	{ $current=$iv_rulePackageEquation.current; }
	EOF;

// Rule PackageEquation
rulePackageEquation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='package'
		{
			newLeafNode(otherlv_0, grammarAccess.getPackageEquationAccess().getPackageKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_IDENT
				{
					newLeafNode(lv_name_1_0, grammarAccess.getPackageEquationAccess().getNameIDENTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPackageEquationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"de.cau.cs.kieler.lustre.Lustre.IDENT");
				}
			)
		)
		(
			(
				lv_eqOrIs_2_0=RULE_IDENT
				{
					newLeafNode(lv_eqOrIs_2_0, grammarAccess.getPackageEquationAccess().getEqOrIsIDENTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPackageEquationRule());
					}
					setWithLastConsumed(
						$current,
						"eqOrIs",
						lv_eqOrIs_2_0,
						"de.cau.cs.kieler.lustre.Lustre.IDENT");
				}
			)
		)
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getPackageEquationAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPackageEquationAccess().getByNameStaticArgsByNameStaticArgParserRuleCall_4_0());
				}
				lv_byNameStaticArgs_4_0=ruleByNameStaticArg
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPackageEquationRule());
					}
					add(
						$current,
						"byNameStaticArgs",
						lv_byNameStaticArgs_4_0,
						"de.cau.cs.kieler.lustre.Lustre.ByNameStaticArg");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				otherlv_5=','
				{
					newLeafNode(otherlv_5, grammarAccess.getPackageEquationAccess().getCommaKeyword_5_0_0());
				}
				    |
				otherlv_6=';'
				{
					newLeafNode(otherlv_6, grammarAccess.getPackageEquationAccess().getSemicolonKeyword_5_0_1());
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPackageEquationAccess().getByNameStaticArgsByNameStaticArgParserRuleCall_5_1_0());
					}
					lv_byNameStaticArgs_7_0=ruleByNameStaticArg
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPackageEquationRule());
						}
						add(
							$current,
							"byNameStaticArgs",
							lv_byNameStaticArgs_7_0,
							"de.cau.cs.kieler.lustre.Lustre.ByNameStaticArg");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_8=')'
		{
			newLeafNode(otherlv_8, grammarAccess.getPackageEquationAccess().getRightParenthesisKeyword_6());
		}
		otherlv_9=';'
		{
			newLeafNode(otherlv_9, grammarAccess.getPackageEquationAccess().getSemicolonKeyword_7());
		}
	)
;

// Entry rule entryRulePackage_Provided_IO
entryRulePackage_Provided_IO returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPackage_Provided_IORule()); }
	iv_rulePackage_Provided_IO=rulePackage_Provided_IO
	{ $current=$iv_rulePackage_Provided_IO.current; }
	EOF;

// Rule Package_Provided_IO
rulePackage_Provided_IO returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPackage_Provided_IORule());
					}
				}
				otherlv_0=RULE_IDENT
				{
					newLeafNode(otherlv_0, grammarAccess.getPackage_Provided_IOAccess().getNameVariable_DeclarationCrossReference_0_0());
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getPackage_Provided_IOAccess().getColonKeyword_1());
		}
		(
			(
				lv_type_2_0=RULE_IDENT
				{
					newLeafNode(lv_type_2_0, grammarAccess.getPackage_Provided_IOAccess().getTypeIDENTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPackage_Provided_IORule());
					}
					setWithLastConsumed(
						$current,
						"type",
						lv_type_2_0,
						"de.cau.cs.kieler.lustre.Lustre.IDENT");
				}
			)
		)
	)
;

// Entry rule entryRuleField
entryRuleField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFieldRule()); }
	iv_ruleField=ruleField
	{ $current=$iv_ruleField.current; }
	EOF;

// Rule Field
ruleField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_IDENT
				{
					newLeafNode(lv_name_0_0, grammarAccess.getFieldAccess().getNameIDENTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFieldRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"de.cau.cs.kieler.lustre.Lustre.IDENT");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getFieldAccess().getColonKeyword_1());
		}
		(
			(
				{
					/* */
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFieldRule());
					}
				}
				otherlv_2=RULE_IDENT
				{
					newLeafNode(otherlv_2, grammarAccess.getFieldAccess().getTypeTypeCrossReference_2_0());
				}
			)
		)
	)
;

// Entry rule entryRuleConstant_Declaration
entryRuleConstant_Declaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstant_DeclarationRule()); }
	iv_ruleConstant_Declaration=ruleConstant_Declaration
	{ $current=$iv_ruleConstant_Declaration.current; }
	EOF;

// Rule Constant_Declaration
ruleConstant_Declaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='const'
			{
				newLeafNode(otherlv_0, grammarAccess.getConstant_DeclarationAccess().getConstKeyword_0_0());
			}
			(
				(
					lv_name_1_0=RULE_IDENT
					{
						newLeafNode(lv_name_1_0, grammarAccess.getConstant_DeclarationAccess().getNameIDENTTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConstant_DeclarationRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_1_0,
							"de.cau.cs.kieler.lustre.Lustre.IDENT");
					}
				)
			)
			otherlv_2=':'
			{
				newLeafNode(otherlv_2, grammarAccess.getConstant_DeclarationAccess().getColonKeyword_0_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConstant_DeclarationAccess().getTypeTypeParserRuleCall_0_3_0());
					}
					lv_type_3_0=ruleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConstant_DeclarationRule());
						}
						set(
							$current,
							"type",
							lv_type_3_0,
							"de.cau.cs.kieler.lustre.Lustre.Type");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=';'
			{
				newLeafNode(otherlv_4, grammarAccess.getConstant_DeclarationAccess().getSemicolonKeyword_0_4());
			}
		)
		    |
		(
			otherlv_5='const'
			{
				newLeafNode(otherlv_5, grammarAccess.getConstant_DeclarationAccess().getConstKeyword_1_0());
			}
			(
				(
					lv_name_6_0=RULE_IDENT
					{
						newLeafNode(lv_name_6_0, grammarAccess.getConstant_DeclarationAccess().getNameIDENTTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConstant_DeclarationRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_6_0,
							"de.cau.cs.kieler.lustre.Lustre.IDENT");
					}
				)
			)
			otherlv_7='='
			{
				newLeafNode(otherlv_7, grammarAccess.getConstant_DeclarationAccess().getEqualsSignKeyword_1_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConstant_DeclarationAccess().getExprConstantExpressionParserRuleCall_1_3_0());
					}
					lv_expr_8_0=ruleConstantExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConstant_DeclarationRule());
						}
						set(
							$current,
							"expr",
							lv_expr_8_0,
							"de.cau.cs.kieler.lustre.Lustre.ConstantExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_9=';'
			{
				newLeafNode(otherlv_9, grammarAccess.getConstant_DeclarationAccess().getSemicolonKeyword_1_4());
			}
		)
		    |
		(
			otherlv_10='const'
			{
				newLeafNode(otherlv_10, grammarAccess.getConstant_DeclarationAccess().getConstKeyword_2_0());
			}
			(
				(
					lv_name_11_0=RULE_IDENT
					{
						newLeafNode(lv_name_11_0, grammarAccess.getConstant_DeclarationAccess().getNameIDENTTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConstant_DeclarationRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_11_0,
							"de.cau.cs.kieler.lustre.Lustre.IDENT");
					}
				)
			)
			otherlv_12=':'
			{
				newLeafNode(otherlv_12, grammarAccess.getConstant_DeclarationAccess().getColonKeyword_2_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConstant_DeclarationAccess().getTypeTypeParserRuleCall_2_3_0());
					}
					lv_type_13_0=ruleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConstant_DeclarationRule());
						}
						set(
							$current,
							"type",
							lv_type_13_0,
							"de.cau.cs.kieler.lustre.Lustre.Type");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_14='='
			{
				newLeafNode(otherlv_14, grammarAccess.getConstant_DeclarationAccess().getEqualsSignKeyword_2_4());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConstant_DeclarationAccess().getExprConstantExpressionParserRuleCall_2_5_0());
					}
					lv_expr_15_0=ruleConstantExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConstant_DeclarationRule());
						}
						set(
							$current,
							"expr",
							lv_expr_15_0,
							"de.cau.cs.kieler.lustre.Lustre.ConstantExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_16=';'
			{
				newLeafNode(otherlv_16, grammarAccess.getConstant_DeclarationAccess().getSemicolonKeyword_2_6());
			}
		)
	)
;

// Entry rule entryRuleVariable_Declaration
entryRuleVariable_Declaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariable_DeclarationRule()); }
	iv_ruleVariable_Declaration=ruleVariable_Declaration
	{ $current=$iv_ruleVariable_Declaration.current; }
	EOF;

// Rule Variable_Declaration
ruleVariable_Declaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_IDENT
				{
					newLeafNode(lv_name_0_0, grammarAccess.getVariable_DeclarationAccess().getNameIDENTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariable_DeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"de.cau.cs.kieler.lustre.Lustre.IDENT");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getVariable_DeclarationAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariable_DeclarationAccess().getTypeTypeParserRuleCall_2_0());
				}
				lv_type_2_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariable_DeclarationRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"de.cau.cs.kieler.lustre.Lustre.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='when'
			{
				newLeafNode(otherlv_3, grammarAccess.getVariable_DeclarationAccess().getWhenKeyword_3_0());
			}
			(
				(
					lv_clock_4_0=RULE_IDENT
					{
						newLeafNode(lv_clock_4_0, grammarAccess.getVariable_DeclarationAccess().getClockIDENTTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVariable_DeclarationRule());
						}
						setWithLastConsumed(
							$current,
							"clock",
							lv_clock_4_0,
							"de.cau.cs.kieler.lustre.Lustre.IDENT");
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleEquation
entryRuleEquation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEquationRule()); }
	iv_ruleEquation=ruleEquation
	{ $current=$iv_ruleEquation.current; }
	EOF;

// Rule Equation
ruleEquation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						/* */
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEquationRule());
						}
					}
					otherlv_0=RULE_IDENT
					{
						newLeafNode(otherlv_0, grammarAccess.getEquationAccess().getLeftLustreTypedIdCrossReference_0_0_0());
					}
				)
			)
			otherlv_1='='
			{
				newLeafNode(otherlv_1, grammarAccess.getEquationAccess().getEqualsSignKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getEquationAccess().getRightRight_PartParserRuleCall_0_2_0());
					}
					lv_right_2_0=ruleRight_Part
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEquationRule());
						}
						set(
							$current,
							"right",
							lv_right_2_0,
							"de.cau.cs.kieler.lustre.Lustre.Right_Part");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=';'
			{
				newLeafNode(otherlv_3, grammarAccess.getEquationAccess().getSemicolonKeyword_0_3());
			}
		)
		    |
		(
			(
				(
					{
						/* */
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEquationRule());
						}
					}
					otherlv_4=RULE_IDENT
					{
						newLeafNode(otherlv_4, grammarAccess.getEquationAccess().getLeftLustreTypedValuedIdsCrossReference_1_0_0());
					}
				)
			)
			otherlv_5='='
			{
				newLeafNode(otherlv_5, grammarAccess.getEquationAccess().getEqualsSignKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getEquationAccess().getRightRight_PartParserRuleCall_1_2_0());
					}
					lv_right_6_0=ruleRight_Part
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEquationRule());
						}
						set(
							$current,
							"right",
							lv_right_6_0,
							"de.cau.cs.kieler.lustre.Lustre.Right_Part");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_7=';'
			{
				newLeafNode(otherlv_7, grammarAccess.getEquationAccess().getSemicolonKeyword_1_3());
			}
		)
		    |
		(
			(
				(
					{
						/* */
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEquationRule());
						}
					}
					otherlv_8=RULE_IDENT
					{
						newLeafNode(otherlv_8, grammarAccess.getEquationAccess().getLeftLustreClockedIdDeclarationCrossReference_2_0_0());
					}
				)
			)
			otherlv_9='='
			{
				newLeafNode(otherlv_9, grammarAccess.getEquationAccess().getEqualsSignKeyword_2_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getEquationAccess().getRightRight_PartParserRuleCall_2_2_0());
					}
					lv_right_10_0=ruleRight_Part
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEquationRule());
						}
						set(
							$current,
							"right",
							lv_right_10_0,
							"de.cau.cs.kieler.lustre.Lustre.Right_Part");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_11=';'
			{
				newLeafNode(otherlv_11, grammarAccess.getEquationAccess().getSemicolonKeyword_2_3());
			}
		)
	)
;

// Entry rule entryRuleAssertion
entryRuleAssertion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssertionRule()); }
	iv_ruleAssertion=ruleAssertion
	{ $current=$iv_ruleAssertion.current; }
	EOF;

// Rule Assertion
ruleAssertion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='assert'
		{
			newLeafNode(otherlv_0, grammarAccess.getAssertionAccess().getAssertKeyword_0());
		}
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAssertionAccess().getExpressionParserRuleCall_1());
		}
		this_Expression_1=ruleExpression
		{
			$current = $this_Expression_1.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getAssertionAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleAutomaton
entryRuleAutomaton returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAutomatonRule()); }
	iv_ruleAutomaton=ruleAutomaton
	{ $current=$iv_ruleAutomaton.current; }
	EOF;

// Rule Automaton
ruleAutomaton returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='automaton'
		{
			newLeafNode(otherlv_0, grammarAccess.getAutomatonAccess().getAutomatonKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAutomatonAccess().getStatesAStateParserRuleCall_1_0());
				}
				lv_states_1_0=ruleAState
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAutomatonRule());
					}
					add(
						$current,
						"states",
						lv_states_1_0,
						"de.cau.cs.kieler.lustre.Lustre.AState");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2='|'
			{
				newLeafNode(otherlv_2, grammarAccess.getAutomatonAccess().getVerticalLineKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAutomatonAccess().getStatesAStateParserRuleCall_2_1_0());
					}
					lv_states_3_0=ruleAState
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAutomatonRule());
						}
						add(
							$current,
							"states",
							lv_states_3_0,
							"de.cau.cs.kieler.lustre.Lustre.AState");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_4='end'
		{
			newLeafNode(otherlv_4, grammarAccess.getAutomatonAccess().getEndKeyword_3());
		}
		otherlv_5=';'
		{
			newLeafNode(otherlv_5, grammarAccess.getAutomatonAccess().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRuleAState
entryRuleAState returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAStateRule()); }
	iv_ruleAState=ruleAState
	{ $current=$iv_ruleAState.current; }
	EOF;

// Rule AState
ruleAState returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_IDENT
				{
					newLeafNode(lv_name_0_0, grammarAccess.getAStateAccess().getNameIDENTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAStateRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"de.cau.cs.kieler.lustre.Lustre.IDENT");
				}
			)
		)
		otherlv_1='->'
		{
			newLeafNode(otherlv_1, grammarAccess.getAStateAccess().getHyphenMinusGreaterThanSignKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAStateAccess().getEquationsEquationParserRuleCall_2_0_0());
					}
					lv_equations_2_0=ruleEquation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAStateRule());
						}
						add(
							$current,
							"equations",
							lv_equations_2_0,
							"de.cau.cs.kieler.lustre.Lustre.Equation");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getAStateAccess().getAssertionsAssertionParserRuleCall_2_1_0());
					}
					lv_assertions_3_0=ruleAssertion
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAStateRule());
						}
						add(
							$current,
							"assertions",
							lv_assertions_3_0,
							"de.cau.cs.kieler.lustre.Lustre.Assertion");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getAStateAccess().getAutomatonsAutomatonParserRuleCall_2_2_0());
					}
					lv_automatons_4_0=ruleAutomaton
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAStateRule());
						}
						add(
							$current,
							"automatons",
							lv_automatons_4_0,
							"de.cau.cs.kieler.lustre.Lustre.Automaton");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getAStateAccess().getTransitionsATransitionParserRuleCall_3_0());
				}
				lv_transitions_5_0=ruleATransition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAStateRule());
					}
					add(
						$current,
						"transitions",
						lv_transitions_5_0,
						"de.cau.cs.kieler.lustre.Lustre.ATransition");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleATransition
entryRuleATransition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getATransitionRule()); }
	iv_ruleATransition=ruleATransition
	{ $current=$iv_ruleATransition.current; }
	EOF;

// Rule ATransition
ruleATransition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='until'
			{
				newLeafNode(otherlv_0, grammarAccess.getATransitionAccess().getUntilKeyword_0_0());
			}
			    |
			(
				(
					lv_strong_1_0='unless'
					{
						newLeafNode(lv_strong_1_0, grammarAccess.getATransitionAccess().getStrongUnlessKeyword_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getATransitionRule());
						}
						setWithLastConsumed($current, "strong", true, "unless");
					}
				)
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getATransitionAccess().getConditionExpressionParserRuleCall_1_0());
				}
				lv_condition_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getATransitionRule());
					}
					set(
						$current,
						"condition",
						lv_condition_2_0,
						"de.cau.cs.kieler.lustre.Lustre.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='then'
			{
				newLeafNode(otherlv_3, grammarAccess.getATransitionAccess().getThenKeyword_2_0());
			}
			    |
			(
				(
					lv_history_4_0='continue'
					{
						newLeafNode(lv_history_4_0, grammarAccess.getATransitionAccess().getHistoryContinueKeyword_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getATransitionRule());
						}
						setWithLastConsumed($current, "history", true, "continue");
					}
				)
			)
		)
		(
			(
				{
					/* */
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getATransitionRule());
					}
				}
				otherlv_5=RULE_IDENT
				{
					newLeafNode(otherlv_5, grammarAccess.getATransitionAccess().getNextStateAStateCrossReference_3_0());
				}
			)
		)
		otherlv_6=';'
		{
			newLeafNode(otherlv_6, grammarAccess.getATransitionAccess().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRuleLeft_List
entryRuleLeft_List returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLeft_ListRule()); }
	iv_ruleLeft_List=ruleLeft_List
	{ $current=$iv_ruleLeft_List.current; }
	EOF;

// Rule Left_List
ruleLeft_List returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getLeft_ListAccess().getIdLeftParserRuleCall_0_0());
				}
				lv_id_0_0=ruleLeft
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLeft_ListRule());
					}
					add(
						$current,
						"id",
						lv_id_0_0,
						"de.cau.cs.kieler.lustre.Lustre.Left");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getLeft_ListAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLeft_ListAccess().getIdLeftParserRuleCall_1_1_0());
					}
					lv_id_2_0=ruleLeft
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLeft_ListRule());
						}
						add(
							$current,
							"id",
							lv_id_2_0,
							"de.cau.cs.kieler.lustre.Lustre.Left");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleLeft
entryRuleLeft returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLeftRule()); }
	iv_ruleLeft=ruleLeft
	{ $current=$iv_ruleLeft.current; }
	EOF;

// Rule Left
ruleLeft returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_IDENT
				{
					newLeafNode(lv_name_0_0, grammarAccess.getLeftAccess().getNameIDENTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLeftRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"de.cau.cs.kieler.lustre.Lustre.IDENT");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getLeftAccess().getSelectorSelectorParserRuleCall_1_0());
				}
				lv_selector_1_0=ruleSelector
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLeftRule());
					}
					set(
						$current,
						"selector",
						lv_selector_1_0,
						"de.cau.cs.kieler.lustre.Lustre.Selector");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleSelector
entryRuleSelector returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSelectorRule()); }
	iv_ruleSelector=ruleSelector
	{ $current=$iv_ruleSelector.current; }
	EOF;

// Rule Selector
ruleSelector returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='.'
			{
				newLeafNode(otherlv_0, grammarAccess.getSelectorAccess().getFullStopKeyword_0_0());
			}
			(
				(
					lv_name_1_0=RULE_IDENT
					{
						newLeafNode(lv_name_1_0, grammarAccess.getSelectorAccess().getNameIDENTTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSelectorRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_1_0,
							"de.cau.cs.kieler.lustre.Lustre.IDENT");
					}
				)
			)
		)
		    |
		(
			otherlv_2='['
			{
				newLeafNode(otherlv_2, grammarAccess.getSelectorAccess().getLeftSquareBracketKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSelectorAccess().getBeginExpressionParserRuleCall_1_1_0());
					}
					lv_begin_3_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSelectorRule());
						}
						set(
							$current,
							"begin",
							lv_begin_3_0,
							"de.cau.cs.kieler.lustre.Lustre.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSelectorAccess().getEndSelTrancheEndParserRuleCall_1_2_0());
					}
					lv_end_4_0=ruleSelTrancheEnd
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSelectorRule());
						}
						set(
							$current,
							"end",
							lv_end_4_0,
							"de.cau.cs.kieler.lustre.Lustre.SelTrancheEnd");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			otherlv_5=']'
			{
				newLeafNode(otherlv_5, grammarAccess.getSelectorAccess().getRightSquareBracketKeyword_1_3());
			}
		)
	)
;

// Entry rule entryRuleSelTrancheEnd
entryRuleSelTrancheEnd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSelTrancheEndRule()); }
	iv_ruleSelTrancheEnd=ruleSelTrancheEnd
	{ $current=$iv_ruleSelTrancheEnd.current; }
	EOF;

// Rule SelTrancheEnd
ruleSelTrancheEnd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='..'
		{
			newLeafNode(otherlv_0, grammarAccess.getSelTrancheEndAccess().getFullStopFullStopKeyword_0());
		}
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getSelTrancheEndAccess().getExpressionParserRuleCall_1());
		}
		this_Expression_1=ruleExpression
		{
			$current = $this_Expression_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleRight_Part
entryRuleRight_Part returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRight_PartRule()); }
	iv_ruleRight_Part=ruleRight_Part
	{ $current=$iv_ruleRight_Part.current; }
	EOF;

// Rule Right_Part
ruleRight_Part returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		/* */
	}
	{
		newCompositeNode(grammarAccess.getRight_PartAccess().getExpressionParserRuleCall());
	}
	this_Expression_0=ruleExpression
	{
		$current = $this_Expression_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getExpressionAccess().getIfThenElseAction_0_0(),
						$current);
				}
			)
			otherlv_1='if'
			{
				newLeafNode(otherlv_1, grammarAccess.getExpressionAccess().getIfKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionAccess().getIfexprExpressionParserRuleCall_0_2_0());
					}
					lv_ifexpr_2_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionRule());
						}
						set(
							$current,
							"ifexpr",
							lv_ifexpr_2_0,
							"de.cau.cs.kieler.lustre.Lustre.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3='then'
			{
				newLeafNode(otherlv_3, grammarAccess.getExpressionAccess().getThenKeyword_0_3());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionAccess().getThenexprExpressionParserRuleCall_0_4_0());
					}
					lv_thenexpr_4_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionRule());
						}
						set(
							$current,
							"thenexpr",
							lv_thenexpr_4_0,
							"de.cau.cs.kieler.lustre.Lustre.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_5='else'
			{
				newLeafNode(otherlv_5, grammarAccess.getExpressionAccess().getElseKeyword_0_5());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionAccess().getElseexprExpressionParserRuleCall_0_6_0());
					}
					lv_elseexpr_6_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionRule());
						}
						set(
							$current,
							"elseexpr",
							lv_elseexpr_6_0,
							"de.cau.cs.kieler.lustre.Lustre.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getFbyParserRuleCall_1());
		}
		this_Fby_7=ruleFby
		{
			$current = $this_Fby_7.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFby
entryRuleFby returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFbyRule()); }
	iv_ruleFby=ruleFby
	{ $current=$iv_ruleFby.current; }
	EOF;

// Rule Fby
ruleFby returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getFbyAccess().getArrowParserRuleCall_0());
		}
		this_Arrow_0=ruleArrow
		{
			$current = $this_Arrow_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElementAndAdd(
						grammarAccess.getFbyAccess().getFbySubExpressionsAction_1_0(),
						$current);
				}
			)
			(
				otherlv_2='fby'
				{
					newLeafNode(otherlv_2, grammarAccess.getFbyAccess().getFbyKeyword_1_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getFbyAccess().getSubExpressionsArrowParserRuleCall_1_1_1_0());
						}
						lv_subExpressions_3_0=ruleArrow
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getFbyRule());
							}
							add(
								$current,
								"subExpressions",
								lv_subExpressions_3_0,
								"de.cau.cs.kieler.lustre.Lustre.Arrow");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)+
		)?
	)
;

// Entry rule entryRuleArrow
entryRuleArrow returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArrowRule()); }
	iv_ruleArrow=ruleArrow
	{ $current=$iv_ruleArrow.current; }
	EOF;

// Rule Arrow
ruleArrow returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getArrowAccess().getOrParserRuleCall_0());
		}
		this_Or_0=ruleOr
		{
			$current = $this_Or_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElementAndAdd(
						grammarAccess.getArrowAccess().getArrowSubExpressionsAction_1_0(),
						$current);
				}
			)
			(
				otherlv_2='->'
				{
					newLeafNode(otherlv_2, grammarAccess.getArrowAccess().getHyphenMinusGreaterThanSignKeyword_1_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getArrowAccess().getSubExpressionsOrParserRuleCall_1_1_1_0());
						}
						lv_subExpressions_3_0=ruleOr
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getArrowRule());
							}
							add(
								$current,
								"subExpressions",
								lv_subExpressions_3_0,
								"de.cau.cs.kieler.lustre.Lustre.Or");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)+
		)?
	)
;

// Entry rule entryRuleOr
entryRuleOr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrRule()); }
	iv_ruleOr=ruleOr
	{ $current=$iv_ruleOr.current; }
	EOF;

// Rule Or
ruleOr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getOrAccess().getAndParserRuleCall_0());
		}
		this_And_0=ruleAnd
		{
			$current = $this_And_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElementAndAdd(
						grammarAccess.getOrAccess().getOrSubExpressionsAction_1_0(),
						$current);
				}
			)
			(
				otherlv_2='or'
				{
					newLeafNode(otherlv_2, grammarAccess.getOrAccess().getOrKeyword_1_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getOrAccess().getSubExpressionsAndParserRuleCall_1_1_1_0());
						}
						lv_subExpressions_3_0=ruleAnd
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getOrRule());
							}
							add(
								$current,
								"subExpressions",
								lv_subExpressions_3_0,
								"de.cau.cs.kieler.lustre.Lustre.And");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)+
		)?
	)
;

// Entry rule entryRuleAnd
entryRuleAnd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndRule()); }
	iv_ruleAnd=ruleAnd
	{ $current=$iv_ruleAnd.current; }
	EOF;

// Rule And
ruleAnd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAndAccess().getEqualityParserRuleCall_0());
		}
		this_Equality_0=ruleEquality
		{
			$current = $this_Equality_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElementAndAdd(
						grammarAccess.getAndAccess().getAndSubExpressionsAction_1_0(),
						$current);
				}
			)
			(
				otherlv_2='and'
				{
					newLeafNode(otherlv_2, grammarAccess.getAndAccess().getAndKeyword_1_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAndAccess().getSubExpressionsEqualityParserRuleCall_1_1_1_0());
						}
						lv_subExpressions_3_0=ruleEquality
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAndRule());
							}
							add(
								$current,
								"subExpressions",
								lv_subExpressions_3_0,
								"de.cau.cs.kieler.lustre.Lustre.Equality");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)+
		)?
	)
;

// Entry rule entryRuleEquality
entryRuleEquality returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEqualityRule()); }
	iv_ruleEquality=ruleEquality
	{ $current=$iv_ruleEquality.current; }
	EOF;

// Rule Equality
ruleEquality returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getEqualityAccess().getComparisonParserRuleCall_0());
		}
		this_Comparison_0=ruleComparison
		{
			$current = $this_Comparison_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getEqualityAccess().getEqualityLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_op_2_1='='
						{
							newLeafNode(lv_op_2_1, grammarAccess.getEqualityAccess().getOpEqualsSignKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getEqualityRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_1, null);
						}
						    |
						lv_op_2_2='<>'
						{
							newLeafNode(lv_op_2_2, grammarAccess.getEqualityAccess().getOpLessThanSignGreaterThanSignKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getEqualityRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getEqualityAccess().getRightComparisonParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleComparison
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEqualityRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"de.cau.cs.kieler.lustre.Lustre.Comparison");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleComparison
entryRuleComparison returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComparisonRule()); }
	iv_ruleComparison=ruleComparison
	{ $current=$iv_ruleComparison.current; }
	EOF;

// Rule Comparison
ruleComparison returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getComparisonAccess().getModParserRuleCall_0());
		}
		this_Mod_0=ruleMod
		{
			$current = $this_Mod_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getComparisonAccess().getComparisonLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_op_2_1='>='
						{
							newLeafNode(lv_op_2_1, grammarAccess.getComparisonAccess().getOpGreaterThanSignEqualsSignKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getComparisonRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_1, null);
						}
						    |
						lv_op_2_2='<='
						{
							newLeafNode(lv_op_2_2, grammarAccess.getComparisonAccess().getOpLessThanSignEqualsSignKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getComparisonRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_2, null);
						}
						    |
						lv_op_2_3='>'
						{
							newLeafNode(lv_op_2_3, grammarAccess.getComparisonAccess().getOpGreaterThanSignKeyword_1_1_0_2());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getComparisonRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_3, null);
						}
						    |
						lv_op_2_4='<'
						{
							newLeafNode(lv_op_2_4, grammarAccess.getComparisonAccess().getOpLessThanSignKeyword_1_1_0_3());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getComparisonRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_4, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getComparisonAccess().getRightModParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleMod
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getComparisonRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"de.cau.cs.kieler.lustre.Lustre.Mod");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMod
entryRuleMod returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModRule()); }
	iv_ruleMod=ruleMod
	{ $current=$iv_ruleMod.current; }
	EOF;

// Rule Mod
ruleMod returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getModAccess().getPlusOrMinusParserRuleCall_0());
		}
		this_PlusOrMinus_0=rulePlusOrMinus
		{
			$current = $this_PlusOrMinus_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElementAndAdd(
						grammarAccess.getModAccess().getModSubExpressionsAction_1_0(),
						$current);
				}
			)
			otherlv_2='mod'
			{
				newLeafNode(otherlv_2, grammarAccess.getModAccess().getModKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getModAccess().getSubExpressionsPlusOrMinusParserRuleCall_1_2_0());
					}
					lv_subExpressions_3_0=rulePlusOrMinus
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModRule());
						}
						add(
							$current,
							"subExpressions",
							lv_subExpressions_3_0,
							"de.cau.cs.kieler.lustre.Lustre.PlusOrMinus");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePlusOrMinus
entryRulePlusOrMinus returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPlusOrMinusRule()); }
	iv_rulePlusOrMinus=rulePlusOrMinus
	{ $current=$iv_rulePlusOrMinus.current; }
	EOF;

// Rule PlusOrMinus
rulePlusOrMinus returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getPlusOrMinusAccess().getMulOrDivParserRuleCall_0());
		}
		this_MulOrDiv_0=ruleMulOrDiv
		{
			$current = $this_MulOrDiv_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					(
						{
							/* */
						}
						{
							$current = forceCreateModelElementAndAdd(
								grammarAccess.getPlusOrMinusAccess().getPlusSubExpressionsAction_1_0_0_0(),
								$current);
						}
					)
					otherlv_2='+'
					{
						newLeafNode(otherlv_2, grammarAccess.getPlusOrMinusAccess().getPlusSignKeyword_1_0_0_1());
					}
				)
				    |
				(
					(
						{
							/* */
						}
						{
							$current = forceCreateModelElementAndAdd(
								grammarAccess.getPlusOrMinusAccess().getMinusSubExpressionsAction_1_0_1_0(),
								$current);
						}
					)
					otherlv_4='-'
					{
						newLeafNode(otherlv_4, grammarAccess.getPlusOrMinusAccess().getHyphenMinusKeyword_1_0_1_1());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPlusOrMinusAccess().getSubExpressionsMulOrDivParserRuleCall_1_1_0());
					}
					lv_subExpressions_5_0=ruleMulOrDiv
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPlusOrMinusRule());
						}
						add(
							$current,
							"subExpressions",
							lv_subExpressions_5_0,
							"de.cau.cs.kieler.lustre.Lustre.MulOrDiv");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMulOrDiv
entryRuleMulOrDiv returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMulOrDivRule()); }
	iv_ruleMulOrDiv=ruleMulOrDiv
	{ $current=$iv_ruleMulOrDiv.current; }
	EOF;

// Rule MulOrDiv
ruleMulOrDiv returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getMulOrDivAccess().getPrimaryParserRuleCall_0());
		}
		this_Primary_0=rulePrimary
		{
			$current = $this_Primary_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					(
						{
							/* */
						}
						{
							$current = forceCreateModelElementAndAdd(
								grammarAccess.getMulOrDivAccess().getMulSubExpressionsAction_1_0_0_0(),
								$current);
						}
					)
					otherlv_2='*'
					{
						newLeafNode(otherlv_2, grammarAccess.getMulOrDivAccess().getAsteriskKeyword_1_0_0_1());
					}
				)
				    |
				(
					(
						{
							/* */
						}
						{
							$current = forceCreateModelElementAndAdd(
								grammarAccess.getMulOrDivAccess().getDivSubExpressionsAction_1_0_1_0(),
								$current);
						}
					)
					otherlv_4='/'
					{
						newLeafNode(otherlv_4, grammarAccess.getMulOrDivAccess().getSolidusKeyword_1_0_1_1());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMulOrDivAccess().getSubExpressionsPrimaryParserRuleCall_1_1_0());
					}
					lv_subExpressions_5_0=rulePrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMulOrDivRule());
						}
						add(
							$current,
							"subExpressions",
							lv_subExpressions_5_0,
							"de.cau.cs.kieler.lustre.Lustre.Primary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	iv_rulePrimary=rulePrimary
	{ $current=$iv_rulePrimary.current; }
	EOF;

// Rule Primary
rulePrimary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='('
			{
				newLeafNode(otherlv_0, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_0_0());
			}
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getPrimaryAccess().getExpressionParserRuleCall_0_1());
			}
			this_Expression_1=ruleExpression
			{
				$current = $this_Expression_1.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_2=')'
			{
				newLeafNode(otherlv_2, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_0_2());
			}
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimaryAccess().getNotAction_1_0(),
						$current);
				}
			)
			otherlv_4='not'
			{
				newLeafNode(otherlv_4, grammarAccess.getPrimaryAccess().getNotKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryAccess().getExpressionPrimaryParserRuleCall_1_2_0());
					}
					lv_expression_5_0=rulePrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryRule());
						}
						set(
							$current,
							"expression",
							lv_expression_5_0,
							"de.cau.cs.kieler.lustre.Lustre.Primary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimaryAccess().getUMinusAction_2_0(),
						$current);
				}
			)
			otherlv_7='-'
			{
				newLeafNode(otherlv_7, grammarAccess.getPrimaryAccess().getHyphenMinusKeyword_2_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryAccess().getExpressionPrimaryParserRuleCall_2_2_0());
					}
					lv_expression_8_0=rulePrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryRule());
						}
						set(
							$current,
							"expression",
							lv_expression_8_0,
							"de.cau.cs.kieler.lustre.Lustre.Primary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimaryAccess().getPreAction_3_0(),
						$current);
				}
			)
			otherlv_10='pre'
			{
				newLeafNode(otherlv_10, grammarAccess.getPrimaryAccess().getPreKeyword_3_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryAccess().getExpressionPrimaryParserRuleCall_3_2_0());
					}
					lv_expression_11_0=rulePrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryRule());
						}
						set(
							$current,
							"expression",
							lv_expression_11_0,
							"de.cau.cs.kieler.lustre.Lustre.Primary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimaryAccess().getCurrentAction_4_0(),
						$current);
				}
			)
			otherlv_13='current'
			{
				newLeafNode(otherlv_13, grammarAccess.getPrimaryAccess().getCurrentKeyword_4_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryAccess().getExpressionPrimaryParserRuleCall_4_2_0());
					}
					lv_expression_14_0=rulePrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryRule());
						}
						set(
							$current,
							"expression",
							lv_expression_14_0,
							"de.cau.cs.kieler.lustre.Lustre.Primary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getAtomicExpressionParserRuleCall_5());
		}
		this_AtomicExpression_15=ruleAtomicExpression
		{
			$current = $this_AtomicExpression_15.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAtomicExpression
entryRuleAtomicExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAtomicExpressionRule()); }
	iv_ruleAtomicExpression=ruleAtomicExpression
	{ $current=$iv_ruleAtomicExpression.current; }
	EOF;

// Rule AtomicExpression
ruleAtomicExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAtomicExpressionAccess().getConstantExpressionParserRuleCall_0());
		}
		this_ConstantExpression_0=ruleConstantExpression
		{
			$current = $this_ConstantExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAtomicExpressionAccess().getVariableReferenceParserRuleCall_1());
		}
		this_VariableReference_1=ruleVariableReference
		{
			$current = $this_VariableReference_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleVariableReference
entryRuleVariableReference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableReferenceRule()); }
	iv_ruleVariableReference=ruleVariableReference
	{ $current=$iv_ruleVariableReference.current; }
	EOF;

// Rule VariableReference
ruleVariableReference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getVariableReferenceAccess().getVariableReferenceAction_0(),
					$current);
			}
		)
		(
			(
				{
					/* */
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableReferenceRule());
					}
				}
				otherlv_1=RULE_IDENT
				{
					newLeafNode(otherlv_1, grammarAccess.getVariableReferenceAccess().getValueVariable_DeclarationCrossReference_1_0());
				}
			)
		)
	)
;

// Entry rule entryRuleConstantExpression
entryRuleConstantExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstantExpressionRule()); }
	iv_ruleConstantExpression=ruleConstantExpression
	{ $current=$iv_ruleConstantExpression.current; }
	EOF;

// Rule ConstantExpression
ruleConstantExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getConstantExpressionAccess().getBoolConstantAction_0_0(),
						$current);
				}
			)
			(
				(
					lv_value_1_0=RULE_BOOL
					{
						newLeafNode(lv_value_1_0, grammarAccess.getConstantExpressionAccess().getValueBOOLTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConstantExpressionRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_1_0,
							"de.cau.cs.kieler.lustre.Lustre.BOOL");
					}
				)
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getConstantExpressionAccess().getFloatConstantAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_value_3_0=RULE_FLOAT
					{
						newLeafNode(lv_value_3_0, grammarAccess.getConstantExpressionAccess().getValueFLOATTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConstantExpressionRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_3_0,
							"de.cau.cs.kieler.lustre.Lustre.FLOAT");
					}
				)
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getConstantExpressionAccess().getIntConstantAction_2_0(),
						$current);
				}
			)
			(
				(
					lv_value_5_0=RULE_INT
					{
						newLeafNode(lv_value_5_0, grammarAccess.getConstantExpressionAccess().getValueINTTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConstantExpressionRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_5_0,
							"de.cau.cs.kieler.lustre.Lustre.INT");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleIdentRef
entryRuleIdentRef returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIdentRefRule()); }
	iv_ruleIdentRef=ruleIdentRef
	{ $current=$iv_ruleIdentRef.current.getText(); }
	EOF;

// Rule IdentRef
ruleIdentRef returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_IDENT_0=RULE_IDENT
		{
			$current.merge(this_IDENT_0);
		}
		{
			newLeafNode(this_IDENT_0, grammarAccess.getIdentRefAccess().getIDENTTerminalRuleCall_0());
		}
		    |
		(
			this_IDENT_1=RULE_IDENT
			{
				$current.merge(this_IDENT_1);
			}
			{
				newLeafNode(this_IDENT_1, grammarAccess.getIdentRefAccess().getIDENTTerminalRuleCall_1_0());
			}
			kw='::'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getIdentRefAccess().getColonColonKeyword_1_1());
			}
			this_IDENT_3=RULE_IDENT
			{
				$current.merge(this_IDENT_3);
			}
			{
				newLeafNode(this_IDENT_3, grammarAccess.getIdentRefAccess().getIDENTTerminalRuleCall_1_2());
			}
		)
	)
;

RULE_BOOL : ('true'|'false');

RULE_IDENT : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_FLOAT : (('0'..'9')+ '.' ('0'..'9')*|'.' ('0'..'9')+);

RULE_STRING_CONSTANT : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_LUSTRE_COMMENT : (RULE_ML_COMMENT|RULE_SL_COMMENT);

fragment RULE_ML_COMMENT : '(*' ( options {greedy=false;} : . )*'*)';

fragment RULE_SL_COMMENT : '--' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;
