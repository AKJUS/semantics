module de.cau.cs.kieler.lustre.GenerateLustre

import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*
import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var rootPath = ".."
var file.extensions = "lus"
var projectName = "de.cau.cs.kieler.lustre"

Workflow {
    bean = StandaloneSetup {
        scanClassPath = true
        platformUri = "../${projectName}/.."
    }

    component = DirectoryCleaner {
        directory = "../${projectName}/src-gen"
    }

    component = DirectoryCleaner {
        directory = "../${projectName}.ui/src-gen"
    }
	
	component = XtextGenerator {
		configuration = {
			project = StandardProjectConfig {
				baseName = projectName
				rootPath = rootPath
				runtimeTest = {
					enabled = false
				}
                genericIde = {
                    name = "${projectName}.ui"
                }
				eclipsePlugin = {
					enabled = true
				}
				eclipsePluginTest = {
					enabled = false
				}
				createEclipseMetaData = true
			}
			code = {
				encoding = "UTF-8"
				lineDelimiter = "\n"
				fileHeader = "/*\n * generated by Xtext \${version}\n */"
			}
		}
		language = XtextGeneratorLanguage {
			name = "${projectName}.Lustre"
			fileExtensions = file.extensions
			generateXtendStubs = true

            // Java API to access grammar elements (required by several other fragments)
            fragment = grammarAccess.GrammarAccessFragment2 {}

            // generates Java API for the generated EPackages
            fragment = ecore.EMFGeneratorFragment2  {}

            // the serialization component
            fragment = serializer.SerializerFragment2 {
                generateXtendStub = true
            }

            // a custom ResourceFactory for use with EMF 
            fragment = resourceFactory.ResourceFactoryFragment2 {}

            // the Antlr parser
            fragment = parser.antlr.XtextAntlrGeneratorFragment2 {
                //antlrParam = "-Xconversiontimeout" antlrParam = "60000" 
                options = {
                    classSplitting = true
                    backtrack = true
                }
            }

            // API for validation 
            fragment = validation.ValidatorFragment2 {
                composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
            }

            // scoping and exporting API 
            fragment = scoping.ImportNamespacesScopingFragment2 {
                generateXtendStub = true
            }
            fragment = exporting.QualifiedNamesFragment2 {}

            // formatter API 
            fragment = formatting.Formatter2Fragment2 {}

            // labeling API 
            fragment = ui.labeling.LabelProviderFragment2 {}

            // outline API 
            fragment = ui.outline.OutlineTreeProviderFragment2 {}
            fragment = ui.outline.QuickOutlineFragment2 {}

            // java-based API for content assistance 
            fragment = ui.contentAssist.ContentAssistFragment2 {}

            // quickfix API 
            fragment = ui.quickfix.QuickfixProviderFragment2 {
                generateXtendStub = true
            }
		}
	}
}