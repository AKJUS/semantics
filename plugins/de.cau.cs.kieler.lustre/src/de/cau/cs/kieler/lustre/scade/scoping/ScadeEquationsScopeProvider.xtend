/*
 * generated by Xtext
 */
package de.cau.cs.kieler.lustre.scade.scoping

import de.cau.cs.kieler.kexpressions.ValuedObject
import de.cau.cs.kieler.lustre.scade.scade.ScadeProgram
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class ScadeEquationsScopeProvider extends AbstractScadeEquationsScopeProvider {
    
    override IScope getScopeHierarchical(EObject context, EReference reference) {
        val candidates = <ValuedObject> newArrayList
        var superContext = context
        do {
            switch(superContext) {
                ScadeProgram: {
                    for (input :superContext.inputs) {
                        candidates.add(input)
                    }
                    for (equation : superContext.equations) {
                        if (equation.references !== null && !equation.references.empty) {
                            for (valObj : equation.references) {
                                candidates.add(valObj)
                            }
                        }
                    }
                }
            }
            superContext = superContext.eContainer
        } while (superContext !== null)
        return Scopes.scopeFor(candidates)
    }
}
