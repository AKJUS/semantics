/*
 * generated by Xtext
 */
package de.cau.cs.kieler.sccharts.ide.text.highlighting


import java.util.List
import de.cau.cs.kieler.annotations.xtext.IHighlighting

class SCTXHighlighting implements IHighlighting {
    override String getId() {
        return "sctx" // assume that only one extension is present
    }
    override String getName() {
        return "SCTX"
    }
    override List<String> getKeywords() {
        return #["Pr",
        "_",
        "abort",
        "auto",
        "bool",
        "clock",
        "combine",
        "conflict",
        "confluent",
        "connector",
        "const",
        "dataflow",
        "deferred",
        "delayed",
        "do",
        "during",
        "entry",
        "exit",
        "expression",
        "extends",
        "extern",
        "final",
        "float",
        "for",
        "global",
        "go",
        "history",
        "host",
        "if",
        "immediate",
        "import",
        "initial",
        "input",
        "int",
        "is",
        "join",
        "label",
        "max",
        "min",
        "nondeterministic",
        "none",
        "null",
        "once",
        "output",
        "override",
        "period",
        "pre",
        "preceding",
        "print",
        "private",
        "pure",
        "random",
        "randomize",
        "ref",
        "region",
        "reset",
        "scchart",
        "schedule",
        "scope",
        "shallow",
        "signal",
        "state",
        "static",
        "string",
        "struct",
        "succeeding",
        "suspend",
        "to",
        "undefined",
        "val",
        "violation",
        "weak"
        ]
    }
}
