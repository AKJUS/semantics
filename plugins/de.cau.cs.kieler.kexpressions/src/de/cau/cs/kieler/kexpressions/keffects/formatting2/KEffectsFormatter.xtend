/*
 * generated by Xtext
 */
package de.cau.cs.kieler.kexpressions.keffects.formatting2;

import com.google.inject.Inject;
import de.cau.cs.kieler.annotations.Annotation;
import de.cau.cs.kieler.kexpressions.Expression;
import de.cau.cs.kieler.kexpressions.Parameter;
import de.cau.cs.kieler.kexpressions.formatting2.KExpressionsFormatter;
import de.cau.cs.kieler.kexpressions.keffects.Assignment;
import de.cau.cs.kieler.kexpressions.keffects.Emission;
import de.cau.cs.kieler.kexpressions.keffects.FunctionCallEffect;
import de.cau.cs.kieler.kexpressions.keffects.HostcodeEffect;
import de.cau.cs.kieler.kexpressions.keffects.ReferenceCallEffect;
import de.cau.cs.kieler.kexpressions.keffects.services.KEffectsGrammarAccess;
import org.eclipse.xtext.formatting2.IFormattableDocument;

class KEffectsFormatter extends KExpressionsFormatter {
	
	@Inject extension KEffectsGrammarAccess

	def dispatch void format(Emission emission, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Annotation annotations : emission.getAnnotations()) {
			format(annotations, document);
		}
		format(emission.getNewValue(), document);
	}

	def dispatch void format(Assignment assignment, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Annotation annotations : assignment.getAnnotations()) {
			format(annotations, document);
		}
		for (Expression indices : assignment.getIndices()) {
			format(indices, document);
		}
		format(assignment.getExpression(), document);
		format(assignment.getSubReference(), document);
	}

	def dispatch void format(HostcodeEffect hostcodeeffect, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Annotation annotations : hostcodeeffect.getAnnotations()) {
			format(annotations, document);
		}
	}

	def dispatch void format(ReferenceCallEffect referencecalleffect, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Annotation annotations : referencecalleffect.getAnnotations()) {
			format(annotations, document);
		}
		for (Parameter parameters : referencecalleffect.getParameters()) {
			format(parameters, document);
		}
	}

	def dispatch void format(FunctionCallEffect functioncalleffect, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Annotation annotations : functioncalleffect.getAnnotations()) {
			format(annotations, document);
		}
		for (Parameter parameters : functioncalleffect.getParameters()) {
			format(parameters, document);
		}
	}
}
