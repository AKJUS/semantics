/*
* generated by Xtext
*/

package de.cau.cs.kieler.yakindu.sccharts.model.stext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import de.cau.cs.kieler.yakindu.model.stext.services.SynctextGrammarAccess;
import org.yakindu.sct.model.stext.services.STextGrammarAccess;

@Singleton
public class SCChartsExpGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class VariableDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIsInputAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsInputInputKeyword_1_0 = (Keyword)cIsInputAssignment_1.eContents().get(0);
		private final Assignment cIsOutputAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cIsOutputOutputKeyword_2_0 = (Keyword)cIsOutputAssignment_2.eContents().get(0);
		private final Assignment cIsStaticAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cIsStaticStaticKeyword_3_0 = (Keyword)cIsStaticAssignment_3.eContents().get(0);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTypeTypeCrossReference_4_0 = (CrossReference)cTypeAssignment_4.eContents().get(0);
		private final RuleCall cTypeTypeFQNParserRuleCall_4_0_1 = (RuleCall)cTypeTypeCrossReference_4_0.eContents().get(1);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameIDTerminalRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cInitialValueAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cInitialValueExpressionParserRuleCall_6_1_0 = (RuleCall)cInitialValueAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cWithKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cVarCombineOperatorAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cVarCombineOperatorCombineOperatorEnumRuleCall_7_1_0 = (RuleCall)cVarCombineOperatorAssignment_7_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		/// ************************************************ / / *			 Variable Definition				* /
		//
		/// ************************************************ / // Override the SText VariableDefinition rule
		//
		//// A variable is a Declaration. It has a Direction, a Name, a Type, an InitialValue and a CombineOperator
		//
		/// * ---- variable definition ---- * / VariableDefinition:
		//
		//	{VariableDefinition} isInput?="input"? isOutput?="output"? isStatic?="static"? type=[types::Type|FQN] name=ID ("="
		//
		//	initialValue=Expression)? ("with" varCombineOperator=CombineOperator)? ";";
		public ParserRule getRule() { return rule; }

		//{VariableDefinition} isInput?="input"? isOutput?="output"? isStatic?="static"? type=[types::Type|FQN] name=ID ("="
		//
		//initialValue=Expression)? ("with" varCombineOperator=CombineOperator)? ";"
		public Group getGroup() { return cGroup; }

		//{VariableDefinition}
		public Action getVariableDefinitionAction_0() { return cVariableDefinitionAction_0; }

		//isInput?="input"?
		public Assignment getIsInputAssignment_1() { return cIsInputAssignment_1; }

		//"input"
		public Keyword getIsInputInputKeyword_1_0() { return cIsInputInputKeyword_1_0; }

		//isOutput?="output"?
		public Assignment getIsOutputAssignment_2() { return cIsOutputAssignment_2; }

		//"output"
		public Keyword getIsOutputOutputKeyword_2_0() { return cIsOutputOutputKeyword_2_0; }

		//isStatic?="static"?
		public Assignment getIsStaticAssignment_3() { return cIsStaticAssignment_3; }

		//"static"
		public Keyword getIsStaticStaticKeyword_3_0() { return cIsStaticStaticKeyword_3_0; }

		//type=[types::Type|FQN]
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }

		//[types::Type|FQN]
		public CrossReference getTypeTypeCrossReference_4_0() { return cTypeTypeCrossReference_4_0; }

		//FQN
		public RuleCall getTypeTypeFQNParserRuleCall_4_0_1() { return cTypeTypeFQNParserRuleCall_4_0_1; }

		//name=ID
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_5_0() { return cNameIDTerminalRuleCall_5_0; }

		//("=" initialValue=Expression)?
		public Group getGroup_6() { return cGroup_6; }

		//"="
		public Keyword getEqualsSignKeyword_6_0() { return cEqualsSignKeyword_6_0; }

		//initialValue=Expression
		public Assignment getInitialValueAssignment_6_1() { return cInitialValueAssignment_6_1; }

		//Expression
		public RuleCall getInitialValueExpressionParserRuleCall_6_1_0() { return cInitialValueExpressionParserRuleCall_6_1_0; }

		//("with" varCombineOperator=CombineOperator)?
		public Group getGroup_7() { return cGroup_7; }

		//"with"
		public Keyword getWithKeyword_7_0() { return cWithKeyword_7_0; }

		//varCombineOperator=CombineOperator
		public Assignment getVarCombineOperatorAssignment_7_1() { return cVarCombineOperatorAssignment_7_1; }

		//CombineOperator
		public RuleCall getVarCombineOperatorCombineOperatorEnumRuleCall_7_1_0() { return cVarCombineOperatorCombineOperatorEnumRuleCall_7_1_0; }

		//";"
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
	}
	
	
	private VariableDefinitionElements pVariableDefinition;
	
	private final Grammar grammar;

	private SynctextGrammarAccess gaSynctext;

	@Inject
	public SCChartsExpGrammarAccess(GrammarProvider grammarProvider,
		SynctextGrammarAccess gaSynctext) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaSynctext = gaSynctext;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.cau.cs.kieler.yakindu.sccharts.model.stext.SCChartsExp".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public SynctextGrammarAccess getSynctextGrammarAccess() {
		return gaSynctext;
	}

	
	/// ************************************************ / / *			 Variable Definition				* /
	//
	/// ************************************************ / // Override the SText VariableDefinition rule
	//
	//// A variable is a Declaration. It has a Direction, a Name, a Type, an InitialValue and a CombineOperator
	//
	/// * ---- variable definition ---- * / VariableDefinition:
	//
	//	{VariableDefinition} isInput?="input"? isOutput?="output"? isStatic?="static"? type=[types::Type|FQN] name=ID ("="
	//
	//	initialValue=Expression)? ("with" varCombineOperator=CombineOperator)? ";";
	public VariableDefinitionElements getVariableDefinitionAccess() {
		return (pVariableDefinition != null) ? pVariableDefinition : (pVariableDefinition = new VariableDefinitionElements());
	}
	
	public ParserRule getVariableDefinitionRule() {
		return getVariableDefinitionAccess().getRule();
	}

	/// *********************************** INTERFACE DECLARATION **************************************** * / ////defines the possible scopes for a state
	//
	//StateScope:
	//
	//	{SimpleScope} declarations+=(VariableDeclaration | SignalDeclaration | OperationDeclaration | LocalReaction)*;
	public SynctextGrammarAccess.StateScopeElements getStateScopeAccess() {
		return gaSynctext.getStateScopeAccess();
	}
	
	public ParserRule getStateScopeRule() {
		return getStateScopeAccess().getRule();
	}

	/// ************************************************ / / *			 Signal Definition				* /
	//
	/// ************************************************ / SignalDeclaration returns sgraph::Event:
	//
	//	SignalDefinition;
	public SynctextGrammarAccess.SignalDeclarationElements getSignalDeclarationAccess() {
		return gaSynctext.getSignalDeclarationAccess();
	}
	
	public ParserRule getSignalDeclarationRule() {
		return getSignalDeclarationAccess().getRule();
	}

	//SignalDefinition:
	//
	//	{EventDefinition} Input?="input"? Output?="output"? "signal" name=ID (":" type=[types::Type|FQN] ("="
	//
	//	varInitialValue=Expression)? ("with" varCombineOperator=CombineOperator)?)? ";";
	public SynctextGrammarAccess.SignalDefinitionElements getSignalDefinitionAccess() {
		return gaSynctext.getSignalDefinitionAccess();
	}
	
	public ParserRule getSignalDefinitionRule() {
		return getSignalDefinitionAccess().getRule();
	}

	//OperationDefinition:
	//
	//	{OperationDefinition} "extern" functionType=[types::Type|FQN] name=XID "(" paramType=[types::Type|FQN] ")" ";";
	public SynctextGrammarAccess.OperationDefinitionElements getOperationDefinitionAccess() {
		return gaSynctext.getOperationDefinitionAccess();
	}
	
	public ParserRule getOperationDefinitionRule() {
		return getOperationDefinitionAccess().getRule();
	}

	/// ************************************************ / / *			 	LocalReactionScope					* /
	//
	/// ************************************************ / LocalReaction:
	//
	//	trigger=(LocalReactionTrigger | ReactionTrigger)? ("/" effect=(ReactionEffect | SuspendEffect)) ";";
	public SynctextGrammarAccess.LocalReactionElements getLocalReactionAccess() {
		return gaSynctext.getLocalReactionAccess();
	}
	
	public ParserRule getLocalReactionRule() {
		return getLocalReactionAccess().getRule();
	}

	//SuspendEffect returns sgraph::Effect:
	//
	//	{SuspendEffect} "Suspend";
	public SynctextGrammarAccess.SuspendEffectElements getSuspendEffectAccess() {
		return gaSynctext.getSuspendEffectAccess();
	}
	
	public ParserRule getSuspendEffectRule() {
		return getSuspendEffectAccess().getRule();
	}

	//LocalReactionTrigger returns sgraph::Trigger:
	//
	//	{ReactionTrigger} stateReaction=StateReaction ("&&" reactionTrigger=ReactionTrigger?)?;
	public SynctextGrammarAccess.LocalReactionTriggerElements getLocalReactionTriggerAccess() {
		return gaSynctext.getLocalReactionTriggerAccess();
	}
	
	public ParserRule getLocalReactionTriggerRule() {
		return getLocalReactionTriggerAccess().getRule();
	}

	//StateReaction:
	//
	//	Entry | Inside | Exit;
	public SynctextGrammarAccess.StateReactionElements getStateReactionAccess() {
		return gaSynctext.getStateReactionAccess();
	}
	
	public ParserRule getStateReactionRule() {
		return getStateReactionAccess().getRule();
	}

	//Entry:
	//
	//	{Entry} "Entry";
	public SynctextGrammarAccess.EntryElements getEntryAccess() {
		return gaSynctext.getEntryAccess();
	}
	
	public ParserRule getEntryRule() {
		return getEntryAccess().getRule();
	}

	//Inside:
	//
	//	{Inside} "During";
	public SynctextGrammarAccess.InsideElements getInsideAccess() {
		return gaSynctext.getInsideAccess();
	}
	
	public ParserRule getInsideRule() {
		return getInsideAccess().getRule();
	}

	//Exit:
	//
	//	{Exit} "Exit";
	public SynctextGrammarAccess.ExitElements getExitAccess() {
		return gaSynctext.getExitAccess();
	}
	
	public ParserRule getExitRule() {
		return getExitAccess().getRule();
	}

	/// ******************************************** TRANSITION ***************************************** * / // The ReactionTrigger is a Trigger and has an Expression, 
	//
	//// an optional delay and isImmediate option represented with a '#'
	//
	//ReactionTrigger returns sgraph::Trigger:
	//
	//	{ReactionTrigger} isImmediate?="#"? delay=INT? (trigger=RegularEventSpec | "[" guardExpression=Expression "]");
	public SynctextGrammarAccess.ReactionTriggerElements getReactionTriggerAccess() {
		return gaSynctext.getReactionTriggerAccess();
	}
	
	public ParserRule getReactionTriggerRule() {
		return getReactionTriggerAccess().getRule();
	}

	//// The ReactionEffect is an Effect. 
	//
	//// (';')?;
	//
	//ReactionEffect returns sgraph::Effect:
	//
	//	{ReactionEffect} actions+=Expression ("," actions+=Expression)*;
	public SynctextGrammarAccess.ReactionEffectElements getReactionEffectAccess() {
		return gaSynctext.getReactionEffectAccess();
	}
	
	public ParserRule getReactionEffectRule() {
		return getReactionEffectAccess().getRule();
	}

	/// ***************************************** Expressions ******************************************* * / // Override the stext::PrimaryExpression
	//
	//// remove the ActiveStateReferenceExpression and the EventValueReferenceExpression
	//
	//// and add PreValueExpressionreturns that returns the value of a variable in the previous tick. 
	//
	////	| '(' Expression ')'
	//
	//PrimaryExpression returns stext::Expression:
	//
	//	PrimitiveValueExpression | FeatureCall | ActiveStateReferenceExpression | PreValueExpression |
	//
	//	ParenthesizedExpression | EventValueReferenceExpression;
	public SynctextGrammarAccess.PrimaryExpressionElements getPrimaryExpressionAccess() {
		return gaSynctext.getPrimaryExpressionAccess();
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	////todo: pre(x) should return the same type of x
	//
	//PreValueExpression returns stext::Expression:
	//
	//	{PreValueExpression} "pre" "(" value=FeatureCall ")";
	public SynctextGrammarAccess.PreValueExpressionElements getPreValueExpressionAccess() {
		return gaSynctext.getPreValueExpressionAccess();
	}
	
	public ParserRule getPreValueExpressionRule() {
		return getPreValueExpressionAccess().getRule();
	}

	/// ***************************************** COMBINE OPERATORS ************************************* * / enum
	//
	//CombineOperator:
	//
	//	NONE="\'none\'" | ADD="\'+\'" | MULT="\'*\'" | MAX="\'max\'" | MIN="\'min\'" | OR="\'or\'" | AND="\'and\'" |
	//
	//	HOST="\'host\'";
	public SynctextGrammarAccess.CombineOperatorElements getCombineOperatorAccess() {
		return gaSynctext.getCombineOperatorAccess();
	}
	
	public EnumRule getCombineOperatorRule() {
		return getCombineOperatorAccess().getRule();
	}

	/// * ---- root rules ----
	//These root rules are not relevant for the grammar integration in the statechart. They just integrate the different start rules consistently 
	//into a single grammar. 
	// * /
	//
	//Root:
	//
	//	roots+=DefRoot*;
	public STextGrammarAccess.RootElements getRootAccess() {
		return gaSynctext.getRootAccess();
	}
	
	public ParserRule getRootRule() {
		return getRootAccess().getRule();
	}

	//DefRoot:
	//
	//	StatechartRoot | StateRoot | TransitionRoot;
	public STextGrammarAccess.DefRootElements getDefRootAccess() {
		return gaSynctext.getDefRootAccess();
	}
	
	public ParserRule getDefRootRule() {
		return getDefRootAccess().getRule();
	}

	//StatechartRoot:
	//
	//	"@@statechart@@" def=StatechartSpecification;
	public STextGrammarAccess.StatechartRootElements getStatechartRootAccess() {
		return gaSynctext.getStatechartRootAccess();
	}
	
	public ParserRule getStatechartRootRule() {
		return getStatechartRootAccess().getRule();
	}

	//StateRoot:
	//
	//	"@@state@@" def=StateSpecification;
	public STextGrammarAccess.StateRootElements getStateRootAccess() {
		return gaSynctext.getStateRootAccess();
	}
	
	public ParserRule getStateRootRule() {
		return getStateRootAccess().getRule();
	}

	//TransitionRoot:
	//
	//	"@@transition@@" def=TransitionSpecification;
	public STextGrammarAccess.TransitionRootElements getTransitionRootAccess() {
		return gaSynctext.getTransitionRootAccess();
	}
	
	public ParserRule getTransitionRootRule() {
		return getTransitionRootAccess().getRule();
	}

	/// * ---- start rules ----
	//Define the starting points used by the statechart integration. These rules hook in the concrete rules of the specific grammar.
	// * /
	//
	//ScopedElement returns sgraph::ScopedElement:
	//
	//	StatechartSpecification;
	public STextGrammarAccess.ScopedElementElements getScopedElementAccess() {
		return gaSynctext.getScopedElementAccess();
	}
	
	public ParserRule getScopedElementRule() {
		return getScopedElementAccess().getRule();
	}

	//StatechartSpecification:
	//
	//	{StatechartSpecification} ("namespace" namespace=FQN)? scopes+=StatechartScope*;
	public STextGrammarAccess.StatechartSpecificationElements getStatechartSpecificationAccess() {
		return gaSynctext.getStatechartSpecificationAccess();
	}
	
	public ParserRule getStatechartSpecificationRule() {
		return getStatechartSpecificationAccess().getRule();
	}

	//StateSpecification:
	//
	//	scope=StateScope;
	public STextGrammarAccess.StateSpecificationElements getStateSpecificationAccess() {
		return gaSynctext.getStateSpecificationAccess();
	}
	
	public ParserRule getStateSpecificationRule() {
		return getStateSpecificationAccess().getRule();
	}

	//TransitionSpecification:
	//
	//	reaction=TransitionReaction;
	public STextGrammarAccess.TransitionSpecificationElements getTransitionSpecificationAccess() {
		return gaSynctext.getTransitionSpecificationAccess();
	}
	
	public ParserRule getTransitionSpecificationRule() {
		return getTransitionSpecificationAccess().getRule();
	}

	/// * ---- scope rules ----
	//Defines different kinds of scopes that contain element definitions. Scopes are used for element definitions in statechart, regions, and state 
	// * /
	//
	//Scope returns sgraph::Scope:
	//
	//	StateScope | StatechartScope;
	public STextGrammarAccess.ScopeElements getScopeAccess() {
		return gaSynctext.getScopeAccess();
	}
	
	public ParserRule getScopeRule() {
		return getScopeAccess().getRule();
	}

	//// defines the poosible scopes for statecharts
	// StatechartScope:
	//
	//	InterfaceScope | InternalScope;
	public STextGrammarAccess.StatechartScopeElements getStatechartScopeAccess() {
		return gaSynctext.getStatechartScopeAccess();
	}
	
	public ParserRule getStatechartScopeRule() {
		return getStatechartScopeAccess().getRule();
	}

	//NamedInterfaceScope returns base::NamedElement:
	//
	//	InterfaceScope;
	public STextGrammarAccess.NamedInterfaceScopeElements getNamedInterfaceScopeAccess() {
		return gaSynctext.getNamedInterfaceScopeAccess();
	}
	
	public ParserRule getNamedInterfaceScopeRule() {
		return getNamedInterfaceScopeAccess().getRule();
	}

	//InterfaceScope:
	//
	//	{InterfaceScope} "interface" name=XID? ":" declarations+=(EventDeclarartion //		| Entrypoint 
	// //		| Exitpoint
	// |
	//
	//	VariableDeclaration | OperationDeclaration)*;
	public STextGrammarAccess.InterfaceScopeElements getInterfaceScopeAccess() {
		return gaSynctext.getInterfaceScopeAccess();
	}
	
	public ParserRule getInterfaceScopeRule() {
		return getInterfaceScopeAccess().getRule();
	}

	//InternalScope:
	//
	//	{InternalScope} "internal" ":" declarations+=(EventDeclarartion | VariableDeclaration | OperationDeclaration |
	//
	//	LocalReaction)*;
	public STextGrammarAccess.InternalScopeElements getInternalScopeAccess() {
		return gaSynctext.getInternalScopeAccess();
	}
	
	public ParserRule getInternalScopeRule() {
		return getInternalScopeAccess().getRule();
	}

	/// * ---- declarations ----
	//a definition is a top level element of a definition scope. * / //		| Entrypoint 
	//
	//
	////		| Exitpoint
	// Declaration returns sgraph::Declaration:
	//
	//	EventDeclarartion | VariableDeclaration | OperationDeclaration | LocalReaction;
	public STextGrammarAccess.DeclarationElements getDeclarationAccess() {
		return gaSynctext.getDeclarationAccess();
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}

	/// * ---- event definition ---- * / EventDeclarartion returns sgraph::Event:
	//
	//	EventDefinition;
	public STextGrammarAccess.EventDeclarartionElements getEventDeclarartionAccess() {
		return gaSynctext.getEventDeclarartionAccess();
	}
	
	public ParserRule getEventDeclarartionRule() {
		return getEventDeclarartionAccess().getRule();
	}

	//EventFeature returns types::Event:
	//
	//	EventDefinition;
	public STextGrammarAccess.EventFeatureElements getEventFeatureAccess() {
		return gaSynctext.getEventFeatureAccess();
	}
	
	public ParserRule getEventFeatureRule() {
		return getEventFeatureAccess().getRule();
	}

	//// (derivation=EventDerivation)?;
	// EventDefinition:
	//
	//	direction=Direction? "event" name=XID (":" type=[types::Type|FQN])?;
	public STextGrammarAccess.EventDefinitionElements getEventDefinitionAccess() {
		return gaSynctext.getEventDefinitionAccess();
	}
	
	public ParserRule getEventDefinitionRule() {
		return getEventDefinitionAccess().getRule();
	}

	////EventDerivation:
	// //	 (':' value=Expression)?;
	// enum Direction:
	//
	//	LOCAL="local" | IN="in" | OUT="out";
	public STextGrammarAccess.DirectionElements getDirectionAccess() {
		return gaSynctext.getDirectionAccess();
	}
	
	public EnumRule getDirectionRule() {
		return getDirectionAccess().getRule();
	}

	/// * ---- variable definition ---- * / VariableDeclaration returns sgraph::Variable:
	//
	//	VariableDefinition;
	public STextGrammarAccess.VariableDeclarationElements getVariableDeclarationAccess() {
		return gaSynctext.getVariableDeclarationAccess();
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}

	//VariableFeature returns types::Property:
	//
	//	VariableDefinition;
	public STextGrammarAccess.VariableFeatureElements getVariableFeatureAccess() {
		return gaSynctext.getVariableFeatureAccess();
	}
	
	public ParserRule getVariableFeatureRule() {
		return getVariableFeatureAccess().getRule();
	}

	/// * ---- operation definition ---- * / OperationDeclaration returns sgraph::Declaration:
	//
	//	OperationDefinition;
	public STextGrammarAccess.OperationDeclarationElements getOperationDeclarationAccess() {
		return gaSynctext.getOperationDeclarationAccess();
	}
	
	public ParserRule getOperationDeclarationRule() {
		return getOperationDeclarationAccess().getRule();
	}

	//OperationFeature returns types::Operation:
	//
	//	OperationDefinition;
	public STextGrammarAccess.OperationFeatureElements getOperationFeatureAccess() {
		return gaSynctext.getOperationFeatureAccess();
	}
	
	public ParserRule getOperationFeatureRule() {
		return getOperationFeatureAccess().getRule();
	}

	//Parameter returns types::Parameter:
	//
	//	name=XID ":" type=[types::Type|FQN];
	public STextGrammarAccess.ParameterElements getParameterAccess() {
		return gaSynctext.getParameterAccess();
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	/// * ---- entrypoint definition ---- * / //Entrypoint returns sgraph::Declaration:
	// //	{Entrypoint} 'entrypoint' name=XID;
	//
	//
	/// * ---- exitpoint definition ---- * / //Exitpoint returns sgraph::Declaration:
	// //	{Exitpoint} 'exitpoint' name=XID;
	//
	//
	/// * ---- Datatype rules ---- * / XID:
	//
	//	ID | "namespace" | "interface" | "internal" | "event" | "local" | "in" | "out" | "var" | "readonly" | "external" |
	//
	//	"operation" | "default" | "else" | "entry" | "exit" | "always" | "oncycle" | "raise" | "valueof" | "active";
	public STextGrammarAccess.XIDElements getXIDAccess() {
		return gaSynctext.getXIDAccess();
	}
	
	public ParserRule getXIDRule() {
		return getXIDAccess().getRule();
	}

	//FQN:
	//
	//	XID ("." XID)*;
	public STextGrammarAccess.FQNElements getFQNAccess() {
		return gaSynctext.getFQNAccess();
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}

	/// * ---- reaction rules ----
	//Define the structure of reactions that are central for describing the statecharts behavior. 
	// * /
	//
	//Reaction returns sgraph::Reaction:
	//
	//	LocalReaction | TransitionReaction;
	public STextGrammarAccess.ReactionElements getReactionAccess() {
		return gaSynctext.getReactionAccess();
	}
	
	public ParserRule getReactionRule() {
		return getReactionAccess().getRule();
	}

	//TransitionReaction:
	//
	//	{TransitionReaction} trigger=StextTrigger? ("/" effect=ReactionEffect)? ("#" properties+=TransitionProperty*)?;
	public STextGrammarAccess.TransitionReactionElements getTransitionReactionAccess() {
		return gaSynctext.getTransitionReactionAccess();
	}
	
	public ParserRule getTransitionReactionRule() {
		return getTransitionReactionAccess().getRule();
	}

	//StextTrigger returns sgraph::Trigger:
	//
	//	ReactionTrigger | DefaultTrigger;
	public STextGrammarAccess.StextTriggerElements getStextTriggerAccess() {
		return gaSynctext.getStextTriggerAccess();
	}
	
	public ParserRule getStextTriggerRule() {
		return getStextTriggerAccess().getRule();
	}

	//DefaultTrigger returns sgraph::Trigger:
	//
	//	{DefaultTrigger} ("default" | "else");
	public STextGrammarAccess.DefaultTriggerElements getDefaultTriggerAccess() {
		return gaSynctext.getDefaultTriggerAccess();
	}
	
	public ParserRule getDefaultTriggerRule() {
		return getDefaultTriggerAccess().getRule();
	}

	//TransitionProperty returns sgraph::ReactionProperty:
	//
	//	EntryPointSpec | ExitPointSpec;
	public STextGrammarAccess.TransitionPropertyElements getTransitionPropertyAccess() {
		return gaSynctext.getTransitionPropertyAccess();
	}
	
	public ParserRule getTransitionPropertyRule() {
		return getTransitionPropertyAccess().getRule();
	}

	//EntryPointSpec:
	//
	//	">" entrypoint=ID;
	public STextGrammarAccess.EntryPointSpecElements getEntryPointSpecAccess() {
		return gaSynctext.getEntryPointSpecAccess();
	}
	
	public ParserRule getEntryPointSpecRule() {
		return getEntryPointSpecAccess().getRule();
	}

	//ExitPointSpec:
	//
	//	exitpoint=ID ">";
	public STextGrammarAccess.ExitPointSpecElements getExitPointSpecAccess() {
		return gaSynctext.getExitPointSpecAccess();
	}
	
	public ParserRule getExitPointSpecRule() {
		return getExitPointSpecAccess().getRule();
	}

	//EventSpec:
	//
	//	RegularEventSpec | TimeEventSpec | BuiltinEventSpec;
	public STextGrammarAccess.EventSpecElements getEventSpecAccess() {
		return gaSynctext.getEventSpecAccess();
	}
	
	public ParserRule getEventSpecRule() {
		return getEventSpecAccess().getRule();
	}

	//RegularEventSpec:
	//
	//	event=FeatureCall;
	public STextGrammarAccess.RegularEventSpecElements getRegularEventSpecAccess() {
		return gaSynctext.getRegularEventSpecAccess();
	}
	
	public ParserRule getRegularEventSpecRule() {
		return getRegularEventSpecAccess().getRule();
	}

	//// TODO: redefine after trigger - we need to use it with clocks
	// TimeEventSpec:
	//
	//	type=TimeEventType value=ConditionalExpression unit=TimeUnit;
	public STextGrammarAccess.TimeEventSpecElements getTimeEventSpecAccess() {
		return gaSynctext.getTimeEventSpecAccess();
	}
	
	public ParserRule getTimeEventSpecRule() {
		return getTimeEventSpecAccess().getRule();
	}

	//enum TimeEventType:
	//
	//	after | every;
	public STextGrammarAccess.TimeEventTypeElements getTimeEventTypeAccess() {
		return gaSynctext.getTimeEventTypeAccess();
	}
	
	public EnumRule getTimeEventTypeRule() {
		return getTimeEventTypeAccess().getRule();
	}

	//BuiltinEventSpec:
	//
	//	EntryEvent | ExitEvent | AlwaysEvent;
	public STextGrammarAccess.BuiltinEventSpecElements getBuiltinEventSpecAccess() {
		return gaSynctext.getBuiltinEventSpecAccess();
	}
	
	public ParserRule getBuiltinEventSpecRule() {
		return getBuiltinEventSpecAccess().getRule();
	}

	//EntryEvent:
	//
	//	{EntryEvent} "entry";
	public STextGrammarAccess.EntryEventElements getEntryEventAccess() {
		return gaSynctext.getEntryEventAccess();
	}
	
	public ParserRule getEntryEventRule() {
		return getEntryEventAccess().getRule();
	}

	//ExitEvent:
	//
	//	{ExitEvent} "exit";
	public STextGrammarAccess.ExitEventElements getExitEventAccess() {
		return gaSynctext.getExitEventAccess();
	}
	
	public ParserRule getExitEventRule() {
		return getExitEventAccess().getRule();
	}

	//AlwaysEvent:
	//
	//	{AlwaysEvent} ("always" | "oncycle");
	public STextGrammarAccess.AlwaysEventElements getAlwaysEventAccess() {
		return gaSynctext.getAlwaysEventAccess();
	}
	
	public ParserRule getAlwaysEventRule() {
		return getAlwaysEventAccess().getRule();
	}

	//// ****************
	// // Expression Grammar
	// // ****************
	// EventRaisingExpression returns Expression:
	//
	//	{EventRaisingExpression} "raise" event=FeatureCall (":" value=Expression)?;
	public STextGrammarAccess.EventRaisingExpressionElements getEventRaisingExpressionAccess() {
		return gaSynctext.getEventRaisingExpressionAccess();
	}
	
	public ParserRule getEventRaisingExpressionRule() {
		return getEventRaisingExpressionAccess().getRule();
	}

	//StatementExpression returns sgraph::Statement:
	//
	//	Expression;
	public STextGrammarAccess.StatementExpressionElements getStatementExpressionAccess() {
		return gaSynctext.getStatementExpressionAccess();
	}
	
	public ParserRule getStatementExpressionRule() {
		return getStatementExpressionAccess().getRule();
	}

	//Expression:
	//
	//	AssignmentExpression;
	public STextGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaSynctext.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//AssignmentExpression returns Expression:
	//
	//	ConditionalExpression ({AssignmentExpression.varRef=current} operator=AssignmentOperator
	//
	//	expression=ConditionalExpression)*;
	public STextGrammarAccess.AssignmentExpressionElements getAssignmentExpressionAccess() {
		return gaSynctext.getAssignmentExpressionAccess();
	}
	
	public ParserRule getAssignmentExpressionRule() {
		return getAssignmentExpressionAccess().getRule();
	}

	//ConditionalExpression returns Expression:
	//
	//	LogicalOrExpression ({ConditionalExpression.condition=current} "?" trueCase=LogicalOrExpression ":"
	//
	//	falseCase=LogicalOrExpression)?;
	public STextGrammarAccess.ConditionalExpressionElements getConditionalExpressionAccess() {
		return gaSynctext.getConditionalExpressionAccess();
	}
	
	public ParserRule getConditionalExpressionRule() {
		return getConditionalExpressionAccess().getRule();
	}

	//LogicalOrExpression returns Expression:
	//
	//	LogicalAndExpression ({LogicalOrExpression.leftOperand=current} "||" rightOperand=LogicalAndExpression)*;
	public STextGrammarAccess.LogicalOrExpressionElements getLogicalOrExpressionAccess() {
		return gaSynctext.getLogicalOrExpressionAccess();
	}
	
	public ParserRule getLogicalOrExpressionRule() {
		return getLogicalOrExpressionAccess().getRule();
	}

	//LogicalAndExpression returns Expression:
	//
	//	LogicalNotExpression ({LogicalAndExpression.leftOperand=current} "&&" rightOperand=LogicalNotExpression)*;
	public STextGrammarAccess.LogicalAndExpressionElements getLogicalAndExpressionAccess() {
		return gaSynctext.getLogicalAndExpressionAccess();
	}
	
	public ParserRule getLogicalAndExpressionRule() {
		return getLogicalAndExpressionAccess().getRule();
	}

	//LogicalNotExpression returns Expression:
	//
	//	BitwiseXorExpression | {LogicalNotExpression} "!" operand=BitwiseXorExpression;
	public STextGrammarAccess.LogicalNotExpressionElements getLogicalNotExpressionAccess() {
		return gaSynctext.getLogicalNotExpressionAccess();
	}
	
	public ParserRule getLogicalNotExpressionRule() {
		return getLogicalNotExpressionAccess().getRule();
	}

	//BitwiseXorExpression returns Expression:
	//
	//	BitwiseOrExpression ({BitwiseXorExpression.leftOperand=current} "^" rightOperand=BitwiseOrExpression)*;
	public STextGrammarAccess.BitwiseXorExpressionElements getBitwiseXorExpressionAccess() {
		return gaSynctext.getBitwiseXorExpressionAccess();
	}
	
	public ParserRule getBitwiseXorExpressionRule() {
		return getBitwiseXorExpressionAccess().getRule();
	}

	//BitwiseOrExpression returns Expression:
	//
	//	BitwiseAndExpression ({BitwiseOrExpression.leftOperand=current} "|" rightOperand=BitwiseAndExpression)*;
	public STextGrammarAccess.BitwiseOrExpressionElements getBitwiseOrExpressionAccess() {
		return gaSynctext.getBitwiseOrExpressionAccess();
	}
	
	public ParserRule getBitwiseOrExpressionRule() {
		return getBitwiseOrExpressionAccess().getRule();
	}

	//BitwiseAndExpression returns Expression:
	//
	//	LogicalRelationExpression ({BitwiseAndExpression.leftOperand=current} "&" rightOperand=LogicalRelationExpression)*;
	public STextGrammarAccess.BitwiseAndExpressionElements getBitwiseAndExpressionAccess() {
		return gaSynctext.getBitwiseAndExpressionAccess();
	}
	
	public ParserRule getBitwiseAndExpressionRule() {
		return getBitwiseAndExpressionAccess().getRule();
	}

	//LogicalRelationExpression returns Expression:
	//
	//	ShiftExpression ({LogicalRelationExpression.leftOperand=current} operator=RelationalOperator
	//
	//	rightOperand=ShiftExpression)*;
	public STextGrammarAccess.LogicalRelationExpressionElements getLogicalRelationExpressionAccess() {
		return gaSynctext.getLogicalRelationExpressionAccess();
	}
	
	public ParserRule getLogicalRelationExpressionRule() {
		return getLogicalRelationExpressionAccess().getRule();
	}

	//ShiftExpression returns Expression:
	//
	//	NumericalAddSubtractExpression ({ShiftExpression.leftOperand=current} operator=ShiftOperator
	//
	//	rightOperand=NumericalAddSubtractExpression)*;
	public STextGrammarAccess.ShiftExpressionElements getShiftExpressionAccess() {
		return gaSynctext.getShiftExpressionAccess();
	}
	
	public ParserRule getShiftExpressionRule() {
		return getShiftExpressionAccess().getRule();
	}

	//NumericalAddSubtractExpression returns Expression:
	//
	//	NumericalMultiplyDivideExpression ({NumericalAddSubtractExpression.leftOperand=current} operator=AdditiveOperator
	//
	//	rightOperand=NumericalMultiplyDivideExpression)*;
	public STextGrammarAccess.NumericalAddSubtractExpressionElements getNumericalAddSubtractExpressionAccess() {
		return gaSynctext.getNumericalAddSubtractExpressionAccess();
	}
	
	public ParserRule getNumericalAddSubtractExpressionRule() {
		return getNumericalAddSubtractExpressionAccess().getRule();
	}

	//NumericalMultiplyDivideExpression returns Expression:
	//
	//	NumericalUnaryExpression ({NumericalMultiplyDivideExpression.leftOperand=current} operator=MultiplicativeOperator
	//
	//	rightOperand=NumericalUnaryExpression)*;
	public STextGrammarAccess.NumericalMultiplyDivideExpressionElements getNumericalMultiplyDivideExpressionAccess() {
		return gaSynctext.getNumericalMultiplyDivideExpressionAccess();
	}
	
	public ParserRule getNumericalMultiplyDivideExpressionRule() {
		return getNumericalMultiplyDivideExpressionAccess().getRule();
	}

	//NumericalUnaryExpression returns Expression:
	//
	//	PrimaryExpression | {NumericalUnaryExpression} operator=UnaryOperator operand=PrimaryExpression;
	public STextGrammarAccess.NumericalUnaryExpressionElements getNumericalUnaryExpressionAccess() {
		return gaSynctext.getNumericalUnaryExpressionAccess();
	}
	
	public ParserRule getNumericalUnaryExpressionRule() {
		return getNumericalUnaryExpressionAccess().getRule();
	}

	//PrimitiveValueExpression returns Expression:
	//
	//	{PrimitiveValueExpression} value=Literal;
	public STextGrammarAccess.PrimitiveValueExpressionElements getPrimitiveValueExpressionAccess() {
		return gaSynctext.getPrimitiveValueExpressionAccess();
	}
	
	public ParserRule getPrimitiveValueExpressionRule() {
		return getPrimitiveValueExpressionAccess().getRule();
	}

	//FeatureCall returns Expression:
	//
	//	ElementReferenceExpression ({FeatureCall.owner=current} "." feature=[ecore::EObject] (=> operationCall?="("
	//
	//	(args+=Expression ("," args+=Expression)*)? ")")?)*;
	public STextGrammarAccess.FeatureCallElements getFeatureCallAccess() {
		return gaSynctext.getFeatureCallAccess();
	}
	
	public ParserRule getFeatureCallRule() {
		return getFeatureCallAccess().getRule();
	}

	//ElementReferenceExpression returns Expression:
	//
	//	{ElementReferenceExpression} reference=[ecore::EObject] (=> operationCall?="(" (args+=Expression (","
	//
	//	args+=Expression)*)? ")")?;
	public STextGrammarAccess.ElementReferenceExpressionElements getElementReferenceExpressionAccess() {
		return gaSynctext.getElementReferenceExpressionAccess();
	}
	
	public ParserRule getElementReferenceExpressionRule() {
		return getElementReferenceExpressionAccess().getRule();
	}

	//EventValueReferenceExpression returns Expression:
	//
	//	{EventValueReferenceExpression} "valueof" "(" value=FeatureCall ")";
	public STextGrammarAccess.EventValueReferenceExpressionElements getEventValueReferenceExpressionAccess() {
		return gaSynctext.getEventValueReferenceExpressionAccess();
	}
	
	public ParserRule getEventValueReferenceExpressionRule() {
		return getEventValueReferenceExpressionAccess().getRule();
	}

	//ActiveStateReferenceExpression returns Expression:
	//
	//	{ActiveStateReferenceExpression} "active" "(" value=[sgraph::State|FQN] ")";
	public STextGrammarAccess.ActiveStateReferenceExpressionElements getActiveStateReferenceExpressionAccess() {
		return gaSynctext.getActiveStateReferenceExpressionAccess();
	}
	
	public ParserRule getActiveStateReferenceExpressionRule() {
		return getActiveStateReferenceExpressionAccess().getRule();
	}

	//ParenthesizedExpression returns Expression:
	//
	//	{ParenthesizedExpression} "(" expression=Expression ")";
	public STextGrammarAccess.ParenthesizedExpressionElements getParenthesizedExpressionAccess() {
		return gaSynctext.getParenthesizedExpressionAccess();
	}
	
	public ParserRule getParenthesizedExpressionRule() {
		return getParenthesizedExpressionAccess().getRule();
	}

	//Literal:
	//
	//	BoolLiteral | IntLiteral | HexLiteral | RealLiteral | StringLiteral;
	public STextGrammarAccess.LiteralElements getLiteralAccess() {
		return gaSynctext.getLiteralAccess();
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//BoolLiteral:
	//
	//	{BoolLiteral} value=BOOL;
	public STextGrammarAccess.BoolLiteralElements getBoolLiteralAccess() {
		return gaSynctext.getBoolLiteralAccess();
	}
	
	public ParserRule getBoolLiteralRule() {
		return getBoolLiteralAccess().getRule();
	}

	//IntLiteral:
	//
	//	{IntLiteral} value=INT;
	public STextGrammarAccess.IntLiteralElements getIntLiteralAccess() {
		return gaSynctext.getIntLiteralAccess();
	}
	
	public ParserRule getIntLiteralRule() {
		return getIntLiteralAccess().getRule();
	}

	//RealLiteral:
	//
	//	{RealLiteral} value=FLOAT;
	public STextGrammarAccess.RealLiteralElements getRealLiteralAccess() {
		return gaSynctext.getRealLiteralAccess();
	}
	
	public ParserRule getRealLiteralRule() {
		return getRealLiteralAccess().getRule();
	}

	//HexLiteral:
	//
	//	{HexLiteral} value=HEX;
	public STextGrammarAccess.HexLiteralElements getHexLiteralAccess() {
		return gaSynctext.getHexLiteralAccess();
	}
	
	public ParserRule getHexLiteralRule() {
		return getHexLiteralAccess().getRule();
	}

	//StringLiteral:
	//
	//	{StringLiteral} value=STRING;
	public STextGrammarAccess.StringLiteralElements getStringLiteralAccess() {
		return gaSynctext.getStringLiteralAccess();
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//enum AssignmentOperator:
	//
	//	assign="=" | multAssign="*=" | divAssign="/=" | modAssign="%=" | addAssign="+=" | subAssign="-=" |
	//
	//	leftShiftAssign="<<=" | rightShiftAssign=">>=" | andAssign="&=" | xorAssign="^=" | orAssign="|=";
	public STextGrammarAccess.AssignmentOperatorElements getAssignmentOperatorAccess() {
		return gaSynctext.getAssignmentOperatorAccess();
	}
	
	public EnumRule getAssignmentOperatorRule() {
		return getAssignmentOperatorAccess().getRule();
	}

	//enum ShiftOperator:
	//
	//	left="<<" | right=">>";
	public STextGrammarAccess.ShiftOperatorElements getShiftOperatorAccess() {
		return gaSynctext.getShiftOperatorAccess();
	}
	
	public EnumRule getShiftOperatorRule() {
		return getShiftOperatorAccess().getRule();
	}

	//enum AdditiveOperator:
	//
	//	plus="+" | minus="-";
	public STextGrammarAccess.AdditiveOperatorElements getAdditiveOperatorAccess() {
		return gaSynctext.getAdditiveOperatorAccess();
	}
	
	public EnumRule getAdditiveOperatorRule() {
		return getAdditiveOperatorAccess().getRule();
	}

	//enum MultiplicativeOperator:
	//
	//	mul="*" | div="/" | mod="%";
	public STextGrammarAccess.MultiplicativeOperatorElements getMultiplicativeOperatorAccess() {
		return gaSynctext.getMultiplicativeOperatorAccess();
	}
	
	public EnumRule getMultiplicativeOperatorRule() {
		return getMultiplicativeOperatorAccess().getRule();
	}

	//enum UnaryOperator:
	//
	//	positive="+" | negative="-" | complement="~";
	public STextGrammarAccess.UnaryOperatorElements getUnaryOperatorAccess() {
		return gaSynctext.getUnaryOperatorAccess();
	}
	
	public EnumRule getUnaryOperatorRule() {
		return getUnaryOperatorAccess().getRule();
	}

	//enum RelationalOperator:
	//
	//	smaller="<" | smallerEqual="<=" | greater=">" | greaterEqual=">=" | equals="==" | notEquals="!=";
	public STextGrammarAccess.RelationalOperatorElements getRelationalOperatorAccess() {
		return gaSynctext.getRelationalOperatorAccess();
	}
	
	public EnumRule getRelationalOperatorRule() {
		return getRelationalOperatorAccess().getRule();
	}

	//enum TimeUnit:
	//
	//	second="s" | millisecond="ms" | microsecond="us" | nanosecond="ns";
	public STextGrammarAccess.TimeUnitElements getTimeUnitAccess() {
		return gaSynctext.getTimeUnitAccess();
	}
	
	public EnumRule getTimeUnitRule() {
		return getTimeUnitAccess().getRule();
	}

	//terminal BOOL returns ecore::EBoolean:
	//
	//	"true" | "false" | "yes" | "no";
	public TerminalRule getBOOLRule() {
		return gaSynctext.getBOOLRule();
	} 

	//terminal HEX returns ecore::EInt:
	//
	//	"0" ("x" | "X") ("0".."9" | "a".."f" | "A".."F")+;
	public TerminalRule getHEXRule() {
		return gaSynctext.getHEXRule();
	} 

	//terminal FLOAT returns ecore::EFloat:
	//
	//	(INT "." INT) ("e" ("-" | "+") INT)? ("f" | "F" | "d" | "D")?;
	public TerminalRule getFLOATRule() {
		return gaSynctext.getFLOATRule();
	} 

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaSynctext.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaSynctext.getINTRule();
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaSynctext.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaSynctext.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaSynctext.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaSynctext.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaSynctext.getANY_OTHERRule();
	} 
}
